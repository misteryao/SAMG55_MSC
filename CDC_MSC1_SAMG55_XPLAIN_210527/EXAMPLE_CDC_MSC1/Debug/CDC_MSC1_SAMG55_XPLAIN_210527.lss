
CDC_MSC1_SAMG55_XPLAIN_210527.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00011ab0  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00411ab0  00411ab0  00021ab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000c50  20000000  00411ab8  00030000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00019f98  20000c50  00412708  00030c50  2**2
                  ALLOC
  4 .stack        00003000  2001abe8  0042c6a0  00030c50  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  00030c50  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00030c7e  2**0
                  CONTENTS, READONLY
  7 .debug_info   00034645  00000000  00000000  00030cd7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000068b5  00000000  00000000  0006531c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000f2ee  00000000  00000000  0006bbd1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001c10  00000000  00000000  0007aebf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001aa8  00000000  00000000  0007cacf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00024083  00000000  00000000  0007e577  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000222f3  00000000  00000000  000a25fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00069260  00000000  00000000  000c48ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00007f4c  00000000  00000000  0012db50  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	e8 db 01 20 0d 9a 40 00 dd 9a 40 00 dd 9a 40 00     ... ..@...@...@.
  400010:	dd 9a 40 00 dd 9a 40 00 dd 9a 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	dd 9a 40 00 dd 9a 40 00 00 00 00 00 dd 9a 40 00     ..@...@.......@.
  40003c:	dd 9a 40 00 dd 9a 40 00 dd 9a 40 00 dd 9a 40 00     ..@...@...@...@.
  40004c:	dd 9a 40 00 dd 9a 40 00 dd 9a 40 00 dd 9a 40 00     ..@...@...@...@.
  40005c:	19 d8 40 00 dd 9a 40 00 dd 9a 40 00 00 00 00 00     ..@...@...@.....
  40006c:	91 65 40 00 a9 65 40 00 dd 9a 40 00 dd 9a 40 00     .e@..e@...@...@.
  40007c:	dd 9a 40 00 dd 9a 40 00 dd 9a 40 00 dd 9a 40 00     ..@...@...@...@.
  40008c:	dd 9a 40 00 dd 9a 40 00 dd 9a 40 00 dd 9a 40 00     ..@...@...@...@.
  40009c:	dd 9a 40 00 dd 9a 40 00 dd 9a 40 00 dd 9a 40 00     ..@...@...@...@.
  4000ac:	dd 9a 40 00 dd 9a 40 00 dd 9a 40 00 dd 9a 40 00     ..@...@...@...@.
	...
  4000fc:	dd 9a 40 00 91 71 40 00 dd 9a 40 00 00 00 00 00     ..@..q@...@.....
	...

00400148 <__do_global_dtors_aux>:
  400148:	b510      	push	{r4, lr}
  40014a:	4c05      	ldr	r4, [pc, #20]	; (400160 <__do_global_dtors_aux+0x18>)
  40014c:	7823      	ldrb	r3, [r4, #0]
  40014e:	b933      	cbnz	r3, 40015e <__do_global_dtors_aux+0x16>
  400150:	4b04      	ldr	r3, [pc, #16]	; (400164 <__do_global_dtors_aux+0x1c>)
  400152:	b113      	cbz	r3, 40015a <__do_global_dtors_aux+0x12>
  400154:	4804      	ldr	r0, [pc, #16]	; (400168 <__do_global_dtors_aux+0x20>)
  400156:	f3af 8000 	nop.w
  40015a:	2301      	movs	r3, #1
  40015c:	7023      	strb	r3, [r4, #0]
  40015e:	bd10      	pop	{r4, pc}
  400160:	20000c50 	.word	0x20000c50
  400164:	00000000 	.word	0x00000000
  400168:	00411ab8 	.word	0x00411ab8

0040016c <frame_dummy>:
  40016c:	4b0c      	ldr	r3, [pc, #48]	; (4001a0 <frame_dummy+0x34>)
  40016e:	b143      	cbz	r3, 400182 <frame_dummy+0x16>
  400170:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x38>)
  400172:	490d      	ldr	r1, [pc, #52]	; (4001a8 <frame_dummy+0x3c>)
  400174:	b510      	push	{r4, lr}
  400176:	f3af 8000 	nop.w
  40017a:	480c      	ldr	r0, [pc, #48]	; (4001ac <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b923      	cbnz	r3, 40018a <frame_dummy+0x1e>
  400180:	bd10      	pop	{r4, pc}
  400182:	480a      	ldr	r0, [pc, #40]	; (4001ac <frame_dummy+0x40>)
  400184:	6803      	ldr	r3, [r0, #0]
  400186:	b933      	cbnz	r3, 400196 <frame_dummy+0x2a>
  400188:	4770      	bx	lr
  40018a:	4b09      	ldr	r3, [pc, #36]	; (4001b0 <frame_dummy+0x44>)
  40018c:	2b00      	cmp	r3, #0
  40018e:	d0f7      	beq.n	400180 <frame_dummy+0x14>
  400190:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400194:	4718      	bx	r3
  400196:	4b06      	ldr	r3, [pc, #24]	; (4001b0 <frame_dummy+0x44>)
  400198:	2b00      	cmp	r3, #0
  40019a:	d0f5      	beq.n	400188 <frame_dummy+0x1c>
  40019c:	4718      	bx	r3
  40019e:	bf00      	nop
  4001a0:	00000000 	.word	0x00000000
  4001a4:	00411ab8 	.word	0x00411ab8
  4001a8:	20000c54 	.word	0x20000c54
  4001ac:	00411ab8 	.word	0x00411ab8
  4001b0:	00000000 	.word	0x00000000

004001b4 <SDMMC_UNSTUFF_BITS>:
 * \brief Macro function to extract a bits field from a large SD MMC register
 * Used by : CSD, SCR, Switch status
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
  4001b4:	b480      	push	{r7}
  4001b6:	b087      	sub	sp, #28
  4001b8:	af00      	add	r7, sp, #0
  4001ba:	60f8      	str	r0, [r7, #12]
  4001bc:	4608      	mov	r0, r1
  4001be:	4611      	mov	r1, r2
  4001c0:	461a      	mov	r2, r3
  4001c2:	4603      	mov	r3, r0
  4001c4:	817b      	strh	r3, [r7, #10]
  4001c6:	460b      	mov	r3, r1
  4001c8:	813b      	strh	r3, [r7, #8]
  4001ca:	4613      	mov	r3, r2
  4001cc:	71fb      	strb	r3, [r7, #7]
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  4001ce:	897a      	ldrh	r2, [r7, #10]
  4001d0:	893b      	ldrh	r3, [r7, #8]
  4001d2:	1ad3      	subs	r3, r2, r3
  4001d4:	3307      	adds	r3, #7
  4001d6:	2b00      	cmp	r3, #0
  4001d8:	da00      	bge.n	4001dc <SDMMC_UNSTUFF_BITS+0x28>
  4001da:	3307      	adds	r3, #7
  4001dc:	10db      	asrs	r3, r3, #3
  4001de:	3b01      	subs	r3, #1
  4001e0:	68fa      	ldr	r2, [r7, #12]
  4001e2:	4413      	add	r3, r2
  4001e4:	781b      	ldrb	r3, [r3, #0]
  4001e6:	461a      	mov	r2, r3
  4001e8:	893b      	ldrh	r3, [r7, #8]
  4001ea:	f003 0307 	and.w	r3, r3, #7
  4001ee:	fa42 f303 	asr.w	r3, r2, r3
  4001f2:	617b      	str	r3, [r7, #20]
	if (((pos % 8) + size) > 8) {
  4001f4:	893b      	ldrh	r3, [r7, #8]
  4001f6:	f003 0207 	and.w	r2, r3, #7
  4001fa:	79fb      	ldrb	r3, [r7, #7]
  4001fc:	4413      	add	r3, r2
  4001fe:	2b08      	cmp	r3, #8
  400200:	dd16      	ble.n	400230 <SDMMC_UNSTUFF_BITS+0x7c>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  400202:	897a      	ldrh	r2, [r7, #10]
  400204:	893b      	ldrh	r3, [r7, #8]
  400206:	1ad3      	subs	r3, r2, r3
  400208:	3307      	adds	r3, #7
  40020a:	2b00      	cmp	r3, #0
  40020c:	da00      	bge.n	400210 <SDMMC_UNSTUFF_BITS+0x5c>
  40020e:	3307      	adds	r3, #7
  400210:	10db      	asrs	r3, r3, #3
  400212:	3b02      	subs	r3, #2
  400214:	68fa      	ldr	r2, [r7, #12]
  400216:	4413      	add	r3, r2
  400218:	781b      	ldrb	r3, [r3, #0]
  40021a:	461a      	mov	r2, r3
  40021c:	893b      	ldrh	r3, [r7, #8]
  40021e:	f003 0307 	and.w	r3, r3, #7
  400222:	f1c3 0308 	rsb	r3, r3, #8
  400226:	fa02 f303 	lsl.w	r3, r2, r3
  40022a:	697a      	ldr	r2, [r7, #20]
  40022c:	4313      	orrs	r3, r2
  40022e:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
  400230:	893b      	ldrh	r3, [r7, #8]
  400232:	f003 0207 	and.w	r2, r3, #7
  400236:	79fb      	ldrb	r3, [r7, #7]
  400238:	4413      	add	r3, r2
  40023a:	2b10      	cmp	r3, #16
  40023c:	dd16      	ble.n	40026c <SDMMC_UNSTUFF_BITS+0xb8>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  40023e:	897a      	ldrh	r2, [r7, #10]
  400240:	893b      	ldrh	r3, [r7, #8]
  400242:	1ad3      	subs	r3, r2, r3
  400244:	3307      	adds	r3, #7
  400246:	2b00      	cmp	r3, #0
  400248:	da00      	bge.n	40024c <SDMMC_UNSTUFF_BITS+0x98>
  40024a:	3307      	adds	r3, #7
  40024c:	10db      	asrs	r3, r3, #3
  40024e:	3b03      	subs	r3, #3
  400250:	68fa      	ldr	r2, [r7, #12]
  400252:	4413      	add	r3, r2
  400254:	781b      	ldrb	r3, [r3, #0]
  400256:	461a      	mov	r2, r3
  400258:	893b      	ldrh	r3, [r7, #8]
  40025a:	f003 0307 	and.w	r3, r3, #7
  40025e:	f1c3 0310 	rsb	r3, r3, #16
  400262:	fa02 f303 	lsl.w	r3, r2, r3
  400266:	697a      	ldr	r2, [r7, #20]
  400268:	4313      	orrs	r3, r2
  40026a:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
  40026c:	893b      	ldrh	r3, [r7, #8]
  40026e:	f003 0207 	and.w	r2, r3, #7
  400272:	79fb      	ldrb	r3, [r7, #7]
  400274:	4413      	add	r3, r2
  400276:	2b10      	cmp	r3, #16
  400278:	dd16      	ble.n	4002a8 <SDMMC_UNSTUFF_BITS+0xf4>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  40027a:	897a      	ldrh	r2, [r7, #10]
  40027c:	893b      	ldrh	r3, [r7, #8]
  40027e:	1ad3      	subs	r3, r2, r3
  400280:	3307      	adds	r3, #7
  400282:	2b00      	cmp	r3, #0
  400284:	da00      	bge.n	400288 <SDMMC_UNSTUFF_BITS+0xd4>
  400286:	3307      	adds	r3, #7
  400288:	10db      	asrs	r3, r3, #3
  40028a:	3b03      	subs	r3, #3
  40028c:	68fa      	ldr	r2, [r7, #12]
  40028e:	4413      	add	r3, r2
  400290:	781b      	ldrb	r3, [r3, #0]
  400292:	461a      	mov	r2, r3
  400294:	893b      	ldrh	r3, [r7, #8]
  400296:	f003 0307 	and.w	r3, r3, #7
  40029a:	f1c3 0310 	rsb	r3, r3, #16
  40029e:	fa02 f303 	lsl.w	r3, r2, r3
  4002a2:	697a      	ldr	r2, [r7, #20]
  4002a4:	4313      	orrs	r3, r2
  4002a6:	617b      	str	r3, [r7, #20]
	}
	value &=  ((uint32_t)1 << size) - 1;
  4002a8:	79fb      	ldrb	r3, [r7, #7]
  4002aa:	2201      	movs	r2, #1
  4002ac:	fa02 f303 	lsl.w	r3, r2, r3
  4002b0:	3b01      	subs	r3, #1
  4002b2:	697a      	ldr	r2, [r7, #20]
  4002b4:	4013      	ands	r3, r2
  4002b6:	617b      	str	r3, [r7, #20]
	return value;
  4002b8:	697b      	ldr	r3, [r7, #20]
}
  4002ba:	4618      	mov	r0, r3
  4002bc:	371c      	adds	r7, #28
  4002be:	46bd      	mov	sp, r7
  4002c0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4002c4:	4770      	bx	lr
	...

004002c8 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  4002c8:	b480      	push	{r7}
  4002ca:	b083      	sub	sp, #12
  4002cc:	af00      	add	r7, sp, #0
  4002ce:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4002d0:	687b      	ldr	r3, [r7, #4]
  4002d2:	2b07      	cmp	r3, #7
  4002d4:	d825      	bhi.n	400322 <osc_get_rate+0x5a>
  4002d6:	a201      	add	r2, pc, #4	; (adr r2, 4002dc <osc_get_rate+0x14>)
  4002d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4002dc:	004002fd 	.word	0x004002fd
  4002e0:	00400303 	.word	0x00400303
  4002e4:	00400309 	.word	0x00400309
  4002e8:	0040030f 	.word	0x0040030f
  4002ec:	00400313 	.word	0x00400313
  4002f0:	00400317 	.word	0x00400317
  4002f4:	0040031b 	.word	0x0040031b
  4002f8:	0040031f 	.word	0x0040031f
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  4002fc:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  400300:	e010      	b.n	400324 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  400302:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400306:	e00d      	b.n	400324 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  400308:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40030c:	e00a      	b.n	400324 <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  40030e:	4b08      	ldr	r3, [pc, #32]	; (400330 <osc_get_rate+0x68>)
  400310:	e008      	b.n	400324 <osc_get_rate+0x5c>

	case OSC_MAINCK_16M_RC:
		return OSC_MAINCK_16M_RC_HZ;
  400312:	4b08      	ldr	r3, [pc, #32]	; (400334 <osc_get_rate+0x6c>)
  400314:	e006      	b.n	400324 <osc_get_rate+0x5c>

	case OSC_MAINCK_24M_RC:
		return OSC_MAINCK_24M_RC_HZ;
  400316:	4b08      	ldr	r3, [pc, #32]	; (400338 <osc_get_rate+0x70>)
  400318:	e004      	b.n	400324 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  40031a:	2300      	movs	r3, #0
  40031c:	e002      	b.n	400324 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  40031e:	2300      	movs	r3, #0
  400320:	e000      	b.n	400324 <osc_get_rate+0x5c>
#endif
	}

	return 0;
  400322:	2300      	movs	r3, #0
}
  400324:	4618      	mov	r0, r3
  400326:	370c      	adds	r7, #12
  400328:	46bd      	mov	sp, r7
  40032a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40032e:	4770      	bx	lr
  400330:	007a1200 	.word	0x007a1200
  400334:	00f42400 	.word	0x00f42400
  400338:	016e3600 	.word	0x016e3600

0040033c <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  40033c:	b580      	push	{r7, lr}
  40033e:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  400340:	2001      	movs	r0, #1
  400342:	4b04      	ldr	r3, [pc, #16]	; (400354 <sysclk_get_main_hz+0x18>)
  400344:	4798      	blx	r3
  400346:	4602      	mov	r2, r0
  400348:	f640 3372 	movw	r3, #2930	; 0xb72
  40034c:	fb03 f302 	mul.w	r3, r3, r2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  400350:	4618      	mov	r0, r3
  400352:	bd80      	pop	{r7, pc}
  400354:	004002c9 	.word	0x004002c9

00400358 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  400358:	b580      	push	{r7, lr}
  40035a:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  40035c:	4b02      	ldr	r3, [pc, #8]	; (400368 <sysclk_get_cpu_hz+0x10>)
  40035e:	4798      	blx	r3
  400360:	4603      	mov	r3, r0
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  400362:	4618      	mov	r0, r3
  400364:	bd80      	pop	{r7, pc}
  400366:	bf00      	nop
  400368:	0040033d 	.word	0x0040033d

0040036c <ioport_get_pin_level>:
 *
 * \param pin IOPORT pin to read
 * \return Current logical value of the specified pin
 */
static inline bool ioport_get_pin_level(ioport_pin_t pin)
{
  40036c:	b480      	push	{r7}
  40036e:	b089      	sub	sp, #36	; 0x24
  400370:	af00      	add	r7, sp, #0
  400372:	6078      	str	r0, [r7, #4]
  400374:	687b      	ldr	r3, [r7, #4]
  400376:	61fb      	str	r3, [r7, #28]
  400378:	69fb      	ldr	r3, [r7, #28]
  40037a:	61bb      	str	r3, [r7, #24]
  40037c:	69bb      	ldr	r3, [r7, #24]
  40037e:	617b      	str	r3, [r7, #20]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  400380:	697b      	ldr	r3, [r7, #20]
  400382:	095b      	lsrs	r3, r3, #5
  400384:	613b      	str	r3, [r7, #16]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400386:	693b      	ldr	r3, [r7, #16]
  400388:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  40038c:	f203 7307 	addw	r3, r3, #1799	; 0x707
  400390:	025b      	lsls	r3, r3, #9
	}
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  400392:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  400394:	69fb      	ldr	r3, [r7, #28]
  400396:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  400398:	68fb      	ldr	r3, [r7, #12]
  40039a:	f003 031f 	and.w	r3, r3, #31
  40039e:	2101      	movs	r1, #1
  4003a0:	fa01 f303 	lsl.w	r3, r1, r3
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  4003a4:	4013      	ands	r3, r2
  4003a6:	2b00      	cmp	r3, #0
  4003a8:	bf14      	ite	ne
  4003aa:	2301      	movne	r3, #1
  4003ac:	2300      	moveq	r3, #0
  4003ae:	b2db      	uxtb	r3, r3
	return arch_ioport_get_pin_level(pin);
}
  4003b0:	4618      	mov	r0, r3
  4003b2:	3724      	adds	r7, #36	; 0x24
  4003b4:	46bd      	mov	sp, r7
  4003b6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4003ba:	4770      	bx	lr

004003bc <SD_MMC_START_TIMEOUT>:
#  ifdef FREERTOS_USED
		static xTimeOutType xTimeOut;
#endif

static inline void SD_MMC_START_TIMEOUT(void)
{
  4003bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4003c0:	af00      	add	r7, sp, #0
	if (!SysTick->CTRL) {
  4003c2:	4b2c      	ldr	r3, [pc, #176]	; (400474 <SD_MMC_START_TIMEOUT+0xb8>)
  4003c4:	681b      	ldr	r3, [r3, #0]
  4003c6:	2b00      	cmp	r3, #0
  4003c8:	d113      	bne.n	4003f2 <SD_MMC_START_TIMEOUT+0x36>
		sd_mmc_sam_systick_used = true;
  4003ca:	4b2b      	ldr	r3, [pc, #172]	; (400478 <SD_MMC_START_TIMEOUT+0xbc>)
  4003cc:	2201      	movs	r2, #1
  4003ce:	701a      	strb	r2, [r3, #0]
		SysTick->LOAD = (sysclk_get_cpu_hz() / (8 * 1000))
  4003d0:	4c28      	ldr	r4, [pc, #160]	; (400474 <SD_MMC_START_TIMEOUT+0xb8>)
  4003d2:	4b2a      	ldr	r3, [pc, #168]	; (40047c <SD_MMC_START_TIMEOUT+0xc0>)
  4003d4:	4798      	blx	r3
  4003d6:	4602      	mov	r2, r0
  4003d8:	4b29      	ldr	r3, [pc, #164]	; (400480 <SD_MMC_START_TIMEOUT+0xc4>)
  4003da:	fba3 2302 	umull	r2, r3, r3, r2
  4003de:	0a5b      	lsrs	r3, r3, #9
				* SD_MMC_DEBOUNCE_TIMEOUT;
  4003e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  4003e4:	fb02 f303 	mul.w	r3, r2, r3
		SysTick->LOAD = (sysclk_get_cpu_hz() / (8 * 1000))
  4003e8:	6063      	str	r3, [r4, #4]
		SysTick->CTRL = SysTick_CTRL_ENABLE_Msk;
  4003ea:	4b22      	ldr	r3, [pc, #136]	; (400474 <SD_MMC_START_TIMEOUT+0xb8>)
  4003ec:	2201      	movs	r2, #1
  4003ee:	601a      	str	r2, [r3, #0]
		vTaskSetTimeOutState(&xTimeOut);
#else
		delay_ms(SD_MMC_DEBOUNCE_TIMEOUT);
#endif
	}
}
  4003f0:	e03c      	b.n	40046c <SD_MMC_START_TIMEOUT+0xb0>
		sd_mmc_sam_systick_used = false;
  4003f2:	4b21      	ldr	r3, [pc, #132]	; (400478 <SD_MMC_START_TIMEOUT+0xbc>)
  4003f4:	2200      	movs	r2, #0
  4003f6:	701a      	strb	r2, [r3, #0]
		delay_ms(SD_MMC_DEBOUNCE_TIMEOUT);
  4003f8:	4b20      	ldr	r3, [pc, #128]	; (40047c <SD_MMC_START_TIMEOUT+0xc0>)
  4003fa:	4798      	blx	r3
  4003fc:	4603      	mov	r3, r0
  4003fe:	4619      	mov	r1, r3
  400400:	f04f 0200 	mov.w	r2, #0
  400404:	460b      	mov	r3, r1
  400406:	4614      	mov	r4, r2
  400408:	ea4f 1b44 	mov.w	fp, r4, lsl #5
  40040c:	ea4b 6bd3 	orr.w	fp, fp, r3, lsr #27
  400410:	ea4f 1a43 	mov.w	sl, r3, lsl #5
  400414:	4653      	mov	r3, sl
  400416:	465c      	mov	r4, fp
  400418:	1a5b      	subs	r3, r3, r1
  40041a:	eb64 0402 	sbc.w	r4, r4, r2
  40041e:	ea4f 0984 	mov.w	r9, r4, lsl #2
  400422:	ea49 7993 	orr.w	r9, r9, r3, lsr #30
  400426:	ea4f 0883 	mov.w	r8, r3, lsl #2
  40042a:	4643      	mov	r3, r8
  40042c:	464c      	mov	r4, r9
  40042e:	185b      	adds	r3, r3, r1
  400430:	eb44 0402 	adc.w	r4, r4, r2
  400434:	00e6      	lsls	r6, r4, #3
  400436:	ea46 7653 	orr.w	r6, r6, r3, lsr #29
  40043a:	00dd      	lsls	r5, r3, #3
  40043c:	462b      	mov	r3, r5
  40043e:	4634      	mov	r4, r6
  400440:	4619      	mov	r1, r3
  400442:	4622      	mov	r2, r4
  400444:	f243 63af 	movw	r3, #13999	; 0x36af
  400448:	f04f 0400 	mov.w	r4, #0
  40044c:	18cd      	adds	r5, r1, r3
  40044e:	eb42 0604 	adc.w	r6, r2, r4
  400452:	4628      	mov	r0, r5
  400454:	4631      	mov	r1, r6
  400456:	4c0b      	ldr	r4, [pc, #44]	; (400484 <SD_MMC_START_TIMEOUT+0xc8>)
  400458:	f243 62b0 	movw	r2, #14000	; 0x36b0
  40045c:	f04f 0300 	mov.w	r3, #0
  400460:	47a0      	blx	r4
  400462:	4603      	mov	r3, r0
  400464:	460c      	mov	r4, r1
  400466:	4618      	mov	r0, r3
  400468:	4b07      	ldr	r3, [pc, #28]	; (400488 <SD_MMC_START_TIMEOUT+0xcc>)
  40046a:	4798      	blx	r3
}
  40046c:	bf00      	nop
  40046e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400472:	bf00      	nop
  400474:	e000e010 	.word	0xe000e010
  400478:	20000c78 	.word	0x20000c78
  40047c:	00400359 	.word	0x00400359
  400480:	10624dd3 	.word	0x10624dd3
  400484:	0040dda5 	.word	0x0040dda5
  400488:	20000001 	.word	0x20000001

0040048c <SD_MMC_IS_TIMEOUT>:

static inline bool SD_MMC_IS_TIMEOUT(void)
{
  40048c:	b480      	push	{r7}
  40048e:	af00      	add	r7, sp, #0
	if (!sd_mmc_sam_systick_used) {
  400490:	4b0c      	ldr	r3, [pc, #48]	; (4004c4 <SD_MMC_IS_TIMEOUT+0x38>)
  400492:	781b      	ldrb	r3, [r3, #0]
  400494:	f083 0301 	eor.w	r3, r3, #1
  400498:	b2db      	uxtb	r3, r3
  40049a:	2b00      	cmp	r3, #0
  40049c:	d001      	beq.n	4004a2 <SD_MMC_IS_TIMEOUT+0x16>
#ifdef FREERTOS_USED
		portTickType xTicksToWait =
				SD_MMC_DEBOUNCE_TIMEOUT / portTICK_RATE_MS;
		return (xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdTRUE);
#else
		return true;
  40049e:	2301      	movs	r3, #1
  4004a0:	e00b      	b.n	4004ba <SD_MMC_IS_TIMEOUT+0x2e>
#endif
	}
	if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
  4004a2:	4b09      	ldr	r3, [pc, #36]	; (4004c8 <SD_MMC_IS_TIMEOUT+0x3c>)
  4004a4:	681b      	ldr	r3, [r3, #0]
  4004a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
  4004aa:	2b00      	cmp	r3, #0
  4004ac:	d004      	beq.n	4004b8 <SD_MMC_IS_TIMEOUT+0x2c>
		SysTick->CTRL = 0;
  4004ae:	4b06      	ldr	r3, [pc, #24]	; (4004c8 <SD_MMC_IS_TIMEOUT+0x3c>)
  4004b0:	2200      	movs	r2, #0
  4004b2:	601a      	str	r2, [r3, #0]
		return true;
  4004b4:	2301      	movs	r3, #1
  4004b6:	e000      	b.n	4004ba <SD_MMC_IS_TIMEOUT+0x2e>
	}
	return false;
  4004b8:	2300      	movs	r3, #0
}
  4004ba:	4618      	mov	r0, r3
  4004bc:	46bd      	mov	sp, r7
  4004be:	f85d 7b04 	ldr.w	r7, [sp], #4
  4004c2:	4770      	bx	lr
  4004c4:	20000c78 	.word	0x20000c78
  4004c8:	e000e010 	.word	0xe000e010

004004cc <SD_MMC_STOP_TIMEOUT>:

static inline void SD_MMC_STOP_TIMEOUT(void)
{
  4004cc:	b480      	push	{r7}
  4004ce:	af00      	add	r7, sp, #0
	if (sd_mmc_sam_systick_used) {
  4004d0:	4b05      	ldr	r3, [pc, #20]	; (4004e8 <SD_MMC_STOP_TIMEOUT+0x1c>)
  4004d2:	781b      	ldrb	r3, [r3, #0]
  4004d4:	2b00      	cmp	r3, #0
  4004d6:	d002      	beq.n	4004de <SD_MMC_STOP_TIMEOUT+0x12>
		SysTick->CTRL = 0;
  4004d8:	4b04      	ldr	r3, [pc, #16]	; (4004ec <SD_MMC_STOP_TIMEOUT+0x20>)
  4004da:	2200      	movs	r2, #0
  4004dc:	601a      	str	r2, [r3, #0]
	}
}
  4004de:	bf00      	nop
  4004e0:	46bd      	mov	sp, r7
  4004e2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4004e6:	4770      	bx	lr
  4004e8:	20000c78 	.word	0x20000c78
  4004ec:	e000e010 	.word	0xe000e010

004004f0 <mmc_spi_op_cond>:
 * - CMD58 reads OCR
 *
 * \return true if success, otherwise false
 */
static bool mmc_spi_op_cond(void)
{
  4004f0:	b580      	push	{r7, lr}
  4004f2:	b082      	sub	sp, #8
  4004f4:	af00      	add	r7, sp, #0
	/*
	 * Timeout 1s = 400KHz / ((6+1)*8) cylces = 7150 retry
	 * 6 = cmd byte size
	 * 1 = response byte size
	 */
	retry = 7150;
  4004f6:	f641 33ee 	movw	r3, #7150	; 0x1bee
  4004fa:	607b      	str	r3, [r7, #4]
	do {
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
  4004fc:	2100      	movs	r1, #0
  4004fe:	f241 1001 	movw	r0, #4353	; 0x1101
  400502:	4b1e      	ldr	r3, [pc, #120]	; (40057c <mmc_spi_op_cond+0x8c>)
  400504:	4798      	blx	r3
  400506:	4603      	mov	r3, r0
  400508:	f083 0301 	eor.w	r3, r3, #1
  40050c:	b2db      	uxtb	r3, r3
  40050e:	2b00      	cmp	r3, #0
  400510:	d001      	beq.n	400516 <mmc_spi_op_cond+0x26>
			sd_mmc_debug("%s: CMD1 SPI Fail - Busy retry %d\n\r",
					__func__, (int)(7150 - retry));
			return false;
  400512:	2300      	movs	r3, #0
  400514:	e02e      	b.n	400574 <mmc_spi_op_cond+0x84>
		}
		// Check busy flag
		resp = driver_get_response();
  400516:	4b1a      	ldr	r3, [pc, #104]	; (400580 <mmc_spi_op_cond+0x90>)
  400518:	4798      	blx	r3
  40051a:	6038      	str	r0, [r7, #0]
		if (!(resp & R1_SPI_IDLE)) {
  40051c:	683b      	ldr	r3, [r7, #0]
  40051e:	f003 0301 	and.w	r3, r3, #1
  400522:	2b00      	cmp	r3, #0
  400524:	d006      	beq.n	400534 <mmc_spi_op_cond+0x44>
			break;
		}
		if (retry-- == 0) {
  400526:	687b      	ldr	r3, [r7, #4]
  400528:	1e5a      	subs	r2, r3, #1
  40052a:	607a      	str	r2, [r7, #4]
  40052c:	2b00      	cmp	r3, #0
  40052e:	d1e5      	bne.n	4004fc <mmc_spi_op_cond+0xc>
			sd_mmc_debug("%s: CMD1 Timeout on busy\n\r", __func__);
			return false;
  400530:	2300      	movs	r3, #0
  400532:	e01f      	b.n	400574 <mmc_spi_op_cond+0x84>
			break;
  400534:	bf00      	nop
		}
	} while (1);

	// Read OCR for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
  400536:	2100      	movs	r1, #0
  400538:	f240 503a 	movw	r0, #1338	; 0x53a
  40053c:	4b0f      	ldr	r3, [pc, #60]	; (40057c <mmc_spi_op_cond+0x8c>)
  40053e:	4798      	blx	r3
  400540:	4603      	mov	r3, r0
  400542:	f083 0301 	eor.w	r3, r3, #1
  400546:	b2db      	uxtb	r3, r3
  400548:	2b00      	cmp	r3, #0
  40054a:	d001      	beq.n	400550 <mmc_spi_op_cond+0x60>
		sd_mmc_debug("%s: CMD58 Fail\n\r", __func__);
		return false;
  40054c:	2300      	movs	r3, #0
  40054e:	e011      	b.n	400574 <mmc_spi_op_cond+0x84>
	}
	// Check OCR value
	if ((driver_get_response() & OCR_ACCESS_MODE_MASK)
  400550:	4b0b      	ldr	r3, [pc, #44]	; (400580 <mmc_spi_op_cond+0x90>)
  400552:	4798      	blx	r3
  400554:	4603      	mov	r3, r0
  400556:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  40055a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
  40055e:	d108      	bne.n	400572 <mmc_spi_op_cond+0x82>
			== OCR_ACCESS_MODE_SECTOR) {
		sd_mmc_card->type |= CARD_TYPE_HC;
  400560:	4b08      	ldr	r3, [pc, #32]	; (400584 <mmc_spi_op_cond+0x94>)
  400562:	681b      	ldr	r3, [r3, #0]
  400564:	4a07      	ldr	r2, [pc, #28]	; (400584 <mmc_spi_op_cond+0x94>)
  400566:	6812      	ldr	r2, [r2, #0]
  400568:	7bd2      	ldrb	r2, [r2, #15]
  40056a:	f042 0208 	orr.w	r2, r2, #8
  40056e:	b2d2      	uxtb	r2, r2
  400570:	73da      	strb	r2, [r3, #15]
	}
	return true;
  400572:	2301      	movs	r3, #1
}
  400574:	4618      	mov	r0, r3
  400576:	3708      	adds	r7, #8
  400578:	46bd      	mov	sp, r7
  40057a:	bd80      	pop	{r7, pc}
  40057c:	00401fe9 	.word	0x00401fe9
  400580:	004021bd 	.word	0x004021bd
  400584:	20000c70 	.word	0x20000c70

00400588 <sd_spi_op_cond>:
 * \param v2   Shall be 1 if it is a SD card V2
 *
 * \return true if success, otherwise false
 */
static bool sd_spi_op_cond(uint8_t v2)
{
  400588:	b580      	push	{r7, lr}
  40058a:	b086      	sub	sp, #24
  40058c:	af00      	add	r7, sp, #0
  40058e:	4603      	mov	r3, r0
  400590:	71fb      	strb	r3, [r7, #7]
	/*
	 * Timeout 1s = 400KHz / ((6+1)*8) cylces = 7150 retry
	 * 6 = cmd byte size
	 * 1 = response byte size
	 */
	retry = 7150;
  400592:	f641 33ee 	movw	r3, #7150	; 0x1bee
  400596:	613b      	str	r3, [r7, #16]
	do {
		// CMD55 - Indicate to the card that the next command is an
		// application specific command rather than a standard command.
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
  400598:	2100      	movs	r1, #0
  40059a:	f241 1037 	movw	r0, #4407	; 0x1137
  40059e:	4b29      	ldr	r3, [pc, #164]	; (400644 <sd_spi_op_cond+0xbc>)
  4005a0:	4798      	blx	r3
  4005a2:	4603      	mov	r3, r0
  4005a4:	f083 0301 	eor.w	r3, r3, #1
  4005a8:	b2db      	uxtb	r3, r3
  4005aa:	2b00      	cmp	r3, #0
  4005ac:	d001      	beq.n	4005b2 <sd_spi_op_cond+0x2a>
			sd_mmc_debug("%s: CMD55 Fail\n\r", __func__);
			return false;
  4005ae:	2300      	movs	r3, #0
  4005b0:	e043      	b.n	40063a <sd_spi_op_cond+0xb2>
		}

		// (ACMD41) Sends host OCR register
		arg = 0;
  4005b2:	2300      	movs	r3, #0
  4005b4:	617b      	str	r3, [r7, #20]
		if (v2) {
  4005b6:	79fb      	ldrb	r3, [r7, #7]
  4005b8:	2b00      	cmp	r3, #0
  4005ba:	d003      	beq.n	4005c4 <sd_spi_op_cond+0x3c>
			arg |= SD_ACMD41_HCS;
  4005bc:	697b      	ldr	r3, [r7, #20]
  4005be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
  4005c2:	617b      	str	r3, [r7, #20]
		}
		// Check response
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
  4005c4:	6979      	ldr	r1, [r7, #20]
  4005c6:	f241 1029 	movw	r0, #4393	; 0x1129
  4005ca:	4b1e      	ldr	r3, [pc, #120]	; (400644 <sd_spi_op_cond+0xbc>)
  4005cc:	4798      	blx	r3
  4005ce:	4603      	mov	r3, r0
  4005d0:	f083 0301 	eor.w	r3, r3, #1
  4005d4:	b2db      	uxtb	r3, r3
  4005d6:	2b00      	cmp	r3, #0
  4005d8:	d001      	beq.n	4005de <sd_spi_op_cond+0x56>
			sd_mmc_debug("%s: ACMD41 Fail\n\r", __func__);
			return false;
  4005da:	2300      	movs	r3, #0
  4005dc:	e02d      	b.n	40063a <sd_spi_op_cond+0xb2>
		}
		resp = driver_get_response();
  4005de:	4b1a      	ldr	r3, [pc, #104]	; (400648 <sd_spi_op_cond+0xc0>)
  4005e0:	4798      	blx	r3
  4005e2:	60f8      	str	r0, [r7, #12]
		if (!(resp & R1_SPI_IDLE)) {
  4005e4:	68fb      	ldr	r3, [r7, #12]
  4005e6:	f003 0301 	and.w	r3, r3, #1
  4005ea:	2b00      	cmp	r3, #0
  4005ec:	d006      	beq.n	4005fc <sd_spi_op_cond+0x74>
			// Card is ready
			break;
		}
		if (retry-- == 0) {
  4005ee:	693b      	ldr	r3, [r7, #16]
  4005f0:	1e5a      	subs	r2, r3, #1
  4005f2:	613a      	str	r2, [r7, #16]
  4005f4:	2b00      	cmp	r3, #0
  4005f6:	d1cf      	bne.n	400598 <sd_spi_op_cond+0x10>
			sd_mmc_debug("%s: ACMD41 Timeout on busy, resp32 0x%08x \n\r",
					__func__, resp);
			return false;
  4005f8:	2300      	movs	r3, #0
  4005fa:	e01e      	b.n	40063a <sd_spi_op_cond+0xb2>
			break;
  4005fc:	bf00      	nop
		}
	} while (1);

	// Read OCR for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
  4005fe:	2100      	movs	r1, #0
  400600:	f240 503a 	movw	r0, #1338	; 0x53a
  400604:	4b0f      	ldr	r3, [pc, #60]	; (400644 <sd_spi_op_cond+0xbc>)
  400606:	4798      	blx	r3
  400608:	4603      	mov	r3, r0
  40060a:	f083 0301 	eor.w	r3, r3, #1
  40060e:	b2db      	uxtb	r3, r3
  400610:	2b00      	cmp	r3, #0
  400612:	d001      	beq.n	400618 <sd_spi_op_cond+0x90>
		sd_mmc_debug("%s: CMD58 Fail\n\r", __func__);
		return false;
  400614:	2300      	movs	r3, #0
  400616:	e010      	b.n	40063a <sd_spi_op_cond+0xb2>
	}
	if ((driver_get_response() & OCR_CCS) != 0) {
  400618:	4b0b      	ldr	r3, [pc, #44]	; (400648 <sd_spi_op_cond+0xc0>)
  40061a:	4798      	blx	r3
  40061c:	4603      	mov	r3, r0
  40061e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
  400622:	2b00      	cmp	r3, #0
  400624:	d008      	beq.n	400638 <sd_spi_op_cond+0xb0>
		sd_mmc_card->type |= CARD_TYPE_HC;
  400626:	4b09      	ldr	r3, [pc, #36]	; (40064c <sd_spi_op_cond+0xc4>)
  400628:	681b      	ldr	r3, [r3, #0]
  40062a:	4a08      	ldr	r2, [pc, #32]	; (40064c <sd_spi_op_cond+0xc4>)
  40062c:	6812      	ldr	r2, [r2, #0]
  40062e:	7bd2      	ldrb	r2, [r2, #15]
  400630:	f042 0208 	orr.w	r2, r2, #8
  400634:	b2d2      	uxtb	r2, r2
  400636:	73da      	strb	r2, [r3, #15]
	}
	return true;
  400638:	2301      	movs	r3, #1
}
  40063a:	4618      	mov	r0, r3
  40063c:	3718      	adds	r7, #24
  40063e:	46bd      	mov	sp, r7
  400640:	bd80      	pop	{r7, pc}
  400642:	bf00      	nop
  400644:	00401fe9 	.word	0x00401fe9
  400648:	004021bd 	.word	0x004021bd
  40064c:	20000c70 	.word	0x20000c70

00400650 <sdio_op_cond>:
 *   sd_mmc_card->type is updated
 *
 * \return true if success, otherwise false
 */
static bool sdio_op_cond(void)
{
  400650:	b580      	push	{r7, lr}
  400652:	b082      	sub	sp, #8
  400654:	af00      	add	r7, sp, #0
	uint32_t resp;

	// CMD5 - SDIO send operation condition (OCR) command.
	if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND, 0)) {
  400656:	2100      	movs	r1, #0
  400658:	f244 5005 	movw	r0, #17669	; 0x4505
  40065c:	4b23      	ldr	r3, [pc, #140]	; (4006ec <sdio_op_cond+0x9c>)
  40065e:	4798      	blx	r3
  400660:	4603      	mov	r3, r0
  400662:	f083 0301 	eor.w	r3, r3, #1
  400666:	b2db      	uxtb	r3, r3
  400668:	2b00      	cmp	r3, #0
  40066a:	d001      	beq.n	400670 <sdio_op_cond+0x20>
		sd_mmc_debug("%s: CMD5 Fail\n\r", __func__);
		return true; // No error but card type not updated
  40066c:	2301      	movs	r3, #1
  40066e:	e039      	b.n	4006e4 <sdio_op_cond+0x94>
	}
	resp = driver_get_response();
  400670:	4b1f      	ldr	r3, [pc, #124]	; (4006f0 <sdio_op_cond+0xa0>)
  400672:	4798      	blx	r3
  400674:	6078      	str	r0, [r7, #4]
	if ((resp & OCR_SDIO_NF) == 0) {
  400676:	687b      	ldr	r3, [r7, #4]
  400678:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
  40067c:	2b00      	cmp	r3, #0
  40067e:	d101      	bne.n	400684 <sdio_op_cond+0x34>
		return true; // No error but card type not updated
  400680:	2301      	movs	r3, #1
  400682:	e02f      	b.n	4006e4 <sdio_op_cond+0x94>
	 * Wait card ready
	 * Timeout 1s = 400KHz / ((6+4)*8) cylces = 5000 retry
	 * 6 = cmd byte size
	 * 4(SPI) 6(MCI) = response byte size
	 */
	uint32_t cmd5_retry = 5000;
  400684:	f241 3388 	movw	r3, #5000	; 0x1388
  400688:	603b      	str	r3, [r7, #0]
	while (1) {
		// CMD5 - SDIO send operation condition (OCR) command.
		if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND,
  40068a:	687b      	ldr	r3, [r7, #4]
  40068c:	f403 13fc 	and.w	r3, r3, #2064384	; 0x1f8000
  400690:	4619      	mov	r1, r3
  400692:	f244 5005 	movw	r0, #17669	; 0x4505
  400696:	4b15      	ldr	r3, [pc, #84]	; (4006ec <sdio_op_cond+0x9c>)
  400698:	4798      	blx	r3
  40069a:	4603      	mov	r3, r0
  40069c:	f083 0301 	eor.w	r3, r3, #1
  4006a0:	b2db      	uxtb	r3, r3
  4006a2:	2b00      	cmp	r3, #0
  4006a4:	d001      	beq.n	4006aa <sdio_op_cond+0x5a>
				resp & SD_MMC_VOLTAGE_SUPPORT)) {
			sd_mmc_debug("%s: CMD5 Fail\n\r", __func__);
			return false;
  4006a6:	2300      	movs	r3, #0
  4006a8:	e01c      	b.n	4006e4 <sdio_op_cond+0x94>
		}
		resp = driver_get_response();
  4006aa:	4b11      	ldr	r3, [pc, #68]	; (4006f0 <sdio_op_cond+0xa0>)
  4006ac:	4798      	blx	r3
  4006ae:	6078      	str	r0, [r7, #4]
		if ((resp & OCR_POWER_UP_BUSY) == OCR_POWER_UP_BUSY) {
  4006b0:	687b      	ldr	r3, [r7, #4]
  4006b2:	2b00      	cmp	r3, #0
  4006b4:	db06      	blt.n	4006c4 <sdio_op_cond+0x74>
			break;
		}
		if (cmd5_retry-- == 0) {
  4006b6:	683b      	ldr	r3, [r7, #0]
  4006b8:	1e5a      	subs	r2, r3, #1
  4006ba:	603a      	str	r2, [r7, #0]
  4006bc:	2b00      	cmp	r3, #0
  4006be:	d1e4      	bne.n	40068a <sdio_op_cond+0x3a>
			sd_mmc_debug("%s: CMD5 Timeout on busy\n\r", __func__);
			return false;
  4006c0:	2300      	movs	r3, #0
  4006c2:	e00f      	b.n	4006e4 <sdio_op_cond+0x94>
			break;
  4006c4:	bf00      	nop
		}
	}
	// Update card type at the end of busy
	if ((resp & OCR_SDIO_MP) > 0) {
  4006c6:	687b      	ldr	r3, [r7, #4]
  4006c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
  4006cc:	2b00      	cmp	r3, #0
  4006ce:	d004      	beq.n	4006da <sdio_op_cond+0x8a>
		sd_mmc_card->type = CARD_TYPE_SD_COMBO;
  4006d0:	4b08      	ldr	r3, [pc, #32]	; (4006f4 <sdio_op_cond+0xa4>)
  4006d2:	681b      	ldr	r3, [r3, #0]
  4006d4:	2205      	movs	r2, #5
  4006d6:	73da      	strb	r2, [r3, #15]
  4006d8:	e003      	b.n	4006e2 <sdio_op_cond+0x92>
	} else {
		sd_mmc_card->type = CARD_TYPE_SDIO;
  4006da:	4b06      	ldr	r3, [pc, #24]	; (4006f4 <sdio_op_cond+0xa4>)
  4006dc:	681b      	ldr	r3, [r3, #0]
  4006de:	2204      	movs	r2, #4
  4006e0:	73da      	strb	r2, [r3, #15]
	}
	return true; // No error and card type updated with SDIO type
  4006e2:	2301      	movs	r3, #1
}
  4006e4:	4618      	mov	r0, r3
  4006e6:	3708      	adds	r7, #8
  4006e8:	46bd      	mov	sp, r7
  4006ea:	bd80      	pop	{r7, pc}
  4006ec:	00401fe9 	.word	0x00401fe9
  4006f0:	004021bd 	.word	0x004021bd
  4006f4:	20000c70 	.word	0x20000c70

004006f8 <sdio_get_max_speed>:
 *   and update sd_mmc_card->clock
 *
 * \return true if success, otherwise false
 */
static bool sdio_get_max_speed(void)
{
  4006f8:	b590      	push	{r4, r7, lr}
  4006fa:	b08b      	sub	sp, #44	; 0x2c
  4006fc:	af02      	add	r7, sp, #8
	uint32_t mul;
	uint8_t tplfe_max_tran_speed, i;
	uint8_t addr_cis[4];

	/* Read CIS area address in CCCR area */
	addr_old = SDIO_CCCR_CIS_PTR;
  4006fe:	2309      	movs	r3, #9
  400700:	61bb      	str	r3, [r7, #24]
	for(i = 0; i < 4; i++) {
  400702:	2300      	movs	r3, #0
  400704:	75bb      	strb	r3, [r7, #22]
  400706:	e00f      	b.n	400728 <sdio_get_max_speed+0x30>
		sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_old, 0, &addr_cis[i]);
  400708:	7dbb      	ldrb	r3, [r7, #22]
  40070a:	463a      	mov	r2, r7
  40070c:	4413      	add	r3, r2
  40070e:	9300      	str	r3, [sp, #0]
  400710:	2300      	movs	r3, #0
  400712:	69ba      	ldr	r2, [r7, #24]
  400714:	2100      	movs	r1, #0
  400716:	2000      	movs	r0, #0
  400718:	4c46      	ldr	r4, [pc, #280]	; (400834 <sdio_get_max_speed+0x13c>)
  40071a:	47a0      	blx	r4
		addr_old++;
  40071c:	69bb      	ldr	r3, [r7, #24]
  40071e:	3301      	adds	r3, #1
  400720:	61bb      	str	r3, [r7, #24]
	for(i = 0; i < 4; i++) {
  400722:	7dbb      	ldrb	r3, [r7, #22]
  400724:	3301      	adds	r3, #1
  400726:	75bb      	strb	r3, [r7, #22]
  400728:	7dbb      	ldrb	r3, [r7, #22]
  40072a:	2b03      	cmp	r3, #3
  40072c:	d9ec      	bls.n	400708 <sdio_get_max_speed+0x10>
	}
	addr_old = addr_cis[0] + (addr_cis[1] << 8) + \
  40072e:	783b      	ldrb	r3, [r7, #0]
  400730:	461a      	mov	r2, r3
  400732:	787b      	ldrb	r3, [r7, #1]
  400734:	021b      	lsls	r3, r3, #8
  400736:	441a      	add	r2, r3
				(addr_cis[2] << 16) + (addr_cis[3] << 24);
  400738:	78bb      	ldrb	r3, [r7, #2]
  40073a:	041b      	lsls	r3, r3, #16
	addr_old = addr_cis[0] + (addr_cis[1] << 8) + \
  40073c:	441a      	add	r2, r3
				(addr_cis[2] << 16) + (addr_cis[3] << 24);
  40073e:	78fb      	ldrb	r3, [r7, #3]
  400740:	061b      	lsls	r3, r3, #24
  400742:	4413      	add	r3, r2
	addr_old = addr_cis[0] + (addr_cis[1] << 8) + \
  400744:	61bb      	str	r3, [r7, #24]
	addr_new = addr_old;
  400746:	69bb      	ldr	r3, [r7, #24]
  400748:	61fb      	str	r3, [r7, #28]

	while (1) {
		/* Read a sample of CIA area */
		for(i=0; i<3; i++) {
  40074a:	2300      	movs	r3, #0
  40074c:	75bb      	strb	r3, [r7, #22]
  40074e:	e00f      	b.n	400770 <sdio_get_max_speed+0x78>
			sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_new, 0, &buf[i]);
  400750:	7dbb      	ldrb	r3, [r7, #22]
  400752:	1d3a      	adds	r2, r7, #4
  400754:	4413      	add	r3, r2
  400756:	9300      	str	r3, [sp, #0]
  400758:	2300      	movs	r3, #0
  40075a:	69fa      	ldr	r2, [r7, #28]
  40075c:	2100      	movs	r1, #0
  40075e:	2000      	movs	r0, #0
  400760:	4c34      	ldr	r4, [pc, #208]	; (400834 <sdio_get_max_speed+0x13c>)
  400762:	47a0      	blx	r4
			addr_new++;
  400764:	69fb      	ldr	r3, [r7, #28]
  400766:	3301      	adds	r3, #1
  400768:	61fb      	str	r3, [r7, #28]
		for(i=0; i<3; i++) {
  40076a:	7dbb      	ldrb	r3, [r7, #22]
  40076c:	3301      	adds	r3, #1
  40076e:	75bb      	strb	r3, [r7, #22]
  400770:	7dbb      	ldrb	r3, [r7, #22]
  400772:	2b02      	cmp	r3, #2
  400774:	d9ec      	bls.n	400750 <sdio_get_max_speed+0x58>
		}
		if (buf[0] == SDIO_CISTPL_END) {
  400776:	793b      	ldrb	r3, [r7, #4]
  400778:	2bff      	cmp	r3, #255	; 0xff
  40077a:	d101      	bne.n	400780 <sdio_get_max_speed+0x88>
			return false; /* Tuple error */
  40077c:	2300      	movs	r3, #0
  40077e:	e055      	b.n	40082c <sdio_get_max_speed+0x134>
		}
		if (buf[0] == SDIO_CISTPL_FUNCE && buf[2] == 0x00) {
  400780:	793b      	ldrb	r3, [r7, #4]
  400782:	2b22      	cmp	r3, #34	; 0x22
  400784:	d102      	bne.n	40078c <sdio_get_max_speed+0x94>
  400786:	79bb      	ldrb	r3, [r7, #6]
  400788:	2b00      	cmp	r3, #0
  40078a:	d012      	beq.n	4007b2 <sdio_get_max_speed+0xba>
			break; /* Fun0 tuple found */
		}
		if (buf[1] == 0) {
  40078c:	797b      	ldrb	r3, [r7, #5]
  40078e:	2b00      	cmp	r3, #0
  400790:	d101      	bne.n	400796 <sdio_get_max_speed+0x9e>
			return false; /* Tuple error */
  400792:	2300      	movs	r3, #0
  400794:	e04a      	b.n	40082c <sdio_get_max_speed+0x134>
		}
		/* Next address */
		addr_new += buf[1]-1;
  400796:	797b      	ldrb	r3, [r7, #5]
  400798:	461a      	mov	r2, r3
  40079a:	69fb      	ldr	r3, [r7, #28]
  40079c:	4413      	add	r3, r2
  40079e:	3b01      	subs	r3, #1
  4007a0:	61fb      	str	r3, [r7, #28]
		if (addr_new > (addr_old + 256)) {
  4007a2:	69bb      	ldr	r3, [r7, #24]
  4007a4:	f503 7280 	add.w	r2, r3, #256	; 0x100
  4007a8:	69fb      	ldr	r3, [r7, #28]
  4007aa:	429a      	cmp	r2, r3
  4007ac:	d2cd      	bcs.n	40074a <sdio_get_max_speed+0x52>
			return false; /* Outoff CIS area */
  4007ae:	2300      	movs	r3, #0
  4007b0:	e03c      	b.n	40082c <sdio_get_max_speed+0x134>
			break; /* Fun0 tuple found */
  4007b2:	bf00      	nop
		}
	}

	/* Read all Fun0 tuple fields: fn0_blk_siz & max_tran_speed */
	addr_new -= 3;
  4007b4:	69fb      	ldr	r3, [r7, #28]
  4007b6:	3b03      	subs	r3, #3
  4007b8:	61fb      	str	r3, [r7, #28]
	for(i = 0; i < 6; i++) {
  4007ba:	2300      	movs	r3, #0
  4007bc:	75bb      	strb	r3, [r7, #22]
  4007be:	e00f      	b.n	4007e0 <sdio_get_max_speed+0xe8>
		sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_new, 0, &buf[i]);
  4007c0:	7dbb      	ldrb	r3, [r7, #22]
  4007c2:	1d3a      	adds	r2, r7, #4
  4007c4:	4413      	add	r3, r2
  4007c6:	9300      	str	r3, [sp, #0]
  4007c8:	2300      	movs	r3, #0
  4007ca:	69fa      	ldr	r2, [r7, #28]
  4007cc:	2100      	movs	r1, #0
  4007ce:	2000      	movs	r0, #0
  4007d0:	4c18      	ldr	r4, [pc, #96]	; (400834 <sdio_get_max_speed+0x13c>)
  4007d2:	47a0      	blx	r4
		addr_new++;
  4007d4:	69fb      	ldr	r3, [r7, #28]
  4007d6:	3301      	adds	r3, #1
  4007d8:	61fb      	str	r3, [r7, #28]
	for(i = 0; i < 6; i++) {
  4007da:	7dbb      	ldrb	r3, [r7, #22]
  4007dc:	3301      	adds	r3, #1
  4007de:	75bb      	strb	r3, [r7, #22]
  4007e0:	7dbb      	ldrb	r3, [r7, #22]
  4007e2:	2b05      	cmp	r3, #5
  4007e4:	d9ec      	bls.n	4007c0 <sdio_get_max_speed+0xc8>
	}

	tplfe_max_tran_speed = buf[5];
  4007e6:	7a7b      	ldrb	r3, [r7, #9]
  4007e8:	75fb      	strb	r3, [r7, #23]
	if (tplfe_max_tran_speed > 0x32) {
  4007ea:	7dfb      	ldrb	r3, [r7, #23]
  4007ec:	2b32      	cmp	r3, #50	; 0x32
  4007ee:	d901      	bls.n	4007f4 <sdio_get_max_speed+0xfc>
		/* Error on SDIO register, the high speed is not activated
		 * and the clock can not be more than 25MHz.
		 * This error is present on specific SDIO card
		 * (H&D wireless card - HDG104 WiFi SIP).
		 */
		tplfe_max_tran_speed = 0x32; /* 25Mhz */
  4007f0:	2332      	movs	r3, #50	; 0x32
  4007f2:	75fb      	strb	r3, [r7, #23]
	}

	/* Decode transfer speed in Hz.*/
	unit = sd_mmc_trans_units[tplfe_max_tran_speed & 0x7];
  4007f4:	7dfb      	ldrb	r3, [r7, #23]
  4007f6:	f003 0307 	and.w	r3, r3, #7
  4007fa:	4a0f      	ldr	r2, [pc, #60]	; (400838 <sdio_get_max_speed+0x140>)
  4007fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  400800:	613b      	str	r3, [r7, #16]
	mul = sd_trans_multipliers[(tplfe_max_tran_speed >> 3) & 0xF];
  400802:	7dfb      	ldrb	r3, [r7, #23]
  400804:	08db      	lsrs	r3, r3, #3
  400806:	b2db      	uxtb	r3, r3
  400808:	f003 030f 	and.w	r3, r3, #15
  40080c:	4a0b      	ldr	r2, [pc, #44]	; (40083c <sdio_get_max_speed+0x144>)
  40080e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  400812:	60fb      	str	r3, [r7, #12]
	sd_mmc_card->clock = unit * mul * 1000;
  400814:	4b0a      	ldr	r3, [pc, #40]	; (400840 <sdio_get_max_speed+0x148>)
  400816:	681b      	ldr	r3, [r3, #0]
  400818:	693a      	ldr	r2, [r7, #16]
  40081a:	68f9      	ldr	r1, [r7, #12]
  40081c:	fb01 f202 	mul.w	r2, r1, r2
  400820:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  400824:	fb01 f202 	mul.w	r2, r1, r2
  400828:	601a      	str	r2, [r3, #0]
	 * which supports upto 25MHz.
	 * A SDIO card alone can be:
	 * - a Low-Speed SDIO card which supports 400Khz minimum
	 * - a Full-Speed SDIO card which supports upto 25MHz
	 */
	return true;
  40082a:	2301      	movs	r3, #1
}
  40082c:	4618      	mov	r0, r3
  40082e:	3724      	adds	r7, #36	; 0x24
  400830:	46bd      	mov	sp, r7
  400832:	bd90      	pop	{r4, r7, pc}
  400834:	00400c8d 	.word	0x00400c8d
  400838:	00410d38 	.word	0x00410d38
  40083c:	00410d54 	.word	0x00410d54
  400840:	20000c70 	.word	0x20000c70

00400844 <sd_cmd8>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_err.
 */
static bool sd_cmd8(uint8_t * v2)
{
  400844:	b580      	push	{r7, lr}
  400846:	b084      	sub	sp, #16
  400848:	af00      	add	r7, sp, #0
  40084a:	6078      	str	r0, [r7, #4]
	uint32_t resp;

	*v2 = 0;
  40084c:	687b      	ldr	r3, [r7, #4]
  40084e:	2200      	movs	r2, #0
  400850:	701a      	strb	r2, [r3, #0]
	// Test for SD version 2
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
  400852:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
  400856:	f245 5008 	movw	r0, #21768	; 0x5508
  40085a:	4b11      	ldr	r3, [pc, #68]	; (4008a0 <sd_cmd8+0x5c>)
  40085c:	4798      	blx	r3
  40085e:	4603      	mov	r3, r0
  400860:	f083 0301 	eor.w	r3, r3, #1
  400864:	b2db      	uxtb	r3, r3
  400866:	2b00      	cmp	r3, #0
  400868:	d001      	beq.n	40086e <sd_cmd8+0x2a>
			SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		return true; // It is not a V2
  40086a:	2301      	movs	r3, #1
  40086c:	e014      	b.n	400898 <sd_cmd8+0x54>
	}
	// Check R7 response
	resp = driver_get_response();
  40086e:	4b0d      	ldr	r3, [pc, #52]	; (4008a4 <sd_cmd8+0x60>)
  400870:	4798      	blx	r3
  400872:	60f8      	str	r0, [r7, #12]
	if (resp == 0xFFFFFFFF) {
  400874:	68fb      	ldr	r3, [r7, #12]
  400876:	f1b3 3fff 	cmp.w	r3, #4294967295
  40087a:	d101      	bne.n	400880 <sd_cmd8+0x3c>
		// No compliance R7 value
		return true; // It is not a V2
  40087c:	2301      	movs	r3, #1
  40087e:	e00b      	b.n	400898 <sd_cmd8+0x54>
	}
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
  400880:	68fb      	ldr	r3, [r7, #12]
  400882:	f3c3 030b 	ubfx	r3, r3, #0, #12
  400886:	f5b3 7fd5 	cmp.w	r3, #426	; 0x1aa
  40088a:	d001      	beq.n	400890 <sd_cmd8+0x4c>
				!= (SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		sd_mmc_debug("%s: CMD8 resp32 0x%08x UNUSABLE CARD\n\r",
				__func__, resp);
		return false;
  40088c:	2300      	movs	r3, #0
  40088e:	e003      	b.n	400898 <sd_cmd8+0x54>
	}
	sd_mmc_debug("SD card V2\n\r");
	*v2 = 1;
  400890:	687b      	ldr	r3, [r7, #4]
  400892:	2201      	movs	r2, #1
  400894:	701a      	strb	r2, [r3, #0]
	return true;
  400896:	2301      	movs	r3, #1
}
  400898:	4618      	mov	r0, r3
  40089a:	3710      	adds	r7, #16
  40089c:	46bd      	mov	sp, r7
  40089e:	bd80      	pop	{r7, pc}
  4008a0:	00401fe9 	.word	0x00401fe9
  4008a4:	004021bd 	.word	0x004021bd

004008a8 <mmc_cmd8>:
 * support information
 *
 * \return true if success, otherwise false
 */
static bool mmc_cmd8(uint8_t *b_authorize_high_speed)
{
  4008a8:	b590      	push	{r4, r7, lr}
  4008aa:	b089      	sub	sp, #36	; 0x24
  4008ac:	af02      	add	r7, sp, #8
  4008ae:	6078      	str	r0, [r7, #4]
	uint16_t i;
	uint32_t ext_csd;
	uint32_t sec_count;

	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
  4008b0:	2300      	movs	r3, #0
  4008b2:	9300      	str	r3, [sp, #0]
  4008b4:	2301      	movs	r3, #1
  4008b6:	f44f 7200 	mov.w	r2, #512	; 0x200
  4008ba:	2100      	movs	r1, #0
  4008bc:	4833      	ldr	r0, [pc, #204]	; (40098c <mmc_cmd8+0xe4>)
  4008be:	4c34      	ldr	r4, [pc, #208]	; (400990 <mmc_cmd8+0xe8>)
  4008c0:	47a0      	blx	r4
  4008c2:	4603      	mov	r3, r0
  4008c4:	f083 0301 	eor.w	r3, r3, #1
  4008c8:	b2db      	uxtb	r3, r3
  4008ca:	2b00      	cmp	r3, #0
  4008cc:	d001      	beq.n	4008d2 <mmc_cmd8+0x2a>
			EXT_CSD_BSIZE, 1, false)) {
		return false;
  4008ce:	2300      	movs	r3, #0
  4008d0:	e058      	b.n	400984 <mmc_cmd8+0xdc>
	//** Read and decode Extended Extended CSD
	// Note: The read access is done in byte to avoid a buffer
	// of EXT_CSD_BSIZE Byte in stack.

	// Read card type
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
  4008d2:	2300      	movs	r3, #0
  4008d4:	82fb      	strh	r3, [r7, #22]
  4008d6:	e00f      	b.n	4008f8 <mmc_cmd8+0x50>
		if (!driver_read_word(&ext_csd)) {
  4008d8:	f107 0310 	add.w	r3, r7, #16
  4008dc:	4618      	mov	r0, r3
  4008de:	4b2d      	ldr	r3, [pc, #180]	; (400994 <mmc_cmd8+0xec>)
  4008e0:	4798      	blx	r3
  4008e2:	4603      	mov	r3, r0
  4008e4:	f083 0301 	eor.w	r3, r3, #1
  4008e8:	b2db      	uxtb	r3, r3
  4008ea:	2b00      	cmp	r3, #0
  4008ec:	d001      	beq.n	4008f2 <mmc_cmd8+0x4a>
			return false;
  4008ee:	2300      	movs	r3, #0
  4008f0:	e048      	b.n	400984 <mmc_cmd8+0xdc>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
  4008f2:	8afb      	ldrh	r3, [r7, #22]
  4008f4:	3301      	adds	r3, #1
  4008f6:	82fb      	strh	r3, [r7, #22]
  4008f8:	8afb      	ldrh	r3, [r7, #22]
  4008fa:	2b31      	cmp	r3, #49	; 0x31
  4008fc:	d9ec      	bls.n	4008d8 <mmc_cmd8+0x30>
		}
	}
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
			& MMC_CTYPE_52MHZ;
  4008fe:	693b      	ldr	r3, [r7, #16]
  400900:	b2db      	uxtb	r3, r3
  400902:	f003 0302 	and.w	r3, r3, #2
  400906:	b2da      	uxtb	r2, r3
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
  400908:	687b      	ldr	r3, [r7, #4]
  40090a:	701a      	strb	r2, [r3, #0]

	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
  40090c:	4b22      	ldr	r3, [pc, #136]	; (400998 <mmc_cmd8+0xf0>)
  40090e:	681b      	ldr	r3, [r3, #0]
  400910:	f103 0012 	add.w	r0, r3, #18
  400914:	230c      	movs	r3, #12
  400916:	223e      	movs	r2, #62	; 0x3e
  400918:	2180      	movs	r1, #128	; 0x80
  40091a:	4c20      	ldr	r4, [pc, #128]	; (40099c <mmc_cmd8+0xf4>)
  40091c:	47a0      	blx	r4
  40091e:	4602      	mov	r2, r0
  400920:	f640 73ff 	movw	r3, #4095	; 0xfff
  400924:	429a      	cmp	r2, r3
  400926:	d129      	bne.n	40097c <mmc_cmd8+0xd4>
		// For high capacity SD/MMC card,
		// memory capacity = SEC_COUNT * 512 byte
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
  400928:	e00f      	b.n	40094a <mmc_cmd8+0xa2>
			if (!driver_read_word(&sec_count)) {
  40092a:	f107 030c 	add.w	r3, r7, #12
  40092e:	4618      	mov	r0, r3
  400930:	4b18      	ldr	r3, [pc, #96]	; (400994 <mmc_cmd8+0xec>)
  400932:	4798      	blx	r3
  400934:	4603      	mov	r3, r0
  400936:	f083 0301 	eor.w	r3, r3, #1
  40093a:	b2db      	uxtb	r3, r3
  40093c:	2b00      	cmp	r3, #0
  40093e:	d001      	beq.n	400944 <mmc_cmd8+0x9c>
				return false;
  400940:	2300      	movs	r3, #0
  400942:	e01f      	b.n	400984 <mmc_cmd8+0xdc>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
  400944:	8afb      	ldrh	r3, [r7, #22]
  400946:	3301      	adds	r3, #1
  400948:	82fb      	strh	r3, [r7, #22]
  40094a:	8afb      	ldrh	r3, [r7, #22]
  40094c:	2b35      	cmp	r3, #53	; 0x35
  40094e:	d9ec      	bls.n	40092a <mmc_cmd8+0x82>
			}
		}
		sd_mmc_card->capacity = sec_count / 2;
  400950:	4b11      	ldr	r3, [pc, #68]	; (400998 <mmc_cmd8+0xf0>)
  400952:	681b      	ldr	r3, [r3, #0]
  400954:	68fa      	ldr	r2, [r7, #12]
  400956:	0852      	lsrs	r2, r2, #1
  400958:	605a      	str	r2, [r3, #4]
	}
	for (; i < EXT_CSD_BSIZE / 4; i++) {
  40095a:	e00f      	b.n	40097c <mmc_cmd8+0xd4>
		if (!driver_read_word(&sec_count)) {
  40095c:	f107 030c 	add.w	r3, r7, #12
  400960:	4618      	mov	r0, r3
  400962:	4b0c      	ldr	r3, [pc, #48]	; (400994 <mmc_cmd8+0xec>)
  400964:	4798      	blx	r3
  400966:	4603      	mov	r3, r0
  400968:	f083 0301 	eor.w	r3, r3, #1
  40096c:	b2db      	uxtb	r3, r3
  40096e:	2b00      	cmp	r3, #0
  400970:	d001      	beq.n	400976 <mmc_cmd8+0xce>
			return false;
  400972:	2300      	movs	r3, #0
  400974:	e006      	b.n	400984 <mmc_cmd8+0xdc>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
  400976:	8afb      	ldrh	r3, [r7, #22]
  400978:	3301      	adds	r3, #1
  40097a:	82fb      	strh	r3, [r7, #22]
  40097c:	8afb      	ldrh	r3, [r7, #22]
  40097e:	2b7f      	cmp	r3, #127	; 0x7f
  400980:	d9ec      	bls.n	40095c <mmc_cmd8+0xb4>
		}
	}
	return true;
  400982:	2301      	movs	r3, #1
}
  400984:	4618      	mov	r0, r3
  400986:	371c      	adds	r7, #28
  400988:	46bd      	mov	sp, r7
  40098a:	bd90      	pop	{r4, r7, pc}
  40098c:	00081108 	.word	0x00081108
  400990:	00402011 	.word	0x00402011
  400994:	004021d5 	.word	0x004021d5
  400998:	20000c70 	.word	0x20000c70
  40099c:	004001b5 	.word	0x004001b5

004009a0 <sd_mmc_cmd9_spi>:
 * data (CSD) on the CMD line spi.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd9_spi(void)
{
  4009a0:	b590      	push	{r4, r7, lr}
  4009a2:	b083      	sub	sp, #12
  4009a4:	af02      	add	r7, sp, #8
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
  4009a6:	4b14      	ldr	r3, [pc, #80]	; (4009f8 <sd_mmc_cmd9_spi+0x58>)
  4009a8:	681b      	ldr	r3, [r3, #0]
  4009aa:	899b      	ldrh	r3, [r3, #12]
  4009ac:	0419      	lsls	r1, r3, #16
  4009ae:	2301      	movs	r3, #1
  4009b0:	9300      	str	r3, [sp, #0]
  4009b2:	2301      	movs	r3, #1
  4009b4:	2210      	movs	r2, #16
  4009b6:	4811      	ldr	r0, [pc, #68]	; (4009fc <sd_mmc_cmd9_spi+0x5c>)
  4009b8:	4c11      	ldr	r4, [pc, #68]	; (400a00 <sd_mmc_cmd9_spi+0x60>)
  4009ba:	47a0      	blx	r4
  4009bc:	4603      	mov	r3, r0
  4009be:	f083 0301 	eor.w	r3, r3, #1
  4009c2:	b2db      	uxtb	r3, r3
  4009c4:	2b00      	cmp	r3, #0
  4009c6:	d001      	beq.n	4009cc <sd_mmc_cmd9_spi+0x2c>
			CSD_REG_BSIZE, 1, true)) {
		return false;
  4009c8:	2300      	movs	r3, #0
  4009ca:	e011      	b.n	4009f0 <sd_mmc_cmd9_spi+0x50>
	}
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
  4009cc:	4b0a      	ldr	r3, [pc, #40]	; (4009f8 <sd_mmc_cmd9_spi+0x58>)
  4009ce:	681b      	ldr	r3, [r3, #0]
  4009d0:	3312      	adds	r3, #18
  4009d2:	2101      	movs	r1, #1
  4009d4:	4618      	mov	r0, r3
  4009d6:	4b0b      	ldr	r3, [pc, #44]	; (400a04 <sd_mmc_cmd9_spi+0x64>)
  4009d8:	4798      	blx	r3
  4009da:	4603      	mov	r3, r0
  4009dc:	f083 0301 	eor.w	r3, r3, #1
  4009e0:	b2db      	uxtb	r3, r3
  4009e2:	2b00      	cmp	r3, #0
  4009e4:	d001      	beq.n	4009ea <sd_mmc_cmd9_spi+0x4a>
		return false;
  4009e6:	2300      	movs	r3, #0
  4009e8:	e002      	b.n	4009f0 <sd_mmc_cmd9_spi+0x50>
	}
	return driver_wait_end_of_read_blocks();
  4009ea:	4b07      	ldr	r3, [pc, #28]	; (400a08 <sd_mmc_cmd9_spi+0x68>)
  4009ec:	4798      	blx	r3
  4009ee:	4603      	mov	r3, r0
}
  4009f0:	4618      	mov	r0, r3
  4009f2:	3704      	adds	r7, #4
  4009f4:	46bd      	mov	sp, r7
  4009f6:	bd90      	pop	{r4, r7, pc}
  4009f8:	20000c70 	.word	0x20000c70
  4009fc:	00081109 	.word	0x00081109
  400a00:	00402011 	.word	0x00402011
  400a04:	00402269 	.word	0x00402269
  400a08:	004022f9 	.word	0x004022f9

00400a0c <mmc_decode_csd>:

/**
 * \brief Decodes MMC CSD register
 */
static void mmc_decode_csd(void)
{
  400a0c:	b5b0      	push	{r4, r5, r7, lr}
  400a0e:	b084      	sub	sp, #16
  400a10:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get MMC System Specification version supported by the card
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
  400a12:	4b48      	ldr	r3, [pc, #288]	; (400b34 <mmc_decode_csd+0x128>)
  400a14:	681b      	ldr	r3, [r3, #0]
  400a16:	f103 0012 	add.w	r0, r3, #18
  400a1a:	2304      	movs	r3, #4
  400a1c:	227a      	movs	r2, #122	; 0x7a
  400a1e:	2180      	movs	r1, #128	; 0x80
  400a20:	4c45      	ldr	r4, [pc, #276]	; (400b38 <mmc_decode_csd+0x12c>)
  400a22:	47a0      	blx	r4
  400a24:	4603      	mov	r3, r0
  400a26:	3b01      	subs	r3, #1
  400a28:	2b03      	cmp	r3, #3
  400a2a:	d80b      	bhi.n	400a44 <mmc_decode_csd+0x38>
  400a2c:	a201      	add	r2, pc, #4	; (adr r2, 400a34 <mmc_decode_csd+0x28>)
  400a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400a32:	bf00      	nop
  400a34:	00400a4f 	.word	0x00400a4f
  400a38:	00400a59 	.word	0x00400a59
  400a3c:	00400a63 	.word	0x00400a63
  400a40:	00400a6d 	.word	0x00400a6d
	default:
	case 0:
		sd_mmc_card->version = CARD_VER_MMC_1_2;
  400a44:	4b3b      	ldr	r3, [pc, #236]	; (400b34 <mmc_decode_csd+0x128>)
  400a46:	681b      	ldr	r3, [r3, #0]
  400a48:	2212      	movs	r2, #18
  400a4a:	741a      	strb	r2, [r3, #16]
		break;
  400a4c:	e013      	b.n	400a76 <mmc_decode_csd+0x6a>

	case 1:
		sd_mmc_card->version = CARD_VER_MMC_1_4;
  400a4e:	4b39      	ldr	r3, [pc, #228]	; (400b34 <mmc_decode_csd+0x128>)
  400a50:	681b      	ldr	r3, [r3, #0]
  400a52:	2214      	movs	r2, #20
  400a54:	741a      	strb	r2, [r3, #16]
		break;
  400a56:	e00e      	b.n	400a76 <mmc_decode_csd+0x6a>

	case 2:
		sd_mmc_card->version = CARD_VER_MMC_2_2;
  400a58:	4b36      	ldr	r3, [pc, #216]	; (400b34 <mmc_decode_csd+0x128>)
  400a5a:	681b      	ldr	r3, [r3, #0]
  400a5c:	2222      	movs	r2, #34	; 0x22
  400a5e:	741a      	strb	r2, [r3, #16]
		break;
  400a60:	e009      	b.n	400a76 <mmc_decode_csd+0x6a>

	case 3:
		sd_mmc_card->version = CARD_VER_MMC_3;
  400a62:	4b34      	ldr	r3, [pc, #208]	; (400b34 <mmc_decode_csd+0x128>)
  400a64:	681b      	ldr	r3, [r3, #0]
  400a66:	2230      	movs	r2, #48	; 0x30
  400a68:	741a      	strb	r2, [r3, #16]
		break;
  400a6a:	e004      	b.n	400a76 <mmc_decode_csd+0x6a>

	case 4:
		sd_mmc_card->version = CARD_VER_MMC_4;
  400a6c:	4b31      	ldr	r3, [pc, #196]	; (400b34 <mmc_decode_csd+0x128>)
  400a6e:	681b      	ldr	r3, [r3, #0]
  400a70:	2240      	movs	r2, #64	; 0x40
  400a72:	741a      	strb	r2, [r3, #16]
		break;
  400a74:	bf00      	nop
	}

	// Get MMC memory max transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
  400a76:	4b2f      	ldr	r3, [pc, #188]	; (400b34 <mmc_decode_csd+0x128>)
  400a78:	681b      	ldr	r3, [r3, #0]
  400a7a:	f103 0012 	add.w	r0, r3, #18
  400a7e:	2308      	movs	r3, #8
  400a80:	2260      	movs	r2, #96	; 0x60
  400a82:	2180      	movs	r1, #128	; 0x80
  400a84:	4c2c      	ldr	r4, [pc, #176]	; (400b38 <mmc_decode_csd+0x12c>)
  400a86:	47a0      	blx	r4
  400a88:	60f8      	str	r0, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
  400a8a:	68fb      	ldr	r3, [r7, #12]
  400a8c:	f003 0307 	and.w	r3, r3, #7
  400a90:	4a2a      	ldr	r2, [pc, #168]	; (400b3c <mmc_decode_csd+0x130>)
  400a92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  400a96:	60bb      	str	r3, [r7, #8]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
  400a98:	68fb      	ldr	r3, [r7, #12]
  400a9a:	08db      	lsrs	r3, r3, #3
  400a9c:	f003 030f 	and.w	r3, r3, #15
  400aa0:	4a27      	ldr	r2, [pc, #156]	; (400b40 <mmc_decode_csd+0x134>)
  400aa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  400aa6:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
  400aa8:	4b22      	ldr	r3, [pc, #136]	; (400b34 <mmc_decode_csd+0x128>)
  400aaa:	681b      	ldr	r3, [r3, #0]
  400aac:	68ba      	ldr	r2, [r7, #8]
  400aae:	6879      	ldr	r1, [r7, #4]
  400ab0:	fb01 f202 	mul.w	r2, r1, r2
  400ab4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  400ab8:	fb01 f202 	mul.w	r2, r1, r2
  400abc:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD/MMC card:
	 * memory capacity = SEC_COUNT * 512 byte
	 */
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
  400abe:	4b1d      	ldr	r3, [pc, #116]	; (400b34 <mmc_decode_csd+0x128>)
  400ac0:	681b      	ldr	r3, [r3, #0]
  400ac2:	f103 0012 	add.w	r0, r3, #18
  400ac6:	230c      	movs	r3, #12
  400ac8:	223e      	movs	r2, #62	; 0x3e
  400aca:	2180      	movs	r1, #128	; 0x80
  400acc:	4c1a      	ldr	r4, [pc, #104]	; (400b38 <mmc_decode_csd+0x12c>)
  400ace:	47a0      	blx	r4
  400ad0:	4602      	mov	r2, r0
  400ad2:	f640 73ff 	movw	r3, #4095	; 0xfff
  400ad6:	429a      	cmp	r2, r3
  400ad8:	d028      	beq.n	400b2c <mmc_decode_csd+0x120>
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
  400ada:	4b16      	ldr	r3, [pc, #88]	; (400b34 <mmc_decode_csd+0x128>)
  400adc:	681b      	ldr	r3, [r3, #0]
  400ade:	f103 0012 	add.w	r0, r3, #18
  400ae2:	230c      	movs	r3, #12
  400ae4:	223e      	movs	r2, #62	; 0x3e
  400ae6:	2180      	movs	r1, #128	; 0x80
  400ae8:	4c13      	ldr	r4, [pc, #76]	; (400b38 <mmc_decode_csd+0x12c>)
  400aea:	47a0      	blx	r4
  400aec:	4603      	mov	r3, r0
  400aee:	1c5c      	adds	r4, r3, #1
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
  400af0:	4b10      	ldr	r3, [pc, #64]	; (400b34 <mmc_decode_csd+0x128>)
  400af2:	681b      	ldr	r3, [r3, #0]
  400af4:	f103 0012 	add.w	r0, r3, #18
  400af8:	2303      	movs	r3, #3
  400afa:	222f      	movs	r2, #47	; 0x2f
  400afc:	2180      	movs	r1, #128	; 0x80
  400afe:	4d0e      	ldr	r5, [pc, #56]	; (400b38 <mmc_decode_csd+0x12c>)
  400b00:	47a8      	blx	r5
  400b02:	4603      	mov	r3, r0
  400b04:	3302      	adds	r3, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
  400b06:	fa04 f303 	lsl.w	r3, r4, r3
  400b0a:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
  400b0c:	4b09      	ldr	r3, [pc, #36]	; (400b34 <mmc_decode_csd+0x128>)
  400b0e:	681c      	ldr	r4, [r3, #0]
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
  400b10:	4b08      	ldr	r3, [pc, #32]	; (400b34 <mmc_decode_csd+0x128>)
  400b12:	681b      	ldr	r3, [r3, #0]
  400b14:	f103 0012 	add.w	r0, r3, #18
  400b18:	2304      	movs	r3, #4
  400b1a:	2250      	movs	r2, #80	; 0x50
  400b1c:	2180      	movs	r1, #128	; 0x80
  400b1e:	4d06      	ldr	r5, [pc, #24]	; (400b38 <mmc_decode_csd+0x12c>)
  400b20:	47a8      	blx	r5
  400b22:	4602      	mov	r2, r0
		sd_mmc_card->capacity = blocknr *
  400b24:	683b      	ldr	r3, [r7, #0]
  400b26:	4093      	lsls	r3, r2
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
  400b28:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
  400b2a:	6063      	str	r3, [r4, #4]
	}
}
  400b2c:	bf00      	nop
  400b2e:	3710      	adds	r7, #16
  400b30:	46bd      	mov	sp, r7
  400b32:	bdb0      	pop	{r4, r5, r7, pc}
  400b34:	20000c70 	.word	0x20000c70
  400b38:	004001b5 	.word	0x004001b5
  400b3c:	00410d38 	.word	0x00410d38
  400b40:	00410d94 	.word	0x00410d94

00400b44 <sd_decode_csd>:

/**
 * \brief Decodes SD CSD register
 */
static void sd_decode_csd(void)
{
  400b44:	b5b0      	push	{r4, r5, r7, lr}
  400b46:	b084      	sub	sp, #16
  400b48:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get SD memory maximum transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
  400b4a:	4b36      	ldr	r3, [pc, #216]	; (400c24 <sd_decode_csd+0xe0>)
  400b4c:	681b      	ldr	r3, [r3, #0]
  400b4e:	f103 0012 	add.w	r0, r3, #18
  400b52:	2308      	movs	r3, #8
  400b54:	2260      	movs	r2, #96	; 0x60
  400b56:	2180      	movs	r1, #128	; 0x80
  400b58:	4c33      	ldr	r4, [pc, #204]	; (400c28 <sd_decode_csd+0xe4>)
  400b5a:	47a0      	blx	r4
  400b5c:	60f8      	str	r0, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
  400b5e:	68fb      	ldr	r3, [r7, #12]
  400b60:	f003 0307 	and.w	r3, r3, #7
  400b64:	4a31      	ldr	r2, [pc, #196]	; (400c2c <sd_decode_csd+0xe8>)
  400b66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  400b6a:	60bb      	str	r3, [r7, #8]
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
  400b6c:	68fb      	ldr	r3, [r7, #12]
  400b6e:	08db      	lsrs	r3, r3, #3
  400b70:	f003 030f 	and.w	r3, r3, #15
  400b74:	4a2e      	ldr	r2, [pc, #184]	; (400c30 <sd_decode_csd+0xec>)
  400b76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  400b7a:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
  400b7c:	4b29      	ldr	r3, [pc, #164]	; (400c24 <sd_decode_csd+0xe0>)
  400b7e:	681b      	ldr	r3, [r3, #0]
  400b80:	68ba      	ldr	r2, [r7, #8]
  400b82:	6879      	ldr	r1, [r7, #4]
  400b84:	fb01 f202 	mul.w	r2, r1, r2
  400b88:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  400b8c:	fb01 f202 	mul.w	r2, r1, r2
  400b90:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD card:
	 * memory capacity = (C_SIZE+1) * 512K byte
	 */
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
  400b92:	4b24      	ldr	r3, [pc, #144]	; (400c24 <sd_decode_csd+0xe0>)
  400b94:	681b      	ldr	r3, [r3, #0]
  400b96:	f103 0012 	add.w	r0, r3, #18
  400b9a:	2302      	movs	r3, #2
  400b9c:	227e      	movs	r2, #126	; 0x7e
  400b9e:	2180      	movs	r1, #128	; 0x80
  400ba0:	4c21      	ldr	r4, [pc, #132]	; (400c28 <sd_decode_csd+0xe4>)
  400ba2:	47a0      	blx	r4
  400ba4:	4603      	mov	r3, r0
  400ba6:	2b00      	cmp	r3, #0
  400ba8:	d00f      	beq.n	400bca <sd_decode_csd+0x86>
		sd_mmc_card->capacity =
  400baa:	4b1e      	ldr	r3, [pc, #120]	; (400c24 <sd_decode_csd+0xe0>)
  400bac:	681c      	ldr	r4, [r3, #0]
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
  400bae:	4b1d      	ldr	r3, [pc, #116]	; (400c24 <sd_decode_csd+0xe0>)
  400bb0:	681b      	ldr	r3, [r3, #0]
  400bb2:	f103 0012 	add.w	r0, r3, #18
  400bb6:	2316      	movs	r3, #22
  400bb8:	2230      	movs	r2, #48	; 0x30
  400bba:	2180      	movs	r1, #128	; 0x80
  400bbc:	4d1a      	ldr	r5, [pc, #104]	; (400c28 <sd_decode_csd+0xe4>)
  400bbe:	47a8      	blx	r5
  400bc0:	4603      	mov	r3, r0
				* 512;
  400bc2:	3301      	adds	r3, #1
  400bc4:	025b      	lsls	r3, r3, #9
		sd_mmc_card->capacity =
  400bc6:	6063      	str	r3, [r4, #4]
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
				/ 1024;
	}
}
  400bc8:	e028      	b.n	400c1c <sd_decode_csd+0xd8>
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
  400bca:	4b16      	ldr	r3, [pc, #88]	; (400c24 <sd_decode_csd+0xe0>)
  400bcc:	681b      	ldr	r3, [r3, #0]
  400bce:	f103 0012 	add.w	r0, r3, #18
  400bd2:	230c      	movs	r3, #12
  400bd4:	223e      	movs	r2, #62	; 0x3e
  400bd6:	2180      	movs	r1, #128	; 0x80
  400bd8:	4c13      	ldr	r4, [pc, #76]	; (400c28 <sd_decode_csd+0xe4>)
  400bda:	47a0      	blx	r4
  400bdc:	4603      	mov	r3, r0
  400bde:	1c5c      	adds	r4, r3, #1
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
  400be0:	4b10      	ldr	r3, [pc, #64]	; (400c24 <sd_decode_csd+0xe0>)
  400be2:	681b      	ldr	r3, [r3, #0]
  400be4:	f103 0012 	add.w	r0, r3, #18
  400be8:	2303      	movs	r3, #3
  400bea:	222f      	movs	r2, #47	; 0x2f
  400bec:	2180      	movs	r1, #128	; 0x80
  400bee:	4d0e      	ldr	r5, [pc, #56]	; (400c28 <sd_decode_csd+0xe4>)
  400bf0:	47a8      	blx	r5
  400bf2:	4603      	mov	r3, r0
  400bf4:	3302      	adds	r3, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
  400bf6:	fa04 f303 	lsl.w	r3, r4, r3
  400bfa:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
  400bfc:	4b09      	ldr	r3, [pc, #36]	; (400c24 <sd_decode_csd+0xe0>)
  400bfe:	681c      	ldr	r4, [r3, #0]
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
  400c00:	4b08      	ldr	r3, [pc, #32]	; (400c24 <sd_decode_csd+0xe0>)
  400c02:	681b      	ldr	r3, [r3, #0]
  400c04:	f103 0012 	add.w	r0, r3, #18
  400c08:	2304      	movs	r3, #4
  400c0a:	2250      	movs	r2, #80	; 0x50
  400c0c:	2180      	movs	r1, #128	; 0x80
  400c0e:	4d06      	ldr	r5, [pc, #24]	; (400c28 <sd_decode_csd+0xe4>)
  400c10:	47a8      	blx	r5
  400c12:	4602      	mov	r2, r0
		sd_mmc_card->capacity = blocknr *
  400c14:	683b      	ldr	r3, [r7, #0]
  400c16:	4093      	lsls	r3, r2
				/ 1024;
  400c18:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
  400c1a:	6063      	str	r3, [r4, #4]
}
  400c1c:	bf00      	nop
  400c1e:	3710      	adds	r7, #16
  400c20:	46bd      	mov	sp, r7
  400c22:	bdb0      	pop	{r4, r5, r7, pc}
  400c24:	20000c70 	.word	0x20000c70
  400c28:	004001b5 	.word	0x004001b5
  400c2c:	00410d38 	.word	0x00410d38
  400c30:	00410d54 	.word	0x00410d54

00400c34 <sd_mmc_cmd13>:
 * This function waits the clear of the busy flag
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd13(void)
{
  400c34:	b580      	push	{r7, lr}
  400c36:	b082      	sub	sp, #8
  400c38:	af00      	add	r7, sp, #0
	/* Wait for data ready status.
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	nec_timeout = 200000;
  400c3a:	4b11      	ldr	r3, [pc, #68]	; (400c80 <sd_mmc_cmd13+0x4c>)
  400c3c:	607b      	str	r3, [r7, #4]
	do {
		if (sd_mmc_is_spi()) {
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
  400c3e:	2100      	movs	r1, #0
  400c40:	f641 300d 	movw	r0, #6925	; 0x1b0d
  400c44:	4b0f      	ldr	r3, [pc, #60]	; (400c84 <sd_mmc_cmd13+0x50>)
  400c46:	4798      	blx	r3
  400c48:	4603      	mov	r3, r0
  400c4a:	f083 0301 	eor.w	r3, r3, #1
  400c4e:	b2db      	uxtb	r3, r3
  400c50:	2b00      	cmp	r3, #0
  400c52:	d001      	beq.n	400c58 <sd_mmc_cmd13+0x24>
				return false;
  400c54:	2300      	movs	r3, #0
  400c56:	e00e      	b.n	400c76 <sd_mmc_cmd13+0x42>
			}
			// Check busy flag
			if (!(driver_get_response() & 0xFF)) {
  400c58:	4b0b      	ldr	r3, [pc, #44]	; (400c88 <sd_mmc_cmd13+0x54>)
  400c5a:	4798      	blx	r3
  400c5c:	4603      	mov	r3, r0
  400c5e:	b2db      	uxtb	r3, r3
  400c60:	2b00      	cmp	r3, #0
  400c62:	d006      	beq.n	400c72 <sd_mmc_cmd13+0x3e>
			// Check busy flag
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
				break;
			}
		}
		if (nec_timeout-- == 0) {
  400c64:	687b      	ldr	r3, [r7, #4]
  400c66:	1e5a      	subs	r2, r3, #1
  400c68:	607a      	str	r2, [r7, #4]
  400c6a:	2b00      	cmp	r3, #0
  400c6c:	d1e7      	bne.n	400c3e <sd_mmc_cmd13+0xa>
			sd_mmc_debug("%s: CMD13 Busy timeout\n\r", __func__);
			return false;
  400c6e:	2300      	movs	r3, #0
  400c70:	e001      	b.n	400c76 <sd_mmc_cmd13+0x42>
				break;
  400c72:	bf00      	nop
		}
	} while (1);

	return true;
  400c74:	2301      	movs	r3, #1
}
  400c76:	4618      	mov	r0, r3
  400c78:	3708      	adds	r7, #8
  400c7a:	46bd      	mov	sp, r7
  400c7c:	bd80      	pop	{r7, pc}
  400c7e:	bf00      	nop
  400c80:	00030d40 	.word	0x00030d40
  400c84:	00401fe9 	.word	0x00401fe9
  400c88:	004021bd 	.word	0x004021bd

00400c8c <sdio_cmd52>:
 *
 * \return true if success, otherwise false
 */
static bool sdio_cmd52(uint8_t rw_flag, uint8_t func_nb,
		uint32_t reg_addr, uint8_t rd_after_wr, uint8_t *io_data)
{
  400c8c:	b580      	push	{r7, lr}
  400c8e:	b082      	sub	sp, #8
  400c90:	af00      	add	r7, sp, #0
  400c92:	603a      	str	r2, [r7, #0]
  400c94:	461a      	mov	r2, r3
  400c96:	4603      	mov	r3, r0
  400c98:	71fb      	strb	r3, [r7, #7]
  400c9a:	460b      	mov	r3, r1
  400c9c:	71bb      	strb	r3, [r7, #6]
  400c9e:	4613      	mov	r3, r2
  400ca0:	717b      	strb	r3, [r7, #5]
	Assert(io_data != NULL);
	if (!driver_send_cmd(SDIO_CMD52_IO_RW_DIRECT,
		((uint32_t)*io_data << SDIO_CMD52_WR_DATA)
  400ca2:	693b      	ldr	r3, [r7, #16]
  400ca4:	781b      	ldrb	r3, [r3, #0]
  400ca6:	461a      	mov	r2, r3
		| ((uint32_t)rw_flag << SDIO_CMD52_RW_FLAG)
  400ca8:	79fb      	ldrb	r3, [r7, #7]
  400caa:	07db      	lsls	r3, r3, #31
  400cac:	431a      	orrs	r2, r3
		| ((uint32_t)func_nb << SDIO_CMD52_FUNCTION_NUM)
  400cae:	79bb      	ldrb	r3, [r7, #6]
  400cb0:	071b      	lsls	r3, r3, #28
  400cb2:	431a      	orrs	r2, r3
		| ((uint32_t)rd_after_wr << SDIO_CMD52_RAW_FLAG)
  400cb4:	797b      	ldrb	r3, [r7, #5]
  400cb6:	06db      	lsls	r3, r3, #27
  400cb8:	431a      	orrs	r2, r3
		| ((uint32_t)reg_addr << SDIO_CMD52_REG_ADRR))) {
  400cba:	683b      	ldr	r3, [r7, #0]
  400cbc:	025b      	lsls	r3, r3, #9
	if (!driver_send_cmd(SDIO_CMD52_IO_RW_DIRECT,
  400cbe:	4313      	orrs	r3, r2
  400cc0:	4619      	mov	r1, r3
  400cc2:	f241 3034 	movw	r0, #4916	; 0x1334
  400cc6:	4b0a      	ldr	r3, [pc, #40]	; (400cf0 <sdio_cmd52+0x64>)
  400cc8:	4798      	blx	r3
  400cca:	4603      	mov	r3, r0
  400ccc:	f083 0301 	eor.w	r3, r3, #1
  400cd0:	b2db      	uxtb	r3, r3
  400cd2:	2b00      	cmp	r3, #0
  400cd4:	d001      	beq.n	400cda <sdio_cmd52+0x4e>
		return false;
  400cd6:	2300      	movs	r3, #0
  400cd8:	e006      	b.n	400ce8 <sdio_cmd52+0x5c>
	}
	*io_data = driver_get_response() & 0xFF;
  400cda:	4b06      	ldr	r3, [pc, #24]	; (400cf4 <sdio_cmd52+0x68>)
  400cdc:	4798      	blx	r3
  400cde:	4603      	mov	r3, r0
  400ce0:	b2da      	uxtb	r2, r3
  400ce2:	693b      	ldr	r3, [r7, #16]
  400ce4:	701a      	strb	r2, [r3, #0]
	return true;
  400ce6:	2301      	movs	r3, #1
}
  400ce8:	4618      	mov	r0, r3
  400cea:	3708      	adds	r7, #8
  400cec:	46bd      	mov	sp, r7
  400cee:	bd80      	pop	{r7, pc}
  400cf0:	00401fe9 	.word	0x00401fe9
  400cf4:	004021bd 	.word	0x004021bd

00400cf8 <sd_acmd51>:
 *
 *
 * \return true if success, otherwise false
 */
static bool sd_acmd51(void)
{
  400cf8:	b590      	push	{r4, r7, lr}
  400cfa:	b085      	sub	sp, #20
  400cfc:	af02      	add	r7, sp, #8
	uint8_t scr[SD_SCR_REG_BSIZE];

	// CMD55 - Indicate to the card that the next command is an
	// application specific command rather than a standard command.
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
  400cfe:	4b36      	ldr	r3, [pc, #216]	; (400dd8 <sd_acmd51+0xe0>)
  400d00:	681b      	ldr	r3, [r3, #0]
  400d02:	899b      	ldrh	r3, [r3, #12]
  400d04:	041b      	lsls	r3, r3, #16
  400d06:	4619      	mov	r1, r3
  400d08:	f241 1037 	movw	r0, #4407	; 0x1137
  400d0c:	4b33      	ldr	r3, [pc, #204]	; (400ddc <sd_acmd51+0xe4>)
  400d0e:	4798      	blx	r3
  400d10:	4603      	mov	r3, r0
  400d12:	f083 0301 	eor.w	r3, r3, #1
  400d16:	b2db      	uxtb	r3, r3
  400d18:	2b00      	cmp	r3, #0
  400d1a:	d001      	beq.n	400d20 <sd_acmd51+0x28>
		return false;
  400d1c:	2300      	movs	r3, #0
  400d1e:	e057      	b.n	400dd0 <sd_acmd51+0xd8>
	}
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
  400d20:	2301      	movs	r3, #1
  400d22:	9300      	str	r3, [sp, #0]
  400d24:	2301      	movs	r3, #1
  400d26:	2208      	movs	r2, #8
  400d28:	2100      	movs	r1, #0
  400d2a:	482d      	ldr	r0, [pc, #180]	; (400de0 <sd_acmd51+0xe8>)
  400d2c:	4c2d      	ldr	r4, [pc, #180]	; (400de4 <sd_acmd51+0xec>)
  400d2e:	47a0      	blx	r4
  400d30:	4603      	mov	r3, r0
  400d32:	f083 0301 	eor.w	r3, r3, #1
  400d36:	b2db      	uxtb	r3, r3
  400d38:	2b00      	cmp	r3, #0
  400d3a:	d001      	beq.n	400d40 <sd_acmd51+0x48>
			SD_SCR_REG_BSIZE, 1, true)) {
		return false;
  400d3c:	2300      	movs	r3, #0
  400d3e:	e047      	b.n	400dd0 <sd_acmd51+0xd8>
	}
	if (!driver_start_read_blocks(scr, 1)) {
  400d40:	463b      	mov	r3, r7
  400d42:	2101      	movs	r1, #1
  400d44:	4618      	mov	r0, r3
  400d46:	4b28      	ldr	r3, [pc, #160]	; (400de8 <sd_acmd51+0xf0>)
  400d48:	4798      	blx	r3
  400d4a:	4603      	mov	r3, r0
  400d4c:	f083 0301 	eor.w	r3, r3, #1
  400d50:	b2db      	uxtb	r3, r3
  400d52:	2b00      	cmp	r3, #0
  400d54:	d001      	beq.n	400d5a <sd_acmd51+0x62>
		return false;
  400d56:	2300      	movs	r3, #0
  400d58:	e03a      	b.n	400dd0 <sd_acmd51+0xd8>
	}
	if (!driver_wait_end_of_read_blocks()) {
  400d5a:	4b24      	ldr	r3, [pc, #144]	; (400dec <sd_acmd51+0xf4>)
  400d5c:	4798      	blx	r3
  400d5e:	4603      	mov	r3, r0
  400d60:	f083 0301 	eor.w	r3, r3, #1
  400d64:	b2db      	uxtb	r3, r3
  400d66:	2b00      	cmp	r3, #0
  400d68:	d001      	beq.n	400d6e <sd_acmd51+0x76>
		return false;
  400d6a:	2300      	movs	r3, #0
  400d6c:	e030      	b.n	400dd0 <sd_acmd51+0xd8>
	}

	// Get SD Memory Card - Spec. Version
	switch (SD_SCR_SD_SPEC(scr)) {
  400d6e:	4638      	mov	r0, r7
  400d70:	2304      	movs	r3, #4
  400d72:	2238      	movs	r2, #56	; 0x38
  400d74:	2140      	movs	r1, #64	; 0x40
  400d76:	4c1e      	ldr	r4, [pc, #120]	; (400df0 <sd_acmd51+0xf8>)
  400d78:	47a0      	blx	r4
  400d7a:	4603      	mov	r3, r0
  400d7c:	2b01      	cmp	r3, #1
  400d7e:	d009      	beq.n	400d94 <sd_acmd51+0x9c>
  400d80:	2b01      	cmp	r3, #1
  400d82:	d302      	bcc.n	400d8a <sd_acmd51+0x92>
  400d84:	2b02      	cmp	r3, #2
  400d86:	d00a      	beq.n	400d9e <sd_acmd51+0xa6>
  400d88:	e01c      	b.n	400dc4 <sd_acmd51+0xcc>
	case SD_SCR_SD_SPEC_1_0_01:
		sd_mmc_card->version = CARD_VER_SD_1_0;
  400d8a:	4b13      	ldr	r3, [pc, #76]	; (400dd8 <sd_acmd51+0xe0>)
  400d8c:	681b      	ldr	r3, [r3, #0]
  400d8e:	2210      	movs	r2, #16
  400d90:	741a      	strb	r2, [r3, #16]
		break;
  400d92:	e01c      	b.n	400dce <sd_acmd51+0xd6>

	case SD_SCR_SD_SPEC_1_10:
		sd_mmc_card->version = CARD_VER_SD_1_10;
  400d94:	4b10      	ldr	r3, [pc, #64]	; (400dd8 <sd_acmd51+0xe0>)
  400d96:	681b      	ldr	r3, [r3, #0]
  400d98:	221a      	movs	r2, #26
  400d9a:	741a      	strb	r2, [r3, #16]
		break;
  400d9c:	e017      	b.n	400dce <sd_acmd51+0xd6>

	case SD_SCR_SD_SPEC_2_00:
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
  400d9e:	4638      	mov	r0, r7
  400da0:	2301      	movs	r3, #1
  400da2:	222f      	movs	r2, #47	; 0x2f
  400da4:	2140      	movs	r1, #64	; 0x40
  400da6:	4c12      	ldr	r4, [pc, #72]	; (400df0 <sd_acmd51+0xf8>)
  400da8:	47a0      	blx	r4
  400daa:	4603      	mov	r3, r0
  400dac:	2b01      	cmp	r3, #1
  400dae:	d104      	bne.n	400dba <sd_acmd51+0xc2>
			sd_mmc_card->version = CARD_VER_SD_3_0;
  400db0:	4b09      	ldr	r3, [pc, #36]	; (400dd8 <sd_acmd51+0xe0>)
  400db2:	681b      	ldr	r3, [r3, #0]
  400db4:	2230      	movs	r2, #48	; 0x30
  400db6:	741a      	strb	r2, [r3, #16]
		} else {
			sd_mmc_card->version = CARD_VER_SD_2_0;
		}
		break;
  400db8:	e009      	b.n	400dce <sd_acmd51+0xd6>
			sd_mmc_card->version = CARD_VER_SD_2_0;
  400dba:	4b07      	ldr	r3, [pc, #28]	; (400dd8 <sd_acmd51+0xe0>)
  400dbc:	681b      	ldr	r3, [r3, #0]
  400dbe:	2220      	movs	r2, #32
  400dc0:	741a      	strb	r2, [r3, #16]
		break;
  400dc2:	e004      	b.n	400dce <sd_acmd51+0xd6>

	default:
		sd_mmc_card->version = CARD_VER_SD_1_0;
  400dc4:	4b04      	ldr	r3, [pc, #16]	; (400dd8 <sd_acmd51+0xe0>)
  400dc6:	681b      	ldr	r3, [r3, #0]
  400dc8:	2210      	movs	r2, #16
  400dca:	741a      	strb	r2, [r3, #16]
		break;
  400dcc:	bf00      	nop
	}
	return true;
  400dce:	2301      	movs	r3, #1
}
  400dd0:	4618      	mov	r0, r3
  400dd2:	370c      	adds	r7, #12
  400dd4:	46bd      	mov	sp, r7
  400dd6:	bd90      	pop	{r4, r7, pc}
  400dd8:	20000c70 	.word	0x20000c70
  400ddc:	00401fe9 	.word	0x00401fe9
  400de0:	00081133 	.word	0x00081133
  400de4:	00402011 	.word	0x00402011
  400de8:	00402269 	.word	0x00402269
  400dec:	004022f9 	.word	0x004022f9
  400df0:	004001b5 	.word	0x004001b5

00400df4 <sd_mmc_select_slot>:
 * \retval SD_MMC_ERR_UNUSABLE Unusable card
 * \retval SD_MMC_INIT_ONGOING Card initialization requested
 * \retval SD_MMC_OK           Card present
 */
static sd_mmc_err_t sd_mmc_select_slot(uint8_t slot)
{
  400df4:	b580      	push	{r7, lr}
  400df6:	b082      	sub	sp, #8
  400df8:	af00      	add	r7, sp, #0
  400dfa:	4603      	mov	r3, r0
  400dfc:	71fb      	strb	r3, [r7, #7]
	if (slot >= SD_MMC_MEM_CNT) {
  400dfe:	79fb      	ldrb	r3, [r7, #7]
  400e00:	2b00      	cmp	r3, #0
  400e02:	d001      	beq.n	400e08 <sd_mmc_select_slot+0x14>
		return SD_MMC_ERR_SLOT;
  400e04:	2304      	movs	r3, #4
  400e06:	e0a5      	b.n	400f54 <sd_mmc_select_slot+0x160>
	}
	Assert(sd_mmc_nb_block_remaining == 0);

#if (defined SD_MMC_0_CD_GPIO)
	//! Card Detect pins
	if (ioport_get_pin_level(sd_mmc_cards[slot].cd_gpio)
  400e08:	79fa      	ldrb	r2, [r7, #7]
  400e0a:	4954      	ldr	r1, [pc, #336]	; (400f5c <sd_mmc_select_slot+0x168>)
  400e0c:	4613      	mov	r3, r2
  400e0e:	00db      	lsls	r3, r3, #3
  400e10:	4413      	add	r3, r2
  400e12:	009b      	lsls	r3, r3, #2
  400e14:	440b      	add	r3, r1
  400e16:	3308      	adds	r3, #8
  400e18:	681b      	ldr	r3, [r3, #0]
  400e1a:	4618      	mov	r0, r3
  400e1c:	4b50      	ldr	r3, [pc, #320]	; (400f60 <sd_mmc_select_slot+0x16c>)
  400e1e:	4798      	blx	r3
  400e20:	4603      	mov	r3, r0
  400e22:	2b00      	cmp	r3, #0
  400e24:	d018      	beq.n	400e58 <sd_mmc_select_slot+0x64>
			!= SD_MMC_0_CD_DETECT_VALUE) {
		if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
  400e26:	79fa      	ldrb	r2, [r7, #7]
  400e28:	494c      	ldr	r1, [pc, #304]	; (400f5c <sd_mmc_select_slot+0x168>)
  400e2a:	4613      	mov	r3, r2
  400e2c:	00db      	lsls	r3, r3, #3
  400e2e:	4413      	add	r3, r2
  400e30:	009b      	lsls	r3, r3, #2
  400e32:	440b      	add	r3, r1
  400e34:	330e      	adds	r3, #14
  400e36:	781b      	ldrb	r3, [r3, #0]
  400e38:	2b01      	cmp	r3, #1
  400e3a:	d101      	bne.n	400e40 <sd_mmc_select_slot+0x4c>
			SD_MMC_STOP_TIMEOUT();
  400e3c:	4b49      	ldr	r3, [pc, #292]	; (400f64 <sd_mmc_select_slot+0x170>)
  400e3e:	4798      	blx	r3
		}
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
  400e40:	79fa      	ldrb	r2, [r7, #7]
  400e42:	4946      	ldr	r1, [pc, #280]	; (400f5c <sd_mmc_select_slot+0x168>)
  400e44:	4613      	mov	r3, r2
  400e46:	00db      	lsls	r3, r3, #3
  400e48:	4413      	add	r3, r2
  400e4a:	009b      	lsls	r3, r3, #2
  400e4c:	440b      	add	r3, r1
  400e4e:	330e      	adds	r3, #14
  400e50:	2204      	movs	r2, #4
  400e52:	701a      	strb	r2, [r3, #0]
		return SD_MMC_ERR_NO_CARD;
  400e54:	2302      	movs	r3, #2
  400e56:	e07d      	b.n	400f54 <sd_mmc_select_slot+0x160>
	}
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD) {
  400e58:	79fa      	ldrb	r2, [r7, #7]
  400e5a:	4940      	ldr	r1, [pc, #256]	; (400f5c <sd_mmc_select_slot+0x168>)
  400e5c:	4613      	mov	r3, r2
  400e5e:	00db      	lsls	r3, r3, #3
  400e60:	4413      	add	r3, r2
  400e62:	009b      	lsls	r3, r3, #2
  400e64:	440b      	add	r3, r1
  400e66:	330e      	adds	r3, #14
  400e68:	781b      	ldrb	r3, [r3, #0]
  400e6a:	2b04      	cmp	r3, #4
  400e6c:	d10d      	bne.n	400e8a <sd_mmc_select_slot+0x96>
		// A card plug on going, but this is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_DEBOUNCE;
  400e6e:	79fa      	ldrb	r2, [r7, #7]
  400e70:	493a      	ldr	r1, [pc, #232]	; (400f5c <sd_mmc_select_slot+0x168>)
  400e72:	4613      	mov	r3, r2
  400e74:	00db      	lsls	r3, r3, #3
  400e76:	4413      	add	r3, r2
  400e78:	009b      	lsls	r3, r3, #2
  400e7a:	440b      	add	r3, r1
  400e7c:	330e      	adds	r3, #14
  400e7e:	2201      	movs	r2, #1
  400e80:	701a      	strb	r2, [r3, #0]
		// Debounce + Power On Setup
		SD_MMC_START_TIMEOUT();
  400e82:	4b39      	ldr	r3, [pc, #228]	; (400f68 <sd_mmc_select_slot+0x174>)
  400e84:	4798      	blx	r3
		return SD_MMC_ERR_NO_CARD;
  400e86:	2302      	movs	r3, #2
  400e88:	e064      	b.n	400f54 <sd_mmc_select_slot+0x160>
	}
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
  400e8a:	79fa      	ldrb	r2, [r7, #7]
  400e8c:	4933      	ldr	r1, [pc, #204]	; (400f5c <sd_mmc_select_slot+0x168>)
  400e8e:	4613      	mov	r3, r2
  400e90:	00db      	lsls	r3, r3, #3
  400e92:	4413      	add	r3, r2
  400e94:	009b      	lsls	r3, r3, #2
  400e96:	440b      	add	r3, r1
  400e98:	330e      	adds	r3, #14
  400e9a:	781b      	ldrb	r3, [r3, #0]
  400e9c:	2b01      	cmp	r3, #1
  400e9e:	d130      	bne.n	400f02 <sd_mmc_select_slot+0x10e>
		if (!SD_MMC_IS_TIMEOUT()) {
  400ea0:	4b32      	ldr	r3, [pc, #200]	; (400f6c <sd_mmc_select_slot+0x178>)
  400ea2:	4798      	blx	r3
  400ea4:	4603      	mov	r3, r0
  400ea6:	f083 0301 	eor.w	r3, r3, #1
  400eaa:	b2db      	uxtb	r3, r3
  400eac:	2b00      	cmp	r3, #0
  400eae:	d001      	beq.n	400eb4 <sd_mmc_select_slot+0xc0>
			// Debounce on going
			return SD_MMC_ERR_NO_CARD;
  400eb0:	2302      	movs	r3, #2
  400eb2:	e04f      	b.n	400f54 <sd_mmc_select_slot+0x160>
		}
		// Card is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
  400eb4:	79fa      	ldrb	r2, [r7, #7]
  400eb6:	4929      	ldr	r1, [pc, #164]	; (400f5c <sd_mmc_select_slot+0x168>)
  400eb8:	4613      	mov	r3, r2
  400eba:	00db      	lsls	r3, r3, #3
  400ebc:	4413      	add	r3, r2
  400ebe:	009b      	lsls	r3, r3, #2
  400ec0:	440b      	add	r3, r1
  400ec2:	330e      	adds	r3, #14
  400ec4:	2202      	movs	r2, #2
  400ec6:	701a      	strb	r2, [r3, #0]
		// Set 1-bit bus width and low clock for initialization
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
  400ec8:	79fa      	ldrb	r2, [r7, #7]
  400eca:	4924      	ldr	r1, [pc, #144]	; (400f5c <sd_mmc_select_slot+0x168>)
  400ecc:	4613      	mov	r3, r2
  400ece:	00db      	lsls	r3, r3, #3
  400ed0:	4413      	add	r3, r2
  400ed2:	009b      	lsls	r3, r3, #2
  400ed4:	440b      	add	r3, r1
  400ed6:	4a26      	ldr	r2, [pc, #152]	; (400f70 <sd_mmc_select_slot+0x17c>)
  400ed8:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].bus_width = 1;
  400eda:	79fa      	ldrb	r2, [r7, #7]
  400edc:	491f      	ldr	r1, [pc, #124]	; (400f5c <sd_mmc_select_slot+0x168>)
  400ede:	4613      	mov	r3, r2
  400ee0:	00db      	lsls	r3, r3, #3
  400ee2:	4413      	add	r3, r2
  400ee4:	009b      	lsls	r3, r3, #2
  400ee6:	440b      	add	r3, r1
  400ee8:	3311      	adds	r3, #17
  400eea:	2201      	movs	r2, #1
  400eec:	701a      	strb	r2, [r3, #0]
		sd_mmc_cards[slot].high_speed = 0;
  400eee:	79fa      	ldrb	r2, [r7, #7]
  400ef0:	491a      	ldr	r1, [pc, #104]	; (400f5c <sd_mmc_select_slot+0x168>)
  400ef2:	4613      	mov	r3, r2
  400ef4:	00db      	lsls	r3, r3, #3
  400ef6:	4413      	add	r3, r2
  400ef8:	009b      	lsls	r3, r3, #2
  400efa:	440b      	add	r3, r1
  400efc:	3322      	adds	r3, #34	; 0x22
  400efe:	2200      	movs	r2, #0
  400f00:	701a      	strb	r2, [r3, #0]
	}
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
  400f02:	79fa      	ldrb	r2, [r7, #7]
  400f04:	4915      	ldr	r1, [pc, #84]	; (400f5c <sd_mmc_select_slot+0x168>)
  400f06:	4613      	mov	r3, r2
  400f08:	00db      	lsls	r3, r3, #3
  400f0a:	4413      	add	r3, r2
  400f0c:	009b      	lsls	r3, r3, #2
  400f0e:	440b      	add	r3, r1
  400f10:	330e      	adds	r3, #14
  400f12:	781b      	ldrb	r3, [r3, #0]
  400f14:	2b03      	cmp	r3, #3
  400f16:	d101      	bne.n	400f1c <sd_mmc_select_slot+0x128>
		return SD_MMC_ERR_UNUSABLE;
  400f18:	2303      	movs	r3, #3
  400f1a:	e01b      	b.n	400f54 <sd_mmc_select_slot+0x160>
		sd_mmc_cards[slot].high_speed = 0;
	}
#endif

	// Initialize interface
	sd_mmc_slot_sel = slot;
  400f1c:	4a15      	ldr	r2, [pc, #84]	; (400f74 <sd_mmc_select_slot+0x180>)
  400f1e:	79fb      	ldrb	r3, [r7, #7]
  400f20:	7013      	strb	r3, [r2, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
  400f22:	79fa      	ldrb	r2, [r7, #7]
  400f24:	4613      	mov	r3, r2
  400f26:	00db      	lsls	r3, r3, #3
  400f28:	4413      	add	r3, r2
  400f2a:	009b      	lsls	r3, r3, #2
  400f2c:	4a0b      	ldr	r2, [pc, #44]	; (400f5c <sd_mmc_select_slot+0x168>)
  400f2e:	4413      	add	r3, r2
  400f30:	4a11      	ldr	r2, [pc, #68]	; (400f78 <sd_mmc_select_slot+0x184>)
  400f32:	6013      	str	r3, [r2, #0]
	sd_mmc_configure_slot();
  400f34:	4b11      	ldr	r3, [pc, #68]	; (400f7c <sd_mmc_select_slot+0x188>)
  400f36:	4798      	blx	r3
	return (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_INIT) ?
  400f38:	79fa      	ldrb	r2, [r7, #7]
  400f3a:	4908      	ldr	r1, [pc, #32]	; (400f5c <sd_mmc_select_slot+0x168>)
  400f3c:	4613      	mov	r3, r2
  400f3e:	00db      	lsls	r3, r3, #3
  400f40:	4413      	add	r3, r2
  400f42:	009b      	lsls	r3, r3, #2
  400f44:	440b      	add	r3, r1
  400f46:	330e      	adds	r3, #14
  400f48:	781b      	ldrb	r3, [r3, #0]
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
  400f4a:	2b02      	cmp	r3, #2
  400f4c:	bf0c      	ite	eq
  400f4e:	2301      	moveq	r3, #1
  400f50:	2300      	movne	r3, #0
  400f52:	b2db      	uxtb	r3, r3
}
  400f54:	4618      	mov	r0, r3
  400f56:	3708      	adds	r7, #8
  400f58:	46bd      	mov	sp, r7
  400f5a:	bd80      	pop	{r7, pc}
  400f5c:	200000fc 	.word	0x200000fc
  400f60:	0040036d 	.word	0x0040036d
  400f64:	004004cd 	.word	0x004004cd
  400f68:	004003bd 	.word	0x004003bd
  400f6c:	0040048d 	.word	0x0040048d
  400f70:	00061a80 	.word	0x00061a80
  400f74:	20000c6c 	.word	0x20000c6c
  400f78:	20000c70 	.word	0x20000c70
  400f7c:	00400f81 	.word	0x00400f81

00400f80 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
  400f80:	b598      	push	{r3, r4, r7, lr}
  400f82:	af00      	add	r7, sp, #0
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
  400f84:	4b0a      	ldr	r3, [pc, #40]	; (400fb0 <sd_mmc_configure_slot+0x30>)
  400f86:	7818      	ldrb	r0, [r3, #0]
  400f88:	4b0a      	ldr	r3, [pc, #40]	; (400fb4 <sd_mmc_configure_slot+0x34>)
  400f8a:	681b      	ldr	r3, [r3, #0]
  400f8c:	6819      	ldr	r1, [r3, #0]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
  400f8e:	4b09      	ldr	r3, [pc, #36]	; (400fb4 <sd_mmc_configure_slot+0x34>)
  400f90:	681b      	ldr	r3, [r3, #0]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
  400f92:	7c5a      	ldrb	r2, [r3, #17]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
  400f94:	4b07      	ldr	r3, [pc, #28]	; (400fb4 <sd_mmc_configure_slot+0x34>)
  400f96:	681b      	ldr	r3, [r3, #0]
  400f98:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
  400f9c:	2b00      	cmp	r3, #0
  400f9e:	bf14      	ite	ne
  400fa0:	2301      	movne	r3, #1
  400fa2:	2300      	moveq	r3, #0
  400fa4:	b2db      	uxtb	r3, r3
  400fa6:	4c04      	ldr	r4, [pc, #16]	; (400fb8 <sd_mmc_configure_slot+0x38>)
  400fa8:	47a0      	blx	r4
}
  400faa:	bf00      	nop
  400fac:	bd98      	pop	{r3, r4, r7, pc}
  400fae:	bf00      	nop
  400fb0:	20000c6c 	.word	0x20000c6c
  400fb4:	20000c70 	.word	0x20000c70
  400fb8:	00401f0d 	.word	0x00401f0d

00400fbc <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
  400fbc:	b580      	push	{r7, lr}
  400fbe:	af00      	add	r7, sp, #0
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
  400fc0:	4b05      	ldr	r3, [pc, #20]	; (400fd8 <sd_mmc_deselect_slot+0x1c>)
  400fc2:	781b      	ldrb	r3, [r3, #0]
  400fc4:	2b00      	cmp	r3, #0
  400fc6:	d104      	bne.n	400fd2 <sd_mmc_deselect_slot+0x16>
		driver_deselect_device(sd_mmc_slot_sel);
  400fc8:	4b03      	ldr	r3, [pc, #12]	; (400fd8 <sd_mmc_deselect_slot+0x1c>)
  400fca:	781b      	ldrb	r3, [r3, #0]
  400fcc:	4618      	mov	r0, r3
  400fce:	4b03      	ldr	r3, [pc, #12]	; (400fdc <sd_mmc_deselect_slot+0x20>)
  400fd0:	4798      	blx	r3
	}
}
  400fd2:	bf00      	nop
  400fd4:	bd80      	pop	{r7, pc}
  400fd6:	bf00      	nop
  400fd8:	20000c6c 	.word	0x20000c6c
  400fdc:	00401f6d 	.word	0x00401f6d

00400fe0 <sd_mmc_spi_card_init>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_card_init(void)
{
  400fe0:	b580      	push	{r7, lr}
  400fe2:	b082      	sub	sp, #8
  400fe4:	af00      	add	r7, sp, #0
	uint8_t v2 = 0;
  400fe6:	2300      	movs	r3, #0
  400fe8:	71fb      	strb	r3, [r7, #7]

	// In first, try to install SD/SDIO card
	sd_mmc_card->type = CARD_TYPE_SD;
  400fea:	4b5c      	ldr	r3, [pc, #368]	; (40115c <sd_mmc_spi_card_init+0x17c>)
  400fec:	681b      	ldr	r3, [r3, #0]
  400fee:	2201      	movs	r2, #1
  400ff0:	73da      	strb	r2, [r3, #15]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
  400ff2:	4b5a      	ldr	r3, [pc, #360]	; (40115c <sd_mmc_spi_card_init+0x17c>)
  400ff4:	681b      	ldr	r3, [r3, #0]
  400ff6:	2200      	movs	r2, #0
  400ff8:	741a      	strb	r2, [r3, #16]
	sd_mmc_card->rca = 0;
  400ffa:	4b58      	ldr	r3, [pc, #352]	; (40115c <sd_mmc_spi_card_init+0x17c>)
  400ffc:	681b      	ldr	r3, [r3, #0]
  400ffe:	2200      	movs	r2, #0
  401000:	819a      	strh	r2, [r3, #12]
	sd_mmc_debug("Start SD card install\n\r");

	// Card need of 74 cycles clock minimum to start
	driver_send_clock();
  401002:	4b57      	ldr	r3, [pc, #348]	; (401160 <sd_mmc_spi_card_init+0x180>)
  401004:	4798      	blx	r3

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
  401006:	2100      	movs	r1, #0
  401008:	f44f 5088 	mov.w	r0, #4352	; 0x1100
  40100c:	4b55      	ldr	r3, [pc, #340]	; (401164 <sd_mmc_spi_card_init+0x184>)
  40100e:	4798      	blx	r3
  401010:	4603      	mov	r3, r0
  401012:	f083 0301 	eor.w	r3, r3, #1
  401016:	b2db      	uxtb	r3, r3
  401018:	2b00      	cmp	r3, #0
  40101a:	d001      	beq.n	401020 <sd_mmc_spi_card_init+0x40>
		return false;
  40101c:	2300      	movs	r3, #0
  40101e:	e099      	b.n	401154 <sd_mmc_spi_card_init+0x174>
	}
	if (!sd_cmd8(&v2)) {
  401020:	1dfb      	adds	r3, r7, #7
  401022:	4618      	mov	r0, r3
  401024:	4b50      	ldr	r3, [pc, #320]	; (401168 <sd_mmc_spi_card_init+0x188>)
  401026:	4798      	blx	r3
  401028:	4603      	mov	r3, r0
  40102a:	f083 0301 	eor.w	r3, r3, #1
  40102e:	b2db      	uxtb	r3, r3
  401030:	2b00      	cmp	r3, #0
  401032:	d001      	beq.n	401038 <sd_mmc_spi_card_init+0x58>
		return false;
  401034:	2300      	movs	r3, #0
  401036:	e08d      	b.n	401154 <sd_mmc_spi_card_init+0x174>
	}
	// Try to get the SDIO card's operating condition
	if (!sdio_op_cond()) {
  401038:	4b4c      	ldr	r3, [pc, #304]	; (40116c <sd_mmc_spi_card_init+0x18c>)
  40103a:	4798      	blx	r3
  40103c:	4603      	mov	r3, r0
  40103e:	f083 0301 	eor.w	r3, r3, #1
  401042:	b2db      	uxtb	r3, r3
  401044:	2b00      	cmp	r3, #0
  401046:	d001      	beq.n	40104c <sd_mmc_spi_card_init+0x6c>
		return false;
  401048:	2300      	movs	r3, #0
  40104a:	e083      	b.n	401154 <sd_mmc_spi_card_init+0x174>
	}

	if (sd_mmc_card->type & CARD_TYPE_SD) {
  40104c:	4b43      	ldr	r3, [pc, #268]	; (40115c <sd_mmc_spi_card_init+0x17c>)
  40104e:	681b      	ldr	r3, [r3, #0]
  401050:	7bdb      	ldrb	r3, [r3, #15]
  401052:	f003 0301 	and.w	r3, r3, #1
  401056:	2b00      	cmp	r3, #0
  401058:	d01e      	beq.n	401098 <sd_mmc_spi_card_init+0xb8>
		// Try to get the SD card's operating condition
		if (!sd_spi_op_cond(v2)) {
  40105a:	79fb      	ldrb	r3, [r7, #7]
  40105c:	4618      	mov	r0, r3
  40105e:	4b44      	ldr	r3, [pc, #272]	; (401170 <sd_mmc_spi_card_init+0x190>)
  401060:	4798      	blx	r3
  401062:	4603      	mov	r3, r0
  401064:	f083 0301 	eor.w	r3, r3, #1
  401068:	b2db      	uxtb	r3, r3
  40106a:	2b00      	cmp	r3, #0
  40106c:	d007      	beq.n	40107e <sd_mmc_spi_card_init+0x9e>
			// It is not a SD card
			sd_mmc_debug("Start MMC Install\n\r");
			sd_mmc_card->type = CARD_TYPE_MMC;
  40106e:	4b3b      	ldr	r3, [pc, #236]	; (40115c <sd_mmc_spi_card_init+0x17c>)
  401070:	681b      	ldr	r3, [r3, #0]
  401072:	2202      	movs	r2, #2
  401074:	73da      	strb	r2, [r3, #15]
			return sd_mmc_spi_install_mmc();
  401076:	4b3f      	ldr	r3, [pc, #252]	; (401174 <sd_mmc_spi_card_init+0x194>)
  401078:	4798      	blx	r3
  40107a:	4603      	mov	r3, r0
  40107c:	e06a      	b.n	401154 <sd_mmc_spi_card_init+0x174>
		 * However, to be sure, the CRC OFF command is send.
		 * Unfortunately, specific SDIO card does not support it
		 * (H&D wireless card - HDG104 WiFi SIP)
		 * and the command is send only on SD card.
		 */
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
  40107e:	2100      	movs	r1, #0
  401080:	f241 103b 	movw	r0, #4411	; 0x113b
  401084:	4b37      	ldr	r3, [pc, #220]	; (401164 <sd_mmc_spi_card_init+0x184>)
  401086:	4798      	blx	r3
  401088:	4603      	mov	r3, r0
  40108a:	f083 0301 	eor.w	r3, r3, #1
  40108e:	b2db      	uxtb	r3, r3
  401090:	2b00      	cmp	r3, #0
  401092:	d001      	beq.n	401098 <sd_mmc_spi_card_init+0xb8>
			return false;
  401094:	2300      	movs	r3, #0
  401096:	e05d      	b.n	401154 <sd_mmc_spi_card_init+0x174>
		}
	}
	// SD MEMORY
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  401098:	4b30      	ldr	r3, [pc, #192]	; (40115c <sd_mmc_spi_card_init+0x17c>)
  40109a:	681b      	ldr	r3, [r3, #0]
  40109c:	7bdb      	ldrb	r3, [r3, #15]
  40109e:	f003 0301 	and.w	r3, r3, #1
  4010a2:	2b00      	cmp	r3, #0
  4010a4:	d015      	beq.n	4010d2 <sd_mmc_spi_card_init+0xf2>
		// Get the Card-Specific Data
		if (!sd_mmc_cmd9_spi()) {
  4010a6:	4b34      	ldr	r3, [pc, #208]	; (401178 <sd_mmc_spi_card_init+0x198>)
  4010a8:	4798      	blx	r3
  4010aa:	4603      	mov	r3, r0
  4010ac:	f083 0301 	eor.w	r3, r3, #1
  4010b0:	b2db      	uxtb	r3, r3
  4010b2:	2b00      	cmp	r3, #0
  4010b4:	d001      	beq.n	4010ba <sd_mmc_spi_card_init+0xda>
			return false;
  4010b6:	2300      	movs	r3, #0
  4010b8:	e04c      	b.n	401154 <sd_mmc_spi_card_init+0x174>
		}
		sd_decode_csd();
  4010ba:	4b30      	ldr	r3, [pc, #192]	; (40117c <sd_mmc_spi_card_init+0x19c>)
  4010bc:	4798      	blx	r3
		// Read the SCR to get card version
		if (!sd_acmd51()) {
  4010be:	4b30      	ldr	r3, [pc, #192]	; (401180 <sd_mmc_spi_card_init+0x1a0>)
  4010c0:	4798      	blx	r3
  4010c2:	4603      	mov	r3, r0
  4010c4:	f083 0301 	eor.w	r3, r3, #1
  4010c8:	b2db      	uxtb	r3, r3
  4010ca:	2b00      	cmp	r3, #0
  4010cc:	d001      	beq.n	4010d2 <sd_mmc_spi_card_init+0xf2>
			return false;
  4010ce:	2300      	movs	r3, #0
  4010d0:	e040      	b.n	401154 <sd_mmc_spi_card_init+0x174>
		}
	}
	if (IS_SDIO()) {
  4010d2:	4b22      	ldr	r3, [pc, #136]	; (40115c <sd_mmc_spi_card_init+0x17c>)
  4010d4:	681b      	ldr	r3, [r3, #0]
  4010d6:	7bdb      	ldrb	r3, [r3, #15]
  4010d8:	f003 0304 	and.w	r3, r3, #4
  4010dc:	2b00      	cmp	r3, #0
  4010de:	d009      	beq.n	4010f4 <sd_mmc_spi_card_init+0x114>
		if (!sdio_get_max_speed()) {
  4010e0:	4b28      	ldr	r3, [pc, #160]	; (401184 <sd_mmc_spi_card_init+0x1a4>)
  4010e2:	4798      	blx	r3
  4010e4:	4603      	mov	r3, r0
  4010e6:	f083 0301 	eor.w	r3, r3, #1
  4010ea:	b2db      	uxtb	r3, r3
  4010ec:	2b00      	cmp	r3, #0
  4010ee:	d001      	beq.n	4010f4 <sd_mmc_spi_card_init+0x114>
			return false;
  4010f0:	2300      	movs	r3, #0
  4010f2:	e02f      	b.n	401154 <sd_mmc_spi_card_init+0x174>
		}
	}
	// SD MEMORY not HC, Set default block size
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
  4010f4:	4b19      	ldr	r3, [pc, #100]	; (40115c <sd_mmc_spi_card_init+0x17c>)
  4010f6:	681b      	ldr	r3, [r3, #0]
  4010f8:	7bdb      	ldrb	r3, [r3, #15]
  4010fa:	f003 0301 	and.w	r3, r3, #1
  4010fe:	2b00      	cmp	r3, #0
  401100:	d014      	beq.n	40112c <sd_mmc_spi_card_init+0x14c>
			(0 == (sd_mmc_card->type & CARD_TYPE_HC))) {
  401102:	4b16      	ldr	r3, [pc, #88]	; (40115c <sd_mmc_spi_card_init+0x17c>)
  401104:	681b      	ldr	r3, [r3, #0]
  401106:	7bdb      	ldrb	r3, [r3, #15]
  401108:	f003 0308 	and.w	r3, r3, #8
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
  40110c:	2b00      	cmp	r3, #0
  40110e:	d10d      	bne.n	40112c <sd_mmc_spi_card_init+0x14c>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
  401110:	f44f 7100 	mov.w	r1, #512	; 0x200
  401114:	f241 1010 	movw	r0, #4368	; 0x1110
  401118:	4b12      	ldr	r3, [pc, #72]	; (401164 <sd_mmc_spi_card_init+0x184>)
  40111a:	4798      	blx	r3
  40111c:	4603      	mov	r3, r0
  40111e:	f083 0301 	eor.w	r3, r3, #1
  401122:	b2db      	uxtb	r3, r3
  401124:	2b00      	cmp	r3, #0
  401126:	d001      	beq.n	40112c <sd_mmc_spi_card_init+0x14c>
			return false;
  401128:	2300      	movs	r3, #0
  40112a:	e013      	b.n	401154 <sd_mmc_spi_card_init+0x174>
		}
	}
	// Check communication
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  40112c:	4b0b      	ldr	r3, [pc, #44]	; (40115c <sd_mmc_spi_card_init+0x17c>)
  40112e:	681b      	ldr	r3, [r3, #0]
  401130:	7bdb      	ldrb	r3, [r3, #15]
  401132:	f003 0301 	and.w	r3, r3, #1
  401136:	2b00      	cmp	r3, #0
  401138:	d009      	beq.n	40114e <sd_mmc_spi_card_init+0x16e>
		if (!sd_mmc_cmd13()) {
  40113a:	4b13      	ldr	r3, [pc, #76]	; (401188 <sd_mmc_spi_card_init+0x1a8>)
  40113c:	4798      	blx	r3
  40113e:	4603      	mov	r3, r0
  401140:	f083 0301 	eor.w	r3, r3, #1
  401144:	b2db      	uxtb	r3, r3
  401146:	2b00      	cmp	r3, #0
  401148:	d001      	beq.n	40114e <sd_mmc_spi_card_init+0x16e>
			return false;
  40114a:	2300      	movs	r3, #0
  40114c:	e002      	b.n	401154 <sd_mmc_spi_card_init+0x174>
		}
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
  40114e:	4b0f      	ldr	r3, [pc, #60]	; (40118c <sd_mmc_spi_card_init+0x1ac>)
  401150:	4798      	blx	r3
	return true;
  401152:	2301      	movs	r3, #1
}
  401154:	4618      	mov	r0, r3
  401156:	3708      	adds	r7, #8
  401158:	46bd      	mov	sp, r7
  40115a:	bd80      	pop	{r7, pc}
  40115c:	20000c70 	.word	0x20000c70
  401160:	00401fa5 	.word	0x00401fa5
  401164:	00401fe9 	.word	0x00401fe9
  401168:	00400845 	.word	0x00400845
  40116c:	00400651 	.word	0x00400651
  401170:	00400589 	.word	0x00400589
  401174:	00401191 	.word	0x00401191
  401178:	004009a1 	.word	0x004009a1
  40117c:	00400b45 	.word	0x00400b45
  401180:	00400cf9 	.word	0x00400cf9
  401184:	004006f9 	.word	0x004006f9
  401188:	00400c35 	.word	0x00400c35
  40118c:	00400f81 	.word	0x00400f81

00401190 <sd_mmc_spi_install_mmc>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_install_mmc(void)
{
  401190:	b580      	push	{r7, lr}
  401192:	b082      	sub	sp, #8
  401194:	af00      	add	r7, sp, #0
	uint8_t b_authorize_high_speed;

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
  401196:	2100      	movs	r1, #0
  401198:	f44f 5088 	mov.w	r0, #4352	; 0x1100
  40119c:	4b2e      	ldr	r3, [pc, #184]	; (401258 <sd_mmc_spi_install_mmc+0xc8>)
  40119e:	4798      	blx	r3
  4011a0:	4603      	mov	r3, r0
  4011a2:	f083 0301 	eor.w	r3, r3, #1
  4011a6:	b2db      	uxtb	r3, r3
  4011a8:	2b00      	cmp	r3, #0
  4011aa:	d001      	beq.n	4011b0 <sd_mmc_spi_install_mmc+0x20>
		return false;
  4011ac:	2300      	movs	r3, #0
  4011ae:	e04e      	b.n	40124e <sd_mmc_spi_install_mmc+0xbe>
	}

	if (!mmc_spi_op_cond()) {
  4011b0:	4b2a      	ldr	r3, [pc, #168]	; (40125c <sd_mmc_spi_install_mmc+0xcc>)
  4011b2:	4798      	blx	r3
  4011b4:	4603      	mov	r3, r0
  4011b6:	f083 0301 	eor.w	r3, r3, #1
  4011ba:	b2db      	uxtb	r3, r3
  4011bc:	2b00      	cmp	r3, #0
  4011be:	d001      	beq.n	4011c4 <sd_mmc_spi_install_mmc+0x34>
		return false;
  4011c0:	2300      	movs	r3, #0
  4011c2:	e044      	b.n	40124e <sd_mmc_spi_install_mmc+0xbe>
	}

	// Disable CRC check for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
  4011c4:	2100      	movs	r1, #0
  4011c6:	f241 103b 	movw	r0, #4411	; 0x113b
  4011ca:	4b23      	ldr	r3, [pc, #140]	; (401258 <sd_mmc_spi_install_mmc+0xc8>)
  4011cc:	4798      	blx	r3
  4011ce:	4603      	mov	r3, r0
  4011d0:	f083 0301 	eor.w	r3, r3, #1
  4011d4:	b2db      	uxtb	r3, r3
  4011d6:	2b00      	cmp	r3, #0
  4011d8:	d001      	beq.n	4011de <sd_mmc_spi_install_mmc+0x4e>
		return false;
  4011da:	2300      	movs	r3, #0
  4011dc:	e037      	b.n	40124e <sd_mmc_spi_install_mmc+0xbe>
	}
	// Get the Card-Specific Data
	if (!sd_mmc_cmd9_spi()) {
  4011de:	4b20      	ldr	r3, [pc, #128]	; (401260 <sd_mmc_spi_install_mmc+0xd0>)
  4011e0:	4798      	blx	r3
  4011e2:	4603      	mov	r3, r0
  4011e4:	f083 0301 	eor.w	r3, r3, #1
  4011e8:	b2db      	uxtb	r3, r3
  4011ea:	2b00      	cmp	r3, #0
  4011ec:	d001      	beq.n	4011f2 <sd_mmc_spi_install_mmc+0x62>
		return false;
  4011ee:	2300      	movs	r3, #0
  4011f0:	e02d      	b.n	40124e <sd_mmc_spi_install_mmc+0xbe>
	}
	mmc_decode_csd();
  4011f2:	4b1c      	ldr	r3, [pc, #112]	; (401264 <sd_mmc_spi_install_mmc+0xd4>)
  4011f4:	4798      	blx	r3
	// For MMC 4.0 Higher version
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
  4011f6:	4b1c      	ldr	r3, [pc, #112]	; (401268 <sd_mmc_spi_install_mmc+0xd8>)
  4011f8:	681b      	ldr	r3, [r3, #0]
  4011fa:	7c1b      	ldrb	r3, [r3, #16]
  4011fc:	2b3f      	cmp	r3, #63	; 0x3f
  4011fe:	d90b      	bls.n	401218 <sd_mmc_spi_install_mmc+0x88>
		// Get EXT_CSD
		if (!mmc_cmd8(&b_authorize_high_speed)) {
  401200:	1dfb      	adds	r3, r7, #7
  401202:	4618      	mov	r0, r3
  401204:	4b19      	ldr	r3, [pc, #100]	; (40126c <sd_mmc_spi_install_mmc+0xdc>)
  401206:	4798      	blx	r3
  401208:	4603      	mov	r3, r0
  40120a:	f083 0301 	eor.w	r3, r3, #1
  40120e:	b2db      	uxtb	r3, r3
  401210:	2b00      	cmp	r3, #0
  401212:	d001      	beq.n	401218 <sd_mmc_spi_install_mmc+0x88>
			return false;
  401214:	2300      	movs	r3, #0
  401216:	e01a      	b.n	40124e <sd_mmc_spi_install_mmc+0xbe>
		}
	}
	// Set default block size
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
  401218:	f44f 7100 	mov.w	r1, #512	; 0x200
  40121c:	f241 1010 	movw	r0, #4368	; 0x1110
  401220:	4b0d      	ldr	r3, [pc, #52]	; (401258 <sd_mmc_spi_install_mmc+0xc8>)
  401222:	4798      	blx	r3
  401224:	4603      	mov	r3, r0
  401226:	f083 0301 	eor.w	r3, r3, #1
  40122a:	b2db      	uxtb	r3, r3
  40122c:	2b00      	cmp	r3, #0
  40122e:	d001      	beq.n	401234 <sd_mmc_spi_install_mmc+0xa4>
		return false;
  401230:	2300      	movs	r3, #0
  401232:	e00c      	b.n	40124e <sd_mmc_spi_install_mmc+0xbe>
	}
	// Check communication
	if (!sd_mmc_cmd13()) {
  401234:	4b0e      	ldr	r3, [pc, #56]	; (401270 <sd_mmc_spi_install_mmc+0xe0>)
  401236:	4798      	blx	r3
  401238:	4603      	mov	r3, r0
  40123a:	f083 0301 	eor.w	r3, r3, #1
  40123e:	b2db      	uxtb	r3, r3
  401240:	2b00      	cmp	r3, #0
  401242:	d001      	beq.n	401248 <sd_mmc_spi_install_mmc+0xb8>
		return false;
  401244:	2300      	movs	r3, #0
  401246:	e002      	b.n	40124e <sd_mmc_spi_install_mmc+0xbe>
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
  401248:	4b0a      	ldr	r3, [pc, #40]	; (401274 <sd_mmc_spi_install_mmc+0xe4>)
  40124a:	4798      	blx	r3
	return true;
  40124c:	2301      	movs	r3, #1
}
  40124e:	4618      	mov	r0, r3
  401250:	3708      	adds	r7, #8
  401252:	46bd      	mov	sp, r7
  401254:	bd80      	pop	{r7, pc}
  401256:	bf00      	nop
  401258:	00401fe9 	.word	0x00401fe9
  40125c:	004004f1 	.word	0x004004f1
  401260:	004009a1 	.word	0x004009a1
  401264:	00400a0d 	.word	0x00400a0d
  401268:	20000c70 	.word	0x20000c70
  40126c:	004008a9 	.word	0x004008a9
  401270:	00400c35 	.word	0x00400c35
  401274:	00400f81 	.word	0x00400f81

00401278 <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
  401278:	b580      	push	{r7, lr}
  40127a:	b082      	sub	sp, #8
  40127c:	af00      	add	r7, sp, #0
	//! Enable the PMC clock for the card detect pins
#if (defined SD_MMC_0_CD_GPIO) && (SAM) && (!SAM4L)
# include "pmc.h"
# define SD_MMC_ENABLE_CD_PIN(slot, unused) \
	pmc_enable_periph_clk(SD_MMC_##slot##_CD_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_CD_PIN, ~)
  40127e:	200b      	movs	r0, #11
  401280:	4b0e      	ldr	r3, [pc, #56]	; (4012bc <sd_mmc_init+0x44>)
  401282:	4798      	blx	r3
# define SD_MMC_ENABLE_WP_PIN(slot, unused) \
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
  401284:	2300      	movs	r3, #0
  401286:	71fb      	strb	r3, [r7, #7]
  401288:	e00c      	b.n	4012a4 <sd_mmc_init+0x2c>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
  40128a:	79fa      	ldrb	r2, [r7, #7]
  40128c:	490c      	ldr	r1, [pc, #48]	; (4012c0 <sd_mmc_init+0x48>)
  40128e:	4613      	mov	r3, r2
  401290:	00db      	lsls	r3, r3, #3
  401292:	4413      	add	r3, r2
  401294:	009b      	lsls	r3, r3, #2
  401296:	440b      	add	r3, r1
  401298:	330e      	adds	r3, #14
  40129a:	2204      	movs	r2, #4
  40129c:	701a      	strb	r2, [r3, #0]
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
  40129e:	79fb      	ldrb	r3, [r7, #7]
  4012a0:	3301      	adds	r3, #1
  4012a2:	71fb      	strb	r3, [r7, #7]
  4012a4:	79fb      	ldrb	r3, [r7, #7]
  4012a6:	2b00      	cmp	r3, #0
  4012a8:	d0ef      	beq.n	40128a <sd_mmc_init+0x12>
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
  4012aa:	4b06      	ldr	r3, [pc, #24]	; (4012c4 <sd_mmc_init+0x4c>)
  4012ac:	22ff      	movs	r2, #255	; 0xff
  4012ae:	701a      	strb	r2, [r3, #0]
	driver_init();
  4012b0:	4b05      	ldr	r3, [pc, #20]	; (4012c8 <sd_mmc_init+0x50>)
  4012b2:	4798      	blx	r3
}
  4012b4:	bf00      	nop
  4012b6:	3708      	adds	r7, #8
  4012b8:	46bd      	mov	sp, r7
  4012ba:	bd80      	pop	{r7, pc}
  4012bc:	0040681d 	.word	0x0040681d
  4012c0:	200000fc 	.word	0x200000fc
  4012c4:	20000c6c 	.word	0x20000c6c
  4012c8:	00401ed1 	.word	0x00401ed1

004012cc <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
  4012cc:	b580      	push	{r7, lr}
  4012ce:	b084      	sub	sp, #16
  4012d0:	af00      	add	r7, sp, #0
  4012d2:	4603      	mov	r3, r0
  4012d4:	71fb      	strb	r3, [r7, #7]
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
  4012d6:	79fb      	ldrb	r3, [r7, #7]
  4012d8:	4618      	mov	r0, r3
  4012da:	4b11      	ldr	r3, [pc, #68]	; (401320 <sd_mmc_check+0x54>)
  4012dc:	4798      	blx	r3
  4012de:	4603      	mov	r3, r0
  4012e0:	73fb      	strb	r3, [r7, #15]
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
  4012e2:	7bfb      	ldrb	r3, [r7, #15]
  4012e4:	2b01      	cmp	r3, #1
  4012e6:	d003      	beq.n	4012f0 <sd_mmc_check+0x24>
		sd_mmc_deselect_slot();
  4012e8:	4b0e      	ldr	r3, [pc, #56]	; (401324 <sd_mmc_check+0x58>)
  4012ea:	4798      	blx	r3
		return sd_mmc_err;
  4012ec:	7bfb      	ldrb	r3, [r7, #15]
  4012ee:	e013      	b.n	401318 <sd_mmc_check+0x4c>
	}

	// Initialization of the card requested
	if (sd_mmc_is_spi()? sd_mmc_spi_card_init()
  4012f0:	4b0d      	ldr	r3, [pc, #52]	; (401328 <sd_mmc_check+0x5c>)
  4012f2:	4798      	blx	r3
  4012f4:	4603      	mov	r3, r0
  4012f6:	2b00      	cmp	r3, #0
  4012f8:	d007      	beq.n	40130a <sd_mmc_check+0x3e>
			: sd_mmc_mci_card_init()) {
		sd_mmc_debug("SD/MMC card ready\n\r");
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
  4012fa:	4b0c      	ldr	r3, [pc, #48]	; (40132c <sd_mmc_check+0x60>)
  4012fc:	681b      	ldr	r3, [r3, #0]
  4012fe:	2200      	movs	r2, #0
  401300:	739a      	strb	r2, [r3, #14]
		sd_mmc_deselect_slot();
  401302:	4b08      	ldr	r3, [pc, #32]	; (401324 <sd_mmc_check+0x58>)
  401304:	4798      	blx	r3
		// To notify that the card has been just initialized
		// It is necessary for USB Device MSC
		return SD_MMC_INIT_ONGOING;
  401306:	2301      	movs	r3, #1
  401308:	e006      	b.n	401318 <sd_mmc_check+0x4c>
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
  40130a:	4b08      	ldr	r3, [pc, #32]	; (40132c <sd_mmc_check+0x60>)
  40130c:	681b      	ldr	r3, [r3, #0]
  40130e:	2203      	movs	r2, #3
  401310:	739a      	strb	r2, [r3, #14]
	sd_mmc_deselect_slot();
  401312:	4b04      	ldr	r3, [pc, #16]	; (401324 <sd_mmc_check+0x58>)
  401314:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
  401316:	2303      	movs	r3, #3
}
  401318:	4618      	mov	r0, r3
  40131a:	3710      	adds	r7, #16
  40131c:	46bd      	mov	sp, r7
  40131e:	bd80      	pop	{r7, pc}
  401320:	00400df5 	.word	0x00400df5
  401324:	00400fbd 	.word	0x00400fbd
  401328:	00400fe1 	.word	0x00400fe1
  40132c:	20000c70 	.word	0x20000c70

00401330 <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
  401330:	b580      	push	{r7, lr}
  401332:	b082      	sub	sp, #8
  401334:	af00      	add	r7, sp, #0
  401336:	4603      	mov	r3, r0
  401338:	71fb      	strb	r3, [r7, #7]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
  40133a:	79fb      	ldrb	r3, [r7, #7]
  40133c:	4618      	mov	r0, r3
  40133e:	4b08      	ldr	r3, [pc, #32]	; (401360 <sd_mmc_get_type+0x30>)
  401340:	4798      	blx	r3
  401342:	4603      	mov	r3, r0
  401344:	2b00      	cmp	r3, #0
  401346:	d001      	beq.n	40134c <sd_mmc_get_type+0x1c>
		return CARD_TYPE_UNKNOWN;
  401348:	2300      	movs	r3, #0
  40134a:	e004      	b.n	401356 <sd_mmc_get_type+0x26>
	}
	sd_mmc_deselect_slot();
  40134c:	4b05      	ldr	r3, [pc, #20]	; (401364 <sd_mmc_get_type+0x34>)
  40134e:	4798      	blx	r3
	return sd_mmc_card->type;
  401350:	4b05      	ldr	r3, [pc, #20]	; (401368 <sd_mmc_get_type+0x38>)
  401352:	681b      	ldr	r3, [r3, #0]
  401354:	7bdb      	ldrb	r3, [r3, #15]
}
  401356:	4618      	mov	r0, r3
  401358:	3708      	adds	r7, #8
  40135a:	46bd      	mov	sp, r7
  40135c:	bd80      	pop	{r7, pc}
  40135e:	bf00      	nop
  401360:	00400df5 	.word	0x00400df5
  401364:	00400fbd 	.word	0x00400fbd
  401368:	20000c70 	.word	0x20000c70

0040136c <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
  40136c:	b580      	push	{r7, lr}
  40136e:	b082      	sub	sp, #8
  401370:	af00      	add	r7, sp, #0
  401372:	4603      	mov	r3, r0
  401374:	71fb      	strb	r3, [r7, #7]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
  401376:	79fb      	ldrb	r3, [r7, #7]
  401378:	4618      	mov	r0, r3
  40137a:	4b08      	ldr	r3, [pc, #32]	; (40139c <sd_mmc_get_capacity+0x30>)
  40137c:	4798      	blx	r3
  40137e:	4603      	mov	r3, r0
  401380:	2b00      	cmp	r3, #0
  401382:	d001      	beq.n	401388 <sd_mmc_get_capacity+0x1c>
		return 0;
  401384:	2300      	movs	r3, #0
  401386:	e004      	b.n	401392 <sd_mmc_get_capacity+0x26>
	}
	sd_mmc_deselect_slot();
  401388:	4b05      	ldr	r3, [pc, #20]	; (4013a0 <sd_mmc_get_capacity+0x34>)
  40138a:	4798      	blx	r3
	return sd_mmc_card->capacity;
  40138c:	4b05      	ldr	r3, [pc, #20]	; (4013a4 <sd_mmc_get_capacity+0x38>)
  40138e:	681b      	ldr	r3, [r3, #0]
  401390:	685b      	ldr	r3, [r3, #4]
}
  401392:	4618      	mov	r0, r3
  401394:	3708      	adds	r7, #8
  401396:	46bd      	mov	sp, r7
  401398:	bd80      	pop	{r7, pc}
  40139a:	bf00      	nop
  40139c:	00400df5 	.word	0x00400df5
  4013a0:	00400fbd 	.word	0x00400fbd
  4013a4:	20000c70 	.word	0x20000c70

004013a8 <sd_mmc_is_write_protected>:

bool sd_mmc_is_write_protected(uint8_t slot)
{
  4013a8:	b480      	push	{r7}
  4013aa:	b083      	sub	sp, #12
  4013ac:	af00      	add	r7, sp, #0
  4013ae:	4603      	mov	r3, r0
  4013b0:	71fb      	strb	r3, [r7, #7]
	if (ioport_get_pin_level(sd_mmc_cards[slot].wp_gpio)
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
  4013b2:	2300      	movs	r3, #0
}
  4013b4:	4618      	mov	r0, r3
  4013b6:	370c      	adds	r7, #12
  4013b8:	46bd      	mov	sp, r7
  4013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
  4013be:	4770      	bx	lr

004013c0 <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
  4013c0:	b590      	push	{r4, r7, lr}
  4013c2:	b089      	sub	sp, #36	; 0x24
  4013c4:	af02      	add	r7, sp, #8
  4013c6:	4603      	mov	r3, r0
  4013c8:	6039      	str	r1, [r7, #0]
  4013ca:	71fb      	strb	r3, [r7, #7]
  4013cc:	4613      	mov	r3, r2
  4013ce:	80bb      	strh	r3, [r7, #4]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
  4013d0:	79fb      	ldrb	r3, [r7, #7]
  4013d2:	4618      	mov	r0, r3
  4013d4:	4b24      	ldr	r3, [pc, #144]	; (401468 <sd_mmc_init_read_blocks+0xa8>)
  4013d6:	4798      	blx	r3
  4013d8:	4603      	mov	r3, r0
  4013da:	73fb      	strb	r3, [r7, #15]
	if (sd_mmc_err != SD_MMC_OK) {
  4013dc:	7bfb      	ldrb	r3, [r7, #15]
  4013de:	2b00      	cmp	r3, #0
  4013e0:	d001      	beq.n	4013e6 <sd_mmc_init_read_blocks+0x26>
		return sd_mmc_err;
  4013e2:	7bfb      	ldrb	r3, [r7, #15]
  4013e4:	e03b      	b.n	40145e <sd_mmc_init_read_blocks+0x9e>
	}

	// Wait for data ready status
	if (!sd_mmc_cmd13()) {
  4013e6:	4b21      	ldr	r3, [pc, #132]	; (40146c <sd_mmc_init_read_blocks+0xac>)
  4013e8:	4798      	blx	r3
  4013ea:	4603      	mov	r3, r0
  4013ec:	f083 0301 	eor.w	r3, r3, #1
  4013f0:	b2db      	uxtb	r3, r3
  4013f2:	2b00      	cmp	r3, #0
  4013f4:	d003      	beq.n	4013fe <sd_mmc_init_read_blocks+0x3e>
		sd_mmc_deselect_slot();
  4013f6:	4b1e      	ldr	r3, [pc, #120]	; (401470 <sd_mmc_init_read_blocks+0xb0>)
  4013f8:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
  4013fa:	2305      	movs	r3, #5
  4013fc:	e02f      	b.n	40145e <sd_mmc_init_read_blocks+0x9e>
	}

	if (nb_block > 1) {
  4013fe:	88bb      	ldrh	r3, [r7, #4]
  401400:	2b01      	cmp	r3, #1
  401402:	d902      	bls.n	40140a <sd_mmc_init_read_blocks+0x4a>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
  401404:	4b1b      	ldr	r3, [pc, #108]	; (401474 <sd_mmc_init_read_blocks+0xb4>)
  401406:	617b      	str	r3, [r7, #20]
  401408:	e001      	b.n	40140e <sd_mmc_init_read_blocks+0x4e>
	} else {
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
  40140a:	4b1b      	ldr	r3, [pc, #108]	; (401478 <sd_mmc_init_read_blocks+0xb8>)
  40140c:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
  40140e:	4b1b      	ldr	r3, [pc, #108]	; (40147c <sd_mmc_init_read_blocks+0xbc>)
  401410:	681b      	ldr	r3, [r3, #0]
  401412:	7bdb      	ldrb	r3, [r3, #15]
  401414:	f003 0308 	and.w	r3, r3, #8
  401418:	2b00      	cmp	r3, #0
  40141a:	d002      	beq.n	401422 <sd_mmc_init_read_blocks+0x62>
		arg = start;
  40141c:	683b      	ldr	r3, [r7, #0]
  40141e:	613b      	str	r3, [r7, #16]
  401420:	e002      	b.n	401428 <sd_mmc_init_read_blocks+0x68>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
  401422:	683b      	ldr	r3, [r7, #0]
  401424:	025b      	lsls	r3, r3, #9
  401426:	613b      	str	r3, [r7, #16]
	}

	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
  401428:	88ba      	ldrh	r2, [r7, #4]
  40142a:	2301      	movs	r3, #1
  40142c:	9300      	str	r3, [sp, #0]
  40142e:	4613      	mov	r3, r2
  401430:	f44f 7200 	mov.w	r2, #512	; 0x200
  401434:	6939      	ldr	r1, [r7, #16]
  401436:	6978      	ldr	r0, [r7, #20]
  401438:	4c11      	ldr	r4, [pc, #68]	; (401480 <sd_mmc_init_read_blocks+0xc0>)
  40143a:	47a0      	blx	r4
  40143c:	4603      	mov	r3, r0
  40143e:	f083 0301 	eor.w	r3, r3, #1
  401442:	b2db      	uxtb	r3, r3
  401444:	2b00      	cmp	r3, #0
  401446:	d003      	beq.n	401450 <sd_mmc_init_read_blocks+0x90>
		sd_mmc_deselect_slot();
  401448:	4b09      	ldr	r3, [pc, #36]	; (401470 <sd_mmc_init_read_blocks+0xb0>)
  40144a:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
  40144c:	2305      	movs	r3, #5
  40144e:	e006      	b.n	40145e <sd_mmc_init_read_blocks+0x9e>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
  401450:	4a0c      	ldr	r2, [pc, #48]	; (401484 <sd_mmc_init_read_blocks+0xc4>)
  401452:	88bb      	ldrh	r3, [r7, #4]
  401454:	8013      	strh	r3, [r2, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
  401456:	4a0c      	ldr	r2, [pc, #48]	; (401488 <sd_mmc_init_read_blocks+0xc8>)
  401458:	88bb      	ldrh	r3, [r7, #4]
  40145a:	8013      	strh	r3, [r2, #0]
	return SD_MMC_OK;
  40145c:	2300      	movs	r3, #0
}
  40145e:	4618      	mov	r0, r3
  401460:	371c      	adds	r7, #28
  401462:	46bd      	mov	sp, r7
  401464:	bd90      	pop	{r4, r7, pc}
  401466:	bf00      	nop
  401468:	00400df5 	.word	0x00400df5
  40146c:	00400c35 	.word	0x00400c35
  401470:	00400fbd 	.word	0x00400fbd
  401474:	00101112 	.word	0x00101112
  401478:	00081111 	.word	0x00081111
  40147c:	20000c70 	.word	0x20000c70
  401480:	00402011 	.word	0x00402011
  401484:	20000c76 	.word	0x20000c76
  401488:	20000c74 	.word	0x20000c74

0040148c <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
  40148c:	b580      	push	{r7, lr}
  40148e:	b082      	sub	sp, #8
  401490:	af00      	add	r7, sp, #0
  401492:	6078      	str	r0, [r7, #4]
  401494:	460b      	mov	r3, r1
  401496:	807b      	strh	r3, [r7, #2]
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
  401498:	887b      	ldrh	r3, [r7, #2]
  40149a:	4619      	mov	r1, r3
  40149c:	6878      	ldr	r0, [r7, #4]
  40149e:	4b0c      	ldr	r3, [pc, #48]	; (4014d0 <sd_mmc_start_read_blocks+0x44>)
  4014a0:	4798      	blx	r3
  4014a2:	4603      	mov	r3, r0
  4014a4:	f083 0301 	eor.w	r3, r3, #1
  4014a8:	b2db      	uxtb	r3, r3
  4014aa:	2b00      	cmp	r3, #0
  4014ac:	d004      	beq.n	4014b8 <sd_mmc_start_read_blocks+0x2c>
		sd_mmc_nb_block_remaining = 0;
  4014ae:	4b09      	ldr	r3, [pc, #36]	; (4014d4 <sd_mmc_start_read_blocks+0x48>)
  4014b0:	2200      	movs	r2, #0
  4014b2:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
  4014b4:	2305      	movs	r3, #5
  4014b6:	e007      	b.n	4014c8 <sd_mmc_start_read_blocks+0x3c>
	}
	sd_mmc_nb_block_remaining -= nb_block;
  4014b8:	4b06      	ldr	r3, [pc, #24]	; (4014d4 <sd_mmc_start_read_blocks+0x48>)
  4014ba:	881a      	ldrh	r2, [r3, #0]
  4014bc:	887b      	ldrh	r3, [r7, #2]
  4014be:	1ad3      	subs	r3, r2, r3
  4014c0:	b29a      	uxth	r2, r3
  4014c2:	4b04      	ldr	r3, [pc, #16]	; (4014d4 <sd_mmc_start_read_blocks+0x48>)
  4014c4:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
  4014c6:	2300      	movs	r3, #0
}
  4014c8:	4618      	mov	r0, r3
  4014ca:	3708      	adds	r7, #8
  4014cc:	46bd      	mov	sp, r7
  4014ce:	bd80      	pop	{r7, pc}
  4014d0:	00402269 	.word	0x00402269
  4014d4:	20000c76 	.word	0x20000c76

004014d8 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
  4014d8:	b580      	push	{r7, lr}
  4014da:	b082      	sub	sp, #8
  4014dc:	af00      	add	r7, sp, #0
  4014de:	4603      	mov	r3, r0
  4014e0:	71fb      	strb	r3, [r7, #7]
	if (!driver_wait_end_of_read_blocks()) {
  4014e2:	4b1b      	ldr	r3, [pc, #108]	; (401550 <sd_mmc_wait_end_of_read_blocks+0x78>)
  4014e4:	4798      	blx	r3
  4014e6:	4603      	mov	r3, r0
  4014e8:	f083 0301 	eor.w	r3, r3, #1
  4014ec:	b2db      	uxtb	r3, r3
  4014ee:	2b00      	cmp	r3, #0
  4014f0:	d001      	beq.n	4014f6 <sd_mmc_wait_end_of_read_blocks+0x1e>
		return SD_MMC_ERR_COMM;
  4014f2:	2305      	movs	r3, #5
  4014f4:	e027      	b.n	401546 <sd_mmc_wait_end_of_read_blocks+0x6e>
	}
	if (abort) {
  4014f6:	79fb      	ldrb	r3, [r7, #7]
  4014f8:	2b00      	cmp	r3, #0
  4014fa:	d003      	beq.n	401504 <sd_mmc_wait_end_of_read_blocks+0x2c>
		sd_mmc_nb_block_remaining = 0;
  4014fc:	4b15      	ldr	r3, [pc, #84]	; (401554 <sd_mmc_wait_end_of_read_blocks+0x7c>)
  4014fe:	2200      	movs	r2, #0
  401500:	801a      	strh	r2, [r3, #0]
  401502:	e005      	b.n	401510 <sd_mmc_wait_end_of_read_blocks+0x38>
	} else if (sd_mmc_nb_block_remaining) {
  401504:	4b13      	ldr	r3, [pc, #76]	; (401554 <sd_mmc_wait_end_of_read_blocks+0x7c>)
  401506:	881b      	ldrh	r3, [r3, #0]
  401508:	2b00      	cmp	r3, #0
  40150a:	d001      	beq.n	401510 <sd_mmc_wait_end_of_read_blocks+0x38>
		return SD_MMC_OK;
  40150c:	2300      	movs	r3, #0
  40150e:	e01a      	b.n	401546 <sd_mmc_wait_end_of_read_blocks+0x6e>
	}

	// All blocks are transfered then stop read operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
  401510:	4b11      	ldr	r3, [pc, #68]	; (401558 <sd_mmc_wait_end_of_read_blocks+0x80>)
  401512:	881b      	ldrh	r3, [r3, #0]
  401514:	2b01      	cmp	r3, #1
  401516:	d103      	bne.n	401520 <sd_mmc_wait_end_of_read_blocks+0x48>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
  401518:	4b10      	ldr	r3, [pc, #64]	; (40155c <sd_mmc_wait_end_of_read_blocks+0x84>)
  40151a:	4798      	blx	r3
		return SD_MMC_OK;
  40151c:	2300      	movs	r3, #0
  40151e:	e012      	b.n	401546 <sd_mmc_wait_end_of_read_blocks+0x6e>
	}
	// WORKAROUND for no compliance card (Atmel Internal ref. !MMC7 !SD19):
	// The errors on this command must be ignored
	// and one retry can be necessary in SPI mode for no compliance card.
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
  401520:	2100      	movs	r1, #0
  401522:	f243 100c 	movw	r0, #12556	; 0x310c
  401526:	4b0e      	ldr	r3, [pc, #56]	; (401560 <sd_mmc_wait_end_of_read_blocks+0x88>)
  401528:	4798      	blx	r3
  40152a:	4603      	mov	r3, r0
  40152c:	f083 0301 	eor.w	r3, r3, #1
  401530:	b2db      	uxtb	r3, r3
  401532:	2b00      	cmp	r3, #0
  401534:	d004      	beq.n	401540 <sd_mmc_wait_end_of_read_blocks+0x68>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
  401536:	2100      	movs	r1, #0
  401538:	f243 100c 	movw	r0, #12556	; 0x310c
  40153c:	4b08      	ldr	r3, [pc, #32]	; (401560 <sd_mmc_wait_end_of_read_blocks+0x88>)
  40153e:	4798      	blx	r3
	}
	sd_mmc_deselect_slot();
  401540:	4b06      	ldr	r3, [pc, #24]	; (40155c <sd_mmc_wait_end_of_read_blocks+0x84>)
  401542:	4798      	blx	r3
	return SD_MMC_OK;
  401544:	2300      	movs	r3, #0
}
  401546:	4618      	mov	r0, r3
  401548:	3708      	adds	r7, #8
  40154a:	46bd      	mov	sp, r7
  40154c:	bd80      	pop	{r7, pc}
  40154e:	bf00      	nop
  401550:	004022f9 	.word	0x004022f9
  401554:	20000c76 	.word	0x20000c76
  401558:	20000c74 	.word	0x20000c74
  40155c:	00400fbd 	.word	0x00400fbd
  401560:	00401fe9 	.word	0x00401fe9

00401564 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
  401564:	b590      	push	{r4, r7, lr}
  401566:	b089      	sub	sp, #36	; 0x24
  401568:	af02      	add	r7, sp, #8
  40156a:	4603      	mov	r3, r0
  40156c:	6039      	str	r1, [r7, #0]
  40156e:	71fb      	strb	r3, [r7, #7]
  401570:	4613      	mov	r3, r2
  401572:	80bb      	strh	r3, [r7, #4]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
  401574:	79fb      	ldrb	r3, [r7, #7]
  401576:	4618      	mov	r0, r3
  401578:	4b23      	ldr	r3, [pc, #140]	; (401608 <sd_mmc_init_write_blocks+0xa4>)
  40157a:	4798      	blx	r3
  40157c:	4603      	mov	r3, r0
  40157e:	73fb      	strb	r3, [r7, #15]
	if (sd_mmc_err != SD_MMC_OK) {
  401580:	7bfb      	ldrb	r3, [r7, #15]
  401582:	2b00      	cmp	r3, #0
  401584:	d001      	beq.n	40158a <sd_mmc_init_write_blocks+0x26>
		return sd_mmc_err;
  401586:	7bfb      	ldrb	r3, [r7, #15]
  401588:	e03a      	b.n	401600 <sd_mmc_init_write_blocks+0x9c>
	}
	if (sd_mmc_is_write_protected(slot)) {
  40158a:	79fb      	ldrb	r3, [r7, #7]
  40158c:	4618      	mov	r0, r3
  40158e:	4b1f      	ldr	r3, [pc, #124]	; (40160c <sd_mmc_init_write_blocks+0xa8>)
  401590:	4798      	blx	r3
  401592:	4603      	mov	r3, r0
  401594:	2b00      	cmp	r3, #0
  401596:	d003      	beq.n	4015a0 <sd_mmc_init_write_blocks+0x3c>
		sd_mmc_deselect_slot();
  401598:	4b1d      	ldr	r3, [pc, #116]	; (401610 <sd_mmc_init_write_blocks+0xac>)
  40159a:	4798      	blx	r3
		return SD_MMC_ERR_WP;
  40159c:	2307      	movs	r3, #7
  40159e:	e02f      	b.n	401600 <sd_mmc_init_write_blocks+0x9c>
	}

	if (nb_block > 1) {
  4015a0:	88bb      	ldrh	r3, [r7, #4]
  4015a2:	2b01      	cmp	r3, #1
  4015a4:	d902      	bls.n	4015ac <sd_mmc_init_write_blocks+0x48>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
  4015a6:	4b1b      	ldr	r3, [pc, #108]	; (401614 <sd_mmc_init_write_blocks+0xb0>)
  4015a8:	617b      	str	r3, [r7, #20]
  4015aa:	e001      	b.n	4015b0 <sd_mmc_init_write_blocks+0x4c>
	} else {
		cmd = SDMMC_CMD24_WRITE_BLOCK;
  4015ac:	4b1a      	ldr	r3, [pc, #104]	; (401618 <sd_mmc_init_write_blocks+0xb4>)
  4015ae:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
  4015b0:	4b1a      	ldr	r3, [pc, #104]	; (40161c <sd_mmc_init_write_blocks+0xb8>)
  4015b2:	681b      	ldr	r3, [r3, #0]
  4015b4:	7bdb      	ldrb	r3, [r3, #15]
  4015b6:	f003 0308 	and.w	r3, r3, #8
  4015ba:	2b00      	cmp	r3, #0
  4015bc:	d002      	beq.n	4015c4 <sd_mmc_init_write_blocks+0x60>
		arg = start;
  4015be:	683b      	ldr	r3, [r7, #0]
  4015c0:	613b      	str	r3, [r7, #16]
  4015c2:	e002      	b.n	4015ca <sd_mmc_init_write_blocks+0x66>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
  4015c4:	683b      	ldr	r3, [r7, #0]
  4015c6:	025b      	lsls	r3, r3, #9
  4015c8:	613b      	str	r3, [r7, #16]
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
  4015ca:	88ba      	ldrh	r2, [r7, #4]
  4015cc:	2301      	movs	r3, #1
  4015ce:	9300      	str	r3, [sp, #0]
  4015d0:	4613      	mov	r3, r2
  4015d2:	f44f 7200 	mov.w	r2, #512	; 0x200
  4015d6:	6939      	ldr	r1, [r7, #16]
  4015d8:	6978      	ldr	r0, [r7, #20]
  4015da:	4c11      	ldr	r4, [pc, #68]	; (401620 <sd_mmc_init_write_blocks+0xbc>)
  4015dc:	47a0      	blx	r4
  4015de:	4603      	mov	r3, r0
  4015e0:	f083 0301 	eor.w	r3, r3, #1
  4015e4:	b2db      	uxtb	r3, r3
  4015e6:	2b00      	cmp	r3, #0
  4015e8:	d003      	beq.n	4015f2 <sd_mmc_init_write_blocks+0x8e>
		sd_mmc_deselect_slot();
  4015ea:	4b09      	ldr	r3, [pc, #36]	; (401610 <sd_mmc_init_write_blocks+0xac>)
  4015ec:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
  4015ee:	2305      	movs	r3, #5
  4015f0:	e006      	b.n	401600 <sd_mmc_init_write_blocks+0x9c>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
  4015f2:	4a0c      	ldr	r2, [pc, #48]	; (401624 <sd_mmc_init_write_blocks+0xc0>)
  4015f4:	88bb      	ldrh	r3, [r7, #4]
  4015f6:	8013      	strh	r3, [r2, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
  4015f8:	4a0b      	ldr	r2, [pc, #44]	; (401628 <sd_mmc_init_write_blocks+0xc4>)
  4015fa:	88bb      	ldrh	r3, [r7, #4]
  4015fc:	8013      	strh	r3, [r2, #0]
	return SD_MMC_OK;
  4015fe:	2300      	movs	r3, #0
}
  401600:	4618      	mov	r0, r3
  401602:	371c      	adds	r7, #28
  401604:	46bd      	mov	sp, r7
  401606:	bd90      	pop	{r4, r7, pc}
  401608:	00400df5 	.word	0x00400df5
  40160c:	004013a9 	.word	0x004013a9
  401610:	00400fbd 	.word	0x00400fbd
  401614:	00109119 	.word	0x00109119
  401618:	00089118 	.word	0x00089118
  40161c:	20000c70 	.word	0x20000c70
  401620:	00402011 	.word	0x00402011
  401624:	20000c76 	.word	0x20000c76
  401628:	20000c74 	.word	0x20000c74

0040162c <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
  40162c:	b580      	push	{r7, lr}
  40162e:	b082      	sub	sp, #8
  401630:	af00      	add	r7, sp, #0
  401632:	6078      	str	r0, [r7, #4]
  401634:	460b      	mov	r3, r1
  401636:	807b      	strh	r3, [r7, #2]
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
  401638:	887b      	ldrh	r3, [r7, #2]
  40163a:	4619      	mov	r1, r3
  40163c:	6878      	ldr	r0, [r7, #4]
  40163e:	4b0c      	ldr	r3, [pc, #48]	; (401670 <sd_mmc_start_write_blocks+0x44>)
  401640:	4798      	blx	r3
  401642:	4603      	mov	r3, r0
  401644:	f083 0301 	eor.w	r3, r3, #1
  401648:	b2db      	uxtb	r3, r3
  40164a:	2b00      	cmp	r3, #0
  40164c:	d004      	beq.n	401658 <sd_mmc_start_write_blocks+0x2c>
		sd_mmc_nb_block_remaining = 0;
  40164e:	4b09      	ldr	r3, [pc, #36]	; (401674 <sd_mmc_start_write_blocks+0x48>)
  401650:	2200      	movs	r2, #0
  401652:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
  401654:	2305      	movs	r3, #5
  401656:	e007      	b.n	401668 <sd_mmc_start_write_blocks+0x3c>
	}
	sd_mmc_nb_block_remaining -= nb_block;
  401658:	4b06      	ldr	r3, [pc, #24]	; (401674 <sd_mmc_start_write_blocks+0x48>)
  40165a:	881a      	ldrh	r2, [r3, #0]
  40165c:	887b      	ldrh	r3, [r7, #2]
  40165e:	1ad3      	subs	r3, r2, r3
  401660:	b29a      	uxth	r2, r3
  401662:	4b04      	ldr	r3, [pc, #16]	; (401674 <sd_mmc_start_write_blocks+0x48>)
  401664:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
  401666:	2300      	movs	r3, #0
}
  401668:	4618      	mov	r0, r3
  40166a:	3708      	adds	r7, #8
  40166c:	46bd      	mov	sp, r7
  40166e:	bd80      	pop	{r7, pc}
  401670:	00402309 	.word	0x00402309
  401674:	20000c76 	.word	0x20000c76

00401678 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
  401678:	b580      	push	{r7, lr}
  40167a:	b082      	sub	sp, #8
  40167c:	af00      	add	r7, sp, #0
  40167e:	4603      	mov	r3, r0
  401680:	71fb      	strb	r3, [r7, #7]
	if (!driver_wait_end_of_write_blocks()) {
  401682:	4b13      	ldr	r3, [pc, #76]	; (4016d0 <sd_mmc_wait_end_of_write_blocks+0x58>)
  401684:	4798      	blx	r3
  401686:	4603      	mov	r3, r0
  401688:	f083 0301 	eor.w	r3, r3, #1
  40168c:	b2db      	uxtb	r3, r3
  40168e:	2b00      	cmp	r3, #0
  401690:	d001      	beq.n	401696 <sd_mmc_wait_end_of_write_blocks+0x1e>
		return SD_MMC_ERR_COMM;
  401692:	2305      	movs	r3, #5
  401694:	e017      	b.n	4016c6 <sd_mmc_wait_end_of_write_blocks+0x4e>
	}
	if (abort) {
  401696:	79fb      	ldrb	r3, [r7, #7]
  401698:	2b00      	cmp	r3, #0
  40169a:	d003      	beq.n	4016a4 <sd_mmc_wait_end_of_write_blocks+0x2c>
		sd_mmc_nb_block_remaining = 0;
  40169c:	4b0d      	ldr	r3, [pc, #52]	; (4016d4 <sd_mmc_wait_end_of_write_blocks+0x5c>)
  40169e:	2200      	movs	r2, #0
  4016a0:	801a      	strh	r2, [r3, #0]
  4016a2:	e005      	b.n	4016b0 <sd_mmc_wait_end_of_write_blocks+0x38>
	} else if (sd_mmc_nb_block_remaining) {
  4016a4:	4b0b      	ldr	r3, [pc, #44]	; (4016d4 <sd_mmc_wait_end_of_write_blocks+0x5c>)
  4016a6:	881b      	ldrh	r3, [r3, #0]
  4016a8:	2b00      	cmp	r3, #0
  4016aa:	d001      	beq.n	4016b0 <sd_mmc_wait_end_of_write_blocks+0x38>
		return SD_MMC_OK;
  4016ac:	2300      	movs	r3, #0
  4016ae:	e00a      	b.n	4016c6 <sd_mmc_wait_end_of_write_blocks+0x4e>
	}

	// All blocks are transfered then stop write operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
  4016b0:	4b09      	ldr	r3, [pc, #36]	; (4016d8 <sd_mmc_wait_end_of_write_blocks+0x60>)
  4016b2:	881b      	ldrh	r3, [r3, #0]
  4016b4:	2b01      	cmp	r3, #1
  4016b6:	d103      	bne.n	4016c0 <sd_mmc_wait_end_of_write_blocks+0x48>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
  4016b8:	4b08      	ldr	r3, [pc, #32]	; (4016dc <sd_mmc_wait_end_of_write_blocks+0x64>)
  4016ba:	4798      	blx	r3
		return SD_MMC_OK;
  4016bc:	2300      	movs	r3, #0
  4016be:	e002      	b.n	4016c6 <sd_mmc_wait_end_of_write_blocks+0x4e>
		if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
  4016c0:	4b06      	ldr	r3, [pc, #24]	; (4016dc <sd_mmc_wait_end_of_write_blocks+0x64>)
  4016c2:	4798      	blx	r3
	return SD_MMC_OK;
  4016c4:	2300      	movs	r3, #0
}
  4016c6:	4618      	mov	r0, r3
  4016c8:	3708      	adds	r7, #8
  4016ca:	46bd      	mov	sp, r7
  4016cc:	bd80      	pop	{r7, pc}
  4016ce:	bf00      	nop
  4016d0:	004023bd 	.word	0x004023bd
  4016d4:	20000c76 	.word	0x20000c76
  4016d8:	20000c74 	.word	0x20000c74
  4016dc:	00400fbd 	.word	0x00400fbd

004016e0 <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
  4016e0:	b580      	push	{r7, lr}
  4016e2:	b082      	sub	sp, #8
  4016e4:	af00      	add	r7, sp, #0
  4016e6:	4603      	mov	r3, r0
  4016e8:	71fb      	strb	r3, [r7, #7]
	switch (sd_mmc_check(slot))
  4016ea:	79fb      	ldrb	r3, [r7, #7]
  4016ec:	4618      	mov	r0, r3
  4016ee:	4b15      	ldr	r3, [pc, #84]	; (401744 <sd_mmc_test_unit_ready+0x64>)
  4016f0:	4798      	blx	r3
  4016f2:	4603      	mov	r3, r0
  4016f4:	2b01      	cmp	r3, #1
  4016f6:	d017      	beq.n	401728 <sd_mmc_test_unit_ready+0x48>
  4016f8:	2b02      	cmp	r3, #2
  4016fa:	d017      	beq.n	40172c <sd_mmc_test_unit_ready+0x4c>
  4016fc:	2b00      	cmp	r3, #0
  4016fe:	d11b      	bne.n	401738 <sd_mmc_test_unit_ready+0x58>
	{
	case SD_MMC_OK:
		if (sd_mmc_ejected[slot]) {
  401700:	79fb      	ldrb	r3, [r7, #7]
  401702:	4a11      	ldr	r2, [pc, #68]	; (401748 <sd_mmc_test_unit_ready+0x68>)
  401704:	5cd3      	ldrb	r3, [r2, r3]
  401706:	2b00      	cmp	r3, #0
  401708:	d001      	beq.n	40170e <sd_mmc_test_unit_ready+0x2e>
			return CTRL_NO_PRESENT;
  40170a:	2302      	movs	r3, #2
  40170c:	e015      	b.n	40173a <sd_mmc_test_unit_ready+0x5a>
		}
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
  40170e:	79fb      	ldrb	r3, [r7, #7]
  401710:	4618      	mov	r0, r3
  401712:	4b0e      	ldr	r3, [pc, #56]	; (40174c <sd_mmc_test_unit_ready+0x6c>)
  401714:	4798      	blx	r3
  401716:	4603      	mov	r3, r0
  401718:	f003 0303 	and.w	r3, r3, #3
  40171c:	2b00      	cmp	r3, #0
  40171e:	d001      	beq.n	401724 <sd_mmc_test_unit_ready+0x44>
			return CTRL_GOOD;
  401720:	2300      	movs	r3, #0
  401722:	e00a      	b.n	40173a <sd_mmc_test_unit_ready+0x5a>
		}
		// It is not a memory card
		return CTRL_NO_PRESENT;
  401724:	2302      	movs	r3, #2
  401726:	e008      	b.n	40173a <sd_mmc_test_unit_ready+0x5a>

	case SD_MMC_INIT_ONGOING:
		return CTRL_BUSY;
  401728:	2303      	movs	r3, #3
  40172a:	e006      	b.n	40173a <sd_mmc_test_unit_ready+0x5a>

	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
  40172c:	79fb      	ldrb	r3, [r7, #7]
  40172e:	4a06      	ldr	r2, [pc, #24]	; (401748 <sd_mmc_test_unit_ready+0x68>)
  401730:	2100      	movs	r1, #0
  401732:	54d1      	strb	r1, [r2, r3]
		return CTRL_NO_PRESENT;
  401734:	2302      	movs	r3, #2
  401736:	e000      	b.n	40173a <sd_mmc_test_unit_ready+0x5a>

	default:
		return CTRL_FAIL;
  401738:	2301      	movs	r3, #1
	}
}
  40173a:	4618      	mov	r0, r3
  40173c:	3708      	adds	r7, #8
  40173e:	46bd      	mov	sp, r7
  401740:	bd80      	pop	{r7, pc}
  401742:	bf00      	nop
  401744:	004012cd 	.word	0x004012cd
  401748:	20000c7c 	.word	0x20000c7c
  40174c:	00401331 	.word	0x00401331

00401750 <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
  401750:	b580      	push	{r7, lr}
  401752:	af00      	add	r7, sp, #0
	return sd_mmc_test_unit_ready(0);
  401754:	2000      	movs	r0, #0
  401756:	4b02      	ldr	r3, [pc, #8]	; (401760 <sd_mmc_test_unit_ready_0+0x10>)
  401758:	4798      	blx	r3
  40175a:	4603      	mov	r3, r0
}
  40175c:	4618      	mov	r0, r3
  40175e:	bd80      	pop	{r7, pc}
  401760:	004016e1 	.word	0x004016e1

00401764 <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
  401764:	b580      	push	{r7, lr}
  401766:	b082      	sub	sp, #8
  401768:	af00      	add	r7, sp, #0
  40176a:	4603      	mov	r3, r0
  40176c:	6039      	str	r1, [r7, #0]
  40176e:	71fb      	strb	r3, [r7, #7]
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
  401770:	79fb      	ldrb	r3, [r7, #7]
  401772:	4618      	mov	r0, r3
  401774:	4b07      	ldr	r3, [pc, #28]	; (401794 <sd_mmc_read_capacity+0x30>)
  401776:	4798      	blx	r3
  401778:	4603      	mov	r3, r0
  40177a:	005b      	lsls	r3, r3, #1
  40177c:	1e5a      	subs	r2, r3, #1
  40177e:	683b      	ldr	r3, [r7, #0]
  401780:	601a      	str	r2, [r3, #0]
	return sd_mmc_test_unit_ready(slot);
  401782:	79fb      	ldrb	r3, [r7, #7]
  401784:	4618      	mov	r0, r3
  401786:	4b04      	ldr	r3, [pc, #16]	; (401798 <sd_mmc_read_capacity+0x34>)
  401788:	4798      	blx	r3
  40178a:	4603      	mov	r3, r0
}
  40178c:	4618      	mov	r0, r3
  40178e:	3708      	adds	r7, #8
  401790:	46bd      	mov	sp, r7
  401792:	bd80      	pop	{r7, pc}
  401794:	0040136d 	.word	0x0040136d
  401798:	004016e1 	.word	0x004016e1

0040179c <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
  40179c:	b580      	push	{r7, lr}
  40179e:	b082      	sub	sp, #8
  4017a0:	af00      	add	r7, sp, #0
  4017a2:	6078      	str	r0, [r7, #4]
	return sd_mmc_read_capacity(0, nb_sector);
  4017a4:	6879      	ldr	r1, [r7, #4]
  4017a6:	2000      	movs	r0, #0
  4017a8:	4b03      	ldr	r3, [pc, #12]	; (4017b8 <sd_mmc_read_capacity_0+0x1c>)
  4017aa:	4798      	blx	r3
  4017ac:	4603      	mov	r3, r0
}
  4017ae:	4618      	mov	r0, r3
  4017b0:	3708      	adds	r7, #8
  4017b2:	46bd      	mov	sp, r7
  4017b4:	bd80      	pop	{r7, pc}
  4017b6:	bf00      	nop
  4017b8:	00401765 	.word	0x00401765

004017bc <sd_mmc_unload>:
{
	return sd_mmc_read_capacity(1, nb_sector);
}

bool sd_mmc_unload(uint8_t slot, bool unload)
{
  4017bc:	b480      	push	{r7}
  4017be:	b083      	sub	sp, #12
  4017c0:	af00      	add	r7, sp, #0
  4017c2:	4603      	mov	r3, r0
  4017c4:	460a      	mov	r2, r1
  4017c6:	71fb      	strb	r3, [r7, #7]
  4017c8:	4613      	mov	r3, r2
  4017ca:	71bb      	strb	r3, [r7, #6]
	sd_mmc_ejected[slot] = unload;
  4017cc:	79fb      	ldrb	r3, [r7, #7]
  4017ce:	4905      	ldr	r1, [pc, #20]	; (4017e4 <sd_mmc_unload+0x28>)
  4017d0:	79ba      	ldrb	r2, [r7, #6]
  4017d2:	54ca      	strb	r2, [r1, r3]
	return true;
  4017d4:	2301      	movs	r3, #1
}
  4017d6:	4618      	mov	r0, r3
  4017d8:	370c      	adds	r7, #12
  4017da:	46bd      	mov	sp, r7
  4017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
  4017e0:	4770      	bx	lr
  4017e2:	bf00      	nop
  4017e4:	20000c7c 	.word	0x20000c7c

004017e8 <sd_mmc_unload_0>:

bool sd_mmc_unload_0(bool unload)
{
  4017e8:	b580      	push	{r7, lr}
  4017ea:	b082      	sub	sp, #8
  4017ec:	af00      	add	r7, sp, #0
  4017ee:	4603      	mov	r3, r0
  4017f0:	71fb      	strb	r3, [r7, #7]
	return sd_mmc_unload(0, unload);
  4017f2:	79fb      	ldrb	r3, [r7, #7]
  4017f4:	4619      	mov	r1, r3
  4017f6:	2000      	movs	r0, #0
  4017f8:	4b03      	ldr	r3, [pc, #12]	; (401808 <sd_mmc_unload_0+0x20>)
  4017fa:	4798      	blx	r3
  4017fc:	4603      	mov	r3, r0
}
  4017fe:	4618      	mov	r0, r3
  401800:	3708      	adds	r7, #8
  401802:	46bd      	mov	sp, r7
  401804:	bd80      	pop	{r7, pc}
  401806:	bf00      	nop
  401808:	004017bd 	.word	0x004017bd

0040180c <sd_mmc_wr_protect>:
{
	return sd_mmc_unload(1, unload);
}

bool sd_mmc_wr_protect(uint8_t slot)
{
  40180c:	b580      	push	{r7, lr}
  40180e:	b082      	sub	sp, #8
  401810:	af00      	add	r7, sp, #0
  401812:	4603      	mov	r3, r0
  401814:	71fb      	strb	r3, [r7, #7]
	return sd_mmc_is_write_protected(slot);
  401816:	79fb      	ldrb	r3, [r7, #7]
  401818:	4618      	mov	r0, r3
  40181a:	4b03      	ldr	r3, [pc, #12]	; (401828 <sd_mmc_wr_protect+0x1c>)
  40181c:	4798      	blx	r3
  40181e:	4603      	mov	r3, r0
}
  401820:	4618      	mov	r0, r3
  401822:	3708      	adds	r7, #8
  401824:	46bd      	mov	sp, r7
  401826:	bd80      	pop	{r7, pc}
  401828:	004013a9 	.word	0x004013a9

0040182c <sd_mmc_wr_protect_0>:

bool sd_mmc_wr_protect_0(void)
{
  40182c:	b580      	push	{r7, lr}
  40182e:	af00      	add	r7, sp, #0
	return sd_mmc_wr_protect(0);
  401830:	2000      	movs	r0, #0
  401832:	4b02      	ldr	r3, [pc, #8]	; (40183c <sd_mmc_wr_protect_0+0x10>)
  401834:	4798      	blx	r3
  401836:	4603      	mov	r3, r0
}
  401838:	4618      	mov	r0, r3
  40183a:	bd80      	pop	{r7, pc}
  40183c:	0040180d 	.word	0x0040180d

00401840 <sd_mmc_removal>:
{
	return sd_mmc_wr_protect(1);
}

bool sd_mmc_removal(uint8_t slot)
{
  401840:	b480      	push	{r7}
  401842:	b083      	sub	sp, #12
  401844:	af00      	add	r7, sp, #0
  401846:	4603      	mov	r3, r0
  401848:	71fb      	strb	r3, [r7, #7]
	UNUSED(slot);
	return true;
  40184a:	2301      	movs	r3, #1
}
  40184c:	4618      	mov	r0, r3
  40184e:	370c      	adds	r7, #12
  401850:	46bd      	mov	sp, r7
  401852:	f85d 7b04 	ldr.w	r7, [sp], #4
  401856:	4770      	bx	lr

00401858 <sd_mmc_removal_0>:

bool sd_mmc_removal_0(void)
{
  401858:	b580      	push	{r7, lr}
  40185a:	af00      	add	r7, sp, #0
	return sd_mmc_removal(0);
  40185c:	2000      	movs	r0, #0
  40185e:	4b02      	ldr	r3, [pc, #8]	; (401868 <sd_mmc_removal_0+0x10>)
  401860:	4798      	blx	r3
  401862:	4603      	mov	r3, r0
}
  401864:	4618      	mov	r0, r3
  401866:	bd80      	pop	{r7, pc}
  401868:	00401841 	.word	0x00401841

0040186c <sd_mmc_usb_read_10>:

COMPILER_WORD_ALIGNED
uint8_t sector_buf_1[SD_MMC_BLOCK_SIZE];

Ctrl_status sd_mmc_usb_read_10(uint8_t slot, uint32_t addr, uint16_t nb_sector)
{
  40186c:	b590      	push	{r4, r7, lr}
  40186e:	b085      	sub	sp, #20
  401870:	af00      	add	r7, sp, #0
  401872:	4603      	mov	r3, r0
  401874:	6039      	str	r1, [r7, #0]
  401876:	71fb      	strb	r3, [r7, #7]
  401878:	4613      	mov	r3, r2
  40187a:	80bb      	strh	r3, [r7, #4]
	bool b_first_step = true;
  40187c:	2301      	movs	r3, #1
  40187e:	73fb      	strb	r3, [r7, #15]
	uint16_t nb_step;

	switch (sd_mmc_init_read_blocks(slot, addr, nb_sector)) {
  401880:	88ba      	ldrh	r2, [r7, #4]
  401882:	79fb      	ldrb	r3, [r7, #7]
  401884:	6839      	ldr	r1, [r7, #0]
  401886:	4618      	mov	r0, r3
  401888:	4b31      	ldr	r3, [pc, #196]	; (401950 <sd_mmc_usb_read_10+0xe4>)
  40188a:	4798      	blx	r3
  40188c:	4603      	mov	r3, r0
  40188e:	2b00      	cmp	r3, #0
  401890:	d005      	beq.n	40189e <sd_mmc_usb_read_10+0x32>
  401892:	2b02      	cmp	r3, #2
  401894:	d101      	bne.n	40189a <sd_mmc_usb_read_10+0x2e>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
  401896:	2302      	movs	r3, #2
  401898:	e056      	b.n	401948 <sd_mmc_usb_read_10+0xdc>
	default:
		return CTRL_FAIL;
  40189a:	2301      	movs	r3, #1
  40189c:	e054      	b.n	401948 <sd_mmc_usb_read_10+0xdc>
		break;
  40189e:	bf00      	nop
	}
	// Pipeline the 2 transfer in order to speed-up the performances
	nb_step = nb_sector + 1;
  4018a0:	88bb      	ldrh	r3, [r7, #4]
  4018a2:	3301      	adds	r3, #1
  4018a4:	81bb      	strh	r3, [r7, #12]
	while (nb_step--) {
  4018a6:	e049      	b.n	40193c <sd_mmc_usb_read_10+0xd0>
		if (nb_step) { // Skip last step
  4018a8:	89bb      	ldrh	r3, [r7, #12]
  4018aa:	2b00      	cmp	r3, #0
  4018ac:	d011      	beq.n	4018d2 <sd_mmc_usb_read_10+0x66>
			// MCI -> RAM
			if (SD_MMC_OK != sd_mmc_start_read_blocks(((nb_step % 2) == 0) ?
  4018ae:	89bb      	ldrh	r3, [r7, #12]
  4018b0:	f003 0301 	and.w	r3, r3, #1
  4018b4:	b29b      	uxth	r3, r3
  4018b6:	2b00      	cmp	r3, #0
  4018b8:	d101      	bne.n	4018be <sd_mmc_usb_read_10+0x52>
  4018ba:	4b26      	ldr	r3, [pc, #152]	; (401954 <sd_mmc_usb_read_10+0xe8>)
  4018bc:	e000      	b.n	4018c0 <sd_mmc_usb_read_10+0x54>
  4018be:	4b26      	ldr	r3, [pc, #152]	; (401958 <sd_mmc_usb_read_10+0xec>)
  4018c0:	2101      	movs	r1, #1
  4018c2:	4618      	mov	r0, r3
  4018c4:	4b25      	ldr	r3, [pc, #148]	; (40195c <sd_mmc_usb_read_10+0xf0>)
  4018c6:	4798      	blx	r3
  4018c8:	4603      	mov	r3, r0
  4018ca:	2b00      	cmp	r3, #0
  4018cc:	d001      	beq.n	4018d2 <sd_mmc_usb_read_10+0x66>
					sector_buf_0 : sector_buf_1, 1)) {
				return CTRL_FAIL;
  4018ce:	2301      	movs	r3, #1
  4018d0:	e03a      	b.n	401948 <sd_mmc_usb_read_10+0xdc>
			}
		}
		if (!b_first_step) { // Skip first step
  4018d2:	7bfb      	ldrb	r3, [r7, #15]
  4018d4:	f083 0301 	eor.w	r3, r3, #1
  4018d8:	b2db      	uxtb	r3, r3
  4018da:	2b00      	cmp	r3, #0
  4018dc:	d01f      	beq.n	40191e <sd_mmc_usb_read_10+0xb2>
			// RAM -> USB
			if (!udi_msc_trans_block(true,
					((nb_step % 2) == 0) ?
  4018de:	89bb      	ldrh	r3, [r7, #12]
  4018e0:	f003 0301 	and.w	r3, r3, #1
  4018e4:	b29b      	uxth	r3, r3
			if (!udi_msc_trans_block(true,
  4018e6:	2b00      	cmp	r3, #0
  4018e8:	d101      	bne.n	4018ee <sd_mmc_usb_read_10+0x82>
  4018ea:	491b      	ldr	r1, [pc, #108]	; (401958 <sd_mmc_usb_read_10+0xec>)
  4018ec:	e000      	b.n	4018f0 <sd_mmc_usb_read_10+0x84>
  4018ee:	4919      	ldr	r1, [pc, #100]	; (401954 <sd_mmc_usb_read_10+0xe8>)
  4018f0:	2300      	movs	r3, #0
  4018f2:	f44f 7200 	mov.w	r2, #512	; 0x200
  4018f6:	2001      	movs	r0, #1
  4018f8:	4c19      	ldr	r4, [pc, #100]	; (401960 <sd_mmc_usb_read_10+0xf4>)
  4018fa:	47a0      	blx	r4
  4018fc:	4603      	mov	r3, r0
  4018fe:	f083 0301 	eor.w	r3, r3, #1
  401902:	b2db      	uxtb	r3, r3
  401904:	2b00      	cmp	r3, #0
  401906:	d00c      	beq.n	401922 <sd_mmc_usb_read_10+0xb6>
					sector_buf_1 : sector_buf_0,
					SD_MMC_BLOCK_SIZE,
					NULL)) {
				if (!b_first_step) {
  401908:	7bfb      	ldrb	r3, [r7, #15]
  40190a:	f083 0301 	eor.w	r3, r3, #1
  40190e:	b2db      	uxtb	r3, r3
  401910:	2b00      	cmp	r3, #0
  401912:	d002      	beq.n	40191a <sd_mmc_usb_read_10+0xae>
					sd_mmc_wait_end_of_read_blocks(true);
  401914:	2001      	movs	r0, #1
  401916:	4b13      	ldr	r3, [pc, #76]	; (401964 <sd_mmc_usb_read_10+0xf8>)
  401918:	4798      	blx	r3
				}
				return CTRL_FAIL;
  40191a:	2301      	movs	r3, #1
  40191c:	e014      	b.n	401948 <sd_mmc_usb_read_10+0xdc>
			}
		} else {
			b_first_step = false;
  40191e:	2300      	movs	r3, #0
  401920:	73fb      	strb	r3, [r7, #15]
		}
		if (nb_step) { // Skip last step
  401922:	89bb      	ldrh	r3, [r7, #12]
  401924:	2b00      	cmp	r3, #0
  401926:	d007      	beq.n	401938 <sd_mmc_usb_read_10+0xcc>
			if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
  401928:	2000      	movs	r0, #0
  40192a:	4b0e      	ldr	r3, [pc, #56]	; (401964 <sd_mmc_usb_read_10+0xf8>)
  40192c:	4798      	blx	r3
  40192e:	4603      	mov	r3, r0
  401930:	2b00      	cmp	r3, #0
  401932:	d001      	beq.n	401938 <sd_mmc_usb_read_10+0xcc>
				return CTRL_FAIL;
  401934:	2301      	movs	r3, #1
  401936:	e007      	b.n	401948 <sd_mmc_usb_read_10+0xdc>
			}
		}
		b_first_step = false;
  401938:	2300      	movs	r3, #0
  40193a:	73fb      	strb	r3, [r7, #15]
	while (nb_step--) {
  40193c:	89bb      	ldrh	r3, [r7, #12]
  40193e:	1e5a      	subs	r2, r3, #1
  401940:	81ba      	strh	r2, [r7, #12]
  401942:	2b00      	cmp	r3, #0
  401944:	d1b0      	bne.n	4018a8 <sd_mmc_usb_read_10+0x3c>
	}
	return CTRL_GOOD;
  401946:	2300      	movs	r3, #0
}
  401948:	4618      	mov	r0, r3
  40194a:	3714      	adds	r7, #20
  40194c:	46bd      	mov	sp, r7
  40194e:	bd90      	pop	{r4, r7, pc}
  401950:	004013c1 	.word	0x004013c1
  401954:	2001a994 	.word	0x2001a994
  401958:	2001a794 	.word	0x2001a794
  40195c:	0040148d 	.word	0x0040148d
  401960:	00404c95 	.word	0x00404c95
  401964:	004014d9 	.word	0x004014d9

00401968 <sd_mmc_usb_read_10_0>:

Ctrl_status sd_mmc_usb_read_10_0(uint32_t addr, uint16_t nb_sector)
{
  401968:	b580      	push	{r7, lr}
  40196a:	b082      	sub	sp, #8
  40196c:	af00      	add	r7, sp, #0
  40196e:	6078      	str	r0, [r7, #4]
  401970:	460b      	mov	r3, r1
  401972:	807b      	strh	r3, [r7, #2]
	return sd_mmc_usb_read_10(0, addr, nb_sector);
  401974:	887b      	ldrh	r3, [r7, #2]
  401976:	461a      	mov	r2, r3
  401978:	6879      	ldr	r1, [r7, #4]
  40197a:	2000      	movs	r0, #0
  40197c:	4b03      	ldr	r3, [pc, #12]	; (40198c <sd_mmc_usb_read_10_0+0x24>)
  40197e:	4798      	blx	r3
  401980:	4603      	mov	r3, r0
}
  401982:	4618      	mov	r0, r3
  401984:	3708      	adds	r7, #8
  401986:	46bd      	mov	sp, r7
  401988:	bd80      	pop	{r7, pc}
  40198a:	bf00      	nop
  40198c:	0040186d 	.word	0x0040186d

00401990 <sd_mmc_usb_write_10>:
{
	return sd_mmc_usb_read_10(1, addr, nb_sector);
}

Ctrl_status sd_mmc_usb_write_10(uint8_t slot, uint32_t addr, uint16_t nb_sector)
{
  401990:	b590      	push	{r4, r7, lr}
  401992:	b085      	sub	sp, #20
  401994:	af00      	add	r7, sp, #0
  401996:	4603      	mov	r3, r0
  401998:	6039      	str	r1, [r7, #0]
  40199a:	71fb      	strb	r3, [r7, #7]
  40199c:	4613      	mov	r3, r2
  40199e:	80bb      	strh	r3, [r7, #4]
	bool b_first_step = true;
  4019a0:	2301      	movs	r3, #1
  4019a2:	73fb      	strb	r3, [r7, #15]
	uint16_t nb_step;

	switch (sd_mmc_init_write_blocks(slot, addr, nb_sector)) {
  4019a4:	88ba      	ldrh	r2, [r7, #4]
  4019a6:	79fb      	ldrb	r3, [r7, #7]
  4019a8:	6839      	ldr	r1, [r7, #0]
  4019aa:	4618      	mov	r0, r3
  4019ac:	4b32      	ldr	r3, [pc, #200]	; (401a78 <sd_mmc_usb_write_10+0xe8>)
  4019ae:	4798      	blx	r3
  4019b0:	4603      	mov	r3, r0
  4019b2:	2b00      	cmp	r3, #0
  4019b4:	d005      	beq.n	4019c2 <sd_mmc_usb_write_10+0x32>
  4019b6:	2b02      	cmp	r3, #2
  4019b8:	d101      	bne.n	4019be <sd_mmc_usb_write_10+0x2e>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
  4019ba:	2302      	movs	r3, #2
  4019bc:	e057      	b.n	401a6e <sd_mmc_usb_write_10+0xde>
	default:
		return CTRL_FAIL;
  4019be:	2301      	movs	r3, #1
  4019c0:	e055      	b.n	401a6e <sd_mmc_usb_write_10+0xde>
		break;
  4019c2:	bf00      	nop
	}
	// Pipeline the 2 transfer in order to speed-up the performances
	nb_step = nb_sector + 1;
  4019c4:	88bb      	ldrh	r3, [r7, #4]
  4019c6:	3301      	adds	r3, #1
  4019c8:	81bb      	strh	r3, [r7, #12]
	while (nb_step--) {
  4019ca:	e04a      	b.n	401a62 <sd_mmc_usb_write_10+0xd2>
		if (!b_first_step) { // Skip first step
  4019cc:	7bfb      	ldrb	r3, [r7, #15]
  4019ce:	f083 0301 	eor.w	r3, r3, #1
  4019d2:	b2db      	uxtb	r3, r3
  4019d4:	2b00      	cmp	r3, #0
  4019d6:	d011      	beq.n	4019fc <sd_mmc_usb_write_10+0x6c>
			// RAM -> MCI
			if (SD_MMC_OK != sd_mmc_start_write_blocks(((nb_step % 2) == 0) ?
  4019d8:	89bb      	ldrh	r3, [r7, #12]
  4019da:	f003 0301 	and.w	r3, r3, #1
  4019de:	b29b      	uxth	r3, r3
  4019e0:	2b00      	cmp	r3, #0
  4019e2:	d101      	bne.n	4019e8 <sd_mmc_usb_write_10+0x58>
  4019e4:	4b25      	ldr	r3, [pc, #148]	; (401a7c <sd_mmc_usb_write_10+0xec>)
  4019e6:	e000      	b.n	4019ea <sd_mmc_usb_write_10+0x5a>
  4019e8:	4b25      	ldr	r3, [pc, #148]	; (401a80 <sd_mmc_usb_write_10+0xf0>)
  4019ea:	2101      	movs	r1, #1
  4019ec:	4618      	mov	r0, r3
  4019ee:	4b25      	ldr	r3, [pc, #148]	; (401a84 <sd_mmc_usb_write_10+0xf4>)
  4019f0:	4798      	blx	r3
  4019f2:	4603      	mov	r3, r0
  4019f4:	2b00      	cmp	r3, #0
  4019f6:	d001      	beq.n	4019fc <sd_mmc_usb_write_10+0x6c>
					sector_buf_0 : sector_buf_1, 1)) {
				return CTRL_FAIL;
  4019f8:	2301      	movs	r3, #1
  4019fa:	e038      	b.n	401a6e <sd_mmc_usb_write_10+0xde>
			}
		}
		if (nb_step) { // Skip last step
  4019fc:	89bb      	ldrh	r3, [r7, #12]
  4019fe:	2b00      	cmp	r3, #0
  401a00:	d01f      	beq.n	401a42 <sd_mmc_usb_write_10+0xb2>
			// USB -> RAM
			if (!udi_msc_trans_block(false,
					((nb_step % 2) == 0) ?
  401a02:	89bb      	ldrh	r3, [r7, #12]
  401a04:	f003 0301 	and.w	r3, r3, #1
  401a08:	b29b      	uxth	r3, r3
			if (!udi_msc_trans_block(false,
  401a0a:	2b00      	cmp	r3, #0
  401a0c:	d101      	bne.n	401a12 <sd_mmc_usb_write_10+0x82>
  401a0e:	491c      	ldr	r1, [pc, #112]	; (401a80 <sd_mmc_usb_write_10+0xf0>)
  401a10:	e000      	b.n	401a14 <sd_mmc_usb_write_10+0x84>
  401a12:	491a      	ldr	r1, [pc, #104]	; (401a7c <sd_mmc_usb_write_10+0xec>)
  401a14:	2300      	movs	r3, #0
  401a16:	f44f 7200 	mov.w	r2, #512	; 0x200
  401a1a:	2000      	movs	r0, #0
  401a1c:	4c1a      	ldr	r4, [pc, #104]	; (401a88 <sd_mmc_usb_write_10+0xf8>)
  401a1e:	47a0      	blx	r4
  401a20:	4603      	mov	r3, r0
  401a22:	f083 0301 	eor.w	r3, r3, #1
  401a26:	b2db      	uxtb	r3, r3
  401a28:	2b00      	cmp	r3, #0
  401a2a:	d00a      	beq.n	401a42 <sd_mmc_usb_write_10+0xb2>
					sector_buf_1 : sector_buf_0,
					SD_MMC_BLOCK_SIZE,
					NULL)) {
				if (!b_first_step) {
  401a2c:	7bfb      	ldrb	r3, [r7, #15]
  401a2e:	f083 0301 	eor.w	r3, r3, #1
  401a32:	b2db      	uxtb	r3, r3
  401a34:	2b00      	cmp	r3, #0
  401a36:	d002      	beq.n	401a3e <sd_mmc_usb_write_10+0xae>
					sd_mmc_wait_end_of_write_blocks(true);
  401a38:	2001      	movs	r0, #1
  401a3a:	4b14      	ldr	r3, [pc, #80]	; (401a8c <sd_mmc_usb_write_10+0xfc>)
  401a3c:	4798      	blx	r3
				}
				return CTRL_FAIL;
  401a3e:	2301      	movs	r3, #1
  401a40:	e015      	b.n	401a6e <sd_mmc_usb_write_10+0xde>
			}
		}
		if (!b_first_step) { // Skip first step
  401a42:	7bfb      	ldrb	r3, [r7, #15]
  401a44:	f083 0301 	eor.w	r3, r3, #1
  401a48:	b2db      	uxtb	r3, r3
  401a4a:	2b00      	cmp	r3, #0
  401a4c:	d007      	beq.n	401a5e <sd_mmc_usb_write_10+0xce>
			if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
  401a4e:	2000      	movs	r0, #0
  401a50:	4b0e      	ldr	r3, [pc, #56]	; (401a8c <sd_mmc_usb_write_10+0xfc>)
  401a52:	4798      	blx	r3
  401a54:	4603      	mov	r3, r0
  401a56:	2b00      	cmp	r3, #0
  401a58:	d003      	beq.n	401a62 <sd_mmc_usb_write_10+0xd2>
				return CTRL_FAIL;
  401a5a:	2301      	movs	r3, #1
  401a5c:	e007      	b.n	401a6e <sd_mmc_usb_write_10+0xde>
			}
		} else {
			b_first_step = false;
  401a5e:	2300      	movs	r3, #0
  401a60:	73fb      	strb	r3, [r7, #15]
	while (nb_step--) {
  401a62:	89bb      	ldrh	r3, [r7, #12]
  401a64:	1e5a      	subs	r2, r3, #1
  401a66:	81ba      	strh	r2, [r7, #12]
  401a68:	2b00      	cmp	r3, #0
  401a6a:	d1af      	bne.n	4019cc <sd_mmc_usb_write_10+0x3c>
		}
	}
	return CTRL_GOOD;
  401a6c:	2300      	movs	r3, #0
}
  401a6e:	4618      	mov	r0, r3
  401a70:	3714      	adds	r7, #20
  401a72:	46bd      	mov	sp, r7
  401a74:	bd90      	pop	{r4, r7, pc}
  401a76:	bf00      	nop
  401a78:	00401565 	.word	0x00401565
  401a7c:	2001a994 	.word	0x2001a994
  401a80:	2001a794 	.word	0x2001a794
  401a84:	0040162d 	.word	0x0040162d
  401a88:	00404c95 	.word	0x00404c95
  401a8c:	00401679 	.word	0x00401679

00401a90 <sd_mmc_usb_write_10_0>:

Ctrl_status sd_mmc_usb_write_10_0(uint32_t addr, uint16_t nb_sector)
{
  401a90:	b580      	push	{r7, lr}
  401a92:	b082      	sub	sp, #8
  401a94:	af00      	add	r7, sp, #0
  401a96:	6078      	str	r0, [r7, #4]
  401a98:	460b      	mov	r3, r1
  401a9a:	807b      	strh	r3, [r7, #2]
	return sd_mmc_usb_write_10(0, addr, nb_sector);
  401a9c:	887b      	ldrh	r3, [r7, #2]
  401a9e:	461a      	mov	r2, r3
  401aa0:	6879      	ldr	r1, [r7, #4]
  401aa2:	2000      	movs	r0, #0
  401aa4:	4b03      	ldr	r3, [pc, #12]	; (401ab4 <sd_mmc_usb_write_10_0+0x24>)
  401aa6:	4798      	blx	r3
  401aa8:	4603      	mov	r3, r0
}
  401aaa:	4618      	mov	r0, r3
  401aac:	3708      	adds	r7, #8
  401aae:	46bd      	mov	sp, r7
  401ab0:	bd80      	pop	{r7, pc}
  401ab2:	bf00      	nop
  401ab4:	00401991 	.word	0x00401991

00401ab8 <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
  401ab8:	b580      	push	{r7, lr}
  401aba:	b084      	sub	sp, #16
  401abc:	af00      	add	r7, sp, #0
  401abe:	4603      	mov	r3, r0
  401ac0:	60b9      	str	r1, [r7, #8]
  401ac2:	607a      	str	r2, [r7, #4]
  401ac4:	73fb      	strb	r3, [r7, #15]
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
  401ac6:	7bfb      	ldrb	r3, [r7, #15]
  401ac8:	2201      	movs	r2, #1
  401aca:	68b9      	ldr	r1, [r7, #8]
  401acc:	4618      	mov	r0, r3
  401ace:	4b11      	ldr	r3, [pc, #68]	; (401b14 <sd_mmc_mem_2_ram+0x5c>)
  401ad0:	4798      	blx	r3
  401ad2:	4603      	mov	r3, r0
  401ad4:	2b00      	cmp	r3, #0
  401ad6:	d005      	beq.n	401ae4 <sd_mmc_mem_2_ram+0x2c>
  401ad8:	2b02      	cmp	r3, #2
  401ada:	d101      	bne.n	401ae0 <sd_mmc_mem_2_ram+0x28>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
  401adc:	2302      	movs	r3, #2
  401ade:	e014      	b.n	401b0a <sd_mmc_mem_2_ram+0x52>
	default:
		return CTRL_FAIL;
  401ae0:	2301      	movs	r3, #1
  401ae2:	e012      	b.n	401b0a <sd_mmc_mem_2_ram+0x52>
		break;
  401ae4:	bf00      	nop
	}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
  401ae6:	2101      	movs	r1, #1
  401ae8:	6878      	ldr	r0, [r7, #4]
  401aea:	4b0b      	ldr	r3, [pc, #44]	; (401b18 <sd_mmc_mem_2_ram+0x60>)
  401aec:	4798      	blx	r3
  401aee:	4603      	mov	r3, r0
  401af0:	2b00      	cmp	r3, #0
  401af2:	d001      	beq.n	401af8 <sd_mmc_mem_2_ram+0x40>
		return CTRL_FAIL;
  401af4:	2301      	movs	r3, #1
  401af6:	e008      	b.n	401b0a <sd_mmc_mem_2_ram+0x52>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
  401af8:	2000      	movs	r0, #0
  401afa:	4b08      	ldr	r3, [pc, #32]	; (401b1c <sd_mmc_mem_2_ram+0x64>)
  401afc:	4798      	blx	r3
  401afe:	4603      	mov	r3, r0
  401b00:	2b00      	cmp	r3, #0
  401b02:	d001      	beq.n	401b08 <sd_mmc_mem_2_ram+0x50>
		return CTRL_FAIL;
  401b04:	2301      	movs	r3, #1
  401b06:	e000      	b.n	401b0a <sd_mmc_mem_2_ram+0x52>
	}
	return CTRL_GOOD;
  401b08:	2300      	movs	r3, #0
}
  401b0a:	4618      	mov	r0, r3
  401b0c:	3710      	adds	r7, #16
  401b0e:	46bd      	mov	sp, r7
  401b10:	bd80      	pop	{r7, pc}
  401b12:	bf00      	nop
  401b14:	004013c1 	.word	0x004013c1
  401b18:	0040148d 	.word	0x0040148d
  401b1c:	004014d9 	.word	0x004014d9

00401b20 <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
  401b20:	b580      	push	{r7, lr}
  401b22:	b082      	sub	sp, #8
  401b24:	af00      	add	r7, sp, #0
  401b26:	6078      	str	r0, [r7, #4]
  401b28:	6039      	str	r1, [r7, #0]
	return sd_mmc_mem_2_ram(0, addr, ram);
  401b2a:	683a      	ldr	r2, [r7, #0]
  401b2c:	6879      	ldr	r1, [r7, #4]
  401b2e:	2000      	movs	r0, #0
  401b30:	4b03      	ldr	r3, [pc, #12]	; (401b40 <sd_mmc_mem_2_ram_0+0x20>)
  401b32:	4798      	blx	r3
  401b34:	4603      	mov	r3, r0
}
  401b36:	4618      	mov	r0, r3
  401b38:	3708      	adds	r7, #8
  401b3a:	46bd      	mov	sp, r7
  401b3c:	bd80      	pop	{r7, pc}
  401b3e:	bf00      	nop
  401b40:	00401ab9 	.word	0x00401ab9

00401b44 <sd_mmc_ram_2_mem>:
{
	return sd_mmc_mem_2_ram(1, addr, ram);
}

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
  401b44:	b580      	push	{r7, lr}
  401b46:	b084      	sub	sp, #16
  401b48:	af00      	add	r7, sp, #0
  401b4a:	4603      	mov	r3, r0
  401b4c:	60b9      	str	r1, [r7, #8]
  401b4e:	607a      	str	r2, [r7, #4]
  401b50:	73fb      	strb	r3, [r7, #15]
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
  401b52:	7bfb      	ldrb	r3, [r7, #15]
  401b54:	2201      	movs	r2, #1
  401b56:	68b9      	ldr	r1, [r7, #8]
  401b58:	4618      	mov	r0, r3
  401b5a:	4b11      	ldr	r3, [pc, #68]	; (401ba0 <sd_mmc_ram_2_mem+0x5c>)
  401b5c:	4798      	blx	r3
  401b5e:	4603      	mov	r3, r0
  401b60:	2b00      	cmp	r3, #0
  401b62:	d005      	beq.n	401b70 <sd_mmc_ram_2_mem+0x2c>
  401b64:	2b02      	cmp	r3, #2
  401b66:	d101      	bne.n	401b6c <sd_mmc_ram_2_mem+0x28>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
  401b68:	2302      	movs	r3, #2
  401b6a:	e014      	b.n	401b96 <sd_mmc_ram_2_mem+0x52>
	default:
		return CTRL_FAIL;
  401b6c:	2301      	movs	r3, #1
  401b6e:	e012      	b.n	401b96 <sd_mmc_ram_2_mem+0x52>
		break;
  401b70:	bf00      	nop
	}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
  401b72:	2101      	movs	r1, #1
  401b74:	6878      	ldr	r0, [r7, #4]
  401b76:	4b0b      	ldr	r3, [pc, #44]	; (401ba4 <sd_mmc_ram_2_mem+0x60>)
  401b78:	4798      	blx	r3
  401b7a:	4603      	mov	r3, r0
  401b7c:	2b00      	cmp	r3, #0
  401b7e:	d001      	beq.n	401b84 <sd_mmc_ram_2_mem+0x40>
		return CTRL_FAIL;
  401b80:	2301      	movs	r3, #1
  401b82:	e008      	b.n	401b96 <sd_mmc_ram_2_mem+0x52>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
  401b84:	2000      	movs	r0, #0
  401b86:	4b08      	ldr	r3, [pc, #32]	; (401ba8 <sd_mmc_ram_2_mem+0x64>)
  401b88:	4798      	blx	r3
  401b8a:	4603      	mov	r3, r0
  401b8c:	2b00      	cmp	r3, #0
  401b8e:	d001      	beq.n	401b94 <sd_mmc_ram_2_mem+0x50>
		return CTRL_FAIL;
  401b90:	2301      	movs	r3, #1
  401b92:	e000      	b.n	401b96 <sd_mmc_ram_2_mem+0x52>
	}
	return CTRL_GOOD;
  401b94:	2300      	movs	r3, #0
}
  401b96:	4618      	mov	r0, r3
  401b98:	3710      	adds	r7, #16
  401b9a:	46bd      	mov	sp, r7
  401b9c:	bd80      	pop	{r7, pc}
  401b9e:	bf00      	nop
  401ba0:	00401565 	.word	0x00401565
  401ba4:	0040162d 	.word	0x0040162d
  401ba8:	00401679 	.word	0x00401679

00401bac <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
  401bac:	b580      	push	{r7, lr}
  401bae:	b082      	sub	sp, #8
  401bb0:	af00      	add	r7, sp, #0
  401bb2:	6078      	str	r0, [r7, #4]
  401bb4:	6039      	str	r1, [r7, #0]
	return sd_mmc_ram_2_mem(0, addr, ram);
  401bb6:	683a      	ldr	r2, [r7, #0]
  401bb8:	6879      	ldr	r1, [r7, #4]
  401bba:	2000      	movs	r0, #0
  401bbc:	4b03      	ldr	r3, [pc, #12]	; (401bcc <sd_mmc_ram_2_mem_0+0x20>)
  401bbe:	4798      	blx	r3
  401bc0:	4603      	mov	r3, r0
}
  401bc2:	4618      	mov	r0, r3
  401bc4:	3708      	adds	r7, #8
  401bc6:	46bd      	mov	sp, r7
  401bc8:	bd80      	pop	{r7, pc}
  401bca:	bf00      	nop
  401bcc:	00401b45 	.word	0x00401b45

00401bd0 <spi_enable>:
 * \brief Enable SPI.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_enable(Spi *p_spi)
{
  401bd0:	b480      	push	{r7}
  401bd2:	b083      	sub	sp, #12
  401bd4:	af00      	add	r7, sp, #0
  401bd6:	6078      	str	r0, [r7, #4]
	p_spi->SPI_CR = SPI_CR_SPIEN;
  401bd8:	687b      	ldr	r3, [r7, #4]
  401bda:	2201      	movs	r2, #1
  401bdc:	601a      	str	r2, [r3, #0]
}
  401bde:	bf00      	nop
  401be0:	370c      	adds	r7, #12
  401be2:	46bd      	mov	sp, r7
  401be4:	f85d 7b04 	ldr.w	r7, [sp], #4
  401be8:	4770      	bx	lr

00401bea <spi_is_enabled>:
 * \param p_spi Pointer to an SPI instance.
 *
 * \return 1 if the SPI is enabled, otherwise 0.
 */
static inline uint32_t spi_is_enabled(Spi *p_spi)
{
  401bea:	b480      	push	{r7}
  401bec:	b083      	sub	sp, #12
  401bee:	af00      	add	r7, sp, #0
  401bf0:	6078      	str	r0, [r7, #4]
	if (p_spi->SPI_SR & SPI_SR_SPIENS) {
  401bf2:	687b      	ldr	r3, [r7, #4]
  401bf4:	691b      	ldr	r3, [r3, #16]
  401bf6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
  401bfa:	2b00      	cmp	r3, #0
  401bfc:	d001      	beq.n	401c02 <spi_is_enabled+0x18>
		return 1;
  401bfe:	2301      	movs	r3, #1
  401c00:	e000      	b.n	401c04 <spi_is_enabled+0x1a>
	} else {
		return 0;
  401c02:	2300      	movs	r3, #0
	}
}
  401c04:	4618      	mov	r0, r3
  401c06:	370c      	adds	r7, #12
  401c08:	46bd      	mov	sp, r7
  401c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
  401c0e:	4770      	bx	lr

00401c10 <sd_mmc_spi_crc7>:
 * \param size    Size of buffer data
 *
 * \return CRC7 computed
 */
static uint8_t sd_mmc_spi_crc7(uint8_t * buf, uint8_t size)
{
  401c10:	b480      	push	{r7}
  401c12:	b085      	sub	sp, #20
  401c14:	af00      	add	r7, sp, #0
  401c16:	6078      	str	r0, [r7, #4]
  401c18:	460b      	mov	r3, r1
  401c1a:	70fb      	strb	r3, [r7, #3]
	uint8_t crc, value, i;

	crc = 0;
  401c1c:	2300      	movs	r3, #0
  401c1e:	73fb      	strb	r3, [r7, #15]
	while (size--) {
  401c20:	e01e      	b.n	401c60 <sd_mmc_spi_crc7+0x50>
		value = *buf++;
  401c22:	687b      	ldr	r3, [r7, #4]
  401c24:	1c5a      	adds	r2, r3, #1
  401c26:	607a      	str	r2, [r7, #4]
  401c28:	781b      	ldrb	r3, [r3, #0]
  401c2a:	73bb      	strb	r3, [r7, #14]
		for (i = 0; i < 8; i++) {
  401c2c:	2300      	movs	r3, #0
  401c2e:	737b      	strb	r3, [r7, #13]
  401c30:	e013      	b.n	401c5a <sd_mmc_spi_crc7+0x4a>
			crc <<= 1;
  401c32:	7bfb      	ldrb	r3, [r7, #15]
  401c34:	005b      	lsls	r3, r3, #1
  401c36:	73fb      	strb	r3, [r7, #15]
			if ((value & 0x80) ^ (crc & 0x80)) {
  401c38:	7bba      	ldrb	r2, [r7, #14]
  401c3a:	7bfb      	ldrb	r3, [r7, #15]
  401c3c:	4053      	eors	r3, r2
  401c3e:	b2db      	uxtb	r3, r3
  401c40:	b25b      	sxtb	r3, r3
  401c42:	2b00      	cmp	r3, #0
  401c44:	da03      	bge.n	401c4e <sd_mmc_spi_crc7+0x3e>
				crc ^= 0x09;
  401c46:	7bfb      	ldrb	r3, [r7, #15]
  401c48:	f083 0309 	eor.w	r3, r3, #9
  401c4c:	73fb      	strb	r3, [r7, #15]
			}
			value <<= 1;
  401c4e:	7bbb      	ldrb	r3, [r7, #14]
  401c50:	005b      	lsls	r3, r3, #1
  401c52:	73bb      	strb	r3, [r7, #14]
		for (i = 0; i < 8; i++) {
  401c54:	7b7b      	ldrb	r3, [r7, #13]
  401c56:	3301      	adds	r3, #1
  401c58:	737b      	strb	r3, [r7, #13]
  401c5a:	7b7b      	ldrb	r3, [r7, #13]
  401c5c:	2b07      	cmp	r3, #7
  401c5e:	d9e8      	bls.n	401c32 <sd_mmc_spi_crc7+0x22>
	while (size--) {
  401c60:	78fb      	ldrb	r3, [r7, #3]
  401c62:	1e5a      	subs	r2, r3, #1
  401c64:	70fa      	strb	r2, [r7, #3]
  401c66:	2b00      	cmp	r3, #0
  401c68:	d1db      	bne.n	401c22 <sd_mmc_spi_crc7+0x12>
		}
	}
	crc = (crc << 1) | 1;
  401c6a:	7bfb      	ldrb	r3, [r7, #15]
  401c6c:	005b      	lsls	r3, r3, #1
  401c6e:	b25b      	sxtb	r3, r3
  401c70:	f043 0301 	orr.w	r3, r3, #1
  401c74:	b25b      	sxtb	r3, r3
  401c76:	73fb      	strb	r3, [r7, #15]
	return crc;
  401c78:	7bfb      	ldrb	r3, [r7, #15]
}
  401c7a:	4618      	mov	r0, r3
  401c7c:	3714      	adds	r7, #20
  401c7e:	46bd      	mov	sp, r7
  401c80:	f85d 7b04 	ldr.w	r7, [sp], #4
  401c84:	4770      	bx	lr
	...

00401c88 <sd_mmc_spi_wait_busy>:
 * \brief Wait the end of busy on DAT0 line
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_wait_busy(void)
{
  401c88:	b580      	push	{r7, lr}
  401c8a:	b082      	sub	sp, #8
  401c8c:	af00      	add	r7, sp, #0
	uint8_t line = 0xFF;
  401c8e:	23ff      	movs	r3, #255	; 0xff
  401c90:	70fb      	strb	r3, [r7, #3]

	/* Delay before check busy
	 * Nbr timing minimum = 8 cylces
	 */
	sd_mmc_spi_drv_read_packet(SD_MMC_SPI, &line, 1);
  401c92:	1cfb      	adds	r3, r7, #3
  401c94:	2201      	movs	r2, #1
  401c96:	4619      	mov	r1, r3
  401c98:	480f      	ldr	r0, [pc, #60]	; (401cd8 <sd_mmc_spi_wait_busy+0x50>)
  401c9a:	4b10      	ldr	r3, [pc, #64]	; (401cdc <sd_mmc_spi_wait_busy+0x54>)
  401c9c:	4798      	blx	r3
	/* Wait end of busy signal
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	uint32_t nec_timeout = 200000;
  401c9e:	4b10      	ldr	r3, [pc, #64]	; (401ce0 <sd_mmc_spi_wait_busy+0x58>)
  401ca0:	607b      	str	r3, [r7, #4]
	sd_mmc_spi_drv_read_packet(SD_MMC_SPI, &line, 1);
  401ca2:	1cfb      	adds	r3, r7, #3
  401ca4:	2201      	movs	r2, #1
  401ca6:	4619      	mov	r1, r3
  401ca8:	480b      	ldr	r0, [pc, #44]	; (401cd8 <sd_mmc_spi_wait_busy+0x50>)
  401caa:	4b0c      	ldr	r3, [pc, #48]	; (401cdc <sd_mmc_spi_wait_busy+0x54>)
  401cac:	4798      	blx	r3
	do {
		sd_mmc_spi_drv_read_packet(SD_MMC_SPI, &line, 1);
  401cae:	1cfb      	adds	r3, r7, #3
  401cb0:	2201      	movs	r2, #1
  401cb2:	4619      	mov	r1, r3
  401cb4:	4808      	ldr	r0, [pc, #32]	; (401cd8 <sd_mmc_spi_wait_busy+0x50>)
  401cb6:	4b09      	ldr	r3, [pc, #36]	; (401cdc <sd_mmc_spi_wait_busy+0x54>)
  401cb8:	4798      	blx	r3
		if (!(nec_timeout--)) {
  401cba:	687b      	ldr	r3, [r7, #4]
  401cbc:	1e5a      	subs	r2, r3, #1
  401cbe:	607a      	str	r2, [r7, #4]
  401cc0:	2b00      	cmp	r3, #0
  401cc2:	d101      	bne.n	401cc8 <sd_mmc_spi_wait_busy+0x40>
			return false;
  401cc4:	2300      	movs	r3, #0
  401cc6:	e003      	b.n	401cd0 <sd_mmc_spi_wait_busy+0x48>
		}
	} while (line != 0xFF);
  401cc8:	78fb      	ldrb	r3, [r7, #3]
  401cca:	2bff      	cmp	r3, #255	; 0xff
  401ccc:	d1ef      	bne.n	401cae <sd_mmc_spi_wait_busy+0x26>
	return true;
  401cce:	2301      	movs	r3, #1
}
  401cd0:	4618      	mov	r0, r3
  401cd2:	3708      	adds	r7, #8
  401cd4:	46bd      	mov	sp, r7
  401cd6:	bd80      	pop	{r7, pc}
  401cd8:	40008400 	.word	0x40008400
  401cdc:	00402a59 	.word	0x00402a59
  401ce0:	00030d40 	.word	0x00030d40

00401ce4 <sd_mmc_spi_start_read_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_start_read_block(void)
{
  401ce4:	b580      	push	{r7, lr}
  401ce6:	b082      	sub	sp, #8
  401ce8:	af00      	add	r7, sp, #0
	 * Compute the maximum timeout:
	 * Frequency maximum = 25MHz
	 * 1 byte = 8 cycles
	 * 100ms = 312500 x sd_mmc_spi_drv_read_packet() maximum
	 */
	token = 0;
  401cea:	2300      	movs	r3, #0
  401cec:	70fb      	strb	r3, [r7, #3]
	i = 500000;
  401cee:	4b16      	ldr	r3, [pc, #88]	; (401d48 <sd_mmc_spi_start_read_block+0x64>)
  401cf0:	607b      	str	r3, [r7, #4]
	do {
		if (i-- == 0) {
  401cf2:	687b      	ldr	r3, [r7, #4]
  401cf4:	1e5a      	subs	r2, r3, #1
  401cf6:	607a      	str	r2, [r7, #4]
  401cf8:	2b00      	cmp	r3, #0
  401cfa:	d104      	bne.n	401d06 <sd_mmc_spi_start_read_block+0x22>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
  401cfc:	4b13      	ldr	r3, [pc, #76]	; (401d4c <sd_mmc_spi_start_read_block+0x68>)
  401cfe:	2204      	movs	r2, #4
  401d00:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: Read blocks timeout\n\r", __func__);
			return false;
  401d02:	2300      	movs	r3, #0
  401d04:	e01c      	b.n	401d40 <sd_mmc_spi_start_read_block+0x5c>
		}
		sd_mmc_spi_drv_read_packet(SD_MMC_SPI, &token, 1);
  401d06:	1cfb      	adds	r3, r7, #3
  401d08:	2201      	movs	r2, #1
  401d0a:	4619      	mov	r1, r3
  401d0c:	4810      	ldr	r0, [pc, #64]	; (401d50 <sd_mmc_spi_start_read_block+0x6c>)
  401d0e:	4b11      	ldr	r3, [pc, #68]	; (401d54 <sd_mmc_spi_start_read_block+0x70>)
  401d10:	4798      	blx	r3
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
  401d12:	78fb      	ldrb	r3, [r7, #3]
  401d14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  401d18:	2b00      	cmp	r3, #0
  401d1a:	d10d      	bne.n	401d38 <sd_mmc_spi_start_read_block+0x54>
			Assert(SPI_TOKEN_DATA_ERROR_ERRORS & token);
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
  401d1c:	78fb      	ldrb	r3, [r7, #3]
  401d1e:	f003 0307 	and.w	r3, r3, #7
  401d22:	2b00      	cmp	r3, #0
  401d24:	d003      	beq.n	401d2e <sd_mmc_spi_start_read_block+0x4a>
					| SPI_TOKEN_DATA_ERROR_ECC_ERROR
					| SPI_TOKEN_DATA_ERROR_CC_ERROR)) {
				sd_mmc_spi_debug("%s: CRC data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
  401d26:	4b09      	ldr	r3, [pc, #36]	; (401d4c <sd_mmc_spi_start_read_block+0x68>)
  401d28:	2207      	movs	r2, #7
  401d2a:	701a      	strb	r2, [r3, #0]
  401d2c:	e002      	b.n	401d34 <sd_mmc_spi_start_read_block+0x50>
			} else {
				sd_mmc_spi_debug("%s: Out of range data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
  401d2e:	4b07      	ldr	r3, [pc, #28]	; (401d4c <sd_mmc_spi_start_read_block+0x68>)
  401d30:	220b      	movs	r2, #11
  401d32:	701a      	strb	r2, [r3, #0]
			}
			return false;
  401d34:	2300      	movs	r3, #0
  401d36:	e003      	b.n	401d40 <sd_mmc_spi_start_read_block+0x5c>
		}
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
  401d38:	78fb      	ldrb	r3, [r7, #3]
  401d3a:	2bfe      	cmp	r3, #254	; 0xfe
  401d3c:	d1d9      	bne.n	401cf2 <sd_mmc_spi_start_read_block+0xe>

	return true;
  401d3e:	2301      	movs	r3, #1
}
  401d40:	4618      	mov	r0, r3
  401d42:	3708      	adds	r7, #8
  401d44:	46bd      	mov	sp, r7
  401d46:	bd80      	pop	{r7, pc}
  401d48:	0007a120 	.word	0x0007a120
  401d4c:	20000c7e 	.word	0x20000c7e
  401d50:	40008400 	.word	0x40008400
  401d54:	00402a59 	.word	0x00402a59

00401d58 <sd_mmc_spi_stop_read_block>:

/**
 * \brief Executed the end of a read block transfer
 */
static void sd_mmc_spi_stop_read_block(void)
{
  401d58:	b580      	push	{r7, lr}
  401d5a:	b082      	sub	sp, #8
  401d5c:	af00      	add	r7, sp, #0
	uint8_t crc[2];
	// Read 16-bit CRC (not cheked)
	sd_mmc_spi_drv_read_packet(SD_MMC_SPI, crc, 2);
  401d5e:	1d3b      	adds	r3, r7, #4
  401d60:	2202      	movs	r2, #2
  401d62:	4619      	mov	r1, r3
  401d64:	4803      	ldr	r0, [pc, #12]	; (401d74 <sd_mmc_spi_stop_read_block+0x1c>)
  401d66:	4b04      	ldr	r3, [pc, #16]	; (401d78 <sd_mmc_spi_stop_read_block+0x20>)
  401d68:	4798      	blx	r3
}
  401d6a:	bf00      	nop
  401d6c:	3708      	adds	r7, #8
  401d6e:	46bd      	mov	sp, r7
  401d70:	bd80      	pop	{r7, pc}
  401d72:	bf00      	nop
  401d74:	40008400 	.word	0x40008400
  401d78:	00402a59 	.word	0x00402a59

00401d7c <sd_mmc_spi_start_write_block>:

/**
 * \brief Sends the correct TOKEN on the line to start a write block transfer
 */
static void sd_mmc_spi_start_write_block(void)
{
  401d7c:	b580      	push	{r7, lr}
  401d7e:	b082      	sub	sp, #8
  401d80:	af00      	add	r7, sp, #0
	uint8_t dummy = 0xFF;
  401d82:	23ff      	movs	r3, #255	; 0xff
  401d84:	71fb      	strb	r3, [r7, #7]
	Assert(!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size));
	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	sd_mmc_spi_drv_write_packet(SD_MMC_SPI, &dummy, 1);
  401d86:	1dfb      	adds	r3, r7, #7
  401d88:	2201      	movs	r2, #1
  401d8a:	4619      	mov	r1, r3
  401d8c:	480a      	ldr	r0, [pc, #40]	; (401db8 <sd_mmc_spi_start_write_block+0x3c>)
  401d8e:	4b0b      	ldr	r3, [pc, #44]	; (401dbc <sd_mmc_spi_start_write_block+0x40>)
  401d90:	4798      	blx	r3
	// Send start token
	uint8_t token;
	if (1 == sd_mmc_spi_nb_block) {
  401d92:	4b0b      	ldr	r3, [pc, #44]	; (401dc0 <sd_mmc_spi_start_write_block+0x44>)
  401d94:	881b      	ldrh	r3, [r3, #0]
  401d96:	2b01      	cmp	r3, #1
  401d98:	d102      	bne.n	401da0 <sd_mmc_spi_start_write_block+0x24>
		token = SPI_TOKEN_SINGLE_WRITE;
  401d9a:	23fe      	movs	r3, #254	; 0xfe
  401d9c:	71bb      	strb	r3, [r7, #6]
  401d9e:	e001      	b.n	401da4 <sd_mmc_spi_start_write_block+0x28>
	} else {
		token = SPI_TOKEN_MULTI_WRITE;
  401da0:	23fc      	movs	r3, #252	; 0xfc
  401da2:	71bb      	strb	r3, [r7, #6]
	}
	sd_mmc_spi_drv_write_packet(SD_MMC_SPI, &token, 1);
  401da4:	1dbb      	adds	r3, r7, #6
  401da6:	2201      	movs	r2, #1
  401da8:	4619      	mov	r1, r3
  401daa:	4803      	ldr	r0, [pc, #12]	; (401db8 <sd_mmc_spi_start_write_block+0x3c>)
  401dac:	4b03      	ldr	r3, [pc, #12]	; (401dbc <sd_mmc_spi_start_write_block+0x40>)
  401dae:	4798      	blx	r3
}
  401db0:	bf00      	nop
  401db2:	3708      	adds	r7, #8
  401db4:	46bd      	mov	sp, r7
  401db6:	bd80      	pop	{r7, pc}
  401db8:	40008400 	.word	0x40008400
  401dbc:	004029e5 	.word	0x004029e5
  401dc0:	20000c8e 	.word	0x20000c8e

00401dc4 <sd_mmc_spi_stop_write_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_write_block(void)
{
  401dc4:	b580      	push	{r7, lr}
  401dc6:	b082      	sub	sp, #8
  401dc8:	af00      	add	r7, sp, #0
	uint8_t resp;
	uint16_t crc;

	// Send CRC
	crc = 0xFFFF; /// CRC is disabled in SPI mode
  401dca:	f64f 73ff 	movw	r3, #65535	; 0xffff
  401dce:	80bb      	strh	r3, [r7, #4]
	sd_mmc_spi_drv_write_packet(SD_MMC_SPI, (uint8_t *)&crc, 2);
  401dd0:	1d3b      	adds	r3, r7, #4
  401dd2:	2202      	movs	r2, #2
  401dd4:	4619      	mov	r1, r3
  401dd6:	4817      	ldr	r0, [pc, #92]	; (401e34 <sd_mmc_spi_stop_write_block+0x70>)
  401dd8:	4b17      	ldr	r3, [pc, #92]	; (401e38 <sd_mmc_spi_stop_write_block+0x74>)
  401dda:	4798      	blx	r3
	// Receiv data response token
	sd_mmc_spi_drv_read_packet(SD_MMC_SPI, &resp, 1);
  401ddc:	1dfb      	adds	r3, r7, #7
  401dde:	2201      	movs	r2, #1
  401de0:	4619      	mov	r1, r3
  401de2:	4814      	ldr	r0, [pc, #80]	; (401e34 <sd_mmc_spi_stop_write_block+0x70>)
  401de4:	4b15      	ldr	r3, [pc, #84]	; (401e3c <sd_mmc_spi_stop_write_block+0x78>)
  401de6:	4798      	blx	r3
	if (!SPI_TOKEN_DATA_RESP_VALID(resp)) {
  401de8:	79fb      	ldrb	r3, [r7, #7]
  401dea:	f003 0310 	and.w	r3, r3, #16
  401dee:	2b00      	cmp	r3, #0
  401df0:	d104      	bne.n	401dfc <sd_mmc_spi_stop_write_block+0x38>
  401df2:	79fb      	ldrb	r3, [r7, #7]
  401df4:	f003 0301 	and.w	r3, r3, #1
  401df8:	2b00      	cmp	r3, #0
  401dfa:	d104      	bne.n	401e06 <sd_mmc_spi_stop_write_block+0x42>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
  401dfc:	4b10      	ldr	r3, [pc, #64]	; (401e40 <sd_mmc_spi_stop_write_block+0x7c>)
  401dfe:	2201      	movs	r2, #1
  401e00:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Invalid Data Response Token 0x%x\n\r", __func__, resp);
		return false;
  401e02:	2300      	movs	r3, #0
  401e04:	e012      	b.n	401e2c <sd_mmc_spi_stop_write_block+0x68>
	}
	// Check data response
	switch (SPI_TOKEN_DATA_RESP_CODE(resp)) {
  401e06:	79fb      	ldrb	r3, [r7, #7]
  401e08:	f003 031e 	and.w	r3, r3, #30
  401e0c:	2b04      	cmp	r3, #4
  401e0e:	d00b      	beq.n	401e28 <sd_mmc_spi_stop_write_block+0x64>
  401e10:	2b0a      	cmp	r3, #10
  401e12:	d104      	bne.n	401e1e <sd_mmc_spi_stop_write_block+0x5a>
	case SPI_TOKEN_DATA_RESP_ACCEPTED:
		break;
	case SPI_TOKEN_DATA_RESP_CRC_ERR:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_CRC;
  401e14:	4b0a      	ldr	r3, [pc, #40]	; (401e40 <sd_mmc_spi_stop_write_block+0x7c>)
  401e16:	2208      	movs	r2, #8
  401e18:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks, SD_MMC_SPI_ERR_CRC, resp 0x%x\n\r",
				__func__, resp);
		return false;
  401e1a:	2300      	movs	r3, #0
  401e1c:	e006      	b.n	401e2c <sd_mmc_spi_stop_write_block+0x68>
	case SPI_TOKEN_DATA_RESP_WRITE_ERR:
	default:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
  401e1e:	4b08      	ldr	r3, [pc, #32]	; (401e40 <sd_mmc_spi_stop_write_block+0x7c>)
  401e20:	220a      	movs	r2, #10
  401e22:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks SD_MMC_SPI_ERR_WR, resp 0x%x\n\r",
				__func__, resp);
		return false;
  401e24:	2300      	movs	r3, #0
  401e26:	e001      	b.n	401e2c <sd_mmc_spi_stop_write_block+0x68>
		break;
  401e28:	bf00      	nop
	}
	return true;
  401e2a:	2301      	movs	r3, #1
}
  401e2c:	4618      	mov	r0, r3
  401e2e:	3708      	adds	r7, #8
  401e30:	46bd      	mov	sp, r7
  401e32:	bd80      	pop	{r7, pc}
  401e34:	40008400 	.word	0x40008400
  401e38:	004029e5 	.word	0x004029e5
  401e3c:	00402a59 	.word	0x00402a59
  401e40:	20000c7e 	.word	0x20000c7e

00401e44 <sd_mmc_spi_stop_multiwrite_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_multiwrite_block(void)
{
  401e44:	b580      	push	{r7, lr}
  401e46:	b082      	sub	sp, #8
  401e48:	af00      	add	r7, sp, #0
	uint8_t value;

	if (1 == sd_mmc_spi_nb_block) {
  401e4a:	4b1a      	ldr	r3, [pc, #104]	; (401eb4 <sd_mmc_spi_stop_multiwrite_block+0x70>)
  401e4c:	881b      	ldrh	r3, [r3, #0]
  401e4e:	2b01      	cmp	r3, #1
  401e50:	d101      	bne.n	401e56 <sd_mmc_spi_stop_multiwrite_block+0x12>
		return true; // Single block write
  401e52:	2301      	movs	r3, #1
  401e54:	e02a      	b.n	401eac <sd_mmc_spi_stop_multiwrite_block+0x68>
	}
	if (sd_mmc_spi_nb_block >
  401e56:	4b17      	ldr	r3, [pc, #92]	; (401eb4 <sd_mmc_spi_stop_multiwrite_block+0x70>)
  401e58:	881b      	ldrh	r3, [r3, #0]
  401e5a:	4619      	mov	r1, r3
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
  401e5c:	4b16      	ldr	r3, [pc, #88]	; (401eb8 <sd_mmc_spi_stop_multiwrite_block+0x74>)
  401e5e:	681b      	ldr	r3, [r3, #0]
  401e60:	4a16      	ldr	r2, [pc, #88]	; (401ebc <sd_mmc_spi_stop_multiwrite_block+0x78>)
  401e62:	8812      	ldrh	r2, [r2, #0]
  401e64:	fbb3 f3f2 	udiv	r3, r3, r2
	if (sd_mmc_spi_nb_block >
  401e68:	4299      	cmp	r1, r3
  401e6a:	d901      	bls.n	401e70 <sd_mmc_spi_stop_multiwrite_block+0x2c>
		return true; // It is not the End of multi write
  401e6c:	2301      	movs	r3, #1
  401e6e:	e01d      	b.n	401eac <sd_mmc_spi_stop_multiwrite_block+0x68>
	}

	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	value = 0xFF;
  401e70:	23ff      	movs	r3, #255	; 0xff
  401e72:	71fb      	strb	r3, [r7, #7]
	sd_mmc_spi_drv_write_packet(SD_MMC_SPI, &value, 1);
  401e74:	1dfb      	adds	r3, r7, #7
  401e76:	2201      	movs	r2, #1
  401e78:	4619      	mov	r1, r3
  401e7a:	4811      	ldr	r0, [pc, #68]	; (401ec0 <sd_mmc_spi_stop_multiwrite_block+0x7c>)
  401e7c:	4b11      	ldr	r3, [pc, #68]	; (401ec4 <sd_mmc_spi_stop_multiwrite_block+0x80>)
  401e7e:	4798      	blx	r3
	// Send stop token
	value = SPI_TOKEN_STOP_TRAN;
  401e80:	23fd      	movs	r3, #253	; 0xfd
  401e82:	71fb      	strb	r3, [r7, #7]
	sd_mmc_spi_drv_write_packet(SD_MMC_SPI, &value, 1);
  401e84:	1dfb      	adds	r3, r7, #7
  401e86:	2201      	movs	r2, #1
  401e88:	4619      	mov	r1, r3
  401e8a:	480d      	ldr	r0, [pc, #52]	; (401ec0 <sd_mmc_spi_stop_multiwrite_block+0x7c>)
  401e8c:	4b0d      	ldr	r3, [pc, #52]	; (401ec4 <sd_mmc_spi_stop_multiwrite_block+0x80>)
  401e8e:	4798      	blx	r3
	// Wait busy
	if (!sd_mmc_spi_wait_busy()) {
  401e90:	4b0d      	ldr	r3, [pc, #52]	; (401ec8 <sd_mmc_spi_stop_multiwrite_block+0x84>)
  401e92:	4798      	blx	r3
  401e94:	4603      	mov	r3, r0
  401e96:	f083 0301 	eor.w	r3, r3, #1
  401e9a:	b2db      	uxtb	r3, r3
  401e9c:	2b00      	cmp	r3, #0
  401e9e:	d004      	beq.n	401eaa <sd_mmc_spi_stop_multiwrite_block+0x66>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
  401ea0:	4b0a      	ldr	r3, [pc, #40]	; (401ecc <sd_mmc_spi_stop_multiwrite_block+0x88>)
  401ea2:	2205      	movs	r2, #5
  401ea4:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Stop write blocks timeout\n\r",
				__func__);
		return false;
  401ea6:	2300      	movs	r3, #0
  401ea8:	e000      	b.n	401eac <sd_mmc_spi_stop_multiwrite_block+0x68>
	}
	return true;
  401eaa:	2301      	movs	r3, #1
}
  401eac:	4618      	mov	r0, r3
  401eae:	3708      	adds	r7, #8
  401eb0:	46bd      	mov	sp, r7
  401eb2:	bd80      	pop	{r7, pc}
  401eb4:	20000c8e 	.word	0x20000c8e
  401eb8:	20000c88 	.word	0x20000c88
  401ebc:	20000c8c 	.word	0x20000c8c
  401ec0:	40008400 	.word	0x40008400
  401ec4:	004029e5 	.word	0x004029e5
  401ec8:	00401c89 	.word	0x00401c89
  401ecc:	20000c7e 	.word	0x20000c7e

00401ed0 <sd_mmc_spi_init>:
{
	return sd_mmc_spi_err;
}

void sd_mmc_spi_init(void)
{
  401ed0:	b580      	push	{r7, lr}
  401ed2:	af00      	add	r7, sp, #0
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
  401ed4:	4b08      	ldr	r3, [pc, #32]	; (401ef8 <sd_mmc_spi_init+0x28>)
  401ed6:	2200      	movs	r2, #0
  401ed8:	701a      	strb	r2, [r3, #0]
	// Initialize SPI interface and enable it
#if defined(SD_MMC_SPI_USES_USART_SPI_SERVICE)
		usart_spi_init(SD_MMC_SPI);
#else
	if (!spi_is_enabled(SD_MMC_SPI)) {
  401eda:	4808      	ldr	r0, [pc, #32]	; (401efc <sd_mmc_spi_init+0x2c>)
  401edc:	4b08      	ldr	r3, [pc, #32]	; (401f00 <sd_mmc_spi_init+0x30>)
  401ede:	4798      	blx	r3
  401ee0:	4603      	mov	r3, r0
  401ee2:	2b00      	cmp	r3, #0
  401ee4:	d105      	bne.n	401ef2 <sd_mmc_spi_init+0x22>
		spi_master_init(SD_MMC_SPI);
  401ee6:	4805      	ldr	r0, [pc, #20]	; (401efc <sd_mmc_spi_init+0x2c>)
  401ee8:	4b06      	ldr	r3, [pc, #24]	; (401f04 <sd_mmc_spi_init+0x34>)
  401eea:	4798      	blx	r3
		spi_enable(SD_MMC_SPI);
  401eec:	4803      	ldr	r0, [pc, #12]	; (401efc <sd_mmc_spi_init+0x2c>)
  401eee:	4b06      	ldr	r3, [pc, #24]	; (401f08 <sd_mmc_spi_init+0x38>)
  401ef0:	4798      	blx	r3
	}
#endif
}
  401ef2:	bf00      	nop
  401ef4:	bd80      	pop	{r7, pc}
  401ef6:	bf00      	nop
  401ef8:	20000c7e 	.word	0x20000c7e
  401efc:	40008400 	.word	0x40008400
  401f00:	00401beb 	.word	0x00401beb
  401f04:	0040281d 	.word	0x0040281d
  401f08:	00401bd1 	.word	0x00401bd1

00401f0c <sd_mmc_spi_select_device>:

void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
  401f0c:	b590      	push	{r4, r7, lr}
  401f0e:	b085      	sub	sp, #20
  401f10:	af02      	add	r7, sp, #8
  401f12:	6039      	str	r1, [r7, #0]
  401f14:	4611      	mov	r1, r2
  401f16:	461a      	mov	r2, r3
  401f18:	4603      	mov	r3, r0
  401f1a:	71fb      	strb	r3, [r7, #7]
  401f1c:	460b      	mov	r3, r1
  401f1e:	71bb      	strb	r3, [r7, #6]
  401f20:	4613      	mov	r3, r2
  401f22:	717b      	strb	r3, [r7, #5]
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
  401f24:	4b0c      	ldr	r3, [pc, #48]	; (401f58 <sd_mmc_spi_select_device+0x4c>)
  401f26:	2200      	movs	r2, #0
  401f28:	701a      	strb	r2, [r3, #0]
	if (clock > SD_MMC_SPI_MAX_CLOCK) {
		clock = SD_MMC_SPI_MAX_CLOCK;
	}
#endif

	sd_mmc_spi_drv_setup_device(SD_MMC_SPI, &sd_mmc_spi_devices[slot],
  401f2a:	79fb      	ldrb	r3, [r7, #7]
  401f2c:	009b      	lsls	r3, r3, #2
  401f2e:	4a0b      	ldr	r2, [pc, #44]	; (401f5c <sd_mmc_spi_select_device+0x50>)
  401f30:	1899      	adds	r1, r3, r2
  401f32:	2300      	movs	r3, #0
  401f34:	9300      	str	r3, [sp, #0]
  401f36:	683b      	ldr	r3, [r7, #0]
  401f38:	2200      	movs	r2, #0
  401f3a:	4809      	ldr	r0, [pc, #36]	; (401f60 <sd_mmc_spi_select_device+0x54>)
  401f3c:	4c09      	ldr	r4, [pc, #36]	; (401f64 <sd_mmc_spi_select_device+0x58>)
  401f3e:	47a0      	blx	r4
			SPI_MODE_0, clock, 0);
	sd_mmc_spi_drv_select_device(SD_MMC_SPI, &sd_mmc_spi_devices[slot]);
  401f40:	79fb      	ldrb	r3, [r7, #7]
  401f42:	009b      	lsls	r3, r3, #2
  401f44:	4a05      	ldr	r2, [pc, #20]	; (401f5c <sd_mmc_spi_select_device+0x50>)
  401f46:	4413      	add	r3, r2
  401f48:	4619      	mov	r1, r3
  401f4a:	4805      	ldr	r0, [pc, #20]	; (401f60 <sd_mmc_spi_select_device+0x54>)
  401f4c:	4b06      	ldr	r3, [pc, #24]	; (401f68 <sd_mmc_spi_select_device+0x5c>)
  401f4e:	4798      	blx	r3
}
  401f50:	bf00      	nop
  401f52:	370c      	adds	r7, #12
  401f54:	46bd      	mov	sp, r7
  401f56:	bd90      	pop	{r4, r7, pc}
  401f58:	20000c7e 	.word	0x20000c7e
  401f5c:	20000c80 	.word	0x20000c80
  401f60:	40008400 	.word	0x40008400
  401f64:	0040289d 	.word	0x0040289d
  401f68:	00402951 	.word	0x00402951

00401f6c <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
  401f6c:	b580      	push	{r7, lr}
  401f6e:	b082      	sub	sp, #8
  401f70:	af00      	add	r7, sp, #0
  401f72:	4603      	mov	r3, r0
  401f74:	71fb      	strb	r3, [r7, #7]
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
  401f76:	4b07      	ldr	r3, [pc, #28]	; (401f94 <sd_mmc_spi_deselect_device+0x28>)
  401f78:	2200      	movs	r2, #0
  401f7a:	701a      	strb	r2, [r3, #0]
	sd_mmc_spi_drv_deselect_device(SD_MMC_SPI, &sd_mmc_spi_devices[slot]);
  401f7c:	79fb      	ldrb	r3, [r7, #7]
  401f7e:	009b      	lsls	r3, r3, #2
  401f80:	4a05      	ldr	r2, [pc, #20]	; (401f98 <sd_mmc_spi_deselect_device+0x2c>)
  401f82:	4413      	add	r3, r2
  401f84:	4619      	mov	r1, r3
  401f86:	4805      	ldr	r0, [pc, #20]	; (401f9c <sd_mmc_spi_deselect_device+0x30>)
  401f88:	4b05      	ldr	r3, [pc, #20]	; (401fa0 <sd_mmc_spi_deselect_device+0x34>)
  401f8a:	4798      	blx	r3
}
  401f8c:	bf00      	nop
  401f8e:	3708      	adds	r7, #8
  401f90:	46bd      	mov	sp, r7
  401f92:	bd80      	pop	{r7, pc}
  401f94:	20000c7e 	.word	0x20000c7e
  401f98:	20000c80 	.word	0x20000c80
  401f9c:	40008400 	.word	0x40008400
  401fa0:	004029a9 	.word	0x004029a9

00401fa4 <sd_mmc_spi_send_clock>:

void sd_mmc_spi_send_clock(void)
{
  401fa4:	b580      	push	{r7, lr}
  401fa6:	b082      	sub	sp, #8
  401fa8:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t dummy = 0xFF;
  401faa:	23ff      	movs	r3, #255	; 0xff
  401fac:	71bb      	strb	r3, [r7, #6]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
  401fae:	4b0b      	ldr	r3, [pc, #44]	; (401fdc <sd_mmc_spi_send_clock+0x38>)
  401fb0:	2200      	movs	r2, #0
  401fb2:	701a      	strb	r2, [r3, #0]
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
  401fb4:	2300      	movs	r3, #0
  401fb6:	71fb      	strb	r3, [r7, #7]
  401fb8:	e008      	b.n	401fcc <sd_mmc_spi_send_clock+0x28>
		sd_mmc_spi_drv_write_packet(SD_MMC_SPI, &dummy, 1); // 8 cycles
  401fba:	1dbb      	adds	r3, r7, #6
  401fbc:	2201      	movs	r2, #1
  401fbe:	4619      	mov	r1, r3
  401fc0:	4807      	ldr	r0, [pc, #28]	; (401fe0 <sd_mmc_spi_send_clock+0x3c>)
  401fc2:	4b08      	ldr	r3, [pc, #32]	; (401fe4 <sd_mmc_spi_send_clock+0x40>)
  401fc4:	4798      	blx	r3
	for (i = 0; i < 10; i++) {
  401fc6:	79fb      	ldrb	r3, [r7, #7]
  401fc8:	3301      	adds	r3, #1
  401fca:	71fb      	strb	r3, [r7, #7]
  401fcc:	79fb      	ldrb	r3, [r7, #7]
  401fce:	2b09      	cmp	r3, #9
  401fd0:	d9f3      	bls.n	401fba <sd_mmc_spi_send_clock+0x16>
	}
}
  401fd2:	bf00      	nop
  401fd4:	3708      	adds	r7, #8
  401fd6:	46bd      	mov	sp, r7
  401fd8:	bd80      	pop	{r7, pc}
  401fda:	bf00      	nop
  401fdc:	20000c7e 	.word	0x20000c7e
  401fe0:	40008400 	.word	0x40008400
  401fe4:	004029e5 	.word	0x004029e5

00401fe8 <sd_mmc_spi_send_cmd>:

bool sd_mmc_spi_send_cmd(sdmmc_cmd_def_t cmd, uint32_t arg)
{
  401fe8:	b590      	push	{r4, r7, lr}
  401fea:	b085      	sub	sp, #20
  401fec:	af02      	add	r7, sp, #8
  401fee:	6078      	str	r0, [r7, #4]
  401ff0:	6039      	str	r1, [r7, #0]
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
  401ff2:	2300      	movs	r3, #0
  401ff4:	9300      	str	r3, [sp, #0]
  401ff6:	2300      	movs	r3, #0
  401ff8:	2200      	movs	r2, #0
  401ffa:	6839      	ldr	r1, [r7, #0]
  401ffc:	6878      	ldr	r0, [r7, #4]
  401ffe:	4c03      	ldr	r4, [pc, #12]	; (40200c <sd_mmc_spi_send_cmd+0x24>)
  402000:	47a0      	blx	r4
  402002:	4603      	mov	r3, r0
}
  402004:	4618      	mov	r0, r3
  402006:	370c      	adds	r7, #12
  402008:	46bd      	mov	sp, r7
  40200a:	bd90      	pop	{r4, r7, pc}
  40200c:	00402011 	.word	0x00402011

00402010 <sd_mmc_spi_adtc_start>:

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
  402010:	b580      	push	{r7, lr}
  402012:	b088      	sub	sp, #32
  402014:	af00      	add	r7, sp, #0
  402016:	60f8      	str	r0, [r7, #12]
  402018:	60b9      	str	r1, [r7, #8]
  40201a:	4611      	mov	r1, r2
  40201c:	461a      	mov	r2, r3
  40201e:	460b      	mov	r3, r1
  402020:	80fb      	strh	r3, [r7, #6]
  402022:	4613      	mov	r3, r2
  402024:	80bb      	strh	r3, [r7, #4]
	uint8_t dummy = 0xFF;
  402026:	23ff      	movs	r3, #255	; 0xff
  402028:	77bb      	strb	r3, [r7, #30]
	uint8_t ncr_timeout;
	uint8_t r1; //! R1 response

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
  40202a:	4b5a      	ldr	r3, [pc, #360]	; (402194 <sd_mmc_spi_adtc_start+0x184>)
  40202c:	2200      	movs	r2, #0
  40202e:	701a      	strb	r2, [r3, #0]

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
  402030:	68fb      	ldr	r3, [r7, #12]
  402032:	b2db      	uxtb	r3, r3
  402034:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  402038:	b2db      	uxtb	r3, r3
  40203a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40203e:	b2db      	uxtb	r3, r3
  402040:	763b      	strb	r3, [r7, #24]
	cmd_token[1] = arg >> 24;
  402042:	68bb      	ldr	r3, [r7, #8]
  402044:	0e1b      	lsrs	r3, r3, #24
  402046:	b2db      	uxtb	r3, r3
  402048:	767b      	strb	r3, [r7, #25]
	cmd_token[2] = arg >> 16;
  40204a:	68bb      	ldr	r3, [r7, #8]
  40204c:	0c1b      	lsrs	r3, r3, #16
  40204e:	b2db      	uxtb	r3, r3
  402050:	76bb      	strb	r3, [r7, #26]
	cmd_token[3] = arg >> 8;
  402052:	68bb      	ldr	r3, [r7, #8]
  402054:	0a1b      	lsrs	r3, r3, #8
  402056:	b2db      	uxtb	r3, r3
  402058:	76fb      	strb	r3, [r7, #27]
	cmd_token[4] = arg;
  40205a:	68bb      	ldr	r3, [r7, #8]
  40205c:	b2db      	uxtb	r3, r3
  40205e:	773b      	strb	r3, [r7, #28]
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
  402060:	f107 0318 	add.w	r3, r7, #24
  402064:	2105      	movs	r1, #5
  402066:	4618      	mov	r0, r3
  402068:	4b4b      	ldr	r3, [pc, #300]	; (402198 <sd_mmc_spi_adtc_start+0x188>)
  40206a:	4798      	blx	r3
  40206c:	4603      	mov	r3, r0
  40206e:	777b      	strb	r3, [r7, #29]

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	sd_mmc_spi_drv_write_packet(SD_MMC_SPI, &dummy, 1);
  402070:	f107 031e 	add.w	r3, r7, #30
  402074:	2201      	movs	r2, #1
  402076:	4619      	mov	r1, r3
  402078:	4848      	ldr	r0, [pc, #288]	; (40219c <sd_mmc_spi_adtc_start+0x18c>)
  40207a:	4b49      	ldr	r3, [pc, #292]	; (4021a0 <sd_mmc_spi_adtc_start+0x190>)
  40207c:	4798      	blx	r3
	// Send command
	sd_mmc_spi_drv_write_packet(SD_MMC_SPI, cmd_token, sizeof(cmd_token));
  40207e:	f107 0318 	add.w	r3, r7, #24
  402082:	2206      	movs	r2, #6
  402084:	4619      	mov	r1, r3
  402086:	4845      	ldr	r0, [pc, #276]	; (40219c <sd_mmc_spi_adtc_start+0x18c>)
  402088:	4b45      	ldr	r3, [pc, #276]	; (4021a0 <sd_mmc_spi_adtc_start+0x190>)
  40208a:	4798      	blx	r3

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
  40208c:	23ff      	movs	r3, #255	; 0xff
  40208e:	75fb      	strb	r3, [r7, #23]
	// Ignore first byte because Ncr min. = 8 clock cylces
	sd_mmc_spi_drv_read_packet(SD_MMC_SPI, &r1, 1);
  402090:	f107 0317 	add.w	r3, r7, #23
  402094:	2201      	movs	r2, #1
  402096:	4619      	mov	r1, r3
  402098:	4840      	ldr	r0, [pc, #256]	; (40219c <sd_mmc_spi_adtc_start+0x18c>)
  40209a:	4b42      	ldr	r3, [pc, #264]	; (4021a4 <sd_mmc_spi_adtc_start+0x194>)
  40209c:	4798      	blx	r3
	ncr_timeout = 7;
  40209e:	2307      	movs	r3, #7
  4020a0:	77fb      	strb	r3, [r7, #31]
	while (1) {
		sd_mmc_spi_drv_read_packet(SD_MMC_SPI, &r1, 1); // 8 cycles
  4020a2:	f107 0317 	add.w	r3, r7, #23
  4020a6:	2201      	movs	r2, #1
  4020a8:	4619      	mov	r1, r3
  4020aa:	483c      	ldr	r0, [pc, #240]	; (40219c <sd_mmc_spi_adtc_start+0x18c>)
  4020ac:	4b3d      	ldr	r3, [pc, #244]	; (4021a4 <sd_mmc_spi_adtc_start+0x194>)
  4020ae:	4798      	blx	r3
		if ((r1 & R1_SPI_ERROR) == 0) {
  4020b0:	7dfb      	ldrb	r3, [r7, #23]
  4020b2:	b25b      	sxtb	r3, r3
  4020b4:	2b00      	cmp	r3, #0
  4020b6:	da0a      	bge.n	4020ce <sd_mmc_spi_adtc_start+0xbe>
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
  4020b8:	7ffb      	ldrb	r3, [r7, #31]
  4020ba:	3b01      	subs	r3, #1
  4020bc:	77fb      	strb	r3, [r7, #31]
  4020be:	7ffb      	ldrb	r3, [r7, #31]
  4020c0:	2b00      	cmp	r3, #0
  4020c2:	d1ee      	bne.n	4020a2 <sd_mmc_spi_adtc_start+0x92>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
  4020c4:	4b33      	ldr	r3, [pc, #204]	; (402194 <sd_mmc_spi_adtc_start+0x184>)
  4020c6:	2202      	movs	r2, #2
  4020c8:	701a      	strb	r2, [r3, #0]
			return false;
  4020ca:	2300      	movs	r3, #0
  4020cc:	e05e      	b.n	40218c <sd_mmc_spi_adtc_start+0x17c>
			break;
  4020ce:	bf00      	nop
		}
	}

	// Save R1 (Specific to SPI interface) in 32 bit response
	// The R1_SPI_IDLE bit can be checked by high level
	sd_mmc_spi_response_32 = r1;
  4020d0:	7dfb      	ldrb	r3, [r7, #23]
  4020d2:	461a      	mov	r2, r3
  4020d4:	4b34      	ldr	r3, [pc, #208]	; (4021a8 <sd_mmc_spi_adtc_start+0x198>)
  4020d6:	601a      	str	r2, [r3, #0]

	// Manage error in R1
	if (r1 & R1_SPI_COM_CRC) {
  4020d8:	7dfb      	ldrb	r3, [r7, #23]
  4020da:	f003 0308 	and.w	r3, r3, #8
  4020de:	2b00      	cmp	r3, #0
  4020e0:	d004      	beq.n	4020ec <sd_mmc_spi_adtc_start+0xdc>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%02x, R1_SPI_COM_CRC\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
  4020e2:	4b2c      	ldr	r3, [pc, #176]	; (402194 <sd_mmc_spi_adtc_start+0x184>)
  4020e4:	2206      	movs	r2, #6
  4020e6:	701a      	strb	r2, [r3, #0]
		return false;
  4020e8:	2300      	movs	r3, #0
  4020ea:	e04f      	b.n	40218c <sd_mmc_spi_adtc_start+0x17c>
	}
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
  4020ec:	7dfb      	ldrb	r3, [r7, #23]
  4020ee:	f003 0304 	and.w	r3, r3, #4
  4020f2:	2b00      	cmp	r3, #0
  4020f4:	d004      	beq.n	402100 <sd_mmc_spi_adtc_start+0xf0>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 ILLEGAL_COMMAND\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
  4020f6:	4b27      	ldr	r3, [pc, #156]	; (402194 <sd_mmc_spi_adtc_start+0x184>)
  4020f8:	2209      	movs	r2, #9
  4020fa:	701a      	strb	r2, [r3, #0]
		return false;
  4020fc:	2300      	movs	r3, #0
  4020fe:	e045      	b.n	40218c <sd_mmc_spi_adtc_start+0x17c>
	}
	if (r1 & ~R1_SPI_IDLE) {
  402100:	7dfb      	ldrb	r3, [r7, #23]
  402102:	f023 0301 	bic.w	r3, r3, #1
  402106:	2b00      	cmp	r3, #0
  402108:	d004      	beq.n	402114 <sd_mmc_spi_adtc_start+0x104>
		// Other error
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 error\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
  40210a:	4b22      	ldr	r3, [pc, #136]	; (402194 <sd_mmc_spi_adtc_start+0x184>)
  40210c:	2201      	movs	r2, #1
  40210e:	701a      	strb	r2, [r3, #0]
		return false;
  402110:	2300      	movs	r3, #0
  402112:	e03b      	b.n	40218c <sd_mmc_spi_adtc_start+0x17c>
	}

	// Manage other responses
	if (cmd & SDMMC_RESP_BUSY) {
  402114:	68fb      	ldr	r3, [r7, #12]
  402116:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  40211a:	2b00      	cmp	r3, #0
  40211c:	d00c      	beq.n	402138 <sd_mmc_spi_adtc_start+0x128>
		if (!sd_mmc_spi_wait_busy()) {
  40211e:	4b23      	ldr	r3, [pc, #140]	; (4021ac <sd_mmc_spi_adtc_start+0x19c>)
  402120:	4798      	blx	r3
  402122:	4603      	mov	r3, r0
  402124:	f083 0301 	eor.w	r3, r3, #1
  402128:	b2db      	uxtb	r3, r3
  40212a:	2b00      	cmp	r3, #0
  40212c:	d004      	beq.n	402138 <sd_mmc_spi_adtc_start+0x128>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
  40212e:	4b19      	ldr	r3, [pc, #100]	; (402194 <sd_mmc_spi_adtc_start+0x184>)
  402130:	2203      	movs	r2, #3
  402132:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, Busy signal always high\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			return false;
  402134:	2300      	movs	r3, #0
  402136:	e029      	b.n	40218c <sd_mmc_spi_adtc_start+0x17c>
		}
	}
	if (cmd & SDMMC_RESP_8) {
  402138:	68fb      	ldr	r3, [r7, #12]
  40213a:	f403 7300 	and.w	r3, r3, #512	; 0x200
  40213e:	2b00      	cmp	r3, #0
  402140:	d00b      	beq.n	40215a <sd_mmc_spi_adtc_start+0x14a>
		sd_mmc_spi_response_32 = 0;
  402142:	4b19      	ldr	r3, [pc, #100]	; (4021a8 <sd_mmc_spi_adtc_start+0x198>)
  402144:	2200      	movs	r2, #0
  402146:	601a      	str	r2, [r3, #0]
		sd_mmc_spi_drv_read_packet(SD_MMC_SPI, (uint8_t*) & sd_mmc_spi_response_32, 1);
  402148:	2201      	movs	r2, #1
  40214a:	4917      	ldr	r1, [pc, #92]	; (4021a8 <sd_mmc_spi_adtc_start+0x198>)
  40214c:	4813      	ldr	r0, [pc, #76]	; (40219c <sd_mmc_spi_adtc_start+0x18c>)
  40214e:	4b15      	ldr	r3, [pc, #84]	; (4021a4 <sd_mmc_spi_adtc_start+0x194>)
  402150:	4798      	blx	r3
		sd_mmc_spi_response_32 = le32_to_cpu(sd_mmc_spi_response_32);
  402152:	4b15      	ldr	r3, [pc, #84]	; (4021a8 <sd_mmc_spi_adtc_start+0x198>)
  402154:	681b      	ldr	r3, [r3, #0]
  402156:	4a14      	ldr	r2, [pc, #80]	; (4021a8 <sd_mmc_spi_adtc_start+0x198>)
  402158:	6013      	str	r3, [r2, #0]
	}
	if (cmd & SDMMC_RESP_32) {
  40215a:	68fb      	ldr	r3, [r7, #12]
  40215c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  402160:	2b00      	cmp	r3, #0
  402162:	d009      	beq.n	402178 <sd_mmc_spi_adtc_start+0x168>
		sd_mmc_spi_drv_read_packet(SD_MMC_SPI, (uint8_t*) & sd_mmc_spi_response_32, 4);
  402164:	2204      	movs	r2, #4
  402166:	4910      	ldr	r1, [pc, #64]	; (4021a8 <sd_mmc_spi_adtc_start+0x198>)
  402168:	480c      	ldr	r0, [pc, #48]	; (40219c <sd_mmc_spi_adtc_start+0x18c>)
  40216a:	4b0e      	ldr	r3, [pc, #56]	; (4021a4 <sd_mmc_spi_adtc_start+0x194>)
  40216c:	4798      	blx	r3
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
  40216e:	4b0e      	ldr	r3, [pc, #56]	; (4021a8 <sd_mmc_spi_adtc_start+0x198>)
  402170:	681b      	ldr	r3, [r3, #0]
  402172:	ba1b      	rev	r3, r3
  402174:	4a0c      	ldr	r2, [pc, #48]	; (4021a8 <sd_mmc_spi_adtc_start+0x198>)
  402176:	6013      	str	r3, [r2, #0]
	}

	sd_mmc_spi_block_size = block_size;
  402178:	4a0d      	ldr	r2, [pc, #52]	; (4021b0 <sd_mmc_spi_adtc_start+0x1a0>)
  40217a:	88fb      	ldrh	r3, [r7, #6]
  40217c:	8013      	strh	r3, [r2, #0]
	sd_mmc_spi_nb_block = nb_block;
  40217e:	4a0d      	ldr	r2, [pc, #52]	; (4021b4 <sd_mmc_spi_adtc_start+0x1a4>)
  402180:	88bb      	ldrh	r3, [r7, #4]
  402182:	8013      	strh	r3, [r2, #0]
	sd_mmc_spi_transfert_pos = 0;
  402184:	4b0c      	ldr	r3, [pc, #48]	; (4021b8 <sd_mmc_spi_adtc_start+0x1a8>)
  402186:	2200      	movs	r2, #0
  402188:	601a      	str	r2, [r3, #0]
	return true; // Command complete
  40218a:	2301      	movs	r3, #1
}
  40218c:	4618      	mov	r0, r3
  40218e:	3720      	adds	r7, #32
  402190:	46bd      	mov	sp, r7
  402192:	bd80      	pop	{r7, pc}
  402194:	20000c7e 	.word	0x20000c7e
  402198:	00401c11 	.word	0x00401c11
  40219c:	40008400 	.word	0x40008400
  4021a0:	004029e5 	.word	0x004029e5
  4021a4:	00402a59 	.word	0x00402a59
  4021a8:	20000c84 	.word	0x20000c84
  4021ac:	00401c89 	.word	0x00401c89
  4021b0:	20000c8c 	.word	0x20000c8c
  4021b4:	20000c8e 	.word	0x20000c8e
  4021b8:	20000c88 	.word	0x20000c88

004021bc <sd_mmc_spi_get_response>:

uint32_t sd_mmc_spi_get_response(void)
{
  4021bc:	b480      	push	{r7}
  4021be:	af00      	add	r7, sp, #0
	return sd_mmc_spi_response_32;
  4021c0:	4b03      	ldr	r3, [pc, #12]	; (4021d0 <sd_mmc_spi_get_response+0x14>)
  4021c2:	681b      	ldr	r3, [r3, #0]
}
  4021c4:	4618      	mov	r0, r3
  4021c6:	46bd      	mov	sp, r7
  4021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4021cc:	4770      	bx	lr
  4021ce:	bf00      	nop
  4021d0:	20000c84 	.word	0x20000c84

004021d4 <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
  4021d4:	b580      	push	{r7, lr}
  4021d6:	b082      	sub	sp, #8
  4021d8:	af00      	add	r7, sp, #0
  4021da:	6078      	str	r0, [r7, #4]
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
  4021dc:	4b1b      	ldr	r3, [pc, #108]	; (40224c <sd_mmc_spi_read_word+0x78>)
  4021de:	2200      	movs	r2, #0
  4021e0:	701a      	strb	r2, [r3, #0]
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
  4021e2:	4b1b      	ldr	r3, [pc, #108]	; (402250 <sd_mmc_spi_read_word+0x7c>)
  4021e4:	681b      	ldr	r3, [r3, #0]
  4021e6:	4a1b      	ldr	r2, [pc, #108]	; (402254 <sd_mmc_spi_read_word+0x80>)
  4021e8:	8812      	ldrh	r2, [r2, #0]
  4021ea:	fbb3 f1f2 	udiv	r1, r3, r2
  4021ee:	fb02 f201 	mul.w	r2, r2, r1
  4021f2:	1a9b      	subs	r3, r3, r2
  4021f4:	2b00      	cmp	r3, #0
  4021f6:	d109      	bne.n	40220c <sd_mmc_spi_read_word+0x38>
		// New block
		if (!sd_mmc_spi_start_read_block()) {
  4021f8:	4b17      	ldr	r3, [pc, #92]	; (402258 <sd_mmc_spi_read_word+0x84>)
  4021fa:	4798      	blx	r3
  4021fc:	4603      	mov	r3, r0
  4021fe:	f083 0301 	eor.w	r3, r3, #1
  402202:	b2db      	uxtb	r3, r3
  402204:	2b00      	cmp	r3, #0
  402206:	d001      	beq.n	40220c <sd_mmc_spi_read_word+0x38>
			return false;
  402208:	2300      	movs	r3, #0
  40220a:	e01b      	b.n	402244 <sd_mmc_spi_read_word+0x70>
		}
	}
	// Read data
	sd_mmc_spi_drv_read_packet(SD_MMC_SPI, (uint8_t*)value, 4);
  40220c:	2204      	movs	r2, #4
  40220e:	6879      	ldr	r1, [r7, #4]
  402210:	4812      	ldr	r0, [pc, #72]	; (40225c <sd_mmc_spi_read_word+0x88>)
  402212:	4b13      	ldr	r3, [pc, #76]	; (402260 <sd_mmc_spi_read_word+0x8c>)
  402214:	4798      	blx	r3
	*value = le32_to_cpu(*value);
  402216:	687b      	ldr	r3, [r7, #4]
  402218:	681a      	ldr	r2, [r3, #0]
  40221a:	687b      	ldr	r3, [r7, #4]
  40221c:	601a      	str	r2, [r3, #0]
	sd_mmc_spi_transfert_pos += 4;
  40221e:	4b0c      	ldr	r3, [pc, #48]	; (402250 <sd_mmc_spi_read_word+0x7c>)
  402220:	681b      	ldr	r3, [r3, #0]
  402222:	3304      	adds	r3, #4
  402224:	4a0a      	ldr	r2, [pc, #40]	; (402250 <sd_mmc_spi_read_word+0x7c>)
  402226:	6013      	str	r3, [r2, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
  402228:	4b09      	ldr	r3, [pc, #36]	; (402250 <sd_mmc_spi_read_word+0x7c>)
  40222a:	681b      	ldr	r3, [r3, #0]
  40222c:	4a09      	ldr	r2, [pc, #36]	; (402254 <sd_mmc_spi_read_word+0x80>)
  40222e:	8812      	ldrh	r2, [r2, #0]
  402230:	fbb3 f1f2 	udiv	r1, r3, r2
  402234:	fb02 f201 	mul.w	r2, r2, r1
  402238:	1a9b      	subs	r3, r3, r2
  40223a:	2b00      	cmp	r3, #0
  40223c:	d101      	bne.n	402242 <sd_mmc_spi_read_word+0x6e>
		// End of block
		sd_mmc_spi_stop_read_block();
  40223e:	4b09      	ldr	r3, [pc, #36]	; (402264 <sd_mmc_spi_read_word+0x90>)
  402240:	4798      	blx	r3
	}
	return true;
  402242:	2301      	movs	r3, #1
}
  402244:	4618      	mov	r0, r3
  402246:	3708      	adds	r7, #8
  402248:	46bd      	mov	sp, r7
  40224a:	bd80      	pop	{r7, pc}
  40224c:	20000c7e 	.word	0x20000c7e
  402250:	20000c88 	.word	0x20000c88
  402254:	20000c8c 	.word	0x20000c8c
  402258:	00401ce5 	.word	0x00401ce5
  40225c:	40008400 	.word	0x40008400
  402260:	00402a59 	.word	0x00402a59
  402264:	00401d59 	.word	0x00401d59

00402268 <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
  402268:	b580      	push	{r7, lr}
  40226a:	b084      	sub	sp, #16
  40226c:	af00      	add	r7, sp, #0
  40226e:	6078      	str	r0, [r7, #4]
  402270:	460b      	mov	r3, r1
  402272:	807b      	strh	r3, [r7, #2]
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
  402274:	4b19      	ldr	r3, [pc, #100]	; (4022dc <sd_mmc_spi_start_read_blocks+0x74>)
  402276:	2200      	movs	r2, #0
  402278:	701a      	strb	r2, [r3, #0]
	pos = 0;
  40227a:	2300      	movs	r3, #0
  40227c:	60fb      	str	r3, [r7, #12]
	while (nb_block--) {
  40227e:	e022      	b.n	4022c6 <sd_mmc_spi_start_read_blocks+0x5e>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		if (!sd_mmc_spi_start_read_block()) {
  402280:	4b17      	ldr	r3, [pc, #92]	; (4022e0 <sd_mmc_spi_start_read_blocks+0x78>)
  402282:	4798      	blx	r3
  402284:	4603      	mov	r3, r0
  402286:	f083 0301 	eor.w	r3, r3, #1
  40228a:	b2db      	uxtb	r3, r3
  40228c:	2b00      	cmp	r3, #0
  40228e:	d001      	beq.n	402294 <sd_mmc_spi_start_read_blocks+0x2c>
			return false;
  402290:	2300      	movs	r3, #0
  402292:	e01e      	b.n	4022d2 <sd_mmc_spi_start_read_blocks+0x6a>
		}

		// Read block
		sd_mmc_spi_drv_read_packet(SD_MMC_SPI, &((uint8_t*)dest)[pos], sd_mmc_spi_block_size);
  402294:	687a      	ldr	r2, [r7, #4]
  402296:	68fb      	ldr	r3, [r7, #12]
  402298:	18d1      	adds	r1, r2, r3
  40229a:	4b12      	ldr	r3, [pc, #72]	; (4022e4 <sd_mmc_spi_start_read_blocks+0x7c>)
  40229c:	881b      	ldrh	r3, [r3, #0]
  40229e:	461a      	mov	r2, r3
  4022a0:	4811      	ldr	r0, [pc, #68]	; (4022e8 <sd_mmc_spi_start_read_blocks+0x80>)
  4022a2:	4b12      	ldr	r3, [pc, #72]	; (4022ec <sd_mmc_spi_start_read_blocks+0x84>)
  4022a4:	4798      	blx	r3
		pos += sd_mmc_spi_block_size;
  4022a6:	4b0f      	ldr	r3, [pc, #60]	; (4022e4 <sd_mmc_spi_start_read_blocks+0x7c>)
  4022a8:	881b      	ldrh	r3, [r3, #0]
  4022aa:	461a      	mov	r2, r3
  4022ac:	68fb      	ldr	r3, [r7, #12]
  4022ae:	4413      	add	r3, r2
  4022b0:	60fb      	str	r3, [r7, #12]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
  4022b2:	4b0c      	ldr	r3, [pc, #48]	; (4022e4 <sd_mmc_spi_start_read_blocks+0x7c>)
  4022b4:	881b      	ldrh	r3, [r3, #0]
  4022b6:	461a      	mov	r2, r3
  4022b8:	4b0d      	ldr	r3, [pc, #52]	; (4022f0 <sd_mmc_spi_start_read_blocks+0x88>)
  4022ba:	681b      	ldr	r3, [r3, #0]
  4022bc:	4413      	add	r3, r2
  4022be:	4a0c      	ldr	r2, [pc, #48]	; (4022f0 <sd_mmc_spi_start_read_blocks+0x88>)
  4022c0:	6013      	str	r3, [r2, #0]

		sd_mmc_spi_stop_read_block();
  4022c2:	4b0c      	ldr	r3, [pc, #48]	; (4022f4 <sd_mmc_spi_start_read_blocks+0x8c>)
  4022c4:	4798      	blx	r3
	while (nb_block--) {
  4022c6:	887b      	ldrh	r3, [r7, #2]
  4022c8:	1e5a      	subs	r2, r3, #1
  4022ca:	807a      	strh	r2, [r7, #2]
  4022cc:	2b00      	cmp	r3, #0
  4022ce:	d1d7      	bne.n	402280 <sd_mmc_spi_start_read_blocks+0x18>
	}
	return true;
  4022d0:	2301      	movs	r3, #1
}
  4022d2:	4618      	mov	r0, r3
  4022d4:	3710      	adds	r7, #16
  4022d6:	46bd      	mov	sp, r7
  4022d8:	bd80      	pop	{r7, pc}
  4022da:	bf00      	nop
  4022dc:	20000c7e 	.word	0x20000c7e
  4022e0:	00401ce5 	.word	0x00401ce5
  4022e4:	20000c8c 	.word	0x20000c8c
  4022e8:	40008400 	.word	0x40008400
  4022ec:	00402a59 	.word	0x00402a59
  4022f0:	20000c88 	.word	0x20000c88
  4022f4:	00401d59 	.word	0x00401d59

004022f8 <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
  4022f8:	b480      	push	{r7}
  4022fa:	af00      	add	r7, sp, #0
	return true;
  4022fc:	2301      	movs	r3, #1
}
  4022fe:	4618      	mov	r0, r3
  402300:	46bd      	mov	sp, r7
  402302:	f85d 7b04 	ldr.w	r7, [sp], #4
  402306:	4770      	bx	lr

00402308 <sd_mmc_spi_start_write_blocks>:

bool sd_mmc_spi_start_write_blocks(const void *src, uint16_t nb_block)
{
  402308:	b580      	push	{r7, lr}
  40230a:	b084      	sub	sp, #16
  40230c:	af00      	add	r7, sp, #0
  40230e:	6078      	str	r0, [r7, #4]
  402310:	460b      	mov	r3, r1
  402312:	807b      	strh	r3, [r7, #2]
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
  402314:	4b21      	ldr	r3, [pc, #132]	; (40239c <sd_mmc_spi_start_write_blocks+0x94>)
  402316:	2200      	movs	r2, #0
  402318:	701a      	strb	r2, [r3, #0]
	pos = 0;
  40231a:	2300      	movs	r3, #0
  40231c:	60fb      	str	r3, [r7, #12]
	while (nb_block--) {
  40231e:	e032      	b.n	402386 <sd_mmc_spi_start_write_blocks+0x7e>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		sd_mmc_spi_start_write_block();
  402320:	4b1f      	ldr	r3, [pc, #124]	; (4023a0 <sd_mmc_spi_start_write_blocks+0x98>)
  402322:	4798      	blx	r3

		// Write block
		sd_mmc_spi_drv_write_packet(SD_MMC_SPI, &((uint8_t*)src)[pos], sd_mmc_spi_block_size);
  402324:	687a      	ldr	r2, [r7, #4]
  402326:	68fb      	ldr	r3, [r7, #12]
  402328:	18d1      	adds	r1, r2, r3
  40232a:	4b1e      	ldr	r3, [pc, #120]	; (4023a4 <sd_mmc_spi_start_write_blocks+0x9c>)
  40232c:	881b      	ldrh	r3, [r3, #0]
  40232e:	461a      	mov	r2, r3
  402330:	481d      	ldr	r0, [pc, #116]	; (4023a8 <sd_mmc_spi_start_write_blocks+0xa0>)
  402332:	4b1e      	ldr	r3, [pc, #120]	; (4023ac <sd_mmc_spi_start_write_blocks+0xa4>)
  402334:	4798      	blx	r3
		pos += sd_mmc_spi_block_size;
  402336:	4b1b      	ldr	r3, [pc, #108]	; (4023a4 <sd_mmc_spi_start_write_blocks+0x9c>)
  402338:	881b      	ldrh	r3, [r3, #0]
  40233a:	461a      	mov	r2, r3
  40233c:	68fb      	ldr	r3, [r7, #12]
  40233e:	4413      	add	r3, r2
  402340:	60fb      	str	r3, [r7, #12]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
  402342:	4b18      	ldr	r3, [pc, #96]	; (4023a4 <sd_mmc_spi_start_write_blocks+0x9c>)
  402344:	881b      	ldrh	r3, [r3, #0]
  402346:	461a      	mov	r2, r3
  402348:	4b19      	ldr	r3, [pc, #100]	; (4023b0 <sd_mmc_spi_start_write_blocks+0xa8>)
  40234a:	681b      	ldr	r3, [r3, #0]
  40234c:	4413      	add	r3, r2
  40234e:	4a18      	ldr	r2, [pc, #96]	; (4023b0 <sd_mmc_spi_start_write_blocks+0xa8>)
  402350:	6013      	str	r3, [r2, #0]

		if (!sd_mmc_spi_stop_write_block()) {
  402352:	4b18      	ldr	r3, [pc, #96]	; (4023b4 <sd_mmc_spi_start_write_blocks+0xac>)
  402354:	4798      	blx	r3
  402356:	4603      	mov	r3, r0
  402358:	f083 0301 	eor.w	r3, r3, #1
  40235c:	b2db      	uxtb	r3, r3
  40235e:	2b00      	cmp	r3, #0
  402360:	d001      	beq.n	402366 <sd_mmc_spi_start_write_blocks+0x5e>
			return false;
  402362:	2300      	movs	r3, #0
  402364:	e015      	b.n	402392 <sd_mmc_spi_start_write_blocks+0x8a>
		}
		// Do not check busy of last block
		// but delay it to mci_wait_end_of_write_blocks()
		if (nb_block) {
  402366:	887b      	ldrh	r3, [r7, #2]
  402368:	2b00      	cmp	r3, #0
  40236a:	d00c      	beq.n	402386 <sd_mmc_spi_start_write_blocks+0x7e>
			// Wait busy due to data programmation
			if (!sd_mmc_spi_wait_busy()) {
  40236c:	4b12      	ldr	r3, [pc, #72]	; (4023b8 <sd_mmc_spi_start_write_blocks+0xb0>)
  40236e:	4798      	blx	r3
  402370:	4603      	mov	r3, r0
  402372:	f083 0301 	eor.w	r3, r3, #1
  402376:	b2db      	uxtb	r3, r3
  402378:	2b00      	cmp	r3, #0
  40237a:	d004      	beq.n	402386 <sd_mmc_spi_start_write_blocks+0x7e>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
  40237c:	4b07      	ldr	r3, [pc, #28]	; (40239c <sd_mmc_spi_start_write_blocks+0x94>)
  40237e:	2205      	movs	r2, #5
  402380:	701a      	strb	r2, [r3, #0]
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
  402382:	2300      	movs	r3, #0
  402384:	e005      	b.n	402392 <sd_mmc_spi_start_write_blocks+0x8a>
	while (nb_block--) {
  402386:	887b      	ldrh	r3, [r7, #2]
  402388:	1e5a      	subs	r2, r3, #1
  40238a:	807a      	strh	r2, [r7, #2]
  40238c:	2b00      	cmp	r3, #0
  40238e:	d1c7      	bne.n	402320 <sd_mmc_spi_start_write_blocks+0x18>
			}
		}
	}
	return true;
  402390:	2301      	movs	r3, #1
}
  402392:	4618      	mov	r0, r3
  402394:	3710      	adds	r7, #16
  402396:	46bd      	mov	sp, r7
  402398:	bd80      	pop	{r7, pc}
  40239a:	bf00      	nop
  40239c:	20000c7e 	.word	0x20000c7e
  4023a0:	00401d7d 	.word	0x00401d7d
  4023a4:	20000c8c 	.word	0x20000c8c
  4023a8:	40008400 	.word	0x40008400
  4023ac:	004029e5 	.word	0x004029e5
  4023b0:	20000c88 	.word	0x20000c88
  4023b4:	00401dc5 	.word	0x00401dc5
  4023b8:	00401c89 	.word	0x00401c89

004023bc <sd_mmc_spi_wait_end_of_write_blocks>:

bool sd_mmc_spi_wait_end_of_write_blocks(void)
{
  4023bc:	b580      	push	{r7, lr}
  4023be:	af00      	add	r7, sp, #0
	// Wait busy due to data programmation of last block writed
	if (!sd_mmc_spi_wait_busy()) {
  4023c0:	4b08      	ldr	r3, [pc, #32]	; (4023e4 <sd_mmc_spi_wait_end_of_write_blocks+0x28>)
  4023c2:	4798      	blx	r3
  4023c4:	4603      	mov	r3, r0
  4023c6:	f083 0301 	eor.w	r3, r3, #1
  4023ca:	b2db      	uxtb	r3, r3
  4023cc:	2b00      	cmp	r3, #0
  4023ce:	d004      	beq.n	4023da <sd_mmc_spi_wait_end_of_write_blocks+0x1e>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
  4023d0:	4b05      	ldr	r3, [pc, #20]	; (4023e8 <sd_mmc_spi_wait_end_of_write_blocks+0x2c>)
  4023d2:	2205      	movs	r2, #5
  4023d4:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
		return false;
  4023d6:	2300      	movs	r3, #0
  4023d8:	e002      	b.n	4023e0 <sd_mmc_spi_wait_end_of_write_blocks+0x24>
	}
	return sd_mmc_spi_stop_multiwrite_block();
  4023da:	4b04      	ldr	r3, [pc, #16]	; (4023ec <sd_mmc_spi_wait_end_of_write_blocks+0x30>)
  4023dc:	4798      	blx	r3
  4023de:	4603      	mov	r3, r0
}
  4023e0:	4618      	mov	r0, r3
  4023e2:	bd80      	pop	{r7, pc}
  4023e4:	00401c89 	.word	0x00401c89
  4023e8:	20000c7e 	.word	0x20000c7e
  4023ec:	00401e45 	.word	0x00401e45

004023f0 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  4023f0:	b580      	push	{r7, lr}
  4023f2:	b084      	sub	sp, #16
  4023f4:	af00      	add	r7, sp, #0
  4023f6:	6078      	str	r0, [r7, #4]
  4023f8:	6039      	str	r1, [r7, #0]
	uint32_t val = 0;
  4023fa:	2300      	movs	r3, #0
  4023fc:	60fb      	str	r3, [r7, #12]
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  4023fe:	687b      	ldr	r3, [r7, #4]
  402400:	4a49      	ldr	r2, [pc, #292]	; (402528 <usart_serial_getchar+0x138>)
  402402:	4293      	cmp	r3, r2
  402404:	d10d      	bne.n	402422 <usart_serial_getchar+0x32>
		while (usart_read(p_usart, &val));
  402406:	bf00      	nop
  402408:	f107 030c 	add.w	r3, r7, #12
  40240c:	4619      	mov	r1, r3
  40240e:	6878      	ldr	r0, [r7, #4]
  402410:	4b46      	ldr	r3, [pc, #280]	; (40252c <usart_serial_getchar+0x13c>)
  402412:	4798      	blx	r3
  402414:	4603      	mov	r3, r0
  402416:	2b00      	cmp	r3, #0
  402418:	d1f6      	bne.n	402408 <usart_serial_getchar+0x18>
		*data = (uint8_t)(val & 0xFF);
  40241a:	68fb      	ldr	r3, [r7, #12]
  40241c:	b2da      	uxtb	r2, r3
  40241e:	683b      	ldr	r3, [r7, #0]
  402420:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  402422:	687b      	ldr	r3, [r7, #4]
  402424:	4a42      	ldr	r2, [pc, #264]	; (402530 <usart_serial_getchar+0x140>)
  402426:	4293      	cmp	r3, r2
  402428:	d10d      	bne.n	402446 <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
  40242a:	bf00      	nop
  40242c:	f107 030c 	add.w	r3, r7, #12
  402430:	4619      	mov	r1, r3
  402432:	6878      	ldr	r0, [r7, #4]
  402434:	4b3d      	ldr	r3, [pc, #244]	; (40252c <usart_serial_getchar+0x13c>)
  402436:	4798      	blx	r3
  402438:	4603      	mov	r3, r0
  40243a:	2b00      	cmp	r3, #0
  40243c:	d1f6      	bne.n	40242c <usart_serial_getchar+0x3c>
		*data = (uint8_t)(val & 0xFF);
  40243e:	68fb      	ldr	r3, [r7, #12]
  402440:	b2da      	uxtb	r2, r3
  402442:	683b      	ldr	r3, [r7, #0]
  402444:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  402446:	687b      	ldr	r3, [r7, #4]
  402448:	4a3a      	ldr	r2, [pc, #232]	; (402534 <usart_serial_getchar+0x144>)
  40244a:	4293      	cmp	r3, r2
  40244c:	d10d      	bne.n	40246a <usart_serial_getchar+0x7a>
		while (usart_read(p_usart, &val));
  40244e:	bf00      	nop
  402450:	f107 030c 	add.w	r3, r7, #12
  402454:	4619      	mov	r1, r3
  402456:	6878      	ldr	r0, [r7, #4]
  402458:	4b34      	ldr	r3, [pc, #208]	; (40252c <usart_serial_getchar+0x13c>)
  40245a:	4798      	blx	r3
  40245c:	4603      	mov	r3, r0
  40245e:	2b00      	cmp	r3, #0
  402460:	d1f6      	bne.n	402450 <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
  402462:	68fb      	ldr	r3, [r7, #12]
  402464:	b2da      	uxtb	r2, r3
  402466:	683b      	ldr	r3, [r7, #0]
  402468:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
  40246a:	687b      	ldr	r3, [r7, #4]
  40246c:	4a32      	ldr	r2, [pc, #200]	; (402538 <usart_serial_getchar+0x148>)
  40246e:	4293      	cmp	r3, r2
  402470:	d10d      	bne.n	40248e <usart_serial_getchar+0x9e>
		while (usart_read(p_usart, &val));
  402472:	bf00      	nop
  402474:	f107 030c 	add.w	r3, r7, #12
  402478:	4619      	mov	r1, r3
  40247a:	6878      	ldr	r0, [r7, #4]
  40247c:	4b2b      	ldr	r3, [pc, #172]	; (40252c <usart_serial_getchar+0x13c>)
  40247e:	4798      	blx	r3
  402480:	4603      	mov	r3, r0
  402482:	2b00      	cmp	r3, #0
  402484:	d1f6      	bne.n	402474 <usart_serial_getchar+0x84>
		*data = (uint8_t)(val & 0xFF);
  402486:	68fb      	ldr	r3, [r7, #12]
  402488:	b2da      	uxtb	r2, r3
  40248a:	683b      	ldr	r3, [r7, #0]
  40248c:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART4
	if (USART4 == p_usart) {
  40248e:	687b      	ldr	r3, [r7, #4]
  402490:	4a2a      	ldr	r2, [pc, #168]	; (40253c <usart_serial_getchar+0x14c>)
  402492:	4293      	cmp	r3, r2
  402494:	d10d      	bne.n	4024b2 <usart_serial_getchar+0xc2>
		while (usart_read(p_usart, &val));
  402496:	bf00      	nop
  402498:	f107 030c 	add.w	r3, r7, #12
  40249c:	4619      	mov	r1, r3
  40249e:	6878      	ldr	r0, [r7, #4]
  4024a0:	4b22      	ldr	r3, [pc, #136]	; (40252c <usart_serial_getchar+0x13c>)
  4024a2:	4798      	blx	r3
  4024a4:	4603      	mov	r3, r0
  4024a6:	2b00      	cmp	r3, #0
  4024a8:	d1f6      	bne.n	402498 <usart_serial_getchar+0xa8>
		*data = (uint8_t)(val & 0xFF);
  4024aa:	68fb      	ldr	r3, [r7, #12]
  4024ac:	b2da      	uxtb	r2, r3
  4024ae:	683b      	ldr	r3, [r7, #0]
  4024b0:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART5
	if (USART5 == p_usart) {
  4024b2:	687b      	ldr	r3, [r7, #4]
  4024b4:	4a22      	ldr	r2, [pc, #136]	; (402540 <usart_serial_getchar+0x150>)
  4024b6:	4293      	cmp	r3, r2
  4024b8:	d10d      	bne.n	4024d6 <usart_serial_getchar+0xe6>
		while (usart_read(p_usart, &val));
  4024ba:	bf00      	nop
  4024bc:	f107 030c 	add.w	r3, r7, #12
  4024c0:	4619      	mov	r1, r3
  4024c2:	6878      	ldr	r0, [r7, #4]
  4024c4:	4b19      	ldr	r3, [pc, #100]	; (40252c <usart_serial_getchar+0x13c>)
  4024c6:	4798      	blx	r3
  4024c8:	4603      	mov	r3, r0
  4024ca:	2b00      	cmp	r3, #0
  4024cc:	d1f6      	bne.n	4024bc <usart_serial_getchar+0xcc>
		*data = (uint8_t)(val & 0xFF);
  4024ce:	68fb      	ldr	r3, [r7, #12]
  4024d0:	b2da      	uxtb	r2, r3
  4024d2:	683b      	ldr	r3, [r7, #0]
  4024d4:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART6
	if (USART6 == p_usart) {
  4024d6:	687b      	ldr	r3, [r7, #4]
  4024d8:	4a1a      	ldr	r2, [pc, #104]	; (402544 <usart_serial_getchar+0x154>)
  4024da:	4293      	cmp	r3, r2
  4024dc:	d10d      	bne.n	4024fa <usart_serial_getchar+0x10a>
		while (usart_read(p_usart, &val));
  4024de:	bf00      	nop
  4024e0:	f107 030c 	add.w	r3, r7, #12
  4024e4:	4619      	mov	r1, r3
  4024e6:	6878      	ldr	r0, [r7, #4]
  4024e8:	4b10      	ldr	r3, [pc, #64]	; (40252c <usart_serial_getchar+0x13c>)
  4024ea:	4798      	blx	r3
  4024ec:	4603      	mov	r3, r0
  4024ee:	2b00      	cmp	r3, #0
  4024f0:	d1f6      	bne.n	4024e0 <usart_serial_getchar+0xf0>
		*data = (uint8_t)(val & 0xFF);
  4024f2:	68fb      	ldr	r3, [r7, #12]
  4024f4:	b2da      	uxtb	r2, r3
  4024f6:	683b      	ldr	r3, [r7, #0]
  4024f8:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART7
	if (USART7 == p_usart) {
  4024fa:	687b      	ldr	r3, [r7, #4]
  4024fc:	4a12      	ldr	r2, [pc, #72]	; (402548 <usart_serial_getchar+0x158>)
  4024fe:	4293      	cmp	r3, r2
  402500:	d10d      	bne.n	40251e <usart_serial_getchar+0x12e>
		while (usart_read(p_usart, &val));
  402502:	bf00      	nop
  402504:	f107 030c 	add.w	r3, r7, #12
  402508:	4619      	mov	r1, r3
  40250a:	6878      	ldr	r0, [r7, #4]
  40250c:	4b07      	ldr	r3, [pc, #28]	; (40252c <usart_serial_getchar+0x13c>)
  40250e:	4798      	blx	r3
  402510:	4603      	mov	r3, r0
  402512:	2b00      	cmp	r3, #0
  402514:	d1f6      	bne.n	402504 <usart_serial_getchar+0x114>
		*data = (uint8_t)(val & 0xFF);
  402516:	68fb      	ldr	r3, [r7, #12]
  402518:	b2da      	uxtb	r2, r3
  40251a:	683b      	ldr	r3, [r7, #0]
  40251c:	701a      	strb	r2, [r3, #0]
	}
# endif
#endif /* ifdef USART */

}
  40251e:	bf00      	nop
  402520:	3710      	adds	r7, #16
  402522:	46bd      	mov	sp, r7
  402524:	bd80      	pop	{r7, pc}
  402526:	bf00      	nop
  402528:	4000c200 	.word	0x4000c200
  40252c:	0040992f 	.word	0x0040992f
  402530:	40020200 	.word	0x40020200
  402534:	40024200 	.word	0x40024200
  402538:	40018200 	.word	0x40018200
  40253c:	4001c200 	.word	0x4001c200
  402540:	40008200 	.word	0x40008200
  402544:	40040200 	.word	0x40040200
  402548:	40034200 	.word	0x40034200

0040254c <usart_serial_read_packet>:
 * \param len    Length of data
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
  40254c:	b580      	push	{r7, lr}
  40254e:	b084      	sub	sp, #16
  402550:	af00      	add	r7, sp, #0
  402552:	60f8      	str	r0, [r7, #12]
  402554:	60b9      	str	r1, [r7, #8]
  402556:	607a      	str	r2, [r7, #4]
	while (len) {
  402558:	e009      	b.n	40256e <usart_serial_read_packet+0x22>
		usart_serial_getchar(usart, data);
  40255a:	68b9      	ldr	r1, [r7, #8]
  40255c:	68f8      	ldr	r0, [r7, #12]
  40255e:	4b08      	ldr	r3, [pc, #32]	; (402580 <usart_serial_read_packet+0x34>)
  402560:	4798      	blx	r3
		len--;
  402562:	687b      	ldr	r3, [r7, #4]
  402564:	3b01      	subs	r3, #1
  402566:	607b      	str	r3, [r7, #4]
		data++;
  402568:	68bb      	ldr	r3, [r7, #8]
  40256a:	3301      	adds	r3, #1
  40256c:	60bb      	str	r3, [r7, #8]
	while (len) {
  40256e:	687b      	ldr	r3, [r7, #4]
  402570:	2b00      	cmp	r3, #0
  402572:	d1f2      	bne.n	40255a <usart_serial_read_packet+0xe>
	}
	return STATUS_OK;
  402574:	2300      	movs	r3, #0
}
  402576:	4618      	mov	r0, r3
  402578:	3710      	adds	r7, #16
  40257a:	46bd      	mov	sp, r7
  40257c:	bd80      	pop	{r7, pc}
  40257e:	bf00      	nop
  402580:	004023f1 	.word	0x004023f1

00402584 <osc_get_rate>:
{
  402584:	b480      	push	{r7}
  402586:	b083      	sub	sp, #12
  402588:	af00      	add	r7, sp, #0
  40258a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  40258c:	687b      	ldr	r3, [r7, #4]
  40258e:	2b07      	cmp	r3, #7
  402590:	d825      	bhi.n	4025de <osc_get_rate+0x5a>
  402592:	a201      	add	r2, pc, #4	; (adr r2, 402598 <osc_get_rate+0x14>)
  402594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402598:	004025b9 	.word	0x004025b9
  40259c:	004025bf 	.word	0x004025bf
  4025a0:	004025c5 	.word	0x004025c5
  4025a4:	004025cb 	.word	0x004025cb
  4025a8:	004025cf 	.word	0x004025cf
  4025ac:	004025d3 	.word	0x004025d3
  4025b0:	004025d7 	.word	0x004025d7
  4025b4:	004025db 	.word	0x004025db
		return OSC_SLCK_32K_RC_HZ;
  4025b8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4025bc:	e010      	b.n	4025e0 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  4025be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4025c2:	e00d      	b.n	4025e0 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  4025c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4025c8:	e00a      	b.n	4025e0 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  4025ca:	4b08      	ldr	r3, [pc, #32]	; (4025ec <osc_get_rate+0x68>)
  4025cc:	e008      	b.n	4025e0 <osc_get_rate+0x5c>
		return OSC_MAINCK_16M_RC_HZ;
  4025ce:	4b08      	ldr	r3, [pc, #32]	; (4025f0 <osc_get_rate+0x6c>)
  4025d0:	e006      	b.n	4025e0 <osc_get_rate+0x5c>
		return OSC_MAINCK_24M_RC_HZ;
  4025d2:	4b08      	ldr	r3, [pc, #32]	; (4025f4 <osc_get_rate+0x70>)
  4025d4:	e004      	b.n	4025e0 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  4025d6:	2300      	movs	r3, #0
  4025d8:	e002      	b.n	4025e0 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  4025da:	2300      	movs	r3, #0
  4025dc:	e000      	b.n	4025e0 <osc_get_rate+0x5c>
	return 0;
  4025de:	2300      	movs	r3, #0
}
  4025e0:	4618      	mov	r0, r3
  4025e2:	370c      	adds	r7, #12
  4025e4:	46bd      	mov	sp, r7
  4025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4025ea:	4770      	bx	lr
  4025ec:	007a1200 	.word	0x007a1200
  4025f0:	00f42400 	.word	0x00f42400
  4025f4:	016e3600 	.word	0x016e3600

004025f8 <sysclk_get_main_hz>:
{
  4025f8:	b580      	push	{r7, lr}
  4025fa:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  4025fc:	2001      	movs	r0, #1
  4025fe:	4b04      	ldr	r3, [pc, #16]	; (402610 <sysclk_get_main_hz+0x18>)
  402600:	4798      	blx	r3
  402602:	4602      	mov	r2, r0
  402604:	f640 3372 	movw	r3, #2930	; 0xb72
  402608:	fb03 f302 	mul.w	r3, r3, r2
}
  40260c:	4618      	mov	r0, r3
  40260e:	bd80      	pop	{r7, pc}
  402610:	00402585 	.word	0x00402585

00402614 <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
  402614:	b580      	push	{r7, lr}
  402616:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  402618:	4b02      	ldr	r3, [pc, #8]	; (402624 <sysclk_get_peripheral_hz+0x10>)
  40261a:	4798      	blx	r3
  40261c:	4603      	mov	r3, r0
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  40261e:	4618      	mov	r0, r3
  402620:	bd80      	pop	{r7, pc}
  402622:	bf00      	nop
  402624:	004025f9 	.word	0x004025f9

00402628 <spi_reset>:
{
  402628:	b480      	push	{r7}
  40262a:	b083      	sub	sp, #12
  40262c:	af00      	add	r7, sp, #0
  40262e:	6078      	str	r0, [r7, #4]
	p_spi->SPI_CR = SPI_CR_SWRST;
  402630:	687b      	ldr	r3, [r7, #4]
  402632:	2280      	movs	r2, #128	; 0x80
  402634:	601a      	str	r2, [r3, #0]
}
  402636:	bf00      	nop
  402638:	370c      	adds	r7, #12
  40263a:	46bd      	mov	sp, r7
  40263c:	f85d 7b04 	ldr.w	r7, [sp], #4
  402640:	4770      	bx	lr

00402642 <spi_set_lastxfer>:
{
  402642:	b480      	push	{r7}
  402644:	b083      	sub	sp, #12
  402646:	af00      	add	r7, sp, #0
  402648:	6078      	str	r0, [r7, #4]
	p_spi->SPI_CR = SPI_CR_LASTXFER;
  40264a:	687b      	ldr	r3, [r7, #4]
  40264c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  402650:	601a      	str	r2, [r3, #0]
}
  402652:	bf00      	nop
  402654:	370c      	adds	r7, #12
  402656:	46bd      	mov	sp, r7
  402658:	f85d 7b04 	ldr.w	r7, [sp], #4
  40265c:	4770      	bx	lr

0040265e <spi_set_master_mode>:
{
  40265e:	b480      	push	{r7}
  402660:	b083      	sub	sp, #12
  402662:	af00      	add	r7, sp, #0
  402664:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR |= SPI_MR_MSTR;
  402666:	687b      	ldr	r3, [r7, #4]
  402668:	685b      	ldr	r3, [r3, #4]
  40266a:	f043 0201 	orr.w	r2, r3, #1
  40266e:	687b      	ldr	r3, [r7, #4]
  402670:	605a      	str	r2, [r3, #4]
}
  402672:	bf00      	nop
  402674:	370c      	adds	r7, #12
  402676:	46bd      	mov	sp, r7
  402678:	f85d 7b04 	ldr.w	r7, [sp], #4
  40267c:	4770      	bx	lr

0040267e <spi_set_fixed_peripheral_select>:
{
  40267e:	b480      	push	{r7}
  402680:	b083      	sub	sp, #12
  402682:	af00      	add	r7, sp, #0
  402684:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR &= (~SPI_MR_PS);
  402686:	687b      	ldr	r3, [r7, #4]
  402688:	685b      	ldr	r3, [r3, #4]
  40268a:	f023 0202 	bic.w	r2, r3, #2
  40268e:	687b      	ldr	r3, [r7, #4]
  402690:	605a      	str	r2, [r3, #4]
}
  402692:	bf00      	nop
  402694:	370c      	adds	r7, #12
  402696:	46bd      	mov	sp, r7
  402698:	f85d 7b04 	ldr.w	r7, [sp], #4
  40269c:	4770      	bx	lr

0040269e <spi_disable_peripheral_select_decode>:
{
  40269e:	b480      	push	{r7}
  4026a0:	b083      	sub	sp, #12
  4026a2:	af00      	add	r7, sp, #0
  4026a4:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR &= (~SPI_MR_PCSDEC);
  4026a6:	687b      	ldr	r3, [r7, #4]
  4026a8:	685b      	ldr	r3, [r3, #4]
  4026aa:	f023 0204 	bic.w	r2, r3, #4
  4026ae:	687b      	ldr	r3, [r7, #4]
  4026b0:	605a      	str	r2, [r3, #4]
}
  4026b2:	bf00      	nop
  4026b4:	370c      	adds	r7, #12
  4026b6:	46bd      	mov	sp, r7
  4026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4026bc:	4770      	bx	lr

004026be <spi_get_peripheral_select_decode_setting>:
{
  4026be:	b480      	push	{r7}
  4026c0:	b083      	sub	sp, #12
  4026c2:	af00      	add	r7, sp, #0
  4026c4:	6078      	str	r0, [r7, #4]
	if (p_spi->SPI_MR & SPI_MR_PCSDEC) {
  4026c6:	687b      	ldr	r3, [r7, #4]
  4026c8:	685b      	ldr	r3, [r3, #4]
  4026ca:	f003 0304 	and.w	r3, r3, #4
  4026ce:	2b00      	cmp	r3, #0
  4026d0:	d001      	beq.n	4026d6 <spi_get_peripheral_select_decode_setting+0x18>
		return 1;
  4026d2:	2301      	movs	r3, #1
  4026d4:	e000      	b.n	4026d8 <spi_get_peripheral_select_decode_setting+0x1a>
		return 0;
  4026d6:	2300      	movs	r3, #0
}
  4026d8:	4618      	mov	r0, r3
  4026da:	370c      	adds	r7, #12
  4026dc:	46bd      	mov	sp, r7
  4026de:	f85d 7b04 	ldr.w	r7, [sp], #4
  4026e2:	4770      	bx	lr

004026e4 <spi_disable_mode_fault_detect>:
{
  4026e4:	b480      	push	{r7}
  4026e6:	b083      	sub	sp, #12
  4026e8:	af00      	add	r7, sp, #0
  4026ea:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  4026ec:	687b      	ldr	r3, [r7, #4]
  4026ee:	685b      	ldr	r3, [r3, #4]
  4026f0:	f043 0210 	orr.w	r2, r3, #16
  4026f4:	687b      	ldr	r3, [r7, #4]
  4026f6:	605a      	str	r2, [r3, #4]
}
  4026f8:	bf00      	nop
  4026fa:	370c      	adds	r7, #12
  4026fc:	46bd      	mov	sp, r7
  4026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
  402702:	4770      	bx	lr

00402704 <spi_disable_loopback>:
{
  402704:	b480      	push	{r7}
  402706:	b083      	sub	sp, #12
  402708:	af00      	add	r7, sp, #0
  40270a:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR &= (~SPI_MR_LLB);
  40270c:	687b      	ldr	r3, [r7, #4]
  40270e:	685b      	ldr	r3, [r3, #4]
  402710:	f023 0280 	bic.w	r2, r3, #128	; 0x80
  402714:	687b      	ldr	r3, [r7, #4]
  402716:	605a      	str	r2, [r3, #4]
}
  402718:	bf00      	nop
  40271a:	370c      	adds	r7, #12
  40271c:	46bd      	mov	sp, r7
  40271e:	f85d 7b04 	ldr.w	r7, [sp], #4
  402722:	4770      	bx	lr

00402724 <spi_put>:
 * \param p_spi Base address of the SPI instance.
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(Spi *p_spi, uint16_t data)
{
  402724:	b480      	push	{r7}
  402726:	b083      	sub	sp, #12
  402728:	af00      	add	r7, sp, #0
  40272a:	6078      	str	r0, [r7, #4]
  40272c:	460b      	mov	r3, r1
  40272e:	807b      	strh	r3, [r7, #2]
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  402730:	887a      	ldrh	r2, [r7, #2]
  402732:	687b      	ldr	r3, [r7, #4]
  402734:	60da      	str	r2, [r3, #12]
}
  402736:	bf00      	nop
  402738:	370c      	adds	r7, #12
  40273a:	46bd      	mov	sp, r7
  40273c:	f85d 7b04 	ldr.w	r7, [sp], #4
  402740:	4770      	bx	lr

00402742 <spi_get>:
 * \param p_spi Base address of the SPI instance.
 * \return The data byte
 *
 */
static inline uint16_t spi_get(Spi *p_spi)
{
  402742:	b480      	push	{r7}
  402744:	b083      	sub	sp, #12
  402746:	af00      	add	r7, sp, #0
  402748:	6078      	str	r0, [r7, #4]
	return (p_spi->SPI_RDR & SPI_RDR_RD_Msk);
  40274a:	687b      	ldr	r3, [r7, #4]
  40274c:	689b      	ldr	r3, [r3, #8]
  40274e:	b29b      	uxth	r3, r3
}
  402750:	4618      	mov	r0, r3
  402752:	370c      	adds	r7, #12
  402754:	46bd      	mov	sp, r7
  402756:	f85d 7b04 	ldr.w	r7, [sp], #4
  40275a:	4770      	bx	lr

0040275c <spi_is_tx_empty>:
 *
 * \retval 1 if transmissions are complete.
 * \retval 0 if transmissions are not complete.
 */
static inline uint32_t spi_is_tx_empty(Spi *p_spi)
{
  40275c:	b480      	push	{r7}
  40275e:	b083      	sub	sp, #12
  402760:	af00      	add	r7, sp, #0
  402762:	6078      	str	r0, [r7, #4]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  402764:	687b      	ldr	r3, [r7, #4]
  402766:	691b      	ldr	r3, [r3, #16]
  402768:	f403 7300 	and.w	r3, r3, #512	; 0x200
  40276c:	2b00      	cmp	r3, #0
  40276e:	d001      	beq.n	402774 <spi_is_tx_empty+0x18>
		return 1;
  402770:	2301      	movs	r3, #1
  402772:	e000      	b.n	402776 <spi_is_tx_empty+0x1a>
	} else {
		return 0;
  402774:	2300      	movs	r3, #0
	}
}
  402776:	4618      	mov	r0, r3
  402778:	370c      	adds	r7, #12
  40277a:	46bd      	mov	sp, r7
  40277c:	f85d 7b04 	ldr.w	r7, [sp], #4
  402780:	4770      	bx	lr

00402782 <spi_is_tx_ready>:
 *
 * \retval 1 if transmissions are complete.
 * \retval 0 if transmissions are not complete.
 */
static inline uint32_t spi_is_tx_ready(Spi *p_spi)
{
  402782:	b480      	push	{r7}
  402784:	b083      	sub	sp, #12
  402786:	af00      	add	r7, sp, #0
  402788:	6078      	str	r0, [r7, #4]
	if (p_spi->SPI_SR & SPI_SR_TDRE) {
  40278a:	687b      	ldr	r3, [r7, #4]
  40278c:	691b      	ldr	r3, [r3, #16]
  40278e:	f003 0302 	and.w	r3, r3, #2
  402792:	2b00      	cmp	r3, #0
  402794:	d001      	beq.n	40279a <spi_is_tx_ready+0x18>
		return 1;
  402796:	2301      	movs	r3, #1
  402798:	e000      	b.n	40279c <spi_is_tx_ready+0x1a>
	} else {
		return 0;
  40279a:	2300      	movs	r3, #0
	}
}
  40279c:	4618      	mov	r0, r3
  40279e:	370c      	adds	r7, #12
  4027a0:	46bd      	mov	sp, r7
  4027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4027a6:	4770      	bx	lr

004027a8 <spi_is_rx_ready>:
 * \param p_spi Pointer to an SPI instance.
 *
 * \return 1 if the SPI Receiver is ready, otherwise 0.
 */
static inline uint32_t spi_is_rx_ready(Spi *p_spi)
{
  4027a8:	b480      	push	{r7}
  4027aa:	b083      	sub	sp, #12
  4027ac:	af00      	add	r7, sp, #0
  4027ae:	6078      	str	r0, [r7, #4]
	if ((p_spi->SPI_SR & (SPI_SR_RDRF | SPI_SR_TXEMPTY))
  4027b0:	687b      	ldr	r3, [r7, #4]
  4027b2:	691a      	ldr	r2, [r3, #16]
  4027b4:	f240 2301 	movw	r3, #513	; 0x201
  4027b8:	4013      	ands	r3, r2
  4027ba:	f240 2201 	movw	r2, #513	; 0x201
  4027be:	4293      	cmp	r3, r2
  4027c0:	d101      	bne.n	4027c6 <spi_is_rx_ready+0x1e>
			== (SPI_SR_RDRF | SPI_SR_TXEMPTY)) {
		return 1;
  4027c2:	2301      	movs	r3, #1
  4027c4:	e000      	b.n	4027c8 <spi_is_rx_ready+0x20>
	} else {
		return 0;
  4027c6:	2300      	movs	r3, #0
	}
}
  4027c8:	4618      	mov	r0, r3
  4027ca:	370c      	adds	r7, #12
  4027cc:	46bd      	mov	sp, r7
  4027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
  4027d2:	4770      	bx	lr

004027d4 <spi_write_single>:
 * \param p_spi     Base address of the SPI instance.
 * \param data      Data to write.
 *
 */
static inline void spi_write_single(Spi *p_spi, uint8_t data)
{
  4027d4:	b580      	push	{r7, lr}
  4027d6:	b082      	sub	sp, #8
  4027d8:	af00      	add	r7, sp, #0
  4027da:	6078      	str	r0, [r7, #4]
  4027dc:	460b      	mov	r3, r1
  4027de:	70fb      	strb	r3, [r7, #3]
	spi_put(p_spi, (uint16_t)data);
  4027e0:	78fb      	ldrb	r3, [r7, #3]
  4027e2:	b29b      	uxth	r3, r3
  4027e4:	4619      	mov	r1, r3
  4027e6:	6878      	ldr	r0, [r7, #4]
  4027e8:	4b02      	ldr	r3, [pc, #8]	; (4027f4 <spi_write_single+0x20>)
  4027ea:	4798      	blx	r3
}
  4027ec:	bf00      	nop
  4027ee:	3708      	adds	r7, #8
  4027f0:	46bd      	mov	sp, r7
  4027f2:	bd80      	pop	{r7, pc}
  4027f4:	00402725 	.word	0x00402725

004027f8 <spi_read_single>:
 * \param p_spi     Base address of the SPI instance.
 * \param data      Data to read.
 *
 */
static inline void spi_read_single(Spi *p_spi, uint8_t *data)
{
  4027f8:	b580      	push	{r7, lr}
  4027fa:	b082      	sub	sp, #8
  4027fc:	af00      	add	r7, sp, #0
  4027fe:	6078      	str	r0, [r7, #4]
  402800:	6039      	str	r1, [r7, #0]
	*data = (uint8_t)spi_get(p_spi);
  402802:	6878      	ldr	r0, [r7, #4]
  402804:	4b04      	ldr	r3, [pc, #16]	; (402818 <spi_read_single+0x20>)
  402806:	4798      	blx	r3
  402808:	4603      	mov	r3, r0
  40280a:	b2da      	uxtb	r2, r3
  40280c:	683b      	ldr	r3, [r7, #0]
  40280e:	701a      	strb	r2, [r3, #0]
}
  402810:	bf00      	nop
  402812:	3708      	adds	r7, #8
  402814:	46bd      	mov	sp, r7
  402816:	bd80      	pop	{r7, pc}
  402818:	00402743 	.word	0x00402743

0040281c <spi_master_init>:
 *
 * \param p_spi  Base address of the SPI instance.
 *
 */
void spi_master_init(Spi *p_spi)
{
  40281c:	b580      	push	{r7, lr}
  40281e:	b082      	sub	sp, #8
  402820:	af00      	add	r7, sp, #0
  402822:	6078      	str	r0, [r7, #4]
#if SAMG55
	flexcom_enable(BOARD_FLEXCOM_SPI);
  402824:	4812      	ldr	r0, [pc, #72]	; (402870 <spi_master_init+0x54>)
  402826:	4b13      	ldr	r3, [pc, #76]	; (402874 <spi_master_init+0x58>)
  402828:	4798      	blx	r3
	flexcom_set_opmode(BOARD_FLEXCOM_SPI, FLEXCOM_SPI);
  40282a:	2102      	movs	r1, #2
  40282c:	4810      	ldr	r0, [pc, #64]	; (402870 <spi_master_init+0x54>)
  40282e:	4b12      	ldr	r3, [pc, #72]	; (402878 <spi_master_init+0x5c>)
  402830:	4798      	blx	r3
#else
	spi_enable_clock(p_spi);
#endif
	spi_reset(p_spi);
  402832:	6878      	ldr	r0, [r7, #4]
  402834:	4b11      	ldr	r3, [pc, #68]	; (40287c <spi_master_init+0x60>)
  402836:	4798      	blx	r3
	spi_set_master_mode(p_spi);
  402838:	6878      	ldr	r0, [r7, #4]
  40283a:	4b11      	ldr	r3, [pc, #68]	; (402880 <spi_master_init+0x64>)
  40283c:	4798      	blx	r3
	spi_disable_mode_fault_detect(p_spi);
  40283e:	6878      	ldr	r0, [r7, #4]
  402840:	4b10      	ldr	r3, [pc, #64]	; (402884 <spi_master_init+0x68>)
  402842:	4798      	blx	r3
	spi_disable_loopback(p_spi);
  402844:	6878      	ldr	r0, [r7, #4]
  402846:	4b10      	ldr	r3, [pc, #64]	; (402888 <spi_master_init+0x6c>)
  402848:	4798      	blx	r3
	spi_set_peripheral_chip_select_value(p_spi, DEFAULT_CHIP_ID);
  40284a:	2100      	movs	r1, #0
  40284c:	6878      	ldr	r0, [r7, #4]
  40284e:	4b0f      	ldr	r3, [pc, #60]	; (40288c <spi_master_init+0x70>)
  402850:	4798      	blx	r3
	spi_set_fixed_peripheral_select(p_spi);
  402852:	6878      	ldr	r0, [r7, #4]
  402854:	4b0e      	ldr	r3, [pc, #56]	; (402890 <spi_master_init+0x74>)
  402856:	4798      	blx	r3
	spi_disable_peripheral_select_decode(p_spi);
  402858:	6878      	ldr	r0, [r7, #4]
  40285a:	4b0e      	ldr	r3, [pc, #56]	; (402894 <spi_master_init+0x78>)
  40285c:	4798      	blx	r3
	spi_set_delay_between_chip_select(p_spi, CONFIG_SPI_MASTER_DELAY_BCS);
  40285e:	2100      	movs	r1, #0
  402860:	6878      	ldr	r0, [r7, #4]
  402862:	4b0d      	ldr	r3, [pc, #52]	; (402898 <spi_master_init+0x7c>)
  402864:	4798      	blx	r3
}
  402866:	bf00      	nop
  402868:	3708      	adds	r7, #8
  40286a:	46bd      	mov	sp, r7
  40286c:	bd80      	pop	{r7, pc}
  40286e:	bf00      	nop
  402870:	40008000 	.word	0x40008000
  402874:	00405fad 	.word	0x00405fad
  402878:	00406115 	.word	0x00406115
  40287c:	00402629 	.word	0x00402629
  402880:	0040265f 	.word	0x0040265f
  402884:	004026e5 	.word	0x004026e5
  402888:	00402705 	.word	0x00402705
  40288c:	00406c75 	.word	0x00406c75
  402890:	0040267f 	.word	0x0040267f
  402894:	0040269f 	.word	0x0040269f
  402898:	00406ca9 	.word	0x00406ca9

0040289c <spi_master_setup_device>:
 * \param baud_rate Baud rate for communication with slave device in Hz.
 * \param sel_id    Board specific select id.
 */
void spi_master_setup_device(Spi *p_spi, struct spi_device *device,
		spi_flags_t flags, uint32_t baud_rate, board_spi_select_id_t sel_id)
{
  40289c:	b590      	push	{r4, r7, lr}
  40289e:	b087      	sub	sp, #28
  4028a0:	af00      	add	r7, sp, #0
  4028a2:	60f8      	str	r0, [r7, #12]
  4028a4:	60b9      	str	r1, [r7, #8]
  4028a6:	603b      	str	r3, [r7, #0]
  4028a8:	4613      	mov	r3, r2
  4028aa:	71fb      	strb	r3, [r7, #7]
#if (SAM4L)
    int16_t baud_div = spi_calc_baudrate_div(baud_rate, sysclk_get_pba_hz());
#else
	int16_t baud_div = spi_calc_baudrate_div(baud_rate, sysclk_get_peripheral_hz());
  4028ac:	4b20      	ldr	r3, [pc, #128]	; (402930 <spi_master_setup_device+0x94>)
  4028ae:	4798      	blx	r3
  4028b0:	4603      	mov	r3, r0
  4028b2:	4619      	mov	r1, r3
  4028b4:	6838      	ldr	r0, [r7, #0]
  4028b6:	4b1f      	ldr	r3, [pc, #124]	; (402934 <spi_master_setup_device+0x98>)
  4028b8:	4798      	blx	r3
  4028ba:	4603      	mov	r3, r0
  4028bc:	82fb      	strh	r3, [r7, #22]
	/* avoid Cppcheck Warning */
	UNUSED(sel_id);
	if (-1 == baud_div) {
		Assert(0 == "Failed to find baudrate divider");
	}
	spi_set_transfer_delay(p_spi, device->id, CONFIG_SPI_MASTER_DELAY_BS,
  4028be:	68bb      	ldr	r3, [r7, #8]
  4028c0:	6819      	ldr	r1, [r3, #0]
  4028c2:	2300      	movs	r3, #0
  4028c4:	2200      	movs	r2, #0
  4028c6:	68f8      	ldr	r0, [r7, #12]
  4028c8:	4c1b      	ldr	r4, [pc, #108]	; (402938 <spi_master_setup_device+0x9c>)
  4028ca:	47a0      	blx	r4
			CONFIG_SPI_MASTER_DELAY_BCT);
	spi_set_bits_per_transfer(p_spi, device->id,
  4028cc:	68bb      	ldr	r3, [r7, #8]
  4028ce:	681b      	ldr	r3, [r3, #0]
  4028d0:	2208      	movs	r2, #8
  4028d2:	4619      	mov	r1, r3
  4028d4:	68f8      	ldr	r0, [r7, #12]
  4028d6:	4b19      	ldr	r3, [pc, #100]	; (40293c <spi_master_setup_device+0xa0>)
  4028d8:	4798      	blx	r3
			CONFIG_SPI_MASTER_BITS_PER_TRANSFER);
	spi_set_baudrate_div(p_spi, device->id, baud_div);
  4028da:	68bb      	ldr	r3, [r7, #8]
  4028dc:	681b      	ldr	r3, [r3, #0]
  4028de:	8afa      	ldrh	r2, [r7, #22]
  4028e0:	b2d2      	uxtb	r2, r2
  4028e2:	4619      	mov	r1, r3
  4028e4:	68f8      	ldr	r0, [r7, #12]
  4028e6:	4b16      	ldr	r3, [pc, #88]	; (402940 <spi_master_setup_device+0xa4>)
  4028e8:	4798      	blx	r3
	spi_configure_cs_behavior(p_spi, device->id, SPI_CS_KEEP_LOW);
  4028ea:	68bb      	ldr	r3, [r7, #8]
  4028ec:	681b      	ldr	r3, [r3, #0]
  4028ee:	2208      	movs	r2, #8
  4028f0:	4619      	mov	r1, r3
  4028f2:	68f8      	ldr	r0, [r7, #12]
  4028f4:	4b13      	ldr	r3, [pc, #76]	; (402944 <spi_master_setup_device+0xa8>)
  4028f6:	4798      	blx	r3
	spi_set_clock_polarity(p_spi, device->id, flags >> 1);
  4028f8:	68bb      	ldr	r3, [r7, #8]
  4028fa:	6819      	ldr	r1, [r3, #0]
  4028fc:	79fb      	ldrb	r3, [r7, #7]
  4028fe:	085b      	lsrs	r3, r3, #1
  402900:	b2db      	uxtb	r3, r3
  402902:	461a      	mov	r2, r3
  402904:	68f8      	ldr	r0, [r7, #12]
  402906:	4b10      	ldr	r3, [pc, #64]	; (402948 <spi_master_setup_device+0xac>)
  402908:	4798      	blx	r3
	spi_set_clock_phase(p_spi, device->id, ((flags & 0x1) ^ 0x1));
  40290a:	68bb      	ldr	r3, [r7, #8]
  40290c:	6819      	ldr	r1, [r3, #0]
  40290e:	79fb      	ldrb	r3, [r7, #7]
  402910:	f003 0301 	and.w	r3, r3, #1
  402914:	2b00      	cmp	r3, #0
  402916:	bf0c      	ite	eq
  402918:	2301      	moveq	r3, #1
  40291a:	2300      	movne	r3, #0
  40291c:	b2db      	uxtb	r3, r3
  40291e:	461a      	mov	r2, r3
  402920:	68f8      	ldr	r0, [r7, #12]
  402922:	4b0a      	ldr	r3, [pc, #40]	; (40294c <spi_master_setup_device+0xb0>)
  402924:	4798      	blx	r3
}
  402926:	bf00      	nop
  402928:	371c      	adds	r7, #28
  40292a:	46bd      	mov	sp, r7
  40292c:	bd90      	pop	{r4, r7, pc}
  40292e:	bf00      	nop
  402930:	00402615 	.word	0x00402615
  402934:	00406e69 	.word	0x00406e69
  402938:	00406f03 	.word	0x00406f03
  40293c:	00406e1f 	.word	0x00406e1f
  402940:	00406ea5 	.word	0x00406ea5
  402944:	00406d79 	.word	0x00406d79
  402948:	00406cd9 	.word	0x00406cd9
  40294c:	00406d29 	.word	0x00406d29

00402950 <spi_select_device>:
 * \param p_spi   Base address of the SPI instance.
 * \param device  SPI device.
 *
 */
void spi_select_device(Spi *p_spi, struct spi_device *device)
{
  402950:	b580      	push	{r7, lr}
  402952:	b082      	sub	sp, #8
  402954:	af00      	add	r7, sp, #0
  402956:	6078      	str	r0, [r7, #4]
  402958:	6039      	str	r1, [r7, #0]
	if (spi_get_peripheral_select_decode_setting(p_spi)) {
  40295a:	6878      	ldr	r0, [r7, #4]
  40295c:	4b10      	ldr	r3, [pc, #64]	; (4029a0 <spi_select_device+0x50>)
  40295e:	4798      	blx	r3
  402960:	4603      	mov	r3, r0
  402962:	2b00      	cmp	r3, #0
  402964:	d00a      	beq.n	40297c <spi_select_device+0x2c>
		if (device->id < MAX_NUM_WITH_DECODER) {
  402966:	683b      	ldr	r3, [r7, #0]
  402968:	681b      	ldr	r3, [r3, #0]
  40296a:	2b0f      	cmp	r3, #15
  40296c:	d814      	bhi.n	402998 <spi_select_device+0x48>
			spi_set_peripheral_chip_select_value(p_spi, device->id);
  40296e:	683b      	ldr	r3, [r7, #0]
  402970:	681b      	ldr	r3, [r3, #0]
  402972:	4619      	mov	r1, r3
  402974:	6878      	ldr	r0, [r7, #4]
  402976:	4b0b      	ldr	r3, [pc, #44]	; (4029a4 <spi_select_device+0x54>)
  402978:	4798      	blx	r3
	} else {
		if (device->id < MAX_NUM_WITHOUT_DECODER) {
			spi_set_peripheral_chip_select_value(p_spi, (~(1 << device->id)));
		}
	}
}
  40297a:	e00d      	b.n	402998 <spi_select_device+0x48>
		if (device->id < MAX_NUM_WITHOUT_DECODER) {
  40297c:	683b      	ldr	r3, [r7, #0]
  40297e:	681b      	ldr	r3, [r3, #0]
  402980:	2b03      	cmp	r3, #3
  402982:	d809      	bhi.n	402998 <spi_select_device+0x48>
			spi_set_peripheral_chip_select_value(p_spi, (~(1 << device->id)));
  402984:	683b      	ldr	r3, [r7, #0]
  402986:	681b      	ldr	r3, [r3, #0]
  402988:	2201      	movs	r2, #1
  40298a:	fa02 f303 	lsl.w	r3, r2, r3
  40298e:	43db      	mvns	r3, r3
  402990:	4619      	mov	r1, r3
  402992:	6878      	ldr	r0, [r7, #4]
  402994:	4b03      	ldr	r3, [pc, #12]	; (4029a4 <spi_select_device+0x54>)
  402996:	4798      	blx	r3
}
  402998:	bf00      	nop
  40299a:	3708      	adds	r7, #8
  40299c:	46bd      	mov	sp, r7
  40299e:	bd80      	pop	{r7, pc}
  4029a0:	004026bf 	.word	0x004026bf
  4029a4:	00406c75 	.word	0x00406c75

004029a8 <spi_deselect_device>:
 * \param device  SPI device.
 *
 * \pre SPI device must be selected with spi_select_device() first.
 */
void spi_deselect_device(Spi *p_spi, struct spi_device *device)
{
  4029a8:	b580      	push	{r7, lr}
  4029aa:	b082      	sub	sp, #8
  4029ac:	af00      	add	r7, sp, #0
  4029ae:	6078      	str	r0, [r7, #4]
  4029b0:	6039      	str	r1, [r7, #0]
	/* avoid Cppcheck Warning */
	UNUSED(device);
	while (!spi_is_tx_empty(p_spi)) {
  4029b2:	bf00      	nop
  4029b4:	6878      	ldr	r0, [r7, #4]
  4029b6:	4b08      	ldr	r3, [pc, #32]	; (4029d8 <spi_deselect_device+0x30>)
  4029b8:	4798      	blx	r3
  4029ba:	4603      	mov	r3, r0
  4029bc:	2b00      	cmp	r3, #0
  4029be:	d0f9      	beq.n	4029b4 <spi_deselect_device+0xc>
	}

	// Assert all lines; no peripheral is selected.
	spi_set_peripheral_chip_select_value(p_spi, NONE_CHIP_SELECT_ID);
  4029c0:	210f      	movs	r1, #15
  4029c2:	6878      	ldr	r0, [r7, #4]
  4029c4:	4b05      	ldr	r3, [pc, #20]	; (4029dc <spi_deselect_device+0x34>)
  4029c6:	4798      	blx	r3

	// Last transfer, so de-assert the current NPCS if CSAAT is set.
	spi_set_lastxfer(p_spi);
  4029c8:	6878      	ldr	r0, [r7, #4]
  4029ca:	4b05      	ldr	r3, [pc, #20]	; (4029e0 <spi_deselect_device+0x38>)
  4029cc:	4798      	blx	r3

}
  4029ce:	bf00      	nop
  4029d0:	3708      	adds	r7, #8
  4029d2:	46bd      	mov	sp, r7
  4029d4:	bd80      	pop	{r7, pc}
  4029d6:	bf00      	nop
  4029d8:	0040275d 	.word	0x0040275d
  4029dc:	00406c75 	.word	0x00406c75
  4029e0:	00402643 	.word	0x00402643

004029e4 <spi_write_packet>:
 *
 * \pre SPI device must be selected with spi_select_device() first.
 */
status_code_t spi_write_packet(Spi *p_spi, const uint8_t *data,
		size_t len)
{
  4029e4:	b580      	push	{r7, lr}
  4029e6:	b088      	sub	sp, #32
  4029e8:	af00      	add	r7, sp, #0
  4029ea:	60f8      	str	r0, [r7, #12]
  4029ec:	60b9      	str	r1, [r7, #8]
  4029ee:	607a      	str	r2, [r7, #4]
	uint32_t timeout = SPI_TIMEOUT;
  4029f0:	f643 2398 	movw	r3, #15000	; 0x3a98
  4029f4:	61fb      	str	r3, [r7, #28]
	uint32_t i = 0;
  4029f6:	2300      	movs	r3, #0
  4029f8:	61bb      	str	r3, [r7, #24]
	uint8_t val;

	while (len) {
  4029fa:	e021      	b.n	402a40 <spi_write_packet+0x5c>
		timeout = SPI_TIMEOUT;
  4029fc:	f643 2398 	movw	r3, #15000	; 0x3a98
  402a00:	61fb      	str	r3, [r7, #28]
		while (!spi_is_tx_ready(p_spi)) {
  402a02:	e007      	b.n	402a14 <spi_write_packet+0x30>
			if (!timeout--) {
  402a04:	69fb      	ldr	r3, [r7, #28]
  402a06:	1e5a      	subs	r2, r3, #1
  402a08:	61fa      	str	r2, [r7, #28]
  402a0a:	2b00      	cmp	r3, #0
  402a0c:	d102      	bne.n	402a14 <spi_write_packet+0x30>
				return ERR_TIMEOUT;
  402a0e:	f06f 0302 	mvn.w	r3, #2
  402a12:	e019      	b.n	402a48 <spi_write_packet+0x64>
		while (!spi_is_tx_ready(p_spi)) {
  402a14:	68f8      	ldr	r0, [r7, #12]
  402a16:	4b0e      	ldr	r3, [pc, #56]	; (402a50 <spi_write_packet+0x6c>)
  402a18:	4798      	blx	r3
  402a1a:	4603      	mov	r3, r0
  402a1c:	2b00      	cmp	r3, #0
  402a1e:	d0f1      	beq.n	402a04 <spi_write_packet+0x20>
			}
		}
		val = data[i];
  402a20:	68ba      	ldr	r2, [r7, #8]
  402a22:	69bb      	ldr	r3, [r7, #24]
  402a24:	4413      	add	r3, r2
  402a26:	781b      	ldrb	r3, [r3, #0]
  402a28:	75fb      	strb	r3, [r7, #23]
		spi_write_single(p_spi, val);
  402a2a:	7dfb      	ldrb	r3, [r7, #23]
  402a2c:	4619      	mov	r1, r3
  402a2e:	68f8      	ldr	r0, [r7, #12]
  402a30:	4b08      	ldr	r3, [pc, #32]	; (402a54 <spi_write_packet+0x70>)
  402a32:	4798      	blx	r3
		i++;
  402a34:	69bb      	ldr	r3, [r7, #24]
  402a36:	3301      	adds	r3, #1
  402a38:	61bb      	str	r3, [r7, #24]
		len--;
  402a3a:	687b      	ldr	r3, [r7, #4]
  402a3c:	3b01      	subs	r3, #1
  402a3e:	607b      	str	r3, [r7, #4]
	while (len) {
  402a40:	687b      	ldr	r3, [r7, #4]
  402a42:	2b00      	cmp	r3, #0
  402a44:	d1da      	bne.n	4029fc <spi_write_packet+0x18>
	}

	return STATUS_OK;
  402a46:	2300      	movs	r3, #0
}
  402a48:	4618      	mov	r0, r3
  402a4a:	3720      	adds	r7, #32
  402a4c:	46bd      	mov	sp, r7
  402a4e:	bd80      	pop	{r7, pc}
  402a50:	00402783 	.word	0x00402783
  402a54:	004027d5 	.word	0x004027d5

00402a58 <spi_read_packet>:
 * \param len       Length of data to be read.
 *
 * \pre SPI device must be selected with spi_select_device() first.
 */
status_code_t spi_read_packet(Spi *p_spi, uint8_t *data, size_t len)
{
  402a58:	b580      	push	{r7, lr}
  402a5a:	b088      	sub	sp, #32
  402a5c:	af00      	add	r7, sp, #0
  402a5e:	60f8      	str	r0, [r7, #12]
  402a60:	60b9      	str	r1, [r7, #8]
  402a62:	607a      	str	r2, [r7, #4]
	uint32_t timeout = SPI_TIMEOUT;
  402a64:	f643 2398 	movw	r3, #15000	; 0x3a98
  402a68:	61fb      	str	r3, [r7, #28]
	uint8_t val;
	uint32_t i = 0;
  402a6a:	2300      	movs	r3, #0
  402a6c:	61bb      	str	r3, [r7, #24]

	while (len) {
  402a6e:	e038      	b.n	402ae2 <spi_read_packet+0x8a>
		timeout = SPI_TIMEOUT;
  402a70:	f643 2398 	movw	r3, #15000	; 0x3a98
  402a74:	61fb      	str	r3, [r7, #28]
		while (!spi_is_tx_ready(p_spi)) {
  402a76:	e007      	b.n	402a88 <spi_read_packet+0x30>
			if (!timeout--) {
  402a78:	69fb      	ldr	r3, [r7, #28]
  402a7a:	1e5a      	subs	r2, r3, #1
  402a7c:	61fa      	str	r2, [r7, #28]
  402a7e:	2b00      	cmp	r3, #0
  402a80:	d102      	bne.n	402a88 <spi_read_packet+0x30>
				return ERR_TIMEOUT;
  402a82:	f06f 0302 	mvn.w	r3, #2
  402a86:	e030      	b.n	402aea <spi_read_packet+0x92>
		while (!spi_is_tx_ready(p_spi)) {
  402a88:	68f8      	ldr	r0, [r7, #12]
  402a8a:	4b1a      	ldr	r3, [pc, #104]	; (402af4 <spi_read_packet+0x9c>)
  402a8c:	4798      	blx	r3
  402a8e:	4603      	mov	r3, r0
  402a90:	2b00      	cmp	r3, #0
  402a92:	d0f1      	beq.n	402a78 <spi_read_packet+0x20>
			}
		}
		spi_write_single(p_spi, CONFIG_SPI_MASTER_DUMMY);
  402a94:	21ff      	movs	r1, #255	; 0xff
  402a96:	68f8      	ldr	r0, [r7, #12]
  402a98:	4b17      	ldr	r3, [pc, #92]	; (402af8 <spi_read_packet+0xa0>)
  402a9a:	4798      	blx	r3

		timeout = SPI_TIMEOUT;
  402a9c:	f643 2398 	movw	r3, #15000	; 0x3a98
  402aa0:	61fb      	str	r3, [r7, #28]
		while (!spi_is_rx_ready(p_spi)) {
  402aa2:	e007      	b.n	402ab4 <spi_read_packet+0x5c>
			if (!timeout--) {
  402aa4:	69fb      	ldr	r3, [r7, #28]
  402aa6:	1e5a      	subs	r2, r3, #1
  402aa8:	61fa      	str	r2, [r7, #28]
  402aaa:	2b00      	cmp	r3, #0
  402aac:	d102      	bne.n	402ab4 <spi_read_packet+0x5c>
				return ERR_TIMEOUT;
  402aae:	f06f 0302 	mvn.w	r3, #2
  402ab2:	e01a      	b.n	402aea <spi_read_packet+0x92>
		while (!spi_is_rx_ready(p_spi)) {
  402ab4:	68f8      	ldr	r0, [r7, #12]
  402ab6:	4b11      	ldr	r3, [pc, #68]	; (402afc <spi_read_packet+0xa4>)
  402ab8:	4798      	blx	r3
  402aba:	4603      	mov	r3, r0
  402abc:	2b00      	cmp	r3, #0
  402abe:	d0f1      	beq.n	402aa4 <spi_read_packet+0x4c>
			}
		}
		spi_read_single(p_spi, &val);
  402ac0:	f107 0317 	add.w	r3, r7, #23
  402ac4:	4619      	mov	r1, r3
  402ac6:	68f8      	ldr	r0, [r7, #12]
  402ac8:	4b0d      	ldr	r3, [pc, #52]	; (402b00 <spi_read_packet+0xa8>)
  402aca:	4798      	blx	r3

		data[i] = val;
  402acc:	68ba      	ldr	r2, [r7, #8]
  402ace:	69bb      	ldr	r3, [r7, #24]
  402ad0:	4413      	add	r3, r2
  402ad2:	7dfa      	ldrb	r2, [r7, #23]
  402ad4:	701a      	strb	r2, [r3, #0]
		i++;
  402ad6:	69bb      	ldr	r3, [r7, #24]
  402ad8:	3301      	adds	r3, #1
  402ada:	61bb      	str	r3, [r7, #24]
		len--;
  402adc:	687b      	ldr	r3, [r7, #4]
  402ade:	3b01      	subs	r3, #1
  402ae0:	607b      	str	r3, [r7, #4]
	while (len) {
  402ae2:	687b      	ldr	r3, [r7, #4]
  402ae4:	2b00      	cmp	r3, #0
  402ae6:	d1c3      	bne.n	402a70 <spi_read_packet+0x18>
	}

	return STATUS_OK;
  402ae8:	2300      	movs	r3, #0
}
  402aea:	4618      	mov	r0, r3
  402aec:	3720      	adds	r7, #32
  402aee:	46bd      	mov	sp, r7
  402af0:	bd80      	pop	{r7, pc}
  402af2:	bf00      	nop
  402af4:	00402783 	.word	0x00402783
  402af8:	004027d5 	.word	0x004027d5
  402afc:	004027a9 	.word	0x004027a9
  402b00:	004027f9 	.word	0x004027f9

00402b04 <ioport_set_pin_level>:
{
  402b04:	b480      	push	{r7}
  402b06:	b08b      	sub	sp, #44	; 0x2c
  402b08:	af00      	add	r7, sp, #0
  402b0a:	6078      	str	r0, [r7, #4]
  402b0c:	460b      	mov	r3, r1
  402b0e:	70fb      	strb	r3, [r7, #3]
  402b10:	687b      	ldr	r3, [r7, #4]
  402b12:	627b      	str	r3, [r7, #36]	; 0x24
  402b14:	78fb      	ldrb	r3, [r7, #3]
  402b16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  402b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402b1c:	61fb      	str	r3, [r7, #28]
  402b1e:	69fb      	ldr	r3, [r7, #28]
  402b20:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  402b22:	69bb      	ldr	r3, [r7, #24]
  402b24:	095b      	lsrs	r3, r3, #5
  402b26:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  402b28:	697b      	ldr	r3, [r7, #20]
  402b2a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  402b2e:	f203 7307 	addw	r3, r3, #1799	; 0x707
  402b32:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
  402b34:	613b      	str	r3, [r7, #16]
	if (level) {
  402b36:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  402b3a:	2b00      	cmp	r3, #0
  402b3c:	d009      	beq.n	402b52 <ioport_set_pin_level+0x4e>
  402b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402b40:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  402b42:	68fb      	ldr	r3, [r7, #12]
  402b44:	f003 031f 	and.w	r3, r3, #31
  402b48:	2201      	movs	r2, #1
  402b4a:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  402b4c:	693b      	ldr	r3, [r7, #16]
  402b4e:	631a      	str	r2, [r3, #48]	; 0x30
}
  402b50:	e008      	b.n	402b64 <ioport_set_pin_level+0x60>
  402b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402b54:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
  402b56:	68bb      	ldr	r3, [r7, #8]
  402b58:	f003 031f 	and.w	r3, r3, #31
  402b5c:	2201      	movs	r2, #1
  402b5e:	409a      	lsls	r2, r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  402b60:	693b      	ldr	r3, [r7, #16]
  402b62:	635a      	str	r2, [r3, #52]	; 0x34
  402b64:	bf00      	nop
  402b66:	372c      	adds	r7, #44	; 0x2c
  402b68:	46bd      	mov	sp, r7
  402b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
  402b6e:	4770      	bx	lr

00402b70 <ui_init>:

#include <asf.h>
#include "ui.h"

void ui_init(void)
{
  402b70:	b580      	push	{r7, lr}
  402b72:	af00      	add	r7, sp, #0
	/* Initialize LED */
	LED_Off(LED0);
  402b74:	2101      	movs	r1, #1
  402b76:	2006      	movs	r0, #6
  402b78:	4b01      	ldr	r3, [pc, #4]	; (402b80 <ui_init+0x10>)
  402b7a:	4798      	blx	r3
}
  402b7c:	bf00      	nop
  402b7e:	bd80      	pop	{r7, pc}
  402b80:	00402b05 	.word	0x00402b05

00402b84 <ui_powerdown>:

void ui_powerdown(void)
{
  402b84:	b580      	push	{r7, lr}
  402b86:	af00      	add	r7, sp, #0
	LED_Off(LED0);
  402b88:	2101      	movs	r1, #1
  402b8a:	2006      	movs	r0, #6
  402b8c:	4b01      	ldr	r3, [pc, #4]	; (402b94 <ui_powerdown+0x10>)
  402b8e:	4798      	blx	r3
}
  402b90:	bf00      	nop
  402b92:	bd80      	pop	{r7, pc}
  402b94:	00402b05 	.word	0x00402b05

00402b98 <ui_wakeup>:

void ui_wakeup(void)
{
  402b98:	b580      	push	{r7, lr}
  402b9a:	af00      	add	r7, sp, #0
	LED_On(LED0);
  402b9c:	2100      	movs	r1, #0
  402b9e:	2006      	movs	r0, #6
  402ba0:	4b01      	ldr	r3, [pc, #4]	; (402ba8 <ui_wakeup+0x10>)
  402ba2:	4798      	blx	r3
}
  402ba4:	bf00      	nop
  402ba6:	bd80      	pop	{r7, pc}
  402ba8:	00402b05 	.word	0x00402b05

00402bac <ui_com_open>:

void ui_com_open(uint8_t port)
{
  402bac:	b480      	push	{r7}
  402bae:	b083      	sub	sp, #12
  402bb0:	af00      	add	r7, sp, #0
  402bb2:	4603      	mov	r3, r0
  402bb4:	71fb      	strb	r3, [r7, #7]
	UNUSED(port);
}
  402bb6:	bf00      	nop
  402bb8:	370c      	adds	r7, #12
  402bba:	46bd      	mov	sp, r7
  402bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
  402bc0:	4770      	bx	lr

00402bc2 <ui_com_close>:

void ui_com_close(uint8_t port)
{
  402bc2:	b480      	push	{r7}
  402bc4:	b083      	sub	sp, #12
  402bc6:	af00      	add	r7, sp, #0
  402bc8:	4603      	mov	r3, r0
  402bca:	71fb      	strb	r3, [r7, #7]
	UNUSED(port);
}
  402bcc:	bf00      	nop
  402bce:	370c      	adds	r7, #12
  402bd0:	46bd      	mov	sp, r7
  402bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
  402bd6:	4770      	bx	lr

00402bd8 <ui_start_read>:
void ui_com_overflow(void)
{
}

void ui_start_read(void)
{
  402bd8:	b480      	push	{r7}
  402bda:	af00      	add	r7, sp, #0
}
  402bdc:	bf00      	nop
  402bde:	46bd      	mov	sp, r7
  402be0:	f85d 7b04 	ldr.w	r7, [sp], #4
  402be4:	4770      	bx	lr

00402be6 <ui_stop_read>:

void ui_stop_read(void)
{
  402be6:	b480      	push	{r7}
  402be8:	af00      	add	r7, sp, #0
}
  402bea:	bf00      	nop
  402bec:	46bd      	mov	sp, r7
  402bee:	f85d 7b04 	ldr.w	r7, [sp], #4
  402bf2:	4770      	bx	lr

00402bf4 <ui_start_write>:

void ui_start_write(void)
{
  402bf4:	b480      	push	{r7}
  402bf6:	af00      	add	r7, sp, #0
}
  402bf8:	bf00      	nop
  402bfa:	46bd      	mov	sp, r7
  402bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
  402c00:	4770      	bx	lr

00402c02 <ui_stop_write>:

void ui_stop_write(void)
{
  402c02:	b480      	push	{r7}
  402c04:	af00      	add	r7, sp, #0
}
  402c06:	bf00      	nop
  402c08:	46bd      	mov	sp, r7
  402c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
  402c0e:	4770      	bx	lr

00402c10 <ui_process>:

void ui_process(uint16_t framenumber)
{
  402c10:	b580      	push	{r7, lr}
  402c12:	b082      	sub	sp, #8
  402c14:	af00      	add	r7, sp, #0
  402c16:	4603      	mov	r3, r0
  402c18:	80fb      	strh	r3, [r7, #6]
	if ((framenumber % 1000) == 0) {
  402c1a:	88fb      	ldrh	r3, [r7, #6]
  402c1c:	4a12      	ldr	r2, [pc, #72]	; (402c68 <ui_process+0x58>)
  402c1e:	fba2 1203 	umull	r1, r2, r2, r3
  402c22:	0992      	lsrs	r2, r2, #6
  402c24:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  402c28:	fb01 f202 	mul.w	r2, r1, r2
  402c2c:	1a9b      	subs	r3, r3, r2
  402c2e:	b29b      	uxth	r3, r3
  402c30:	2b00      	cmp	r3, #0
  402c32:	d103      	bne.n	402c3c <ui_process+0x2c>
		LED_On(LED0);
  402c34:	2100      	movs	r1, #0
  402c36:	2006      	movs	r0, #6
  402c38:	4b0c      	ldr	r3, [pc, #48]	; (402c6c <ui_process+0x5c>)
  402c3a:	4798      	blx	r3
	}
	if ((framenumber % 1000) == 500) {
  402c3c:	88fb      	ldrh	r3, [r7, #6]
  402c3e:	4a0a      	ldr	r2, [pc, #40]	; (402c68 <ui_process+0x58>)
  402c40:	fba2 1203 	umull	r1, r2, r2, r3
  402c44:	0992      	lsrs	r2, r2, #6
  402c46:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  402c4a:	fb01 f202 	mul.w	r2, r1, r2
  402c4e:	1a9b      	subs	r3, r3, r2
  402c50:	b29b      	uxth	r3, r3
  402c52:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
  402c56:	d103      	bne.n	402c60 <ui_process+0x50>
		LED_Off(LED0);
  402c58:	2101      	movs	r1, #1
  402c5a:	2006      	movs	r0, #6
  402c5c:	4b03      	ldr	r3, [pc, #12]	; (402c6c <ui_process+0x5c>)
  402c5e:	4798      	blx	r3
	}
}
  402c60:	bf00      	nop
  402c62:	3708      	adds	r7, #8
  402c64:	46bd      	mov	sp, r7
  402c66:	bd80      	pop	{r7, pc}
  402c68:	10624dd3 	.word	0x10624dd3
  402c6c:	00402b05 	.word	0x00402b05

00402c70 <virtual_test_unit_ready>:
//!   It is ready                ->    CTRL_GOOD
//!   Memory unplug              ->    CTRL_NO_PRESENT
//!   Not initialized or changed ->    CTRL_BUSY
//!   An error occurred          ->    CTRL_FAIL
Ctrl_status virtual_test_unit_ready(void)
{
  402c70:	b480      	push	{r7}
  402c72:	af00      	add	r7, sp, #0
	return b_vmem_unloaded ? CTRL_NO_PRESENT : CTRL_GOOD;
  402c74:	4b05      	ldr	r3, [pc, #20]	; (402c8c <virtual_test_unit_ready+0x1c>)
  402c76:	781b      	ldrb	r3, [r3, #0]
  402c78:	2b00      	cmp	r3, #0
  402c7a:	d001      	beq.n	402c80 <virtual_test_unit_ready+0x10>
  402c7c:	2302      	movs	r3, #2
  402c7e:	e000      	b.n	402c82 <virtual_test_unit_ready+0x12>
  402c80:	2300      	movs	r3, #0
}
  402c82:	4618      	mov	r0, r3
  402c84:	46bd      	mov	sp, r7
  402c86:	f85d 7b04 	ldr.w	r7, [sp], #4
  402c8a:	4770      	bx	lr
  402c8c:	20019c90 	.word	0x20019c90

00402c90 <virtual_read_capacity>:
//!   It is ready                ->    CTRL_GOOD
//!   Memory unplug              ->    CTRL_NO_PRESENT
//!   Not initialized or changed ->    CTRL_BUSY
//!   An error occurred          ->    CTRL_FAIL
Ctrl_status virtual_read_capacity(uint32_t *uint32_t_nb_sector)
{
  402c90:	b480      	push	{r7}
  402c92:	b083      	sub	sp, #12
  402c94:	af00      	add	r7, sp, #0
  402c96:	6078      	str	r0, [r7, #4]
	if (b_vmem_unloaded) {
  402c98:	4b07      	ldr	r3, [pc, #28]	; (402cb8 <virtual_read_capacity+0x28>)
  402c9a:	781b      	ldrb	r3, [r3, #0]
  402c9c:	2b00      	cmp	r3, #0
  402c9e:	d001      	beq.n	402ca4 <virtual_read_capacity+0x14>
		return CTRL_NO_PRESENT;
  402ca0:	2302      	movs	r3, #2
  402ca2:	e003      	b.n	402cac <virtual_read_capacity+0x1c>
	}

	if (VMEM_NB_SECTOR<8) {
		*uint32_t_nb_sector = 8-1;
	} else {
		*uint32_t_nb_sector = VMEM_NB_SECTOR- 1;
  402ca4:	687b      	ldr	r3, [r7, #4]
  402ca6:	22c7      	movs	r2, #199	; 0xc7
  402ca8:	601a      	str	r2, [r3, #0]
	}
	return CTRL_GOOD;
  402caa:	2300      	movs	r3, #0
}
  402cac:	4618      	mov	r0, r3
  402cae:	370c      	adds	r7, #12
  402cb0:	46bd      	mov	sp, r7
  402cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
  402cb6:	4770      	bx	lr
  402cb8:	20019c90 	.word	0x20019c90

00402cbc <virtual_wr_protect>:
//! This function returns the write-protected mode
//!
//! @return true if the memory is protected
//!
bool virtual_wr_protect(void)
{
  402cbc:	b480      	push	{r7}
  402cbe:	af00      	add	r7, sp, #0
	return false;
  402cc0:	2300      	movs	r3, #0
}
  402cc2:	4618      	mov	r0, r3
  402cc4:	46bd      	mov	sp, r7
  402cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
  402cca:	4770      	bx	lr

00402ccc <virtual_removal>:
//! This function informs about the memory type
//!
//! @return true if the memory is removable
//!
bool virtual_removal(void)
{
  402ccc:	b480      	push	{r7}
  402cce:	af00      	add	r7, sp, #0
	return true;
  402cd0:	2301      	movs	r3, #1
}
  402cd2:	4618      	mov	r0, r3
  402cd4:	46bd      	mov	sp, r7
  402cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
  402cda:	4770      	bx	lr

00402cdc <virtual_unload>:
//! This function unloads/loads the memory
//!
//! @return true if the memory is unloaded
//!
bool virtual_unload(bool unload)
{
  402cdc:	b480      	push	{r7}
  402cde:	b083      	sub	sp, #12
  402ce0:	af00      	add	r7, sp, #0
  402ce2:	4603      	mov	r3, r0
  402ce4:	71fb      	strb	r3, [r7, #7]
	b_vmem_unloaded = unload;
  402ce6:	4a05      	ldr	r2, [pc, #20]	; (402cfc <virtual_unload+0x20>)
  402ce8:	79fb      	ldrb	r3, [r7, #7]
  402cea:	7013      	strb	r3, [r2, #0]
	return true;
  402cec:	2301      	movs	r3, #1
}
  402cee:	4618      	mov	r0, r3
  402cf0:	370c      	adds	r7, #12
  402cf2:	46bd      	mov	sp, r7
  402cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
  402cf8:	4770      	bx	lr
  402cfa:	bf00      	nop
  402cfc:	20019c90 	.word	0x20019c90

00402d00 <virtual_usb_trans>:
//!   Not initialized or changed ->    CTRL_BUSY
//!   An error occurred          ->    CTRL_FAIL
//!
static Ctrl_status virtual_usb_trans(uint32_t addr, uint16_t nb_sector,
		bool b_read)
{
  402d00:	b590      	push	{r4, r7, lr}
  402d02:	b085      	sub	sp, #20
  402d04:	af00      	add	r7, sp, #0
  402d06:	6078      	str	r0, [r7, #4]
  402d08:	460b      	mov	r3, r1
  402d0a:	807b      	strh	r3, [r7, #2]
  402d0c:	4613      	mov	r3, r2
  402d0e:	707b      	strb	r3, [r7, #1]
	}
#else
	uint8_t *ptr_cram;
	uint8_t nb_sector_trans;

	if ((addr > VMEM_NB_SECTOR) ||  (addr + nb_sector > VMEM_NB_SECTOR)) {
  402d10:	687b      	ldr	r3, [r7, #4]
  402d12:	2bc8      	cmp	r3, #200	; 0xc8
  402d14:	d804      	bhi.n	402d20 <virtual_usb_trans+0x20>
  402d16:	887a      	ldrh	r2, [r7, #2]
  402d18:	687b      	ldr	r3, [r7, #4]
  402d1a:	4413      	add	r3, r2
  402d1c:	2bc8      	cmp	r3, #200	; 0xc8
  402d1e:	d925      	bls.n	402d6c <virtual_usb_trans+0x6c>
		return CTRL_FAIL;
  402d20:	2301      	movs	r3, #1
  402d22:	e027      	b.n	402d74 <virtual_usb_trans+0x74>
	}

	while (nb_sector) {
		// udi_msc_trans_block() is limited to 64KB
		nb_sector_trans = min(nb_sector, 64*(1024/VMEM_SECTOR_SIZE));
  402d24:	887b      	ldrh	r3, [r7, #2]
  402d26:	2b7f      	cmp	r3, #127	; 0x7f
  402d28:	d802      	bhi.n	402d30 <virtual_usb_trans+0x30>
  402d2a:	887b      	ldrh	r3, [r7, #2]
  402d2c:	b2db      	uxtb	r3, r3
  402d2e:	e000      	b.n	402d32 <virtual_usb_trans+0x32>
  402d30:	2380      	movs	r3, #128	; 0x80
  402d32:	73fb      	strb	r3, [r7, #15]
		ptr_cram = &vmem_data[addr++ * VMEM_SECTOR_SIZE];
  402d34:	687b      	ldr	r3, [r7, #4]
  402d36:	1c5a      	adds	r2, r3, #1
  402d38:	607a      	str	r2, [r7, #4]
  402d3a:	025b      	lsls	r3, r3, #9
  402d3c:	4a0f      	ldr	r2, [pc, #60]	; (402d7c <virtual_usb_trans+0x7c>)
  402d3e:	4413      	add	r3, r2
  402d40:	60bb      	str	r3, [r7, #8]
		if (!udi_msc_trans_block( b_read, ptr_cram,
				nb_sector_trans*VMEM_SECTOR_SIZE, NULL)) {
  402d42:	7bfb      	ldrb	r3, [r7, #15]
  402d44:	025b      	lsls	r3, r3, #9
		if (!udi_msc_trans_block( b_read, ptr_cram,
  402d46:	461a      	mov	r2, r3
  402d48:	7878      	ldrb	r0, [r7, #1]
  402d4a:	2300      	movs	r3, #0
  402d4c:	68b9      	ldr	r1, [r7, #8]
  402d4e:	4c0c      	ldr	r4, [pc, #48]	; (402d80 <virtual_usb_trans+0x80>)
  402d50:	47a0      	blx	r4
  402d52:	4603      	mov	r3, r0
  402d54:	f083 0301 	eor.w	r3, r3, #1
  402d58:	b2db      	uxtb	r3, r3
  402d5a:	2b00      	cmp	r3, #0
  402d5c:	d001      	beq.n	402d62 <virtual_usb_trans+0x62>
			return CTRL_FAIL; // transfer aborted
  402d5e:	2301      	movs	r3, #1
  402d60:	e008      	b.n	402d74 <virtual_usb_trans+0x74>
		}
		nb_sector -= nb_sector_trans;
  402d62:	7bfb      	ldrb	r3, [r7, #15]
  402d64:	b29b      	uxth	r3, r3
  402d66:	887a      	ldrh	r2, [r7, #2]
  402d68:	1ad3      	subs	r3, r2, r3
  402d6a:	807b      	strh	r3, [r7, #2]
	while (nb_sector) {
  402d6c:	887b      	ldrh	r3, [r7, #2]
  402d6e:	2b00      	cmp	r3, #0
  402d70:	d1d8      	bne.n	402d24 <virtual_usb_trans+0x24>
	}
#endif

	return CTRL_GOOD;
  402d72:	2300      	movs	r3, #0
}
  402d74:	4618      	mov	r0, r3
  402d76:	3714      	adds	r7, #20
  402d78:	46bd      	mov	sp, r7
  402d7a:	bd90      	pop	{r4, r7, pc}
  402d7c:	20000c90 	.word	0x20000c90
  402d80:	00404c95 	.word	0x00404c95

00402d84 <virtual_usb_read_10>:
//!   Memory unplug              ->    CTRL_NO_PRESENT
//!   Not initialized or changed ->    CTRL_BUSY
//!   An error occurred          ->    CTRL_FAIL
//!
Ctrl_status virtual_usb_read_10(uint32_t addr, uint16_t nb_sector)
{
  402d84:	b580      	push	{r7, lr}
  402d86:	b082      	sub	sp, #8
  402d88:	af00      	add	r7, sp, #0
  402d8a:	6078      	str	r0, [r7, #4]
  402d8c:	460b      	mov	r3, r1
  402d8e:	807b      	strh	r3, [r7, #2]
	return virtual_usb_trans(addr, nb_sector, true);
  402d90:	887b      	ldrh	r3, [r7, #2]
  402d92:	2201      	movs	r2, #1
  402d94:	4619      	mov	r1, r3
  402d96:	6878      	ldr	r0, [r7, #4]
  402d98:	4b03      	ldr	r3, [pc, #12]	; (402da8 <virtual_usb_read_10+0x24>)
  402d9a:	4798      	blx	r3
  402d9c:	4603      	mov	r3, r0
}
  402d9e:	4618      	mov	r0, r3
  402da0:	3708      	adds	r7, #8
  402da2:	46bd      	mov	sp, r7
  402da4:	bd80      	pop	{r7, pc}
  402da6:	bf00      	nop
  402da8:	00402d01 	.word	0x00402d01

00402dac <virtual_usb_write_10>:
//!   Memory unplug              ->    CTRL_NO_PRESENT
//!   Not initialized or changed ->    CTRL_BUSY
//!   An error occurred          ->    CTRL_FAIL
//!
Ctrl_status virtual_usb_write_10(uint32_t addr, uint16_t nb_sector)
{
  402dac:	b580      	push	{r7, lr}
  402dae:	b082      	sub	sp, #8
  402db0:	af00      	add	r7, sp, #0
  402db2:	6078      	str	r0, [r7, #4]
  402db4:	460b      	mov	r3, r1
  402db6:	807b      	strh	r3, [r7, #2]
	return virtual_usb_trans(addr, nb_sector, false);
  402db8:	887b      	ldrh	r3, [r7, #2]
  402dba:	2200      	movs	r2, #0
  402dbc:	4619      	mov	r1, r3
  402dbe:	6878      	ldr	r0, [r7, #4]
  402dc0:	4b03      	ldr	r3, [pc, #12]	; (402dd0 <virtual_usb_write_10+0x24>)
  402dc2:	4798      	blx	r3
  402dc4:	4603      	mov	r3, r0
}
  402dc6:	4618      	mov	r0, r3
  402dc8:	3708      	adds	r7, #8
  402dca:	46bd      	mov	sp, r7
  402dcc:	bd80      	pop	{r7, pc}
  402dce:	bf00      	nop
  402dd0:	00402d01 	.word	0x00402d01

00402dd4 <virtual_mem_2_ram>:
//!   It is ready                ->    CTRL_GOOD
//!   Memory unplug              ->    CTRL_NO_PRESENT
//!   Not initialized or changed ->    CTRL_BUSY
//!   An error occurred          ->    CTRL_FAIL
Ctrl_status virtual_mem_2_ram(uint32_t addr, void *ram)
{
  402dd4:	b580      	push	{r7, lr}
  402dd6:	b082      	sub	sp, #8
  402dd8:	af00      	add	r7, sp, #0
  402dda:	6078      	str	r0, [r7, #4]
  402ddc:	6039      	str	r1, [r7, #0]
	if (addr + 1 > Max(VMEM_NB_SECTOR, 8)) {
  402dde:	687b      	ldr	r3, [r7, #4]
  402de0:	3301      	adds	r3, #1
  402de2:	2bc8      	cmp	r3, #200	; 0xc8
  402de4:	d901      	bls.n	402dea <virtual_mem_2_ram+0x16>
		return CTRL_FAIL;
  402de6:	2301      	movs	r3, #1
  402de8:	e00f      	b.n	402e0a <virtual_mem_2_ram+0x36>
	}

	// If overflow (possible with size virtual mem < 8 sectors) then read the last sector
	addr = min(addr, VMEM_NB_SECTOR - 1);
  402dea:	687b      	ldr	r3, [r7, #4]
  402dec:	2bc7      	cmp	r3, #199	; 0xc7
  402dee:	bf28      	it	cs
  402df0:	23c7      	movcs	r3, #199	; 0xc7
  402df2:	607b      	str	r3, [r7, #4]
#if defined(VMEM_ADDRESS) && ((VMEM_ADDRESS + (VMEM_NB_SECTOR * VMEM_SECTOR_SIZE) - 1) > UINTPTR_MAX)
	hugemem_read_block(ram, (hugemem_ptr_t)((uint32_t)vmem_data + addr
				* VMEM_SECTOR_SIZE), VMEM_SECTOR_SIZE);
#else
	memcpy(ram, &vmem_data[addr * VMEM_SECTOR_SIZE], VMEM_SECTOR_SIZE);
  402df4:	687b      	ldr	r3, [r7, #4]
  402df6:	025b      	lsls	r3, r3, #9
  402df8:	4a06      	ldr	r2, [pc, #24]	; (402e14 <virtual_mem_2_ram+0x40>)
  402dfa:	4413      	add	r3, r2
  402dfc:	f44f 7200 	mov.w	r2, #512	; 0x200
  402e00:	4619      	mov	r1, r3
  402e02:	6838      	ldr	r0, [r7, #0]
  402e04:	4b04      	ldr	r3, [pc, #16]	; (402e18 <virtual_mem_2_ram+0x44>)
  402e06:	4798      	blx	r3
#endif

	return CTRL_GOOD;
  402e08:	2300      	movs	r3, #0
}
  402e0a:	4618      	mov	r0, r3
  402e0c:	3708      	adds	r7, #8
  402e0e:	46bd      	mov	sp, r7
  402e10:	bd80      	pop	{r7, pc}
  402e12:	bf00      	nop
  402e14:	20000c90 	.word	0x20000c90
  402e18:	0040e12d 	.word	0x0040e12d

00402e1c <virtual_ram_2_mem>:
//!   It is ready                ->    CTRL_GOOD
//!   Memory unplug              ->    CTRL_NO_PRESENT
//!   Not initialized or changed ->    CTRL_BUSY
//!   An error occurred          ->    CTRL_FAIL
Ctrl_status virtual_ram_2_mem(uint32_t addr, const void *ram)
{
  402e1c:	b580      	push	{r7, lr}
  402e1e:	b082      	sub	sp, #8
  402e20:	af00      	add	r7, sp, #0
  402e22:	6078      	str	r0, [r7, #4]
  402e24:	6039      	str	r1, [r7, #0]
	if (addr + 1 > VMEM_NB_SECTOR) {
  402e26:	687b      	ldr	r3, [r7, #4]
  402e28:	3301      	adds	r3, #1
  402e2a:	2bc8      	cmp	r3, #200	; 0xc8
  402e2c:	d901      	bls.n	402e32 <virtual_ram_2_mem+0x16>
		return CTRL_FAIL;
  402e2e:	2301      	movs	r3, #1
  402e30:	e00a      	b.n	402e48 <virtual_ram_2_mem+0x2c>

#if defined(VMEM_ADDRESS) && ((VMEM_ADDRESS + (VMEM_NB_SECTOR * VMEM_SECTOR_SIZE) - 1) > UINTPTR_MAX)
	hugemem_write_block((hugemem_ptr_t)((uint32_t)vmem_data + addr
				* VMEM_SECTOR_SIZE), ram, VMEM_SECTOR_SIZE);
#else
	memcpy(&vmem_data[addr * VMEM_SECTOR_SIZE], ram, VMEM_SECTOR_SIZE);
  402e32:	687b      	ldr	r3, [r7, #4]
  402e34:	025b      	lsls	r3, r3, #9
  402e36:	4a06      	ldr	r2, [pc, #24]	; (402e50 <virtual_ram_2_mem+0x34>)
  402e38:	4413      	add	r3, r2
  402e3a:	f44f 7200 	mov.w	r2, #512	; 0x200
  402e3e:	6839      	ldr	r1, [r7, #0]
  402e40:	4618      	mov	r0, r3
  402e42:	4b04      	ldr	r3, [pc, #16]	; (402e54 <virtual_ram_2_mem+0x38>)
  402e44:	4798      	blx	r3
#endif
	return CTRL_GOOD;
  402e46:	2300      	movs	r3, #0
}
  402e48:	4618      	mov	r0, r3
  402e4a:	3708      	adds	r7, #8
  402e4c:	46bd      	mov	sp, r7
  402e4e:	bd80      	pop	{r7, pc}
  402e50:	20000c90 	.word	0x20000c90
  402e54:	0040e12d 	.word	0x0040e12d

00402e58 <osc_enable>:
{
  402e58:	b580      	push	{r7, lr}
  402e5a:	b082      	sub	sp, #8
  402e5c:	af00      	add	r7, sp, #0
  402e5e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  402e60:	687b      	ldr	r3, [r7, #4]
  402e62:	2b07      	cmp	r3, #7
  402e64:	d831      	bhi.n	402eca <osc_enable+0x72>
  402e66:	a201      	add	r2, pc, #4	; (adr r2, 402e6c <osc_enable+0x14>)
  402e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402e6c:	00402ec9 	.word	0x00402ec9
  402e70:	00402e8d 	.word	0x00402e8d
  402e74:	00402e95 	.word	0x00402e95
  402e78:	00402e9d 	.word	0x00402e9d
  402e7c:	00402ea5 	.word	0x00402ea5
  402e80:	00402ead 	.word	0x00402ead
  402e84:	00402eb5 	.word	0x00402eb5
  402e88:	00402ebf 	.word	0x00402ebf
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  402e8c:	2000      	movs	r0, #0
  402e8e:	4b11      	ldr	r3, [pc, #68]	; (402ed4 <osc_enable+0x7c>)
  402e90:	4798      	blx	r3
		break;
  402e92:	e01a      	b.n	402eca <osc_enable+0x72>
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  402e94:	2001      	movs	r0, #1
  402e96:	4b0f      	ldr	r3, [pc, #60]	; (402ed4 <osc_enable+0x7c>)
  402e98:	4798      	blx	r3
		break;
  402e9a:	e016      	b.n	402eca <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  402e9c:	2000      	movs	r0, #0
  402e9e:	4b0e      	ldr	r3, [pc, #56]	; (402ed8 <osc_enable+0x80>)
  402ea0:	4798      	blx	r3
		break;
  402ea2:	e012      	b.n	402eca <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_16_MHz);
  402ea4:	2010      	movs	r0, #16
  402ea6:	4b0c      	ldr	r3, [pc, #48]	; (402ed8 <osc_enable+0x80>)
  402ea8:	4798      	blx	r3
		break;
  402eaa:	e00e      	b.n	402eca <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_24_MHz);
  402eac:	2020      	movs	r0, #32
  402eae:	4b0a      	ldr	r3, [pc, #40]	; (402ed8 <osc_enable+0x80>)
  402eb0:	4798      	blx	r3
		break;
  402eb2:	e00a      	b.n	402eca <osc_enable+0x72>
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  402eb4:	213e      	movs	r1, #62	; 0x3e
  402eb6:	2000      	movs	r0, #0
  402eb8:	4b08      	ldr	r3, [pc, #32]	; (402edc <osc_enable+0x84>)
  402eba:	4798      	blx	r3
		break;
  402ebc:	e005      	b.n	402eca <osc_enable+0x72>
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  402ebe:	213e      	movs	r1, #62	; 0x3e
  402ec0:	2001      	movs	r0, #1
  402ec2:	4b06      	ldr	r3, [pc, #24]	; (402edc <osc_enable+0x84>)
  402ec4:	4798      	blx	r3
		break;
  402ec6:	e000      	b.n	402eca <osc_enable+0x72>
		break;
  402ec8:	bf00      	nop
}
  402eca:	bf00      	nop
  402ecc:	3708      	adds	r7, #8
  402ece:	46bd      	mov	sp, r7
  402ed0:	bd80      	pop	{r7, pc}
  402ed2:	bf00      	nop
  402ed4:	00406645 	.word	0x00406645
  402ed8:	004066b1 	.word	0x004066b1
  402edc:	00406721 	.word	0x00406721

00402ee0 <osc_is_ready>:
{
  402ee0:	b580      	push	{r7, lr}
  402ee2:	b082      	sub	sp, #8
  402ee4:	af00      	add	r7, sp, #0
  402ee6:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  402ee8:	687b      	ldr	r3, [r7, #4]
  402eea:	2b07      	cmp	r3, #7
  402eec:	d826      	bhi.n	402f3c <osc_is_ready+0x5c>
  402eee:	a201      	add	r2, pc, #4	; (adr r2, 402ef4 <osc_is_ready+0x14>)
  402ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402ef4:	00402f15 	.word	0x00402f15
  402ef8:	00402f19 	.word	0x00402f19
  402efc:	00402f19 	.word	0x00402f19
  402f00:	00402f2b 	.word	0x00402f2b
  402f04:	00402f2b 	.word	0x00402f2b
  402f08:	00402f2b 	.word	0x00402f2b
  402f0c:	00402f2b 	.word	0x00402f2b
  402f10:	00402f2b 	.word	0x00402f2b
		return 1;
  402f14:	2301      	movs	r3, #1
  402f16:	e012      	b.n	402f3e <osc_is_ready+0x5e>
		return pmc_osc_is_ready_32kxtal();
  402f18:	4b0b      	ldr	r3, [pc, #44]	; (402f48 <osc_is_ready+0x68>)
  402f1a:	4798      	blx	r3
  402f1c:	4603      	mov	r3, r0
  402f1e:	2b00      	cmp	r3, #0
  402f20:	bf14      	ite	ne
  402f22:	2301      	movne	r3, #1
  402f24:	2300      	moveq	r3, #0
  402f26:	b2db      	uxtb	r3, r3
  402f28:	e009      	b.n	402f3e <osc_is_ready+0x5e>
		return pmc_osc_is_ready_mainck();
  402f2a:	4b08      	ldr	r3, [pc, #32]	; (402f4c <osc_is_ready+0x6c>)
  402f2c:	4798      	blx	r3
  402f2e:	4603      	mov	r3, r0
  402f30:	2b00      	cmp	r3, #0
  402f32:	bf14      	ite	ne
  402f34:	2301      	movne	r3, #1
  402f36:	2300      	moveq	r3, #0
  402f38:	b2db      	uxtb	r3, r3
  402f3a:	e000      	b.n	402f3e <osc_is_ready+0x5e>
	return 0;
  402f3c:	2300      	movs	r3, #0
}
  402f3e:	4618      	mov	r0, r3
  402f40:	3708      	adds	r7, #8
  402f42:	46bd      	mov	sp, r7
  402f44:	bd80      	pop	{r7, pc}
  402f46:	bf00      	nop
  402f48:	0040667d 	.word	0x0040667d
  402f4c:	00406799 	.word	0x00406799

00402f50 <osc_get_rate>:
{
  402f50:	b480      	push	{r7}
  402f52:	b083      	sub	sp, #12
  402f54:	af00      	add	r7, sp, #0
  402f56:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  402f58:	687b      	ldr	r3, [r7, #4]
  402f5a:	2b07      	cmp	r3, #7
  402f5c:	d825      	bhi.n	402faa <osc_get_rate+0x5a>
  402f5e:	a201      	add	r2, pc, #4	; (adr r2, 402f64 <osc_get_rate+0x14>)
  402f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402f64:	00402f85 	.word	0x00402f85
  402f68:	00402f8b 	.word	0x00402f8b
  402f6c:	00402f91 	.word	0x00402f91
  402f70:	00402f97 	.word	0x00402f97
  402f74:	00402f9b 	.word	0x00402f9b
  402f78:	00402f9f 	.word	0x00402f9f
  402f7c:	00402fa3 	.word	0x00402fa3
  402f80:	00402fa7 	.word	0x00402fa7
		return OSC_SLCK_32K_RC_HZ;
  402f84:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  402f88:	e010      	b.n	402fac <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  402f8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  402f8e:	e00d      	b.n	402fac <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  402f90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  402f94:	e00a      	b.n	402fac <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  402f96:	4b08      	ldr	r3, [pc, #32]	; (402fb8 <osc_get_rate+0x68>)
  402f98:	e008      	b.n	402fac <osc_get_rate+0x5c>
		return OSC_MAINCK_16M_RC_HZ;
  402f9a:	4b08      	ldr	r3, [pc, #32]	; (402fbc <osc_get_rate+0x6c>)
  402f9c:	e006      	b.n	402fac <osc_get_rate+0x5c>
		return OSC_MAINCK_24M_RC_HZ;
  402f9e:	4b08      	ldr	r3, [pc, #32]	; (402fc0 <osc_get_rate+0x70>)
  402fa0:	e004      	b.n	402fac <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  402fa2:	2300      	movs	r3, #0
  402fa4:	e002      	b.n	402fac <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  402fa6:	2300      	movs	r3, #0
  402fa8:	e000      	b.n	402fac <osc_get_rate+0x5c>
	return 0;
  402faa:	2300      	movs	r3, #0
}
  402fac:	4618      	mov	r0, r3
  402fae:	370c      	adds	r7, #12
  402fb0:	46bd      	mov	sp, r7
  402fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
  402fb6:	4770      	bx	lr
  402fb8:	007a1200 	.word	0x007a1200
  402fbc:	00f42400 	.word	0x00f42400
  402fc0:	016e3600 	.word	0x016e3600

00402fc4 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  402fc4:	b580      	push	{r7, lr}
  402fc6:	b082      	sub	sp, #8
  402fc8:	af00      	add	r7, sp, #0
  402fca:	4603      	mov	r3, r0
  402fcc:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  402fce:	bf00      	nop
  402fd0:	79fb      	ldrb	r3, [r7, #7]
  402fd2:	4618      	mov	r0, r3
  402fd4:	4b05      	ldr	r3, [pc, #20]	; (402fec <osc_wait_ready+0x28>)
  402fd6:	4798      	blx	r3
  402fd8:	4603      	mov	r3, r0
  402fda:	f083 0301 	eor.w	r3, r3, #1
  402fde:	b2db      	uxtb	r3, r3
  402fe0:	2b00      	cmp	r3, #0
  402fe2:	d1f5      	bne.n	402fd0 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  402fe4:	bf00      	nop
  402fe6:	3708      	adds	r7, #8
  402fe8:	46bd      	mov	sp, r7
  402fea:	bd80      	pop	{r7, pc}
  402fec:	00402ee1 	.word	0x00402ee1

00402ff0 <pll_config_init>:
 * \note The SAMG PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  402ff0:	b580      	push	{r7, lr}
  402ff2:	b086      	sub	sp, #24
  402ff4:	af00      	add	r7, sp, #0
  402ff6:	60f8      	str	r0, [r7, #12]
  402ff8:	607a      	str	r2, [r7, #4]
  402ffa:	603b      	str	r3, [r7, #0]
  402ffc:	460b      	mov	r3, r1
  402ffe:	72fb      	strb	r3, [r7, #11]

	Assert(e_src < PLL_NR_SOURCES);
	Assert(ul_div < 2);

	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  403000:	7afb      	ldrb	r3, [r7, #11]
  403002:	4618      	mov	r0, r3
  403004:	4b0d      	ldr	r3, [pc, #52]	; (40303c <pll_config_init+0x4c>)
  403006:	4798      	blx	r3
  403008:	4602      	mov	r2, r0
  40300a:	687b      	ldr	r3, [r7, #4]
  40300c:	fbb2 f3f3 	udiv	r3, r2, r3
  403010:	617b      	str	r3, [r7, #20]

	vco_hz *= ul_mul;
  403012:	697b      	ldr	r3, [r7, #20]
  403014:	683a      	ldr	r2, [r7, #0]
  403016:	fb02 f303 	mul.w	r3, r2, r3
  40301a:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= (PLL_OUTPUT_MIN_HZ - (PLL_OUTPUT_MIN_HZ >> 6)));
	Assert(vco_hz <= (PLL_OUTPUT_MAX_HZ + (PLL_OUTPUT_MAX_HZ >> 6)));

	/* PMC hardware will automatically make it mul+1 */
	p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_PLLAEN(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  40301c:	683b      	ldr	r3, [r7, #0]
  40301e:	3b01      	subs	r3, #1
  403020:	041a      	lsls	r2, r3, #16
  403022:	4b07      	ldr	r3, [pc, #28]	; (403040 <pll_config_init+0x50>)
  403024:	4013      	ands	r3, r2
  403026:	687a      	ldr	r2, [r7, #4]
  403028:	b2d2      	uxtb	r2, r2
  40302a:	4313      	orrs	r3, r2
  40302c:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
  403030:	68fb      	ldr	r3, [r7, #12]
  403032:	601a      	str	r2, [r3, #0]
}
  403034:	bf00      	nop
  403036:	3718      	adds	r7, #24
  403038:	46bd      	mov	sp, r7
  40303a:	bd80      	pop	{r7, pc}
  40303c:	00402f51 	.word	0x00402f51
  403040:	1fff0000 	.word	0x1fff0000

00403044 <pll_enable>:
#endif
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  403044:	b580      	push	{r7, lr}
  403046:	b082      	sub	sp, #8
  403048:	af00      	add	r7, sp, #0
  40304a:	6078      	str	r0, [r7, #4]
  40304c:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  40304e:	683b      	ldr	r3, [r7, #0]
  403050:	2b00      	cmp	r3, #0
  403052:	d106      	bne.n	403062 <pll_enable+0x1e>
		pmc_disable_pllack(); // Always stop PLL first!
  403054:	4b08      	ldr	r3, [pc, #32]	; (403078 <pll_enable+0x34>)
  403056:	4798      	blx	r3
		PMC->CKGR_PLLAR = p_cfg->ctrl;
  403058:	4a08      	ldr	r2, [pc, #32]	; (40307c <pll_enable+0x38>)
  40305a:	687b      	ldr	r3, [r7, #4]
  40305c:	681b      	ldr	r3, [r3, #0]
  40305e:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		pmc_disable_pllbck(); // Always stop PLL first!
		PMC->CKGR_PLLBR = p_cfg->ctrl;
#endif
	}
}
  403060:	e005      	b.n	40306e <pll_enable+0x2a>
		pmc_disable_pllbck(); // Always stop PLL first!
  403062:	4b07      	ldr	r3, [pc, #28]	; (403080 <pll_enable+0x3c>)
  403064:	4798      	blx	r3
		PMC->CKGR_PLLBR = p_cfg->ctrl;
  403066:	4a05      	ldr	r2, [pc, #20]	; (40307c <pll_enable+0x38>)
  403068:	687b      	ldr	r3, [r7, #4]
  40306a:	681b      	ldr	r3, [r3, #0]
  40306c:	62d3      	str	r3, [r2, #44]	; 0x2c
}
  40306e:	bf00      	nop
  403070:	3708      	adds	r7, #8
  403072:	46bd      	mov	sp, r7
  403074:	bd80      	pop	{r7, pc}
  403076:	bf00      	nop
  403078:	004067b5 	.word	0x004067b5
  40307c:	400e0400 	.word	0x400e0400
  403080:	004067e9 	.word	0x004067e9

00403084 <pll_is_locked>:
#endif
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  403084:	b580      	push	{r7, lr}
  403086:	b082      	sub	sp, #8
  403088:	af00      	add	r7, sp, #0
  40308a:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  40308c:	687b      	ldr	r3, [r7, #4]
  40308e:	2b00      	cmp	r3, #0
  403090:	d103      	bne.n	40309a <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
  403092:	4b08      	ldr	r3, [pc, #32]	; (4030b4 <pll_is_locked+0x30>)
  403094:	4798      	blx	r3
  403096:	4603      	mov	r3, r0
  403098:	e007      	b.n	4030aa <pll_is_locked+0x26>
#if SAMG55
	} else if (ul_pll_id == PLLB_ID) {
  40309a:	687b      	ldr	r3, [r7, #4]
  40309c:	2b01      	cmp	r3, #1
  40309e:	d103      	bne.n	4030a8 <pll_is_locked+0x24>
		return pmc_is_locked_pllbck();
  4030a0:	4b05      	ldr	r3, [pc, #20]	; (4030b8 <pll_is_locked+0x34>)
  4030a2:	4798      	blx	r3
  4030a4:	4603      	mov	r3, r0
  4030a6:	e000      	b.n	4030aa <pll_is_locked+0x26>
#endif
	} else {
		return 0;
  4030a8:	2300      	movs	r3, #0
	}
}
  4030aa:	4618      	mov	r0, r3
  4030ac:	3708      	adds	r7, #8
  4030ae:	46bd      	mov	sp, r7
  4030b0:	bd80      	pop	{r7, pc}
  4030b2:	bf00      	nop
  4030b4:	004067cd 	.word	0x004067cd
  4030b8:	00406801 	.word	0x00406801

004030bc <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  4030bc:	b580      	push	{r7, lr}
  4030be:	b082      	sub	sp, #8
  4030c0:	af00      	add	r7, sp, #0
  4030c2:	4603      	mov	r3, r0
  4030c4:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  4030c6:	79fb      	ldrb	r3, [r7, #7]
  4030c8:	3300      	adds	r3, #0
  4030ca:	2b01      	cmp	r3, #1
  4030cc:	d808      	bhi.n	4030e0 <pll_enable_source+0x24>
	case PLL_SRC_SLCK_RC:
	case PLL_SRC_SLCK_XTAL:
		osc_enable(e_src);
  4030ce:	79fb      	ldrb	r3, [r7, #7]
  4030d0:	4618      	mov	r0, r3
  4030d2:	4b06      	ldr	r3, [pc, #24]	; (4030ec <pll_enable_source+0x30>)
  4030d4:	4798      	blx	r3
		osc_wait_ready(e_src);
  4030d6:	79fb      	ldrb	r3, [r7, #7]
  4030d8:	4618      	mov	r0, r3
  4030da:	4b05      	ldr	r3, [pc, #20]	; (4030f0 <pll_enable_source+0x34>)
  4030dc:	4798      	blx	r3
		break;
  4030de:	e000      	b.n	4030e2 <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  4030e0:	bf00      	nop
	}
}
  4030e2:	bf00      	nop
  4030e4:	3708      	adds	r7, #8
  4030e6:	46bd      	mov	sp, r7
  4030e8:	bd80      	pop	{r7, pc}
  4030ea:	bf00      	nop
  4030ec:	00402e59 	.word	0x00402e59
  4030f0:	00402fc5 	.word	0x00402fc5

004030f4 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  4030f4:	b580      	push	{r7, lr}
  4030f6:	b082      	sub	sp, #8
  4030f8:	af00      	add	r7, sp, #0
  4030fa:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4030fc:	bf00      	nop
  4030fe:	6878      	ldr	r0, [r7, #4]
  403100:	4b04      	ldr	r3, [pc, #16]	; (403114 <pll_wait_for_lock+0x20>)
  403102:	4798      	blx	r3
  403104:	4603      	mov	r3, r0
  403106:	2b00      	cmp	r3, #0
  403108:	d0f9      	beq.n	4030fe <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  40310a:	2300      	movs	r3, #0
}
  40310c:	4618      	mov	r0, r3
  40310e:	3708      	adds	r7, #8
  403110:	46bd      	mov	sp, r7
  403112:	bd80      	pop	{r7, pc}
  403114:	00403085 	.word	0x00403085

00403118 <sysclk_get_main_hz>:
{
  403118:	b580      	push	{r7, lr}
  40311a:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  40311c:	2001      	movs	r0, #1
  40311e:	4b04      	ldr	r3, [pc, #16]	; (403130 <sysclk_get_main_hz+0x18>)
  403120:	4798      	blx	r3
  403122:	4602      	mov	r2, r0
  403124:	f640 3372 	movw	r3, #2930	; 0xb72
  403128:	fb03 f302 	mul.w	r3, r3, r2
}
  40312c:	4618      	mov	r0, r3
  40312e:	bd80      	pop	{r7, pc}
  403130:	00402f51 	.word	0x00402f51

00403134 <sysclk_get_cpu_hz>:
{
  403134:	b580      	push	{r7, lr}
  403136:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  403138:	4b02      	ldr	r3, [pc, #8]	; (403144 <sysclk_get_cpu_hz+0x10>)
  40313a:	4798      	blx	r3
  40313c:	4603      	mov	r3, r0
}
  40313e:	4618      	mov	r0, r3
  403140:	bd80      	pop	{r7, pc}
  403142:	bf00      	nop
  403144:	00403119 	.word	0x00403119

00403148 <sysclk_enable_usb>:
 *
 * \param pll_id Source of the USB clock.
 * \param div Actual clock divisor. Must be superior to 0.
 */
void sysclk_enable_usb(void)
{
  403148:	b590      	push	{r4, r7, lr}
  40314a:	b083      	sub	sp, #12
  40314c:	af00      	add	r7, sp, #0

#ifdef CONFIG_PLL1_SOURCE
	if (CONFIG_USBCLK_SOURCE == USBCLK_SRC_PLL1) {
		struct pll_config pllcfg;

		pll_enable_source(CONFIG_PLL1_SOURCE);
  40314e:	2001      	movs	r0, #1
  403150:	4b0c      	ldr	r3, [pc, #48]	; (403184 <sysclk_enable_usb+0x3c>)
  403152:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 1);
  403154:	4638      	mov	r0, r7
  403156:	f240 53b9 	movw	r3, #1465	; 0x5b9
  40315a:	2201      	movs	r2, #1
  40315c:	2101      	movs	r1, #1
  40315e:	4c0a      	ldr	r4, [pc, #40]	; (403188 <sysclk_enable_usb+0x40>)
  403160:	47a0      	blx	r4
		pll_enable(&pllcfg, 1);
  403162:	463b      	mov	r3, r7
  403164:	2101      	movs	r1, #1
  403166:	4618      	mov	r0, r3
  403168:	4b08      	ldr	r3, [pc, #32]	; (40318c <sysclk_enable_usb+0x44>)
  40316a:	4798      	blx	r3
		pll_wait_for_lock(1);
  40316c:	2001      	movs	r0, #1
  40316e:	4b08      	ldr	r3, [pc, #32]	; (403190 <sysclk_enable_usb+0x48>)
  403170:	4798      	blx	r3
#ifdef UHD_ENABLE
		pmc_switch_uhpck_to_pllbck(CONFIG_USBCLK_DIV - 1);
		pmc_enable_uhpck();
#else
		pmc_switch_udpck_to_pllbck(CONFIG_USBCLK_DIV - 1);
  403172:	2000      	movs	r0, #0
  403174:	4b07      	ldr	r3, [pc, #28]	; (403194 <sysclk_enable_usb+0x4c>)
  403176:	4798      	blx	r3
		pmc_enable_udpck();
  403178:	4b07      	ldr	r3, [pc, #28]	; (403198 <sysclk_enable_usb+0x50>)
  40317a:	4798      	blx	r3
#endif
		return;
  40317c:	bf00      	nop
	}
#endif
}
  40317e:	370c      	adds	r7, #12
  403180:	46bd      	mov	sp, r7
  403182:	bd90      	pop	{r4, r7, pc}
  403184:	004030bd 	.word	0x004030bd
  403188:	00402ff1 	.word	0x00402ff1
  40318c:	00403045 	.word	0x00403045
  403190:	004030f5 	.word	0x004030f5
  403194:	00406a2d 	.word	0x00406a2d
  403198:	00406a55 	.word	0x00406a55

0040319c <sysclk_init>:
}
#endif // CONFIG_USBCLK_SOURCE
#endif

void sysclk_init(void)
{
  40319c:	b590      	push	{r4, r7, lr}
  40319e:	b0a7      	sub	sp, #156	; 0x9c
  4031a0:	af02      	add	r7, sp, #8
	uint32_t unique_id[32];
	uint32_t trim_value;
#endif

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4031a2:	4821      	ldr	r0, [pc, #132]	; (403228 <sysclk_init+0x8c>)
  4031a4:	4b21      	ldr	r3, [pc, #132]	; (40322c <sysclk_init+0x90>)
  4031a6:	4798      	blx	r3

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		struct pll_config pllcfg;

		pll_enable_source(CONFIG_PLL0_SOURCE);
  4031a8:	2001      	movs	r0, #1
  4031aa:	4b21      	ldr	r3, [pc, #132]	; (403230 <sysclk_init+0x94>)
  4031ac:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  4031ae:	f107 0008 	add.w	r0, r7, #8
  4031b2:	f640 3372 	movw	r3, #2930	; 0xb72
  4031b6:	2201      	movs	r2, #1
  4031b8:	2101      	movs	r1, #1
  4031ba:	4c1e      	ldr	r4, [pc, #120]	; (403234 <sysclk_init+0x98>)
  4031bc:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  4031be:	f107 0308 	add.w	r3, r7, #8
  4031c2:	2100      	movs	r1, #0
  4031c4:	4618      	mov	r0, r3
  4031c6:	4b1c      	ldr	r3, [pc, #112]	; (403238 <sysclk_init+0x9c>)
  4031c8:	4798      	blx	r3
		pll_wait_for_lock(0);
  4031ca:	2000      	movs	r0, #0
  4031cc:	4b1b      	ldr	r3, [pc, #108]	; (40323c <sysclk_init+0xa0>)
  4031ce:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4031d0:	2000      	movs	r0, #0
  4031d2:	4b1b      	ldr	r3, [pc, #108]	; (403240 <sysclk_init+0xa4>)
  4031d4:	4798      	blx	r3
	}
#endif
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4031d6:	4b1b      	ldr	r3, [pc, #108]	; (403244 <sysclk_init+0xa8>)
  4031d8:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4031da:	4b1b      	ldr	r3, [pc, #108]	; (403248 <sysclk_init+0xac>)
  4031dc:	4798      	blx	r3
  4031de:	4603      	mov	r3, r0
  4031e0:	4618      	mov	r0, r3
  4031e2:	4b12      	ldr	r3, [pc, #72]	; (40322c <sysclk_init+0x90>)
  4031e4:	4798      	blx	r3
	}
#endif

#if SAMG55
	/* Set the trim value when system run near 120M */
	if ((SystemCoreClock <= (CHIP_FREQ_CPU_MAX + (CHIP_FREQ_CPU_MAX >> 3))) &&
  4031e6:	4b19      	ldr	r3, [pc, #100]	; (40324c <sysclk_init+0xb0>)
  4031e8:	681b      	ldr	r3, [r3, #0]
  4031ea:	4a19      	ldr	r2, [pc, #100]	; (403250 <sysclk_init+0xb4>)
  4031ec:	4293      	cmp	r3, r2
  4031ee:	d817      	bhi.n	403220 <sysclk_init+0x84>
	(SystemCoreClock >= (CHIP_FREQ_CPU_MAX - (CHIP_FREQ_CPU_MAX >> 3)))) {
  4031f0:	4b16      	ldr	r3, [pc, #88]	; (40324c <sysclk_init+0xb0>)
  4031f2:	681b      	ldr	r3, [r3, #0]
	if ((SystemCoreClock <= (CHIP_FREQ_CPU_MAX + (CHIP_FREQ_CPU_MAX >> 3))) &&
  4031f4:	4a17      	ldr	r2, [pc, #92]	; (403254 <sysclk_init+0xb8>)
  4031f6:	4293      	cmp	r3, r2
  4031f8:	d912      	bls.n	403220 <sysclk_init+0x84>
		/* Get the trim value from unique ID area */
		efc_perform_read_sequence(EFC, EFC_FCMD_STUI, EFC_FCMD_SPUI,
  4031fa:	f107 020c 	add.w	r2, r7, #12
  4031fe:	2320      	movs	r3, #32
  403200:	9300      	str	r3, [sp, #0]
  403202:	4613      	mov	r3, r2
  403204:	220f      	movs	r2, #15
  403206:	210e      	movs	r1, #14
  403208:	4813      	ldr	r0, [pc, #76]	; (403258 <sysclk_init+0xbc>)
  40320a:	4c14      	ldr	r4, [pc, #80]	; (40325c <sysclk_init+0xc0>)
  40320c:	47a0      	blx	r4
		unique_id, 32);

		trim_value = unique_id[16] & 0x0000FFFF;
  40320e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  403210:	b29b      	uxth	r3, r3
  403212:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		supc_set_regulator_trim_user(SUPC, trim_value);
  403216:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
  40321a:	4811      	ldr	r0, [pc, #68]	; (403260 <sysclk_init+0xc4>)
  40321c:	4b11      	ldr	r3, [pc, #68]	; (403264 <sysclk_init+0xc8>)
  40321e:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  403220:	bf00      	nop
  403222:	3794      	adds	r7, #148	; 0x94
  403224:	46bd      	mov	sp, r7
  403226:	bd90      	pop	{r4, r7, pc}
  403228:	07270e00 	.word	0x07270e00
  40322c:	00409c09 	.word	0x00409c09
  403230:	004030bd 	.word	0x004030bd
  403234:	00402ff1 	.word	0x00402ff1
  403238:	00403045 	.word	0x00403045
  40323c:	004030f5 	.word	0x004030f5
  403240:	004065c1 	.word	0x004065c1
  403244:	00409ae5 	.word	0x00409ae5
  403248:	00403135 	.word	0x00403135
  40324c:	20000260 	.word	0x20000260
  403250:	080befc0 	.word	0x080befc0
  403254:	06422c3f 	.word	0x06422c3f
  403258:	400e0a00 	.word	0x400e0a00
  40325c:	2000000b 	.word	0x2000000b
  403260:	400e1410 	.word	0x400e1410
  403264:	00406f61 	.word	0x00406f61

00403268 <get_nb_lun>:

#endif  // FREERTOS_USED


U8 get_nb_lun(void)
{
  403268:	b480      	push	{r7}
  40326a:	af00      	add	r7, sp, #0

  Ctrl_access_unlock();

  return nb_lun;
#else
  return MAX_LUN;
  40326c:	2302      	movs	r3, #2
#endif
}
  40326e:	4618      	mov	r0, r3
  403270:	46bd      	mov	sp, r7
  403272:	f85d 7b04 	ldr.w	r7, [sp], #4
  403276:	4770      	bx	lr

00403278 <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
  403278:	b580      	push	{r7, lr}
  40327a:	b084      	sub	sp, #16
  40327c:	af00      	add	r7, sp, #0
  40327e:	4603      	mov	r3, r0
  403280:	71fb      	strb	r3, [r7, #7]

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
  403282:	79fb      	ldrb	r3, [r7, #7]
  403284:	2b01      	cmp	r3, #1
  403286:	d80a      	bhi.n	40329e <mem_test_unit_ready+0x26>
  403288:	79fa      	ldrb	r2, [r7, #7]
  40328a:	4908      	ldr	r1, [pc, #32]	; (4032ac <mem_test_unit_ready+0x34>)
  40328c:	4613      	mov	r3, r2
  40328e:	009b      	lsls	r3, r3, #2
  403290:	4413      	add	r3, r2
  403292:	00db      	lsls	r3, r3, #3
  403294:	440b      	add	r3, r1
  403296:	681b      	ldr	r3, [r3, #0]
  403298:	4798      	blx	r3
  40329a:	4603      	mov	r3, r0
  40329c:	e000      	b.n	4032a0 <mem_test_unit_ready+0x28>
  40329e:	2301      	movs	r3, #1
  status =
  4032a0:	73fb      	strb	r3, [r7, #15]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
  4032a2:	7bfb      	ldrb	r3, [r7, #15]
}
  4032a4:	4618      	mov	r0, r3
  4032a6:	3710      	adds	r7, #16
  4032a8:	46bd      	mov	sp, r7
  4032aa:	bd80      	pop	{r7, pc}
  4032ac:	00410e08 	.word	0x00410e08

004032b0 <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
  4032b0:	b580      	push	{r7, lr}
  4032b2:	b084      	sub	sp, #16
  4032b4:	af00      	add	r7, sp, #0
  4032b6:	4603      	mov	r3, r0
  4032b8:	6039      	str	r1, [r7, #0]
  4032ba:	71fb      	strb	r3, [r7, #7]

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
  4032bc:	79fb      	ldrb	r3, [r7, #7]
  4032be:	2b01      	cmp	r3, #1
  4032c0:	d80c      	bhi.n	4032dc <mem_read_capacity+0x2c>
  4032c2:	79fa      	ldrb	r2, [r7, #7]
  4032c4:	4909      	ldr	r1, [pc, #36]	; (4032ec <mem_read_capacity+0x3c>)
  4032c6:	4613      	mov	r3, r2
  4032c8:	009b      	lsls	r3, r3, #2
  4032ca:	4413      	add	r3, r2
  4032cc:	00db      	lsls	r3, r3, #3
  4032ce:	440b      	add	r3, r1
  4032d0:	3304      	adds	r3, #4
  4032d2:	681b      	ldr	r3, [r3, #0]
  4032d4:	6838      	ldr	r0, [r7, #0]
  4032d6:	4798      	blx	r3
  4032d8:	4603      	mov	r3, r0
  4032da:	e000      	b.n	4032de <mem_read_capacity+0x2e>
  4032dc:	2301      	movs	r3, #1
  status =
  4032de:	73fb      	strb	r3, [r7, #15]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
  4032e0:	7bfb      	ldrb	r3, [r7, #15]
}
  4032e2:	4618      	mov	r0, r3
  4032e4:	3710      	adds	r7, #16
  4032e6:	46bd      	mov	sp, r7
  4032e8:	bd80      	pop	{r7, pc}
  4032ea:	bf00      	nop
  4032ec:	00410e08 	.word	0x00410e08

004032f0 <mem_sector_size>:


U8 mem_sector_size(U8 lun)
{
  4032f0:	b480      	push	{r7}
  4032f2:	b085      	sub	sp, #20
  4032f4:	af00      	add	r7, sp, #0
  4032f6:	4603      	mov	r3, r0
  4032f8:	71fb      	strb	r3, [r7, #7]

  if (!Ctrl_access_lock()) return 0;

  sector_size =
#if MAX_LUN
              (lun < MAX_LUN) ? 1 :
  4032fa:	79fb      	ldrb	r3, [r7, #7]
  4032fc:	2b01      	cmp	r3, #1
  4032fe:	bf94      	ite	ls
  403300:	2301      	movls	r3, #1
  403302:	2300      	movhi	r3, #0
  403304:	b2db      	uxtb	r3, r3
  sector_size =
  403306:	73fb      	strb	r3, [r7, #15]
                                  0;
#endif

  Ctrl_access_unlock();

  return sector_size;
  403308:	7bfb      	ldrb	r3, [r7, #15]
}
  40330a:	4618      	mov	r0, r3
  40330c:	3714      	adds	r7, #20
  40330e:	46bd      	mov	sp, r7
  403310:	f85d 7b04 	ldr.w	r7, [sp], #4
  403314:	4770      	bx	lr
	...

00403318 <mem_unload>:


bool mem_unload(U8 lun, bool unload)
{
  403318:	b580      	push	{r7, lr}
  40331a:	b084      	sub	sp, #16
  40331c:	af00      	add	r7, sp, #0
  40331e:	4603      	mov	r3, r0
  403320:	460a      	mov	r2, r1
  403322:	71fb      	strb	r3, [r7, #7]
  403324:	4613      	mov	r3, r2
  403326:	71bb      	strb	r3, [r7, #6]

  unloaded =
#if MAX_LUN
          (lun < MAX_LUN) ?
              (lun_desc[lun].unload ?
                  lun_desc[lun].unload(unload) : !unload) :
  403328:	79fb      	ldrb	r3, [r7, #7]
  40332a:	2b01      	cmp	r3, #1
  40332c:	d82a      	bhi.n	403384 <mem_unload+0x6c>
              (lun_desc[lun].unload ?
  40332e:	79fa      	ldrb	r2, [r7, #7]
  403330:	4918      	ldr	r1, [pc, #96]	; (403394 <mem_unload+0x7c>)
  403332:	4613      	mov	r3, r2
  403334:	009b      	lsls	r3, r3, #2
  403336:	4413      	add	r3, r2
  403338:	00db      	lsls	r3, r3, #3
  40333a:	440b      	add	r3, r1
  40333c:	3308      	adds	r3, #8
  40333e:	681b      	ldr	r3, [r3, #0]
                  lun_desc[lun].unload(unload) : !unload) :
  403340:	2b00      	cmp	r3, #0
  403342:	d012      	beq.n	40336a <mem_unload+0x52>
  403344:	79fa      	ldrb	r2, [r7, #7]
  403346:	4913      	ldr	r1, [pc, #76]	; (403394 <mem_unload+0x7c>)
  403348:	4613      	mov	r3, r2
  40334a:	009b      	lsls	r3, r3, #2
  40334c:	4413      	add	r3, r2
  40334e:	00db      	lsls	r3, r3, #3
  403350:	440b      	add	r3, r1
  403352:	3308      	adds	r3, #8
  403354:	681b      	ldr	r3, [r3, #0]
  403356:	79ba      	ldrb	r2, [r7, #6]
  403358:	4610      	mov	r0, r2
  40335a:	4798      	blx	r3
  40335c:	4603      	mov	r3, r0
  40335e:	2b00      	cmp	r3, #0
  403360:	bf14      	ite	ne
  403362:	2301      	movne	r3, #1
  403364:	2300      	moveq	r3, #0
  403366:	b2db      	uxtb	r3, r3
  403368:	e00d      	b.n	403386 <mem_unload+0x6e>
              Lun_usb_unload(lun - LUN_ID_USB, unload);
# else
              !unload; /* Can not unload: load success, unload fail */
# endif
#else
              false; /* No mem, unload/load fail */
  40336a:	79bb      	ldrb	r3, [r7, #6]
  40336c:	2b00      	cmp	r3, #0
  40336e:	bf14      	ite	ne
  403370:	2301      	movne	r3, #1
  403372:	2300      	moveq	r3, #0
  403374:	b2db      	uxtb	r3, r3
  403376:	f083 0301 	eor.w	r3, r3, #1
  40337a:	b2db      	uxtb	r3, r3
                  lun_desc[lun].unload(unload) : !unload) :
  40337c:	f003 0301 	and.w	r3, r3, #1
  403380:	b2db      	uxtb	r3, r3
  403382:	e000      	b.n	403386 <mem_unload+0x6e>
  403384:	2300      	movs	r3, #0
  unloaded =
  403386:	73fb      	strb	r3, [r7, #15]
#endif

  Ctrl_access_unlock();

  return unloaded;
  403388:	7bfb      	ldrb	r3, [r7, #15]
}
  40338a:	4618      	mov	r0, r3
  40338c:	3710      	adds	r7, #16
  40338e:	46bd      	mov	sp, r7
  403390:	bd80      	pop	{r7, pc}
  403392:	bf00      	nop
  403394:	00410e08 	.word	0x00410e08

00403398 <mem_wr_protect>:

bool mem_wr_protect(U8 lun)
{
  403398:	b580      	push	{r7, lr}
  40339a:	b084      	sub	sp, #16
  40339c:	af00      	add	r7, sp, #0
  40339e:	4603      	mov	r3, r0
  4033a0:	71fb      	strb	r3, [r7, #7]

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
  4033a2:	79fb      	ldrb	r3, [r7, #7]
  4033a4:	2b01      	cmp	r3, #1
  4033a6:	d80c      	bhi.n	4033c2 <mem_wr_protect+0x2a>
  4033a8:	79fa      	ldrb	r2, [r7, #7]
  4033aa:	490a      	ldr	r1, [pc, #40]	; (4033d4 <mem_wr_protect+0x3c>)
  4033ac:	4613      	mov	r3, r2
  4033ae:	009b      	lsls	r3, r3, #2
  4033b0:	4413      	add	r3, r2
  4033b2:	00db      	lsls	r3, r3, #3
  4033b4:	440b      	add	r3, r1
  4033b6:	330c      	adds	r3, #12
  4033b8:	681b      	ldr	r3, [r3, #0]
  4033ba:	4798      	blx	r3
  4033bc:	4603      	mov	r3, r0
  4033be:	2b00      	cmp	r3, #0
  4033c0:	d001      	beq.n	4033c6 <mem_wr_protect+0x2e>
  4033c2:	2301      	movs	r3, #1
  4033c4:	e000      	b.n	4033c8 <mem_wr_protect+0x30>
  4033c6:	2300      	movs	r3, #0
  wr_protect =
  4033c8:	73fb      	strb	r3, [r7, #15]
                                 true;
#endif

  Ctrl_access_unlock();

  return wr_protect;
  4033ca:	7bfb      	ldrb	r3, [r7, #15]
}
  4033cc:	4618      	mov	r0, r3
  4033ce:	3710      	adds	r7, #16
  4033d0:	46bd      	mov	sp, r7
  4033d2:	bd80      	pop	{r7, pc}
  4033d4:	00410e08 	.word	0x00410e08

004033d8 <mem_removal>:


bool mem_removal(U8 lun)
{
  4033d8:	b580      	push	{r7, lr}
  4033da:	b084      	sub	sp, #16
  4033dc:	af00      	add	r7, sp, #0
  4033de:	4603      	mov	r3, r0
  4033e0:	71fb      	strb	r3, [r7, #7]

  if (!Ctrl_access_lock()) return true;

  removal =
#if MAX_LUN
          (lun < MAX_LUN) ? lun_desc[lun].removal() :
  4033e2:	79fb      	ldrb	r3, [r7, #7]
  4033e4:	2b01      	cmp	r3, #1
  4033e6:	d80c      	bhi.n	403402 <mem_removal+0x2a>
  4033e8:	79fa      	ldrb	r2, [r7, #7]
  4033ea:	490a      	ldr	r1, [pc, #40]	; (403414 <mem_removal+0x3c>)
  4033ec:	4613      	mov	r3, r2
  4033ee:	009b      	lsls	r3, r3, #2
  4033f0:	4413      	add	r3, r2
  4033f2:	00db      	lsls	r3, r3, #3
  4033f4:	440b      	add	r3, r1
  4033f6:	3310      	adds	r3, #16
  4033f8:	681b      	ldr	r3, [r3, #0]
  4033fa:	4798      	blx	r3
  4033fc:	4603      	mov	r3, r0
  4033fe:	2b00      	cmp	r3, #0
  403400:	d001      	beq.n	403406 <mem_removal+0x2e>
  403402:	2301      	movs	r3, #1
  403404:	e000      	b.n	403408 <mem_removal+0x30>
  403406:	2300      	movs	r3, #0
  removal =
  403408:	73fb      	strb	r3, [r7, #15]
                              true;
#endif

  Ctrl_access_unlock();

  return removal;
  40340a:	7bfb      	ldrb	r3, [r7, #15]
}
  40340c:	4618      	mov	r0, r3
  40340e:	3710      	adds	r7, #16
  403410:	46bd      	mov	sp, r7
  403412:	bd80      	pop	{r7, pc}
  403414:	00410e08 	.word	0x00410e08

00403418 <mem_name>:


const char *mem_name(U8 lun)
{
  403418:	b480      	push	{r7}
  40341a:	b083      	sub	sp, #12
  40341c:	af00      	add	r7, sp, #0
  40341e:	4603      	mov	r3, r0
  403420:	71fb      	strb	r3, [r7, #7]
#if MAX_LUN==0
  UNUSED(lun);
#endif
  return
#if MAX_LUN
       (lun < MAX_LUN) ? lun_desc[lun].name :
  403422:	79fb      	ldrb	r3, [r7, #7]
  403424:	2b01      	cmp	r3, #1
  403426:	d809      	bhi.n	40343c <mem_name+0x24>
  403428:	79fa      	ldrb	r2, [r7, #7]
  40342a:	4908      	ldr	r1, [pc, #32]	; (40344c <mem_name+0x34>)
  40342c:	4613      	mov	r3, r2
  40342e:	009b      	lsls	r3, r3, #2
  403430:	4413      	add	r3, r2
  403432:	00db      	lsls	r3, r3, #3
  403434:	440b      	add	r3, r1
  403436:	3324      	adds	r3, #36	; 0x24
  403438:	681b      	ldr	r3, [r3, #0]
  40343a:	e000      	b.n	40343e <mem_name+0x26>
  40343c:	2300      	movs	r3, #0
#if LUN_USB == ENABLE
                           LUN_USB_NAME;
#else
                           NULL;
#endif
}
  40343e:	4618      	mov	r0, r3
  403440:	370c      	adds	r7, #12
  403442:	46bd      	mov	sp, r7
  403444:	f85d 7b04 	ldr.w	r7, [sp], #4
  403448:	4770      	bx	lr
  40344a:	bf00      	nop
  40344c:	00410e08 	.word	0x00410e08

00403450 <memory_2_usb>:
 */
//! @{


Ctrl_status memory_2_usb(U8 lun, U32 addr, U16 nb_sector)
{
  403450:	b580      	push	{r7, lr}
  403452:	b084      	sub	sp, #16
  403454:	af00      	add	r7, sp, #0
  403456:	4603      	mov	r3, r0
  403458:	6039      	str	r1, [r7, #0]
  40345a:	71fb      	strb	r3, [r7, #7]
  40345c:	4613      	mov	r3, r2
  40345e:	80bb      	strh	r3, [r7, #4]
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(nb_sector);
  403460:	4b0e      	ldr	r3, [pc, #56]	; (40349c <memory_2_usb+0x4c>)
  403462:	4798      	blx	r3
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].usb_read_10(addr, nb_sector) :
  403464:	79fb      	ldrb	r3, [r7, #7]
  403466:	2b01      	cmp	r3, #1
  403468:	d80e      	bhi.n	403488 <memory_2_usb+0x38>
  40346a:	79fa      	ldrb	r2, [r7, #7]
  40346c:	490c      	ldr	r1, [pc, #48]	; (4034a0 <memory_2_usb+0x50>)
  40346e:	4613      	mov	r3, r2
  403470:	009b      	lsls	r3, r3, #2
  403472:	4413      	add	r3, r2
  403474:	00db      	lsls	r3, r3, #3
  403476:	440b      	add	r3, r1
  403478:	3314      	adds	r3, #20
  40347a:	681b      	ldr	r3, [r3, #0]
  40347c:	88ba      	ldrh	r2, [r7, #4]
  40347e:	4611      	mov	r1, r2
  403480:	6838      	ldr	r0, [r7, #0]
  403482:	4798      	blx	r3
  403484:	4603      	mov	r3, r0
  403486:	e000      	b.n	40348a <memory_2_usb+0x3a>
  403488:	2301      	movs	r3, #1
  status =
  40348a:	73fb      	strb	r3, [r7, #15]
#endif
                             CTRL_FAIL;
  memory_stop_read_action();
  40348c:	4b05      	ldr	r3, [pc, #20]	; (4034a4 <memory_2_usb+0x54>)
  40348e:	4798      	blx	r3

  Ctrl_access_unlock();

  return status;
  403490:	7bfb      	ldrb	r3, [r7, #15]
}
  403492:	4618      	mov	r0, r3
  403494:	3710      	adds	r7, #16
  403496:	46bd      	mov	sp, r7
  403498:	bd80      	pop	{r7, pc}
  40349a:	bf00      	nop
  40349c:	00402bd9 	.word	0x00402bd9
  4034a0:	00410e08 	.word	0x00410e08
  4034a4:	00402be7 	.word	0x00402be7

004034a8 <usb_2_memory>:


Ctrl_status usb_2_memory(U8 lun, U32 addr, U16 nb_sector)
{
  4034a8:	b580      	push	{r7, lr}
  4034aa:	b084      	sub	sp, #16
  4034ac:	af00      	add	r7, sp, #0
  4034ae:	4603      	mov	r3, r0
  4034b0:	6039      	str	r1, [r7, #0]
  4034b2:	71fb      	strb	r3, [r7, #7]
  4034b4:	4613      	mov	r3, r2
  4034b6:	80bb      	strh	r3, [r7, #4]
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(nb_sector);
  4034b8:	4b0e      	ldr	r3, [pc, #56]	; (4034f4 <usb_2_memory+0x4c>)
  4034ba:	4798      	blx	r3
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].usb_write_10(addr, nb_sector) :
  4034bc:	79fb      	ldrb	r3, [r7, #7]
  4034be:	2b01      	cmp	r3, #1
  4034c0:	d80e      	bhi.n	4034e0 <usb_2_memory+0x38>
  4034c2:	79fa      	ldrb	r2, [r7, #7]
  4034c4:	490c      	ldr	r1, [pc, #48]	; (4034f8 <usb_2_memory+0x50>)
  4034c6:	4613      	mov	r3, r2
  4034c8:	009b      	lsls	r3, r3, #2
  4034ca:	4413      	add	r3, r2
  4034cc:	00db      	lsls	r3, r3, #3
  4034ce:	440b      	add	r3, r1
  4034d0:	3318      	adds	r3, #24
  4034d2:	681b      	ldr	r3, [r3, #0]
  4034d4:	88ba      	ldrh	r2, [r7, #4]
  4034d6:	4611      	mov	r1, r2
  4034d8:	6838      	ldr	r0, [r7, #0]
  4034da:	4798      	blx	r3
  4034dc:	4603      	mov	r3, r0
  4034de:	e000      	b.n	4034e2 <usb_2_memory+0x3a>
  4034e0:	2301      	movs	r3, #1
  status =
  4034e2:	73fb      	strb	r3, [r7, #15]
#endif
                             CTRL_FAIL;
  memory_stop_write_action();
  4034e4:	4b05      	ldr	r3, [pc, #20]	; (4034fc <usb_2_memory+0x54>)
  4034e6:	4798      	blx	r3

  Ctrl_access_unlock();

  return status;
  4034e8:	7bfb      	ldrb	r3, [r7, #15]
}
  4034ea:	4618      	mov	r0, r3
  4034ec:	3710      	adds	r7, #16
  4034ee:	46bd      	mov	sp, r7
  4034f0:	bd80      	pop	{r7, pc}
  4034f2:	bf00      	nop
  4034f4:	00402bf5 	.word	0x00402bf5
  4034f8:	00410e08 	.word	0x00410e08
  4034fc:	00402c03 	.word	0x00402c03

00403500 <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
  403500:	b580      	push	{r7, lr}
  403502:	b086      	sub	sp, #24
  403504:	af00      	add	r7, sp, #0
  403506:	4603      	mov	r3, r0
  403508:	60b9      	str	r1, [r7, #8]
  40350a:	607a      	str	r2, [r7, #4]
  40350c:	73fb      	strb	r3, [r7, #15]
  UNUSED(lun);
#endif

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  40350e:	4b0e      	ldr	r3, [pc, #56]	; (403548 <memory_2_ram+0x48>)
  403510:	4798      	blx	r3
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
  403512:	7bfb      	ldrb	r3, [r7, #15]
  403514:	2b01      	cmp	r3, #1
  403516:	d80d      	bhi.n	403534 <memory_2_ram+0x34>
  403518:	7bfa      	ldrb	r2, [r7, #15]
  40351a:	490c      	ldr	r1, [pc, #48]	; (40354c <memory_2_ram+0x4c>)
  40351c:	4613      	mov	r3, r2
  40351e:	009b      	lsls	r3, r3, #2
  403520:	4413      	add	r3, r2
  403522:	00db      	lsls	r3, r3, #3
  403524:	440b      	add	r3, r1
  403526:	331c      	adds	r3, #28
  403528:	681b      	ldr	r3, [r3, #0]
  40352a:	6879      	ldr	r1, [r7, #4]
  40352c:	68b8      	ldr	r0, [r7, #8]
  40352e:	4798      	blx	r3
  403530:	4603      	mov	r3, r0
  403532:	e000      	b.n	403536 <memory_2_ram+0x36>
  403534:	2301      	movs	r3, #1
  status =
  403536:	75fb      	strb	r3, [r7, #23]
#if LUN_USB == ENABLE
                             Lun_usb_mem_2_ram(addr, ram);
#else
                             CTRL_FAIL;
#endif
  memory_stop_read_action();
  403538:	4b05      	ldr	r3, [pc, #20]	; (403550 <memory_2_ram+0x50>)
  40353a:	4798      	blx	r3

  Ctrl_access_unlock();

  return status;
  40353c:	7dfb      	ldrb	r3, [r7, #23]
}
  40353e:	4618      	mov	r0, r3
  403540:	3718      	adds	r7, #24
  403542:	46bd      	mov	sp, r7
  403544:	bd80      	pop	{r7, pc}
  403546:	bf00      	nop
  403548:	00402bd9 	.word	0x00402bd9
  40354c:	00410e08 	.word	0x00410e08
  403550:	00402be7 	.word	0x00402be7

00403554 <ram_2_memory>:


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
  403554:	b580      	push	{r7, lr}
  403556:	b086      	sub	sp, #24
  403558:	af00      	add	r7, sp, #0
  40355a:	4603      	mov	r3, r0
  40355c:	60b9      	str	r1, [r7, #8]
  40355e:	607a      	str	r2, [r7, #4]
  403560:	73fb      	strb	r3, [r7, #15]
  UNUSED(lun);
#endif

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  403562:	4b0e      	ldr	r3, [pc, #56]	; (40359c <ram_2_memory+0x48>)
  403564:	4798      	blx	r3
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
  403566:	7bfb      	ldrb	r3, [r7, #15]
  403568:	2b01      	cmp	r3, #1
  40356a:	d80d      	bhi.n	403588 <ram_2_memory+0x34>
  40356c:	7bfa      	ldrb	r2, [r7, #15]
  40356e:	490c      	ldr	r1, [pc, #48]	; (4035a0 <ram_2_memory+0x4c>)
  403570:	4613      	mov	r3, r2
  403572:	009b      	lsls	r3, r3, #2
  403574:	4413      	add	r3, r2
  403576:	00db      	lsls	r3, r3, #3
  403578:	440b      	add	r3, r1
  40357a:	3320      	adds	r3, #32
  40357c:	681b      	ldr	r3, [r3, #0]
  40357e:	6879      	ldr	r1, [r7, #4]
  403580:	68b8      	ldr	r0, [r7, #8]
  403582:	4798      	blx	r3
  403584:	4603      	mov	r3, r0
  403586:	e000      	b.n	40358a <ram_2_memory+0x36>
  403588:	2301      	movs	r3, #1
  status =
  40358a:	75fb      	strb	r3, [r7, #23]
#if LUN_USB == ENABLE
                             Lun_usb_ram_2_mem(addr, ram);
#else
                             CTRL_FAIL;
#endif
  memory_stop_write_action();
  40358c:	4b05      	ldr	r3, [pc, #20]	; (4035a4 <ram_2_memory+0x50>)
  40358e:	4798      	blx	r3

  Ctrl_access_unlock();

  return status;
  403590:	7dfb      	ldrb	r3, [r7, #23]
}
  403592:	4618      	mov	r0, r3
  403594:	3718      	adds	r7, #24
  403596:	46bd      	mov	sp, r7
  403598:	bd80      	pop	{r7, pc}
  40359a:	bf00      	nop
  40359c:	00402bf5 	.word	0x00402bf5
  4035a0:	00410e08 	.word	0x00410e08
  4035a4:	00402c03 	.word	0x00402c03

004035a8 <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
  4035a8:	b480      	push	{r7}
  4035aa:	b083      	sub	sp, #12
  4035ac:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  4035ae:	f3ef 8310 	mrs	r3, PRIMASK
  4035b2:	607b      	str	r3, [r7, #4]
  return(result);
  4035b4:	687b      	ldr	r3, [r7, #4]
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4035b6:	2b00      	cmp	r3, #0
  4035b8:	bf0c      	ite	eq
  4035ba:	2301      	moveq	r3, #1
  4035bc:	2300      	movne	r3, #0
  4035be:	b2db      	uxtb	r3, r3
  4035c0:	603b      	str	r3, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  4035c2:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  4035c4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4035c8:	4b04      	ldr	r3, [pc, #16]	; (4035dc <cpu_irq_save+0x34>)
  4035ca:	2200      	movs	r2, #0
  4035cc:	701a      	strb	r2, [r3, #0]
	return flags;
  4035ce:	683b      	ldr	r3, [r7, #0]
}
  4035d0:	4618      	mov	r0, r3
  4035d2:	370c      	adds	r7, #12
  4035d4:	46bd      	mov	sp, r7
  4035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4035da:	4770      	bx	lr
  4035dc:	2000025e 	.word	0x2000025e

004035e0 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
  4035e0:	b480      	push	{r7}
  4035e2:	b083      	sub	sp, #12
  4035e4:	af00      	add	r7, sp, #0
  4035e6:	6078      	str	r0, [r7, #4]
	return (flags);
  4035e8:	687b      	ldr	r3, [r7, #4]
  4035ea:	2b00      	cmp	r3, #0
  4035ec:	bf14      	ite	ne
  4035ee:	2301      	movne	r3, #1
  4035f0:	2300      	moveq	r3, #0
  4035f2:	b2db      	uxtb	r3, r3
}
  4035f4:	4618      	mov	r0, r3
  4035f6:	370c      	adds	r7, #12
  4035f8:	46bd      	mov	sp, r7
  4035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
  4035fe:	4770      	bx	lr

00403600 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
  403600:	b580      	push	{r7, lr}
  403602:	b082      	sub	sp, #8
  403604:	af00      	add	r7, sp, #0
  403606:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
  403608:	6878      	ldr	r0, [r7, #4]
  40360a:	4b07      	ldr	r3, [pc, #28]	; (403628 <cpu_irq_restore+0x28>)
  40360c:	4798      	blx	r3
  40360e:	4603      	mov	r3, r0
  403610:	2b00      	cmp	r3, #0
  403612:	d005      	beq.n	403620 <cpu_irq_restore+0x20>
		cpu_irq_enable();
  403614:	4b05      	ldr	r3, [pc, #20]	; (40362c <cpu_irq_restore+0x2c>)
  403616:	2201      	movs	r2, #1
  403618:	701a      	strb	r2, [r3, #0]
  40361a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40361e:	b662      	cpsie	i
}
  403620:	bf00      	nop
  403622:	3708      	adds	r7, #8
  403624:	46bd      	mov	sp, r7
  403626:	bd80      	pop	{r7, pc}
  403628:	004035e1 	.word	0x004035e1
  40362c:	2000025e 	.word	0x2000025e

00403630 <udi_cdc_comm_enable>:
static volatile bool udi_cdc_tx_both_buf_to_send[UDI_CDC_PORT_NB];

//@}

bool udi_cdc_comm_enable(void)
{
  403630:	b580      	push	{r7, lr}
  403632:	b082      	sub	sp, #8
  403634:	af00      	add	r7, sp, #0
	uint8_t port;
	uint8_t iface_comm_num;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
  403636:	2300      	movs	r3, #0
  403638:	71bb      	strb	r3, [r7, #6]
	udi_cdc_nb_comm_enabled = 0;
  40363a:	4b49      	ldr	r3, [pc, #292]	; (403760 <udi_cdc_comm_enable+0x130>)
  40363c:	2200      	movs	r2, #0
  40363e:	701a      	strb	r2, [r3, #0]
	}
	port = udi_cdc_nb_comm_enabled;
#endif

	// Initialize control signal management
	udi_cdc_state[port] = CPU_TO_LE16(0);
  403640:	79bb      	ldrb	r3, [r7, #6]
  403642:	4a48      	ldr	r2, [pc, #288]	; (403764 <udi_cdc_comm_enable+0x134>)
  403644:	2100      	movs	r1, #0
  403646:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	uid_cdc_state_msg[port].header.bmRequestType =
  40364a:	79ba      	ldrb	r2, [r7, #6]
  40364c:	4946      	ldr	r1, [pc, #280]	; (403768 <udi_cdc_comm_enable+0x138>)
  40364e:	4613      	mov	r3, r2
  403650:	009b      	lsls	r3, r3, #2
  403652:	4413      	add	r3, r2
  403654:	005b      	lsls	r3, r3, #1
  403656:	440b      	add	r3, r1
  403658:	22a1      	movs	r2, #161	; 0xa1
  40365a:	701a      	strb	r2, [r3, #0]
			USB_REQ_DIR_IN | USB_REQ_TYPE_CLASS |
			USB_REQ_RECIP_INTERFACE;
	uid_cdc_state_msg[port].header.bNotification = USB_REQ_CDC_NOTIFY_SERIAL_STATE;
  40365c:	79ba      	ldrb	r2, [r7, #6]
  40365e:	4942      	ldr	r1, [pc, #264]	; (403768 <udi_cdc_comm_enable+0x138>)
  403660:	4613      	mov	r3, r2
  403662:	009b      	lsls	r3, r3, #2
  403664:	4413      	add	r3, r2
  403666:	005b      	lsls	r3, r3, #1
  403668:	440b      	add	r3, r1
  40366a:	3301      	adds	r3, #1
  40366c:	2220      	movs	r2, #32
  40366e:	701a      	strb	r2, [r3, #0]
	uid_cdc_state_msg[port].header.wValue = LE16(0);
  403670:	79ba      	ldrb	r2, [r7, #6]
  403672:	493d      	ldr	r1, [pc, #244]	; (403768 <udi_cdc_comm_enable+0x138>)
  403674:	4613      	mov	r3, r2
  403676:	009b      	lsls	r3, r3, #2
  403678:	4413      	add	r3, r2
  40367a:	005b      	lsls	r3, r3, #1
  40367c:	440b      	add	r3, r1
  40367e:	3302      	adds	r3, #2
  403680:	2200      	movs	r2, #0
  403682:	801a      	strh	r2, [r3, #0]

	switch (port) {
  403684:	79bb      	ldrb	r3, [r7, #6]
  403686:	2b00      	cmp	r3, #0
  403688:	d102      	bne.n	403690 <udi_cdc_comm_enable+0x60>
#define UDI_CDC_PORT_TO_IFACE_COMM(index, unused) \
	case index: \
		iface_comm_num = UDI_CDC_COMM_IFACE_NUMBER_##index; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_PORT_TO_IFACE_COMM, ~)
  40368a:	2300      	movs	r3, #0
  40368c:	71fb      	strb	r3, [r7, #7]
  40368e:	e002      	b.n	403696 <udi_cdc_comm_enable+0x66>
#undef UDI_CDC_PORT_TO_IFACE_COMM
	default:
		iface_comm_num = UDI_CDC_COMM_IFACE_NUMBER_0;
  403690:	2300      	movs	r3, #0
  403692:	71fb      	strb	r3, [r7, #7]
		break;
  403694:	bf00      	nop
	}

	uid_cdc_state_msg[port].header.wIndex = LE16(iface_comm_num);
  403696:	79ba      	ldrb	r2, [r7, #6]
  403698:	79fb      	ldrb	r3, [r7, #7]
  40369a:	b298      	uxth	r0, r3
  40369c:	4932      	ldr	r1, [pc, #200]	; (403768 <udi_cdc_comm_enable+0x138>)
  40369e:	4613      	mov	r3, r2
  4036a0:	009b      	lsls	r3, r3, #2
  4036a2:	4413      	add	r3, r2
  4036a4:	005b      	lsls	r3, r3, #1
  4036a6:	440b      	add	r3, r1
  4036a8:	3304      	adds	r3, #4
  4036aa:	4602      	mov	r2, r0
  4036ac:	801a      	strh	r2, [r3, #0]
	uid_cdc_state_msg[port].header.wLength = LE16(2);
  4036ae:	79ba      	ldrb	r2, [r7, #6]
  4036b0:	492d      	ldr	r1, [pc, #180]	; (403768 <udi_cdc_comm_enable+0x138>)
  4036b2:	4613      	mov	r3, r2
  4036b4:	009b      	lsls	r3, r3, #2
  4036b6:	4413      	add	r3, r2
  4036b8:	005b      	lsls	r3, r3, #1
  4036ba:	440b      	add	r3, r1
  4036bc:	3306      	adds	r3, #6
  4036be:	2202      	movs	r2, #2
  4036c0:	801a      	strh	r2, [r3, #0]
	uid_cdc_state_msg[port].value = CPU_TO_LE16(0);
  4036c2:	79ba      	ldrb	r2, [r7, #6]
  4036c4:	4928      	ldr	r1, [pc, #160]	; (403768 <udi_cdc_comm_enable+0x138>)
  4036c6:	4613      	mov	r3, r2
  4036c8:	009b      	lsls	r3, r3, #2
  4036ca:	4413      	add	r3, r2
  4036cc:	005b      	lsls	r3, r3, #1
  4036ce:	440b      	add	r3, r1
  4036d0:	3308      	adds	r3, #8
  4036d2:	2200      	movs	r2, #0
  4036d4:	801a      	strh	r2, [r3, #0]

	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
  4036d6:	79ba      	ldrb	r2, [r7, #6]
  4036d8:	4924      	ldr	r1, [pc, #144]	; (40376c <udi_cdc_comm_enable+0x13c>)
  4036da:	4613      	mov	r3, r2
  4036dc:	00db      	lsls	r3, r3, #3
  4036de:	1a9b      	subs	r3, r3, r2
  4036e0:	440b      	add	r3, r1
  4036e2:	2200      	movs	r2, #0
  4036e4:	701a      	strb	r2, [r3, #0]
  4036e6:	2200      	movs	r2, #0
  4036e8:	f062 023d 	orn	r2, r2, #61	; 0x3d
  4036ec:	705a      	strb	r2, [r3, #1]
  4036ee:	2200      	movs	r2, #0
  4036f0:	f042 0201 	orr.w	r2, r2, #1
  4036f4:	709a      	strb	r2, [r3, #2]
  4036f6:	2200      	movs	r2, #0
  4036f8:	70da      	strb	r2, [r3, #3]
	udi_cdc_line_coding[port].bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
  4036fa:	79ba      	ldrb	r2, [r7, #6]
  4036fc:	491b      	ldr	r1, [pc, #108]	; (40376c <udi_cdc_comm_enable+0x13c>)
  4036fe:	4613      	mov	r3, r2
  403700:	00db      	lsls	r3, r3, #3
  403702:	1a9b      	subs	r3, r3, r2
  403704:	440b      	add	r3, r1
  403706:	3304      	adds	r3, #4
  403708:	2200      	movs	r2, #0
  40370a:	701a      	strb	r2, [r3, #0]
	udi_cdc_line_coding[port].bParityType = UDI_CDC_DEFAULT_PARITY;
  40370c:	79ba      	ldrb	r2, [r7, #6]
  40370e:	4917      	ldr	r1, [pc, #92]	; (40376c <udi_cdc_comm_enable+0x13c>)
  403710:	4613      	mov	r3, r2
  403712:	00db      	lsls	r3, r3, #3
  403714:	1a9b      	subs	r3, r3, r2
  403716:	440b      	add	r3, r1
  403718:	3305      	adds	r3, #5
  40371a:	2200      	movs	r2, #0
  40371c:	701a      	strb	r2, [r3, #0]
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
  40371e:	79ba      	ldrb	r2, [r7, #6]
  403720:	4912      	ldr	r1, [pc, #72]	; (40376c <udi_cdc_comm_enable+0x13c>)
  403722:	4613      	mov	r3, r2
  403724:	00db      	lsls	r3, r3, #3
  403726:	1a9b      	subs	r3, r3, r2
  403728:	440b      	add	r3, r1
  40372a:	3306      	adds	r3, #6
  40372c:	2208      	movs	r2, #8
  40372e:	701a      	strb	r2, [r3, #0]
	// Call application callback
	// to initialize memories or indicate that interface is enabled
	UDI_CDC_SET_CODING_EXT(port,(&udi_cdc_line_coding[port]));
	if (!UDI_CDC_ENABLE_EXT(port)) {
  403730:	79bb      	ldrb	r3, [r7, #6]
  403732:	4618      	mov	r0, r3
  403734:	4b0e      	ldr	r3, [pc, #56]	; (403770 <udi_cdc_comm_enable+0x140>)
  403736:	4798      	blx	r3
  403738:	4603      	mov	r3, r0
  40373a:	f083 0301 	eor.w	r3, r3, #1
  40373e:	b2db      	uxtb	r3, r3
  403740:	2b00      	cmp	r3, #0
  403742:	d001      	beq.n	403748 <udi_cdc_comm_enable+0x118>
		return false;
  403744:	2300      	movs	r3, #0
  403746:	e007      	b.n	403758 <udi_cdc_comm_enable+0x128>
	}
	udi_cdc_nb_comm_enabled++;
  403748:	4b05      	ldr	r3, [pc, #20]	; (403760 <udi_cdc_comm_enable+0x130>)
  40374a:	781b      	ldrb	r3, [r3, #0]
  40374c:	b2db      	uxtb	r3, r3
  40374e:	3301      	adds	r3, #1
  403750:	b2da      	uxtb	r2, r3
  403752:	4b03      	ldr	r3, [pc, #12]	; (403760 <udi_cdc_comm_enable+0x130>)
  403754:	701a      	strb	r2, [r3, #0]
	return true;
  403756:	2301      	movs	r3, #1
}
  403758:	4618      	mov	r0, r3
  40375a:	3708      	adds	r7, #8
  40375c:	46bd      	mov	sp, r7
  40375e:	bd80      	pop	{r7, pc}
  403760:	20019caa 	.word	0x20019caa
  403764:	20019c9c 	.word	0x20019c9c
  403768:	20019ca0 	.word	0x20019ca0
  40376c:	20019c94 	.word	0x20019c94
  403770:	0040dd19 	.word	0x0040dd19

00403774 <udi_cdc_data_enable>:

bool udi_cdc_data_enable(void)
{
  403774:	b580      	push	{r7, lr}
  403776:	b082      	sub	sp, #8
  403778:	af00      	add	r7, sp, #0
	uint8_t port;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
  40377a:	2300      	movs	r3, #0
  40377c:	71fb      	strb	r3, [r7, #7]
	udi_cdc_nb_data_enabled = 0;
  40377e:	4b2d      	ldr	r3, [pc, #180]	; (403834 <udi_cdc_data_enable+0xc0>)
  403780:	2200      	movs	r2, #0
  403782:	701a      	strb	r2, [r3, #0]
	}
	port = udi_cdc_nb_data_enabled;
#endif

	// Initialize TX management
	udi_cdc_tx_trans_ongoing[port] = false;
  403784:	79fb      	ldrb	r3, [r7, #7]
  403786:	4a2c      	ldr	r2, [pc, #176]	; (403838 <udi_cdc_data_enable+0xc4>)
  403788:	2100      	movs	r1, #0
  40378a:	54d1      	strb	r1, [r2, r3]
	udi_cdc_tx_both_buf_to_send[port] = false;
  40378c:	79fb      	ldrb	r3, [r7, #7]
  40378e:	4a2b      	ldr	r2, [pc, #172]	; (40383c <udi_cdc_data_enable+0xc8>)
  403790:	2100      	movs	r1, #0
  403792:	54d1      	strb	r1, [r2, r3]
	udi_cdc_tx_buf_sel[port] = 0;
  403794:	79fb      	ldrb	r3, [r7, #7]
  403796:	4a2a      	ldr	r2, [pc, #168]	; (403840 <udi_cdc_data_enable+0xcc>)
  403798:	2100      	movs	r1, #0
  40379a:	54d1      	strb	r1, [r2, r3]
	udi_cdc_tx_buf_nb[port][0] = 0;
  40379c:	79fb      	ldrb	r3, [r7, #7]
  40379e:	4a29      	ldr	r2, [pc, #164]	; (403844 <udi_cdc_data_enable+0xd0>)
  4037a0:	2100      	movs	r1, #0
  4037a2:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
	udi_cdc_tx_buf_nb[port][1] = 0;
  4037a6:	79fb      	ldrb	r3, [r7, #7]
  4037a8:	4a26      	ldr	r2, [pc, #152]	; (403844 <udi_cdc_data_enable+0xd0>)
  4037aa:	009b      	lsls	r3, r3, #2
  4037ac:	4413      	add	r3, r2
  4037ae:	2200      	movs	r2, #0
  4037b0:	805a      	strh	r2, [r3, #2]
	udi_cdc_tx_sof_num[port] = 0;
  4037b2:	79fb      	ldrb	r3, [r7, #7]
  4037b4:	4a24      	ldr	r2, [pc, #144]	; (403848 <udi_cdc_data_enable+0xd4>)
  4037b6:	2100      	movs	r1, #0
  4037b8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	udi_cdc_tx_send(port);
  4037bc:	79fb      	ldrb	r3, [r7, #7]
  4037be:	4618      	mov	r0, r3
  4037c0:	4b22      	ldr	r3, [pc, #136]	; (40384c <udi_cdc_data_enable+0xd8>)
  4037c2:	4798      	blx	r3

	// Initialize RX management
	udi_cdc_rx_trans_ongoing[port] = false;
  4037c4:	79fb      	ldrb	r3, [r7, #7]
  4037c6:	4a22      	ldr	r2, [pc, #136]	; (403850 <udi_cdc_data_enable+0xdc>)
  4037c8:	2100      	movs	r1, #0
  4037ca:	54d1      	strb	r1, [r2, r3]
	udi_cdc_rx_buf_sel[port] = 0;
  4037cc:	79fb      	ldrb	r3, [r7, #7]
  4037ce:	4a21      	ldr	r2, [pc, #132]	; (403854 <udi_cdc_data_enable+0xe0>)
  4037d0:	2100      	movs	r1, #0
  4037d2:	54d1      	strb	r1, [r2, r3]
	udi_cdc_rx_buf_nb[port][0] = 0;
  4037d4:	79fb      	ldrb	r3, [r7, #7]
  4037d6:	4a20      	ldr	r2, [pc, #128]	; (403858 <udi_cdc_data_enable+0xe4>)
  4037d8:	2100      	movs	r1, #0
  4037da:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
	udi_cdc_rx_buf_nb[port][1] = 0;
  4037de:	79fb      	ldrb	r3, [r7, #7]
  4037e0:	4a1d      	ldr	r2, [pc, #116]	; (403858 <udi_cdc_data_enable+0xe4>)
  4037e2:	009b      	lsls	r3, r3, #2
  4037e4:	4413      	add	r3, r2
  4037e6:	2200      	movs	r2, #0
  4037e8:	805a      	strh	r2, [r3, #2]
	udi_cdc_rx_pos[port] = 0;
  4037ea:	79fb      	ldrb	r3, [r7, #7]
  4037ec:	4a1b      	ldr	r2, [pc, #108]	; (40385c <udi_cdc_data_enable+0xe8>)
  4037ee:	2100      	movs	r1, #0
  4037f0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	if (!udi_cdc_rx_start(port)) {
  4037f4:	79fb      	ldrb	r3, [r7, #7]
  4037f6:	4618      	mov	r0, r3
  4037f8:	4b19      	ldr	r3, [pc, #100]	; (403860 <udi_cdc_data_enable+0xec>)
  4037fa:	4798      	blx	r3
  4037fc:	4603      	mov	r3, r0
  4037fe:	f083 0301 	eor.w	r3, r3, #1
  403802:	b2db      	uxtb	r3, r3
  403804:	2b00      	cmp	r3, #0
  403806:	d001      	beq.n	40380c <udi_cdc_data_enable+0x98>
		return false;
  403808:	2300      	movs	r3, #0
  40380a:	e00f      	b.n	40382c <udi_cdc_data_enable+0xb8>
	}
	udi_cdc_nb_data_enabled++;
  40380c:	4b09      	ldr	r3, [pc, #36]	; (403834 <udi_cdc_data_enable+0xc0>)
  40380e:	781b      	ldrb	r3, [r3, #0]
  403810:	b2db      	uxtb	r3, r3
  403812:	3301      	adds	r3, #1
  403814:	b2da      	uxtb	r2, r3
  403816:	4b07      	ldr	r3, [pc, #28]	; (403834 <udi_cdc_data_enable+0xc0>)
  403818:	701a      	strb	r2, [r3, #0]
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
  40381a:	4b06      	ldr	r3, [pc, #24]	; (403834 <udi_cdc_data_enable+0xc0>)
  40381c:	781b      	ldrb	r3, [r3, #0]
  40381e:	b2db      	uxtb	r3, r3
  403820:	2b01      	cmp	r3, #1
  403822:	d102      	bne.n	40382a <udi_cdc_data_enable+0xb6>
		udi_cdc_data_running = true;
  403824:	4b0f      	ldr	r3, [pc, #60]	; (403864 <udi_cdc_data_enable+0xf0>)
  403826:	2201      	movs	r2, #1
  403828:	701a      	strb	r2, [r3, #0]
	}
	return true;
  40382a:	2301      	movs	r3, #1
}
  40382c:	4618      	mov	r0, r3
  40382e:	3708      	adds	r7, #8
  403830:	46bd      	mov	sp, r7
  403832:	bd80      	pop	{r7, pc}
  403834:	20019cab 	.word	0x20019cab
  403838:	2001a1cc 	.word	0x2001a1cc
  40383c:	2001a1d0 	.word	0x2001a1d0
  403840:	2001a1c4 	.word	0x2001a1c4
  403844:	2001a1c0 	.word	0x2001a1c0
  403848:	2001a1c8 	.word	0x2001a1c8
  40384c:	00403c5d 	.word	0x00403c5d
  403850:	20019f3c 	.word	0x20019f3c
  403854:	20019f34 	.word	0x20019f34
  403858:	20019f30 	.word	0x20019f30
  40385c:	20019f38 	.word	0x20019f38
  403860:	00403a2d 	.word	0x00403a2d
  403864:	20019cac 	.word	0x20019cac

00403868 <udi_cdc_comm_disable>:

void udi_cdc_comm_disable(void)
{
  403868:	b480      	push	{r7}
  40386a:	af00      	add	r7, sp, #0
	Assert(udi_cdc_nb_comm_enabled != 0);
	udi_cdc_nb_comm_enabled--;
  40386c:	4b05      	ldr	r3, [pc, #20]	; (403884 <udi_cdc_comm_disable+0x1c>)
  40386e:	781b      	ldrb	r3, [r3, #0]
  403870:	b2db      	uxtb	r3, r3
  403872:	3b01      	subs	r3, #1
  403874:	b2da      	uxtb	r2, r3
  403876:	4b03      	ldr	r3, [pc, #12]	; (403884 <udi_cdc_comm_disable+0x1c>)
  403878:	701a      	strb	r2, [r3, #0]
}
  40387a:	bf00      	nop
  40387c:	46bd      	mov	sp, r7
  40387e:	f85d 7b04 	ldr.w	r7, [sp], #4
  403882:	4770      	bx	lr
  403884:	20019caa 	.word	0x20019caa

00403888 <udi_cdc_data_disable>:

void udi_cdc_data_disable(void)
{
  403888:	b580      	push	{r7, lr}
  40388a:	b082      	sub	sp, #8
  40388c:	af00      	add	r7, sp, #0
	uint8_t port;

	Assert(udi_cdc_nb_data_enabled != 0);
	udi_cdc_nb_data_enabled--;
  40388e:	4b0a      	ldr	r3, [pc, #40]	; (4038b8 <udi_cdc_data_disable+0x30>)
  403890:	781b      	ldrb	r3, [r3, #0]
  403892:	b2db      	uxtb	r3, r3
  403894:	3b01      	subs	r3, #1
  403896:	b2da      	uxtb	r2, r3
  403898:	4b07      	ldr	r3, [pc, #28]	; (4038b8 <udi_cdc_data_disable+0x30>)
  40389a:	701a      	strb	r2, [r3, #0]
	port = udi_cdc_nb_data_enabled;
  40389c:	4b06      	ldr	r3, [pc, #24]	; (4038b8 <udi_cdc_data_disable+0x30>)
  40389e:	781b      	ldrb	r3, [r3, #0]
  4038a0:	71fb      	strb	r3, [r7, #7]
	UDI_CDC_DISABLE_EXT(port);
  4038a2:	79fb      	ldrb	r3, [r7, #7]
  4038a4:	4618      	mov	r0, r3
  4038a6:	4b05      	ldr	r3, [pc, #20]	; (4038bc <udi_cdc_data_disable+0x34>)
  4038a8:	4798      	blx	r3
	udi_cdc_data_running = false;
  4038aa:	4b05      	ldr	r3, [pc, #20]	; (4038c0 <udi_cdc_data_disable+0x38>)
  4038ac:	2200      	movs	r2, #0
  4038ae:	701a      	strb	r2, [r3, #0]
}
  4038b0:	bf00      	nop
  4038b2:	3708      	adds	r7, #8
  4038b4:	46bd      	mov	sp, r7
  4038b6:	bd80      	pop	{r7, pc}
  4038b8:	20019cab 	.word	0x20019cab
  4038bc:	0040dd3d 	.word	0x0040dd3d
  4038c0:	20019cac 	.word	0x20019cac

004038c4 <udi_cdc_comm_setup>:

bool udi_cdc_comm_setup(void)
{
  4038c4:	b580      	push	{r7, lr}
  4038c6:	b082      	sub	sp, #8
  4038c8:	af00      	add	r7, sp, #0
	uint8_t port = udi_cdc_setup_to_port();
  4038ca:	4b31      	ldr	r3, [pc, #196]	; (403990 <udi_cdc_comm_setup+0xcc>)
  4038cc:	4798      	blx	r3
  4038ce:	4603      	mov	r3, r0
  4038d0:	71fb      	strb	r3, [r7, #7]

	if (Udd_setup_is_in()) {
  4038d2:	4b30      	ldr	r3, [pc, #192]	; (403994 <udi_cdc_comm_setup+0xd0>)
  4038d4:	781b      	ldrb	r3, [r3, #0]
  4038d6:	b25b      	sxtb	r3, r3
  4038d8:	2b00      	cmp	r3, #0
  4038da:	da1c      	bge.n	403916 <udi_cdc_comm_setup+0x52>
		// GET Interface Requests
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
  4038dc:	4b2d      	ldr	r3, [pc, #180]	; (403994 <udi_cdc_comm_setup+0xd0>)
  4038de:	781b      	ldrb	r3, [r3, #0]
  4038e0:	f003 0360 	and.w	r3, r3, #96	; 0x60
  4038e4:	2b20      	cmp	r3, #32
  4038e6:	d116      	bne.n	403916 <udi_cdc_comm_setup+0x52>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
  4038e8:	4b2a      	ldr	r3, [pc, #168]	; (403994 <udi_cdc_comm_setup+0xd0>)
  4038ea:	785b      	ldrb	r3, [r3, #1]
  4038ec:	2b21      	cmp	r3, #33	; 0x21
  4038ee:	d112      	bne.n	403916 <udi_cdc_comm_setup+0x52>
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
  4038f0:	4b28      	ldr	r3, [pc, #160]	; (403994 <udi_cdc_comm_setup+0xd0>)
  4038f2:	88db      	ldrh	r3, [r3, #6]
				if (sizeof(usb_cdc_line_coding_t) !=
  4038f4:	2b07      	cmp	r3, #7
  4038f6:	d001      	beq.n	4038fc <udi_cdc_comm_setup+0x38>
					return false; // Error for USB host
  4038f8:	2300      	movs	r3, #0
  4038fa:	e045      	b.n	403988 <udi_cdc_comm_setup+0xc4>
				udd_g_ctrlreq.payload =
						(uint8_t *) &
						udi_cdc_line_coding[port];
  4038fc:	79fa      	ldrb	r2, [r7, #7]
						(uint8_t *) &
  4038fe:	4613      	mov	r3, r2
  403900:	00db      	lsls	r3, r3, #3
  403902:	1a9b      	subs	r3, r3, r2
  403904:	4a24      	ldr	r2, [pc, #144]	; (403998 <udi_cdc_comm_setup+0xd4>)
  403906:	4413      	add	r3, r2
				udd_g_ctrlreq.payload =
  403908:	4a22      	ldr	r2, [pc, #136]	; (403994 <udi_cdc_comm_setup+0xd0>)
  40390a:	6093      	str	r3, [r2, #8]
				udd_g_ctrlreq.payload_size =
  40390c:	4b21      	ldr	r3, [pc, #132]	; (403994 <udi_cdc_comm_setup+0xd0>)
  40390e:	2207      	movs	r2, #7
  403910:	819a      	strh	r2, [r3, #12]
						sizeof(usb_cdc_line_coding_t);
				return true;
  403912:	2301      	movs	r3, #1
  403914:	e038      	b.n	403988 <udi_cdc_comm_setup+0xc4>
			}
		}
	}
	if (Udd_setup_is_out()) {
  403916:	4b1f      	ldr	r3, [pc, #124]	; (403994 <udi_cdc_comm_setup+0xd0>)
  403918:	781b      	ldrb	r3, [r3, #0]
  40391a:	b25b      	sxtb	r3, r3
  40391c:	2b00      	cmp	r3, #0
  40391e:	db32      	blt.n	403986 <udi_cdc_comm_setup+0xc2>
		// SET Interface Requests
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
  403920:	4b1c      	ldr	r3, [pc, #112]	; (403994 <udi_cdc_comm_setup+0xd0>)
  403922:	781b      	ldrb	r3, [r3, #0]
  403924:	f003 0360 	and.w	r3, r3, #96	; 0x60
  403928:	2b20      	cmp	r3, #32
  40392a:	d12c      	bne.n	403986 <udi_cdc_comm_setup+0xc2>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
  40392c:	4b19      	ldr	r3, [pc, #100]	; (403994 <udi_cdc_comm_setup+0xd0>)
  40392e:	785b      	ldrb	r3, [r3, #1]
  403930:	2b20      	cmp	r3, #32
  403932:	d002      	beq.n	40393a <udi_cdc_comm_setup+0x76>
  403934:	2b22      	cmp	r3, #34	; 0x22
  403936:	d016      	beq.n	403966 <udi_cdc_comm_setup+0xa2>
  403938:	e025      	b.n	403986 <udi_cdc_comm_setup+0xc2>
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
  40393a:	4b16      	ldr	r3, [pc, #88]	; (403994 <udi_cdc_comm_setup+0xd0>)
  40393c:	88db      	ldrh	r3, [r3, #6]
				if (sizeof(usb_cdc_line_coding_t) !=
  40393e:	2b07      	cmp	r3, #7
  403940:	d001      	beq.n	403946 <udi_cdc_comm_setup+0x82>
					return false; // Error for USB host
  403942:	2300      	movs	r3, #0
  403944:	e020      	b.n	403988 <udi_cdc_comm_setup+0xc4>
				udd_g_ctrlreq.callback =
  403946:	4b13      	ldr	r3, [pc, #76]	; (403994 <udi_cdc_comm_setup+0xd0>)
  403948:	4a14      	ldr	r2, [pc, #80]	; (40399c <udi_cdc_comm_setup+0xd8>)
  40394a:	611a      	str	r2, [r3, #16]
						udi_cdc_line_coding_received;
				udd_g_ctrlreq.payload =
						(uint8_t *) &
						udi_cdc_line_coding[port];
  40394c:	79fa      	ldrb	r2, [r7, #7]
						(uint8_t *) &
  40394e:	4613      	mov	r3, r2
  403950:	00db      	lsls	r3, r3, #3
  403952:	1a9b      	subs	r3, r3, r2
  403954:	4a10      	ldr	r2, [pc, #64]	; (403998 <udi_cdc_comm_setup+0xd4>)
  403956:	4413      	add	r3, r2
				udd_g_ctrlreq.payload =
  403958:	4a0e      	ldr	r2, [pc, #56]	; (403994 <udi_cdc_comm_setup+0xd0>)
  40395a:	6093      	str	r3, [r2, #8]
				udd_g_ctrlreq.payload_size =
  40395c:	4b0d      	ldr	r3, [pc, #52]	; (403994 <udi_cdc_comm_setup+0xd0>)
  40395e:	2207      	movs	r2, #7
  403960:	819a      	strh	r2, [r3, #12]
						sizeof(usb_cdc_line_coding_t);
				return true;
  403962:	2301      	movs	r3, #1
  403964:	e010      	b.n	403988 <udi_cdc_comm_setup+0xc4>
			case USB_REQ_CDC_SET_CONTROL_LINE_STATE:
				// According cdc spec 1.1 chapter 6.2.14
				UDI_CDC_SET_DTR_EXT(port, (0 !=
  403966:	4b0b      	ldr	r3, [pc, #44]	; (403994 <udi_cdc_comm_setup+0xd0>)
  403968:	885b      	ldrh	r3, [r3, #2]
  40396a:	f003 0301 	and.w	r3, r3, #1
  40396e:	2b00      	cmp	r3, #0
  403970:	bf14      	ite	ne
  403972:	2301      	movne	r3, #1
  403974:	2300      	moveq	r3, #0
  403976:	b2da      	uxtb	r2, r3
  403978:	79fb      	ldrb	r3, [r7, #7]
  40397a:	4611      	mov	r1, r2
  40397c:	4618      	mov	r0, r3
  40397e:	4b08      	ldr	r3, [pc, #32]	; (4039a0 <udi_cdc_comm_setup+0xdc>)
  403980:	4798      	blx	r3
						(udd_g_ctrlreq.req.wValue
						 & CDC_CTRL_SIGNAL_DTE_PRESENT)));
				UDI_CDC_SET_RTS_EXT(port, (0 !=
						(udd_g_ctrlreq.req.wValue
						 & CDC_CTRL_SIGNAL_ACTIVATE_CARRIER)));
				return true;
  403982:	2301      	movs	r3, #1
  403984:	e000      	b.n	403988 <udi_cdc_comm_setup+0xc4>
			}
		}
	}
	return false;  // request Not supported
  403986:	2300      	movs	r3, #0
}
  403988:	4618      	mov	r0, r3
  40398a:	3708      	adds	r7, #8
  40398c:	46bd      	mov	sp, r7
  40398e:	bd80      	pop	{r7, pc}
  403990:	004039e1 	.word	0x004039e1
  403994:	2001aba8 	.word	0x2001aba8
  403998:	20019c94 	.word	0x20019c94
  40399c:	00403a11 	.word	0x00403a11
  4039a0:	0040dd5d 	.word	0x0040dd5d

004039a4 <udi_cdc_data_setup>:

bool udi_cdc_data_setup(void)
{
  4039a4:	b480      	push	{r7}
  4039a6:	af00      	add	r7, sp, #0
	return false;  // request Not supported
  4039a8:	2300      	movs	r3, #0
}
  4039aa:	4618      	mov	r0, r3
  4039ac:	46bd      	mov	sp, r7
  4039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
  4039b2:	4770      	bx	lr

004039b4 <udi_cdc_getsetting>:

uint8_t udi_cdc_getsetting(void)
{
  4039b4:	b480      	push	{r7}
  4039b6:	af00      	add	r7, sp, #0
	return 0;      // CDC don't have multiple alternate setting
  4039b8:	2300      	movs	r3, #0
}
  4039ba:	4618      	mov	r0, r3
  4039bc:	46bd      	mov	sp, r7
  4039be:	f85d 7b04 	ldr.w	r7, [sp], #4
  4039c2:	4770      	bx	lr

004039c4 <udi_cdc_data_sof_notify>:

void udi_cdc_data_sof_notify(void)
{
  4039c4:	b580      	push	{r7, lr}
  4039c6:	af00      	add	r7, sp, #0
	static uint8_t port_notify = 0;

	// A call of udi_cdc_data_sof_notify() is done for each port
	udi_cdc_tx_send(port_notify);
  4039c8:	4b03      	ldr	r3, [pc, #12]	; (4039d8 <udi_cdc_data_sof_notify+0x14>)
  4039ca:	781b      	ldrb	r3, [r3, #0]
  4039cc:	4618      	mov	r0, r3
  4039ce:	4b03      	ldr	r3, [pc, #12]	; (4039dc <udi_cdc_data_sof_notify+0x18>)
  4039d0:	4798      	blx	r3
	port_notify++;
	if (port_notify >= UDI_CDC_PORT_NB) {
		port_notify = 0;
	}
#endif
}
  4039d2:	bf00      	nop
  4039d4:	bd80      	pop	{r7, pc}
  4039d6:	bf00      	nop
  4039d8:	2001a1d1 	.word	0x2001a1d1
  4039dc:	00403c5d 	.word	0x00403c5d

004039e0 <udi_cdc_setup_to_port>:

//-------------------------------------------------
//------- Internal routines to control serial line

static uint8_t udi_cdc_setup_to_port(void)
{
  4039e0:	b480      	push	{r7}
  4039e2:	b083      	sub	sp, #12
  4039e4:	af00      	add	r7, sp, #0
	uint8_t port;

	switch (udd_g_ctrlreq.req.wIndex & 0xFF) {
  4039e6:	4b09      	ldr	r3, [pc, #36]	; (403a0c <udi_cdc_setup_to_port+0x2c>)
  4039e8:	889b      	ldrh	r3, [r3, #4]
  4039ea:	b2db      	uxtb	r3, r3
  4039ec:	2b00      	cmp	r3, #0
  4039ee:	d102      	bne.n	4039f6 <udi_cdc_setup_to_port+0x16>
#define UDI_CDC_IFACE_COMM_TO_PORT(iface, unused) \
	case UDI_CDC_COMM_IFACE_NUMBER_##iface: \
		port = iface; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_IFACE_COMM_TO_PORT, ~)
  4039f0:	2300      	movs	r3, #0
  4039f2:	71fb      	strb	r3, [r7, #7]
  4039f4:	e002      	b.n	4039fc <udi_cdc_setup_to_port+0x1c>
#undef UDI_CDC_IFACE_COMM_TO_PORT
	default:
		port = 0;
  4039f6:	2300      	movs	r3, #0
  4039f8:	71fb      	strb	r3, [r7, #7]
		break;
  4039fa:	bf00      	nop
	}
	return port;
  4039fc:	79fb      	ldrb	r3, [r7, #7]
}
  4039fe:	4618      	mov	r0, r3
  403a00:	370c      	adds	r7, #12
  403a02:	46bd      	mov	sp, r7
  403a04:	f85d 7b04 	ldr.w	r7, [sp], #4
  403a08:	4770      	bx	lr
  403a0a:	bf00      	nop
  403a0c:	2001aba8 	.word	0x2001aba8

00403a10 <udi_cdc_line_coding_received>:

static void udi_cdc_line_coding_received(void)
{
  403a10:	b580      	push	{r7, lr}
  403a12:	b082      	sub	sp, #8
  403a14:	af00      	add	r7, sp, #0
	uint8_t port = udi_cdc_setup_to_port();
  403a16:	4b04      	ldr	r3, [pc, #16]	; (403a28 <udi_cdc_line_coding_received+0x18>)
  403a18:	4798      	blx	r3
  403a1a:	4603      	mov	r3, r0
  403a1c:	71fb      	strb	r3, [r7, #7]
	UNUSED(port);

	UDI_CDC_SET_CODING_EXT(port, (&udi_cdc_line_coding[port]));
}
  403a1e:	bf00      	nop
  403a20:	3708      	adds	r7, #8
  403a22:	46bd      	mov	sp, r7
  403a24:	bd80      	pop	{r7, pc}
  403a26:	bf00      	nop
  403a28:	004039e1 	.word	0x004039e1

00403a2c <udi_cdc_rx_start>:
//-------------------------------------------------
//------- Internal routines to process data transfer


static bool udi_cdc_rx_start(uint8_t port)
{
  403a2c:	b590      	push	{r4, r7, lr}
  403a2e:	b089      	sub	sp, #36	; 0x24
  403a30:	af02      	add	r7, sp, #8
  403a32:	4603      	mov	r3, r0
  403a34:	71fb      	strb	r3, [r7, #7]
	irqflags_t flags;
	uint8_t buf_sel_trans;
	udd_ep_id_t ep;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
  403a36:	2300      	movs	r3, #0
  403a38:	71fb      	strb	r3, [r7, #7]
#endif

	flags = cpu_irq_save();
  403a3a:	4b2f      	ldr	r3, [pc, #188]	; (403af8 <udi_cdc_rx_start+0xcc>)
  403a3c:	4798      	blx	r3
  403a3e:	6138      	str	r0, [r7, #16]
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
  403a40:	79fb      	ldrb	r3, [r7, #7]
  403a42:	4a2e      	ldr	r2, [pc, #184]	; (403afc <udi_cdc_rx_start+0xd0>)
  403a44:	5cd3      	ldrb	r3, [r2, r3]
  403a46:	73fb      	strb	r3, [r7, #15]
	if (udi_cdc_rx_trans_ongoing[port] ||
  403a48:	79fb      	ldrb	r3, [r7, #7]
  403a4a:	4a2d      	ldr	r2, [pc, #180]	; (403b00 <udi_cdc_rx_start+0xd4>)
  403a4c:	5cd3      	ldrb	r3, [r2, r3]
  403a4e:	b2db      	uxtb	r3, r3
  403a50:	2b00      	cmp	r3, #0
  403a52:	d10e      	bne.n	403a72 <udi_cdc_rx_start+0x46>
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
  403a54:	79fb      	ldrb	r3, [r7, #7]
  403a56:	4a2b      	ldr	r2, [pc, #172]	; (403b04 <udi_cdc_rx_start+0xd8>)
  403a58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
  403a5c:	b29a      	uxth	r2, r3
  403a5e:	79f9      	ldrb	r1, [r7, #7]
  403a60:	7bfb      	ldrb	r3, [r7, #15]
  403a62:	4829      	ldr	r0, [pc, #164]	; (403b08 <udi_cdc_rx_start+0xdc>)
  403a64:	0049      	lsls	r1, r1, #1
  403a66:	440b      	add	r3, r1
  403a68:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
  403a6c:	b29b      	uxth	r3, r3
	if (udi_cdc_rx_trans_ongoing[port] ||
  403a6e:	429a      	cmp	r2, r3
  403a70:	d204      	bcs.n	403a7c <udi_cdc_rx_start+0x50>
		// Transfer already on-going or current buffer no empty
		cpu_irq_restore(flags);
  403a72:	6938      	ldr	r0, [r7, #16]
  403a74:	4b25      	ldr	r3, [pc, #148]	; (403b0c <udi_cdc_rx_start+0xe0>)
  403a76:	4798      	blx	r3
		return false;
  403a78:	2300      	movs	r3, #0
  403a7a:	e039      	b.n	403af0 <udi_cdc_rx_start+0xc4>
	}

	// Change current buffer
	udi_cdc_rx_pos[port] = 0;
  403a7c:	79fb      	ldrb	r3, [r7, #7]
  403a7e:	4a21      	ldr	r2, [pc, #132]	; (403b04 <udi_cdc_rx_start+0xd8>)
  403a80:	2100      	movs	r1, #0
  403a82:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
  403a86:	79fb      	ldrb	r3, [r7, #7]
  403a88:	7bfa      	ldrb	r2, [r7, #15]
  403a8a:	2a00      	cmp	r2, #0
  403a8c:	bf0c      	ite	eq
  403a8e:	2201      	moveq	r2, #1
  403a90:	2200      	movne	r2, #0
  403a92:	b2d2      	uxtb	r2, r2
  403a94:	4611      	mov	r1, r2
  403a96:	4a19      	ldr	r2, [pc, #100]	; (403afc <udi_cdc_rx_start+0xd0>)
  403a98:	54d1      	strb	r1, [r2, r3]

	// Start transfer on RX
	udi_cdc_rx_trans_ongoing[port] = true;
  403a9a:	79fb      	ldrb	r3, [r7, #7]
  403a9c:	4a18      	ldr	r2, [pc, #96]	; (403b00 <udi_cdc_rx_start+0xd4>)
  403a9e:	2101      	movs	r1, #1
  403aa0:	54d1      	strb	r1, [r2, r3]
	cpu_irq_restore(flags);
  403aa2:	6938      	ldr	r0, [r7, #16]
  403aa4:	4b19      	ldr	r3, [pc, #100]	; (403b0c <udi_cdc_rx_start+0xe0>)
  403aa6:	4798      	blx	r3

	if (udi_cdc_multi_is_rx_ready(port)) {
  403aa8:	79fb      	ldrb	r3, [r7, #7]
  403aaa:	4618      	mov	r0, r3
  403aac:	4b18      	ldr	r3, [pc, #96]	; (403b10 <udi_cdc_rx_start+0xe4>)
  403aae:	4798      	blx	r3
		UDI_CDC_RX_NOTIFY(port);
	}
	// Send the buffer with enable of short packet
	switch (port) {
  403ab0:	79fb      	ldrb	r3, [r7, #7]
  403ab2:	2b00      	cmp	r3, #0
  403ab4:	d102      	bne.n	403abc <udi_cdc_rx_start+0x90>
#define UDI_CDC_PORT_TO_DATA_EP_OUT(index, unused) \
	case index: \
		ep = UDI_CDC_DATA_EP_OUT_##index; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_PORT_TO_DATA_EP_OUT, ~)
  403ab6:	2305      	movs	r3, #5
  403ab8:	75fb      	strb	r3, [r7, #23]
  403aba:	e002      	b.n	403ac2 <udi_cdc_rx_start+0x96>
#undef UDI_CDC_PORT_TO_DATA_EP_OUT
	default:
		ep = UDI_CDC_DATA_EP_OUT_0;
  403abc:	2305      	movs	r3, #5
  403abe:	75fb      	strb	r3, [r7, #23]
		break;
  403ac0:	bf00      	nop
	}
	return udd_ep_run(ep,
			true,
			udi_cdc_rx_buf[port][buf_sel_trans],
  403ac2:	79f9      	ldrb	r1, [r7, #7]
  403ac4:	7bfb      	ldrb	r3, [r7, #15]
  403ac6:	461a      	mov	r2, r3
  403ac8:	0092      	lsls	r2, r2, #2
  403aca:	441a      	add	r2, r3
  403acc:	0193      	lsls	r3, r2, #6
  403ace:	461a      	mov	r2, r3
  403ad0:	460b      	mov	r3, r1
  403ad2:	009b      	lsls	r3, r3, #2
  403ad4:	440b      	add	r3, r1
  403ad6:	01db      	lsls	r3, r3, #7
  403ad8:	4413      	add	r3, r2
  403ada:	4a0e      	ldr	r2, [pc, #56]	; (403b14 <udi_cdc_rx_start+0xe8>)
  403adc:	441a      	add	r2, r3
	return udd_ep_run(ep,
  403ade:	7df8      	ldrb	r0, [r7, #23]
  403ae0:	4b0d      	ldr	r3, [pc, #52]	; (403b18 <udi_cdc_rx_start+0xec>)
  403ae2:	9300      	str	r3, [sp, #0]
  403ae4:	f44f 73a0 	mov.w	r3, #320	; 0x140
  403ae8:	2101      	movs	r1, #1
  403aea:	4c0c      	ldr	r4, [pc, #48]	; (403b1c <udi_cdc_rx_start+0xf0>)
  403aec:	47a0      	blx	r4
  403aee:	4603      	mov	r3, r0
			UDI_CDC_RX_BUFFERS,
			udi_cdc_data_received);
}
  403af0:	4618      	mov	r0, r3
  403af2:	371c      	adds	r7, #28
  403af4:	46bd      	mov	sp, r7
  403af6:	bd90      	pop	{r4, r7, pc}
  403af8:	004035a9 	.word	0x004035a9
  403afc:	20019f34 	.word	0x20019f34
  403b00:	20019f3c 	.word	0x20019f3c
  403b04:	20019f38 	.word	0x20019f38
  403b08:	20019f30 	.word	0x20019f30
  403b0c:	00403601 	.word	0x00403601
  403b10:	00403ea5 	.word	0x00403ea5
  403b14:	20019cb0 	.word	0x20019cb0
  403b18:	00403b21 	.word	0x00403b21
  403b1c:	00407bf5 	.word	0x00407bf5

00403b20 <udi_cdc_data_received>:


static void udi_cdc_data_received(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
  403b20:	b590      	push	{r4, r7, lr}
  403b22:	b087      	sub	sp, #28
  403b24:	af02      	add	r7, sp, #8
  403b26:	4603      	mov	r3, r0
  403b28:	6039      	str	r1, [r7, #0]
  403b2a:	71fb      	strb	r3, [r7, #7]
  403b2c:	4613      	mov	r3, r2
  403b2e:	71bb      	strb	r3, [r7, #6]
	uint8_t buf_sel_trans;
	uint8_t port;

	switch (ep) {
  403b30:	79bb      	ldrb	r3, [r7, #6]
  403b32:	2b05      	cmp	r3, #5
  403b34:	d102      	bne.n	403b3c <udi_cdc_data_received+0x1c>
#define UDI_CDC_DATA_EP_OUT_TO_PORT(index, unused) \
	case UDI_CDC_DATA_EP_OUT_##index: \
		port = index; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_DATA_EP_OUT_TO_PORT, ~)
  403b36:	2300      	movs	r3, #0
  403b38:	73fb      	strb	r3, [r7, #15]
  403b3a:	e002      	b.n	403b42 <udi_cdc_data_received+0x22>
#undef UDI_CDC_DATA_EP_OUT_TO_PORT
	default:
		port = 0;
  403b3c:	2300      	movs	r3, #0
  403b3e:	73fb      	strb	r3, [r7, #15]
		break;
  403b40:	bf00      	nop
	}

	if (UDD_EP_TRANSFER_OK != status) {
  403b42:	79fb      	ldrb	r3, [r7, #7]
  403b44:	2b00      	cmp	r3, #0
  403b46:	d136      	bne.n	403bb6 <udi_cdc_data_received+0x96>
		// Abort reception
		return;
	}
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
  403b48:	7bfb      	ldrb	r3, [r7, #15]
  403b4a:	4a1d      	ldr	r2, [pc, #116]	; (403bc0 <udi_cdc_data_received+0xa0>)
  403b4c:	5cd3      	ldrb	r3, [r2, r3]
  403b4e:	b2db      	uxtb	r3, r3
  403b50:	2b00      	cmp	r3, #0
  403b52:	bf0c      	ite	eq
  403b54:	2301      	moveq	r3, #1
  403b56:	2300      	movne	r3, #0
  403b58:	b2db      	uxtb	r3, r3
  403b5a:	73bb      	strb	r3, [r7, #14]
	if (!n) {
  403b5c:	683b      	ldr	r3, [r7, #0]
  403b5e:	2b00      	cmp	r3, #0
  403b60:	d116      	bne.n	403b90 <udi_cdc_data_received+0x70>
		udd_ep_run( ep,
				true,
				udi_cdc_rx_buf[port][buf_sel_trans],
  403b62:	7bf9      	ldrb	r1, [r7, #15]
  403b64:	7bbb      	ldrb	r3, [r7, #14]
  403b66:	461a      	mov	r2, r3
  403b68:	0092      	lsls	r2, r2, #2
  403b6a:	441a      	add	r2, r3
  403b6c:	0193      	lsls	r3, r2, #6
  403b6e:	461a      	mov	r2, r3
  403b70:	460b      	mov	r3, r1
  403b72:	009b      	lsls	r3, r3, #2
  403b74:	440b      	add	r3, r1
  403b76:	01db      	lsls	r3, r3, #7
  403b78:	4413      	add	r3, r2
  403b7a:	4a12      	ldr	r2, [pc, #72]	; (403bc4 <udi_cdc_data_received+0xa4>)
  403b7c:	441a      	add	r2, r3
		udd_ep_run( ep,
  403b7e:	79b8      	ldrb	r0, [r7, #6]
  403b80:	4b11      	ldr	r3, [pc, #68]	; (403bc8 <udi_cdc_data_received+0xa8>)
  403b82:	9300      	str	r3, [sp, #0]
  403b84:	f44f 73a0 	mov.w	r3, #320	; 0x140
  403b88:	2101      	movs	r1, #1
  403b8a:	4c10      	ldr	r4, [pc, #64]	; (403bcc <udi_cdc_data_received+0xac>)
  403b8c:	47a0      	blx	r4
				UDI_CDC_RX_BUFFERS,
				udi_cdc_data_received);
		return;
  403b8e:	e013      	b.n	403bb8 <udi_cdc_data_received+0x98>
	}
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
  403b90:	7bfa      	ldrb	r2, [r7, #15]
  403b92:	7bbb      	ldrb	r3, [r7, #14]
  403b94:	6839      	ldr	r1, [r7, #0]
  403b96:	b288      	uxth	r0, r1
  403b98:	490d      	ldr	r1, [pc, #52]	; (403bd0 <udi_cdc_data_received+0xb0>)
  403b9a:	0052      	lsls	r2, r2, #1
  403b9c:	4413      	add	r3, r2
  403b9e:	4602      	mov	r2, r0
  403ba0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	udi_cdc_rx_trans_ongoing[port] = false;
  403ba4:	7bfb      	ldrb	r3, [r7, #15]
  403ba6:	4a0b      	ldr	r2, [pc, #44]	; (403bd4 <udi_cdc_data_received+0xb4>)
  403ba8:	2100      	movs	r1, #0
  403baa:	54d1      	strb	r1, [r2, r3]
	udi_cdc_rx_start(port);
  403bac:	7bfb      	ldrb	r3, [r7, #15]
  403bae:	4618      	mov	r0, r3
  403bb0:	4b09      	ldr	r3, [pc, #36]	; (403bd8 <udi_cdc_data_received+0xb8>)
  403bb2:	4798      	blx	r3
  403bb4:	e000      	b.n	403bb8 <udi_cdc_data_received+0x98>
		return;
  403bb6:	bf00      	nop
}
  403bb8:	3714      	adds	r7, #20
  403bba:	46bd      	mov	sp, r7
  403bbc:	bd90      	pop	{r4, r7, pc}
  403bbe:	bf00      	nop
  403bc0:	20019f34 	.word	0x20019f34
  403bc4:	20019cb0 	.word	0x20019cb0
  403bc8:	00403b21 	.word	0x00403b21
  403bcc:	00407bf5 	.word	0x00407bf5
  403bd0:	20019f30 	.word	0x20019f30
  403bd4:	20019f3c 	.word	0x20019f3c
  403bd8:	00403a2d 	.word	0x00403a2d

00403bdc <udi_cdc_data_sent>:


static void udi_cdc_data_sent(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
  403bdc:	b580      	push	{r7, lr}
  403bde:	b084      	sub	sp, #16
  403be0:	af00      	add	r7, sp, #0
  403be2:	4603      	mov	r3, r0
  403be4:	6039      	str	r1, [r7, #0]
  403be6:	71fb      	strb	r3, [r7, #7]
  403be8:	4613      	mov	r3, r2
  403bea:	71bb      	strb	r3, [r7, #6]
	uint8_t port;
	UNUSED(n);

	switch (ep) {
  403bec:	79bb      	ldrb	r3, [r7, #6]
  403bee:	2b84      	cmp	r3, #132	; 0x84
  403bf0:	d102      	bne.n	403bf8 <udi_cdc_data_sent+0x1c>
#define UDI_CDC_DATA_EP_IN_TO_PORT(index, unused) \
	case UDI_CDC_DATA_EP_IN_##index: \
		port = index; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_DATA_EP_IN_TO_PORT, ~)
  403bf2:	2300      	movs	r3, #0
  403bf4:	73fb      	strb	r3, [r7, #15]
  403bf6:	e002      	b.n	403bfe <udi_cdc_data_sent+0x22>
#undef UDI_CDC_DATA_EP_IN_TO_PORT
	default:
		port = 0;
  403bf8:	2300      	movs	r3, #0
  403bfa:	73fb      	strb	r3, [r7, #15]
		break;
  403bfc:	bf00      	nop
	}

	if (UDD_EP_TRANSFER_OK != status) {
  403bfe:	79fb      	ldrb	r3, [r7, #7]
  403c00:	2b00      	cmp	r3, #0
  403c02:	d11d      	bne.n	403c40 <udi_cdc_data_sent+0x64>
		// Abort transfer
		return;
	}
	udi_cdc_tx_buf_nb[port][(udi_cdc_tx_buf_sel[port]==0)?1:0] = 0;
  403c04:	7bfb      	ldrb	r3, [r7, #15]
  403c06:	7bfa      	ldrb	r2, [r7, #15]
  403c08:	490f      	ldr	r1, [pc, #60]	; (403c48 <udi_cdc_data_sent+0x6c>)
  403c0a:	5c8a      	ldrb	r2, [r1, r2]
  403c0c:	b2d2      	uxtb	r2, r2
  403c0e:	2a00      	cmp	r2, #0
  403c10:	bf0c      	ite	eq
  403c12:	2201      	moveq	r2, #1
  403c14:	2200      	movne	r2, #0
  403c16:	b2d2      	uxtb	r2, r2
  403c18:	4611      	mov	r1, r2
  403c1a:	4a0c      	ldr	r2, [pc, #48]	; (403c4c <udi_cdc_data_sent+0x70>)
  403c1c:	005b      	lsls	r3, r3, #1
  403c1e:	440b      	add	r3, r1
  403c20:	2100      	movs	r1, #0
  403c22:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	udi_cdc_tx_both_buf_to_send[port] = false;
  403c26:	7bfb      	ldrb	r3, [r7, #15]
  403c28:	4a09      	ldr	r2, [pc, #36]	; (403c50 <udi_cdc_data_sent+0x74>)
  403c2a:	2100      	movs	r1, #0
  403c2c:	54d1      	strb	r1, [r2, r3]
	udi_cdc_tx_trans_ongoing[port] = false;
  403c2e:	7bfb      	ldrb	r3, [r7, #15]
  403c30:	4a08      	ldr	r2, [pc, #32]	; (403c54 <udi_cdc_data_sent+0x78>)
  403c32:	2100      	movs	r1, #0
  403c34:	54d1      	strb	r1, [r2, r3]

	if (n != 0) {
		UDI_CDC_TX_EMPTY_NOTIFY(port);
	}
	udi_cdc_tx_send(port);
  403c36:	7bfb      	ldrb	r3, [r7, #15]
  403c38:	4618      	mov	r0, r3
  403c3a:	4b07      	ldr	r3, [pc, #28]	; (403c58 <udi_cdc_data_sent+0x7c>)
  403c3c:	4798      	blx	r3
  403c3e:	e000      	b.n	403c42 <udi_cdc_data_sent+0x66>
		return;
  403c40:	bf00      	nop
}
  403c42:	3710      	adds	r7, #16
  403c44:	46bd      	mov	sp, r7
  403c46:	bd80      	pop	{r7, pc}
  403c48:	2001a1c4 	.word	0x2001a1c4
  403c4c:	2001a1c0 	.word	0x2001a1c0
  403c50:	2001a1d0 	.word	0x2001a1d0
  403c54:	2001a1cc 	.word	0x2001a1cc
  403c58:	00403c5d 	.word	0x00403c5d

00403c5c <udi_cdc_tx_send>:


static void udi_cdc_tx_send(uint8_t port)
{
  403c5c:	b590      	push	{r4, r7, lr}
  403c5e:	b089      	sub	sp, #36	; 0x24
  403c60:	af02      	add	r7, sp, #8
  403c62:	4603      	mov	r3, r0
  403c64:	71fb      	strb	r3, [r7, #7]
	bool b_short_packet;
	udd_ep_id_t ep;
	static uint16_t sof_zlp_counter = 0;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
  403c66:	2300      	movs	r3, #0
  403c68:	71fb      	strb	r3, [r7, #7]
#endif

	if (udi_cdc_tx_trans_ongoing[port]) {
  403c6a:	79fb      	ldrb	r3, [r7, #7]
  403c6c:	4a66      	ldr	r2, [pc, #408]	; (403e08 <udi_cdc_tx_send+0x1ac>)
  403c6e:	5cd3      	ldrb	r3, [r2, r3]
  403c70:	b2db      	uxtb	r3, r3
  403c72:	2b00      	cmp	r3, #0
  403c74:	f040 80c2 	bne.w	403dfc <udi_cdc_tx_send+0x1a0>
		return; // Already on going or wait next SOF to send next data
	}
	if (udd_is_high_speed()) {
  403c78:	4b64      	ldr	r3, [pc, #400]	; (403e0c <udi_cdc_tx_send+0x1b0>)
  403c7a:	4798      	blx	r3
  403c7c:	4603      	mov	r3, r0
  403c7e:	2b00      	cmp	r3, #0
  403c80:	d009      	beq.n	403c96 <udi_cdc_tx_send+0x3a>
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
  403c82:	79fb      	ldrb	r3, [r7, #7]
  403c84:	4a62      	ldr	r2, [pc, #392]	; (403e10 <udi_cdc_tx_send+0x1b4>)
  403c86:	f832 4013 	ldrh.w	r4, [r2, r3, lsl #1]
  403c8a:	4b62      	ldr	r3, [pc, #392]	; (403e14 <udi_cdc_tx_send+0x1b8>)
  403c8c:	4798      	blx	r3
  403c8e:	4603      	mov	r3, r0
  403c90:	429c      	cmp	r4, r3
  403c92:	d10a      	bne.n	403caa <udi_cdc_tx_send+0x4e>
			return; // Wait next SOF to send next data
  403c94:	e0b5      	b.n	403e02 <udi_cdc_tx_send+0x1a6>
		}
	}else{
		if (udi_cdc_tx_sof_num[port] == udd_get_frame_number()) {
  403c96:	79fb      	ldrb	r3, [r7, #7]
  403c98:	4a5d      	ldr	r2, [pc, #372]	; (403e10 <udi_cdc_tx_send+0x1b4>)
  403c9a:	f832 4013 	ldrh.w	r4, [r2, r3, lsl #1]
  403c9e:	4b5e      	ldr	r3, [pc, #376]	; (403e18 <udi_cdc_tx_send+0x1bc>)
  403ca0:	4798      	blx	r3
  403ca2:	4603      	mov	r3, r0
  403ca4:	429c      	cmp	r4, r3
  403ca6:	f000 80ab 	beq.w	403e00 <udi_cdc_tx_send+0x1a4>
			return; // Wait next SOF to send next data
		}
	}

	flags = cpu_irq_save(); // to protect udi_cdc_tx_buf_sel
  403caa:	4b5c      	ldr	r3, [pc, #368]	; (403e1c <udi_cdc_tx_send+0x1c0>)
  403cac:	4798      	blx	r3
  403cae:	6138      	str	r0, [r7, #16]
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
  403cb0:	79fb      	ldrb	r3, [r7, #7]
  403cb2:	4a5b      	ldr	r2, [pc, #364]	; (403e20 <udi_cdc_tx_send+0x1c4>)
  403cb4:	5cd3      	ldrb	r3, [r2, r3]
  403cb6:	75fb      	strb	r3, [r7, #23]
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
  403cb8:	79fa      	ldrb	r2, [r7, #7]
  403cba:	7dfb      	ldrb	r3, [r7, #23]
  403cbc:	4959      	ldr	r1, [pc, #356]	; (403e24 <udi_cdc_tx_send+0x1c8>)
  403cbe:	0052      	lsls	r2, r2, #1
  403cc0:	4413      	add	r3, r2
  403cc2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
  403cc6:	2b00      	cmp	r3, #0
  403cc8:	d11f      	bne.n	403d0a <udi_cdc_tx_send+0xae>
		sof_zlp_counter++;
  403cca:	4b57      	ldr	r3, [pc, #348]	; (403e28 <udi_cdc_tx_send+0x1cc>)
  403ccc:	881b      	ldrh	r3, [r3, #0]
  403cce:	3301      	adds	r3, #1
  403cd0:	b29a      	uxth	r2, r3
  403cd2:	4b55      	ldr	r3, [pc, #340]	; (403e28 <udi_cdc_tx_send+0x1cc>)
  403cd4:	801a      	strh	r2, [r3, #0]
		if (((!udd_is_high_speed()) && (sof_zlp_counter < 100))
  403cd6:	4b4d      	ldr	r3, [pc, #308]	; (403e0c <udi_cdc_tx_send+0x1b0>)
  403cd8:	4798      	blx	r3
  403cda:	4603      	mov	r3, r0
  403cdc:	f083 0301 	eor.w	r3, r3, #1
  403ce0:	b2db      	uxtb	r3, r3
  403ce2:	2b00      	cmp	r3, #0
  403ce4:	d003      	beq.n	403cee <udi_cdc_tx_send+0x92>
  403ce6:	4b50      	ldr	r3, [pc, #320]	; (403e28 <udi_cdc_tx_send+0x1cc>)
  403ce8:	881b      	ldrh	r3, [r3, #0]
  403cea:	2b63      	cmp	r3, #99	; 0x63
  403cec:	d909      	bls.n	403d02 <udi_cdc_tx_send+0xa6>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
  403cee:	4b47      	ldr	r3, [pc, #284]	; (403e0c <udi_cdc_tx_send+0x1b0>)
  403cf0:	4798      	blx	r3
  403cf2:	4603      	mov	r3, r0
  403cf4:	2b00      	cmp	r3, #0
  403cf6:	d008      	beq.n	403d0a <udi_cdc_tx_send+0xae>
  403cf8:	4b4b      	ldr	r3, [pc, #300]	; (403e28 <udi_cdc_tx_send+0x1cc>)
  403cfa:	881b      	ldrh	r3, [r3, #0]
  403cfc:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
  403d00:	d203      	bcs.n	403d0a <udi_cdc_tx_send+0xae>
			cpu_irq_restore(flags);
  403d02:	6938      	ldr	r0, [r7, #16]
  403d04:	4b49      	ldr	r3, [pc, #292]	; (403e2c <udi_cdc_tx_send+0x1d0>)
  403d06:	4798      	blx	r3
			return;
  403d08:	e07b      	b.n	403e02 <udi_cdc_tx_send+0x1a6>
		}
	}
	sof_zlp_counter = 0;
  403d0a:	4b47      	ldr	r3, [pc, #284]	; (403e28 <udi_cdc_tx_send+0x1cc>)
  403d0c:	2200      	movs	r2, #0
  403d0e:	801a      	strh	r2, [r3, #0]

	if (!udi_cdc_tx_both_buf_to_send[port]) {
  403d10:	79fb      	ldrb	r3, [r7, #7]
  403d12:	4a47      	ldr	r2, [pc, #284]	; (403e30 <udi_cdc_tx_send+0x1d4>)
  403d14:	5cd3      	ldrb	r3, [r2, r3]
  403d16:	b2db      	uxtb	r3, r3
  403d18:	f083 0301 	eor.w	r3, r3, #1
  403d1c:	b2db      	uxtb	r3, r3
  403d1e:	2b00      	cmp	r3, #0
  403d20:	d00a      	beq.n	403d38 <udi_cdc_tx_send+0xdc>
		// Send current Buffer
		// and switch the current buffer
		udi_cdc_tx_buf_sel[port] = (buf_sel_trans==0)?1:0;
  403d22:	79fb      	ldrb	r3, [r7, #7]
  403d24:	7dfa      	ldrb	r2, [r7, #23]
  403d26:	2a00      	cmp	r2, #0
  403d28:	bf0c      	ite	eq
  403d2a:	2201      	moveq	r2, #1
  403d2c:	2200      	movne	r2, #0
  403d2e:	b2d2      	uxtb	r2, r2
  403d30:	4611      	mov	r1, r2
  403d32:	4a3b      	ldr	r2, [pc, #236]	; (403e20 <udi_cdc_tx_send+0x1c4>)
  403d34:	54d1      	strb	r1, [r2, r3]
  403d36:	e006      	b.n	403d46 <udi_cdc_tx_send+0xea>
	}else{
		// Send the other Buffer
		// and no switch the current buffer
		buf_sel_trans = (buf_sel_trans==0)?1:0;
  403d38:	7dfb      	ldrb	r3, [r7, #23]
  403d3a:	2b00      	cmp	r3, #0
  403d3c:	bf0c      	ite	eq
  403d3e:	2301      	moveq	r3, #1
  403d40:	2300      	movne	r3, #0
  403d42:	b2db      	uxtb	r3, r3
  403d44:	75fb      	strb	r3, [r7, #23]
	}
	udi_cdc_tx_trans_ongoing[port] = true;
  403d46:	79fb      	ldrb	r3, [r7, #7]
  403d48:	4a2f      	ldr	r2, [pc, #188]	; (403e08 <udi_cdc_tx_send+0x1ac>)
  403d4a:	2101      	movs	r1, #1
  403d4c:	54d1      	strb	r1, [r2, r3]
	cpu_irq_restore(flags);
  403d4e:	6938      	ldr	r0, [r7, #16]
  403d50:	4b36      	ldr	r3, [pc, #216]	; (403e2c <udi_cdc_tx_send+0x1d0>)
  403d52:	4798      	blx	r3

	b_short_packet = (udi_cdc_tx_buf_nb[port][buf_sel_trans] != UDI_CDC_TX_BUFFERS);
  403d54:	79fa      	ldrb	r2, [r7, #7]
  403d56:	7dfb      	ldrb	r3, [r7, #23]
  403d58:	4932      	ldr	r1, [pc, #200]	; (403e24 <udi_cdc_tx_send+0x1c8>)
  403d5a:	0052      	lsls	r2, r2, #1
  403d5c:	4413      	add	r3, r2
  403d5e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
  403d62:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
  403d66:	bf14      	ite	ne
  403d68:	2301      	movne	r3, #1
  403d6a:	2300      	moveq	r3, #0
  403d6c:	73fb      	strb	r3, [r7, #15]
	if (b_short_packet) {
  403d6e:	7bfb      	ldrb	r3, [r7, #15]
  403d70:	2b00      	cmp	r3, #0
  403d72:	d016      	beq.n	403da2 <udi_cdc_tx_send+0x146>
		if (udd_is_high_speed()) {
  403d74:	4b25      	ldr	r3, [pc, #148]	; (403e0c <udi_cdc_tx_send+0x1b0>)
  403d76:	4798      	blx	r3
  403d78:	4603      	mov	r3, r0
  403d7a:	2b00      	cmp	r3, #0
  403d7c:	d008      	beq.n	403d90 <udi_cdc_tx_send+0x134>
			udi_cdc_tx_sof_num[port] = udd_get_micro_frame_number();
  403d7e:	79fc      	ldrb	r4, [r7, #7]
  403d80:	4b24      	ldr	r3, [pc, #144]	; (403e14 <udi_cdc_tx_send+0x1b8>)
  403d82:	4798      	blx	r3
  403d84:	4603      	mov	r3, r0
  403d86:	461a      	mov	r2, r3
  403d88:	4b21      	ldr	r3, [pc, #132]	; (403e10 <udi_cdc_tx_send+0x1b4>)
  403d8a:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
  403d8e:	e00d      	b.n	403dac <udi_cdc_tx_send+0x150>
		}else{
			udi_cdc_tx_sof_num[port] = udd_get_frame_number();
  403d90:	79fc      	ldrb	r4, [r7, #7]
  403d92:	4b21      	ldr	r3, [pc, #132]	; (403e18 <udi_cdc_tx_send+0x1bc>)
  403d94:	4798      	blx	r3
  403d96:	4603      	mov	r3, r0
  403d98:	461a      	mov	r2, r3
  403d9a:	4b1d      	ldr	r3, [pc, #116]	; (403e10 <udi_cdc_tx_send+0x1b4>)
  403d9c:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
  403da0:	e004      	b.n	403dac <udi_cdc_tx_send+0x150>
		}
	}else{
		udi_cdc_tx_sof_num[port] = 0; // Force next transfer without wait SOF
  403da2:	79fb      	ldrb	r3, [r7, #7]
  403da4:	4a1a      	ldr	r2, [pc, #104]	; (403e10 <udi_cdc_tx_send+0x1b4>)
  403da6:	2100      	movs	r1, #0
  403da8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	}

	// Send the buffer with enable of short packet
	switch (port) {
  403dac:	79fb      	ldrb	r3, [r7, #7]
  403dae:	2b00      	cmp	r3, #0
  403db0:	d102      	bne.n	403db8 <udi_cdc_tx_send+0x15c>
#define UDI_CDC_PORT_TO_DATA_EP_IN(index, unused) \
	case index: \
		ep = UDI_CDC_DATA_EP_IN_##index; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_PORT_TO_DATA_EP_IN, ~)
  403db2:	2384      	movs	r3, #132	; 0x84
  403db4:	75bb      	strb	r3, [r7, #22]
  403db6:	e002      	b.n	403dbe <udi_cdc_tx_send+0x162>
#undef UDI_CDC_PORT_TO_DATA_EP_IN
	default:
		ep = UDI_CDC_DATA_EP_IN_0;
  403db8:	2384      	movs	r3, #132	; 0x84
  403dba:	75bb      	strb	r3, [r7, #22]
		break;
  403dbc:	bf00      	nop
	}
	udd_ep_run( ep,
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
  403dbe:	79f9      	ldrb	r1, [r7, #7]
  403dc0:	7dfb      	ldrb	r3, [r7, #23]
  403dc2:	461a      	mov	r2, r3
  403dc4:	0092      	lsls	r2, r2, #2
  403dc6:	441a      	add	r2, r3
  403dc8:	0193      	lsls	r3, r2, #6
  403dca:	461a      	mov	r2, r3
  403dcc:	460b      	mov	r3, r1
  403dce:	009b      	lsls	r3, r3, #2
  403dd0:	440b      	add	r3, r1
  403dd2:	01db      	lsls	r3, r3, #7
  403dd4:	4413      	add	r3, r2
  403dd6:	4a17      	ldr	r2, [pc, #92]	; (403e34 <udi_cdc_tx_send+0x1d8>)
  403dd8:	189c      	adds	r4, r3, r2
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
  403dda:	79fa      	ldrb	r2, [r7, #7]
  403ddc:	7dfb      	ldrb	r3, [r7, #23]
  403dde:	4911      	ldr	r1, [pc, #68]	; (403e24 <udi_cdc_tx_send+0x1c8>)
  403de0:	0052      	lsls	r2, r2, #1
  403de2:	4413      	add	r3, r2
  403de4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
	udd_ep_run( ep,
  403de8:	461a      	mov	r2, r3
  403dea:	7bf9      	ldrb	r1, [r7, #15]
  403dec:	7db8      	ldrb	r0, [r7, #22]
  403dee:	4b12      	ldr	r3, [pc, #72]	; (403e38 <udi_cdc_tx_send+0x1dc>)
  403df0:	9300      	str	r3, [sp, #0]
  403df2:	4613      	mov	r3, r2
  403df4:	4622      	mov	r2, r4
  403df6:	4c11      	ldr	r4, [pc, #68]	; (403e3c <udi_cdc_tx_send+0x1e0>)
  403df8:	47a0      	blx	r4
  403dfa:	e002      	b.n	403e02 <udi_cdc_tx_send+0x1a6>
		return; // Already on going or wait next SOF to send next data
  403dfc:	bf00      	nop
  403dfe:	e000      	b.n	403e02 <udi_cdc_tx_send+0x1a6>
			return; // Wait next SOF to send next data
  403e00:	bf00      	nop
			udi_cdc_data_sent);
}
  403e02:	371c      	adds	r7, #28
  403e04:	46bd      	mov	sp, r7
  403e06:	bd90      	pop	{r4, r7, pc}
  403e08:	2001a1cc 	.word	0x2001a1cc
  403e0c:	00407471 	.word	0x00407471
  403e10:	2001a1c8 	.word	0x2001a1c8
  403e14:	00407535 	.word	0x00407535
  403e18:	00407515 	.word	0x00407515
  403e1c:	004035a9 	.word	0x004035a9
  403e20:	2001a1c4 	.word	0x2001a1c4
  403e24:	2001a1c0 	.word	0x2001a1c0
  403e28:	2001a1d2 	.word	0x2001a1d2
  403e2c:	00403601 	.word	0x00403601
  403e30:	2001a1d0 	.word	0x2001a1d0
  403e34:	20019f40 	.word	0x20019f40
  403e38:	00403bdd 	.word	0x00403bdd
  403e3c:	00407bf5 	.word	0x00407bf5

00403e40 <udi_cdc_multi_get_nb_received_data>:
{
	udi_cdc_ctrl_state_change(port, true, CDC_SERIAL_STATE_OVERRUN);
}

iram_size_t udi_cdc_multi_get_nb_received_data(uint8_t port)
{
  403e40:	b580      	push	{r7, lr}
  403e42:	b086      	sub	sp, #24
  403e44:	af00      	add	r7, sp, #0
  403e46:	4603      	mov	r3, r0
  403e48:	71fb      	strb	r3, [r7, #7]
	irqflags_t flags;
	uint16_t pos;
	iram_size_t nb_received;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
  403e4a:	2300      	movs	r3, #0
  403e4c:	71fb      	strb	r3, [r7, #7]
#endif
	flags = cpu_irq_save();
  403e4e:	4b10      	ldr	r3, [pc, #64]	; (403e90 <udi_cdc_multi_get_nb_received_data+0x50>)
  403e50:	4798      	blx	r3
  403e52:	6178      	str	r0, [r7, #20]
	pos = udi_cdc_rx_pos[port];
  403e54:	79fb      	ldrb	r3, [r7, #7]
  403e56:	4a0f      	ldr	r2, [pc, #60]	; (403e94 <udi_cdc_multi_get_nb_received_data+0x54>)
  403e58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
  403e5c:	827b      	strh	r3, [r7, #18]
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
  403e5e:	79fb      	ldrb	r3, [r7, #7]
  403e60:	79fa      	ldrb	r2, [r7, #7]
  403e62:	490d      	ldr	r1, [pc, #52]	; (403e98 <udi_cdc_multi_get_nb_received_data+0x58>)
  403e64:	5c8a      	ldrb	r2, [r1, r2]
  403e66:	b2d2      	uxtb	r2, r2
  403e68:	4611      	mov	r1, r2
  403e6a:	4a0c      	ldr	r2, [pc, #48]	; (403e9c <udi_cdc_multi_get_nb_received_data+0x5c>)
  403e6c:	005b      	lsls	r3, r3, #1
  403e6e:	440b      	add	r3, r1
  403e70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
  403e74:	b29b      	uxth	r3, r3
  403e76:	461a      	mov	r2, r3
  403e78:	8a7b      	ldrh	r3, [r7, #18]
  403e7a:	1ad3      	subs	r3, r2, r3
  403e7c:	60fb      	str	r3, [r7, #12]
	cpu_irq_restore(flags);
  403e7e:	6978      	ldr	r0, [r7, #20]
  403e80:	4b07      	ldr	r3, [pc, #28]	; (403ea0 <udi_cdc_multi_get_nb_received_data+0x60>)
  403e82:	4798      	blx	r3
	return nb_received;
  403e84:	68fb      	ldr	r3, [r7, #12]
}
  403e86:	4618      	mov	r0, r3
  403e88:	3718      	adds	r7, #24
  403e8a:	46bd      	mov	sp, r7
  403e8c:	bd80      	pop	{r7, pc}
  403e8e:	bf00      	nop
  403e90:	004035a9 	.word	0x004035a9
  403e94:	20019f38 	.word	0x20019f38
  403e98:	20019f34 	.word	0x20019f34
  403e9c:	20019f30 	.word	0x20019f30
  403ea0:	00403601 	.word	0x00403601

00403ea4 <udi_cdc_multi_is_rx_ready>:
{
	return udi_cdc_multi_get_nb_received_data(0);
}

bool udi_cdc_multi_is_rx_ready(uint8_t port)
{
  403ea4:	b580      	push	{r7, lr}
  403ea6:	b082      	sub	sp, #8
  403ea8:	af00      	add	r7, sp, #0
  403eaa:	4603      	mov	r3, r0
  403eac:	71fb      	strb	r3, [r7, #7]
	return (udi_cdc_multi_get_nb_received_data(port) > 0);
  403eae:	79fb      	ldrb	r3, [r7, #7]
  403eb0:	4618      	mov	r0, r3
  403eb2:	4b06      	ldr	r3, [pc, #24]	; (403ecc <udi_cdc_multi_is_rx_ready+0x28>)
  403eb4:	4798      	blx	r3
  403eb6:	4603      	mov	r3, r0
  403eb8:	2b00      	cmp	r3, #0
  403eba:	bf14      	ite	ne
  403ebc:	2301      	movne	r3, #1
  403ebe:	2300      	moveq	r3, #0
  403ec0:	b2db      	uxtb	r3, r3
}
  403ec2:	4618      	mov	r0, r3
  403ec4:	3708      	adds	r7, #8
  403ec6:	46bd      	mov	sp, r7
  403ec8:	bd80      	pop	{r7, pc}
  403eca:	bf00      	nop
  403ecc:	00403e41 	.word	0x00403e41

00403ed0 <udi_msc_enable>:

//@}


bool udi_msc_enable(void)
{
  403ed0:	b580      	push	{r7, lr}
  403ed2:	b082      	sub	sp, #8
  403ed4:	af00      	add	r7, sp, #0
	uint8_t lun;
	udi_msc_b_trans_req = false;
  403ed6:	4b1f      	ldr	r3, [pc, #124]	; (403f54 <udi_msc_enable+0x84>)
  403ed8:	2200      	movs	r2, #0
  403eda:	701a      	strb	r2, [r3, #0]
	udi_msc_b_cbw_invalid = false;
  403edc:	4b1e      	ldr	r3, [pc, #120]	; (403f58 <udi_msc_enable+0x88>)
  403ede:	2200      	movs	r2, #0
  403ee0:	701a      	strb	r2, [r3, #0]
	udi_msc_b_ack_trans = true;
  403ee2:	4b1e      	ldr	r3, [pc, #120]	; (403f5c <udi_msc_enable+0x8c>)
  403ee4:	2201      	movs	r2, #1
  403ee6:	701a      	strb	r2, [r3, #0]
	udi_msc_b_reset_trans = true;
  403ee8:	4b1d      	ldr	r3, [pc, #116]	; (403f60 <udi_msc_enable+0x90>)
  403eea:	2201      	movs	r2, #1
  403eec:	701a      	strb	r2, [r3, #0]
	udi_msc_nb_lun = get_nb_lun();
  403eee:	4b1d      	ldr	r3, [pc, #116]	; (403f64 <udi_msc_enable+0x94>)
  403ef0:	4798      	blx	r3
  403ef2:	4603      	mov	r3, r0
  403ef4:	461a      	mov	r2, r3
  403ef6:	4b1c      	ldr	r3, [pc, #112]	; (403f68 <udi_msc_enable+0x98>)
  403ef8:	701a      	strb	r2, [r3, #0]
	if (0 == udi_msc_nb_lun)
  403efa:	4b1b      	ldr	r3, [pc, #108]	; (403f68 <udi_msc_enable+0x98>)
  403efc:	781b      	ldrb	r3, [r3, #0]
  403efe:	2b00      	cmp	r3, #0
  403f00:	d101      	bne.n	403f06 <udi_msc_enable+0x36>
		return false; // No lun available, then not authorize to enable interface
  403f02:	2300      	movs	r3, #0
  403f04:	e022      	b.n	403f4c <udi_msc_enable+0x7c>
	udi_msc_nb_lun--;
  403f06:	4b18      	ldr	r3, [pc, #96]	; (403f68 <udi_msc_enable+0x98>)
  403f08:	781b      	ldrb	r3, [r3, #0]
  403f0a:	3b01      	subs	r3, #1
  403f0c:	b2da      	uxtb	r2, r3
  403f0e:	4b16      	ldr	r3, [pc, #88]	; (403f68 <udi_msc_enable+0x98>)
  403f10:	701a      	strb	r2, [r3, #0]
	// Call application callback
	// to initialize memories or signal that interface is enabled
	if (!UDI_MSC_ENABLE_EXT())
  403f12:	4b16      	ldr	r3, [pc, #88]	; (403f6c <udi_msc_enable+0x9c>)
  403f14:	4798      	blx	r3
  403f16:	4603      	mov	r3, r0
  403f18:	f083 0301 	eor.w	r3, r3, #1
  403f1c:	b2db      	uxtb	r3, r3
  403f1e:	2b00      	cmp	r3, #0
  403f20:	d001      	beq.n	403f26 <udi_msc_enable+0x56>
		return false;
  403f22:	2300      	movs	r3, #0
  403f24:	e012      	b.n	403f4c <udi_msc_enable+0x7c>
	// Load the medium on each LUN
	for (lun = 0; lun <= udi_msc_nb_lun; lun ++) {
  403f26:	2300      	movs	r3, #0
  403f28:	71fb      	strb	r3, [r7, #7]
  403f2a:	e007      	b.n	403f3c <udi_msc_enable+0x6c>
		mem_unload(lun, false);
  403f2c:	79fb      	ldrb	r3, [r7, #7]
  403f2e:	2100      	movs	r1, #0
  403f30:	4618      	mov	r0, r3
  403f32:	4b0f      	ldr	r3, [pc, #60]	; (403f70 <udi_msc_enable+0xa0>)
  403f34:	4798      	blx	r3
	for (lun = 0; lun <= udi_msc_nb_lun; lun ++) {
  403f36:	79fb      	ldrb	r3, [r7, #7]
  403f38:	3301      	adds	r3, #1
  403f3a:	71fb      	strb	r3, [r7, #7]
  403f3c:	4b0a      	ldr	r3, [pc, #40]	; (403f68 <udi_msc_enable+0x98>)
  403f3e:	781b      	ldrb	r3, [r3, #0]
  403f40:	79fa      	ldrb	r2, [r7, #7]
  403f42:	429a      	cmp	r2, r3
  403f44:	d9f2      	bls.n	403f2c <udi_msc_enable+0x5c>
	}
	// Start MSC process by CBW reception
	udi_msc_cbw_wait();
  403f46:	4b0b      	ldr	r3, [pc, #44]	; (403f74 <udi_msc_enable+0xa4>)
  403f48:	4798      	blx	r3
	return true;
  403f4a:	2301      	movs	r3, #1
}
  403f4c:	4618      	mov	r0, r3
  403f4e:	3708      	adds	r7, #8
  403f50:	46bd      	mov	sp, r7
  403f52:	bd80      	pop	{r7, pc}
  403f54:	2001a20b 	.word	0x2001a20b
  403f58:	2001a20a 	.word	0x2001a20a
  403f5c:	20000201 	.word	0x20000201
  403f60:	20000202 	.word	0x20000202
  403f64:	00403269 	.word	0x00403269
  403f68:	2001a1f4 	.word	0x2001a1f4
  403f6c:	0040dce5 	.word	0x0040dce5
  403f70:	00403319 	.word	0x00403319
  403f74:	004040e9 	.word	0x004040e9

00403f78 <udi_msc_disable>:


void udi_msc_disable(void)
{
  403f78:	b580      	push	{r7, lr}
  403f7a:	af00      	add	r7, sp, #0
	udi_msc_b_trans_req = false;
  403f7c:	4b06      	ldr	r3, [pc, #24]	; (403f98 <udi_msc_disable+0x20>)
  403f7e:	2200      	movs	r2, #0
  403f80:	701a      	strb	r2, [r3, #0]
	udi_msc_b_ack_trans = true;
  403f82:	4b06      	ldr	r3, [pc, #24]	; (403f9c <udi_msc_disable+0x24>)
  403f84:	2201      	movs	r2, #1
  403f86:	701a      	strb	r2, [r3, #0]
	udi_msc_b_reset_trans = true;
  403f88:	4b05      	ldr	r3, [pc, #20]	; (403fa0 <udi_msc_disable+0x28>)
  403f8a:	2201      	movs	r2, #1
  403f8c:	701a      	strb	r2, [r3, #0]
	UDI_MSC_DISABLE_EXT();
  403f8e:	4b05      	ldr	r3, [pc, #20]	; (403fa4 <udi_msc_disable+0x2c>)
  403f90:	4798      	blx	r3
}
  403f92:	bf00      	nop
  403f94:	bd80      	pop	{r7, pc}
  403f96:	bf00      	nop
  403f98:	2001a20b 	.word	0x2001a20b
  403f9c:	20000201 	.word	0x20000201
  403fa0:	20000202 	.word	0x20000202
  403fa4:	0040dd01 	.word	0x0040dd01

00403fa8 <udi_msc_setup>:


bool udi_msc_setup(void)
{
  403fa8:	b580      	push	{r7, lr}
  403faa:	af00      	add	r7, sp, #0
	if (Udd_setup_is_in()) {
  403fac:	4b28      	ldr	r3, [pc, #160]	; (404050 <udi_msc_setup+0xa8>)
  403fae:	781b      	ldrb	r3, [r3, #0]
  403fb0:	b25b      	sxtb	r3, r3
  403fb2:	2b00      	cmp	r3, #0
  403fb4:	da1d      	bge.n	403ff2 <udi_msc_setup+0x4a>
		// Requests Interface GET
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
  403fb6:	4b26      	ldr	r3, [pc, #152]	; (404050 <udi_msc_setup+0xa8>)
  403fb8:	781b      	ldrb	r3, [r3, #0]
  403fba:	f003 0360 	and.w	r3, r3, #96	; 0x60
  403fbe:	2b20      	cmp	r3, #32
  403fc0:	d117      	bne.n	403ff2 <udi_msc_setup+0x4a>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
  403fc2:	4b23      	ldr	r3, [pc, #140]	; (404050 <udi_msc_setup+0xa8>)
  403fc4:	785b      	ldrb	r3, [r3, #1]
  403fc6:	2bfe      	cmp	r3, #254	; 0xfe
  403fc8:	d113      	bne.n	403ff2 <udi_msc_setup+0x4a>
			case USB_REQ_MSC_GET_MAX_LUN:
				// Give the number of memories available
				if (1 != udd_g_ctrlreq.req.wLength)
  403fca:	4b21      	ldr	r3, [pc, #132]	; (404050 <udi_msc_setup+0xa8>)
  403fcc:	88db      	ldrh	r3, [r3, #6]
  403fce:	2b01      	cmp	r3, #1
  403fd0:	d001      	beq.n	403fd6 <udi_msc_setup+0x2e>
					return false;	// Error for USB host
  403fd2:	2300      	movs	r3, #0
  403fd4:	e039      	b.n	40404a <udi_msc_setup+0xa2>
				if (0 != udd_g_ctrlreq.req.wValue)
  403fd6:	4b1e      	ldr	r3, [pc, #120]	; (404050 <udi_msc_setup+0xa8>)
  403fd8:	885b      	ldrh	r3, [r3, #2]
  403fda:	2b00      	cmp	r3, #0
  403fdc:	d001      	beq.n	403fe2 <udi_msc_setup+0x3a>
					return false;
  403fde:	2300      	movs	r3, #0
  403fe0:	e033      	b.n	40404a <udi_msc_setup+0xa2>
				udd_g_ctrlreq.payload = &udi_msc_nb_lun;
  403fe2:	4b1b      	ldr	r3, [pc, #108]	; (404050 <udi_msc_setup+0xa8>)
  403fe4:	4a1b      	ldr	r2, [pc, #108]	; (404054 <udi_msc_setup+0xac>)
  403fe6:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size = 1;
  403fe8:	4b19      	ldr	r3, [pc, #100]	; (404050 <udi_msc_setup+0xa8>)
  403fea:	2201      	movs	r2, #1
  403fec:	819a      	strh	r2, [r3, #12]
				return true;
  403fee:	2301      	movs	r3, #1
  403ff0:	e02b      	b.n	40404a <udi_msc_setup+0xa2>
			}
		}
	}
	if (Udd_setup_is_out()) {
  403ff2:	4b17      	ldr	r3, [pc, #92]	; (404050 <udi_msc_setup+0xa8>)
  403ff4:	781b      	ldrb	r3, [r3, #0]
  403ff6:	b25b      	sxtb	r3, r3
  403ff8:	2b00      	cmp	r3, #0
  403ffa:	db25      	blt.n	404048 <udi_msc_setup+0xa0>
		// Requests Interface SET
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
  403ffc:	4b14      	ldr	r3, [pc, #80]	; (404050 <udi_msc_setup+0xa8>)
  403ffe:	781b      	ldrb	r3, [r3, #0]
  404000:	f003 0360 	and.w	r3, r3, #96	; 0x60
  404004:	2b20      	cmp	r3, #32
  404006:	d11f      	bne.n	404048 <udi_msc_setup+0xa0>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
  404008:	4b11      	ldr	r3, [pc, #68]	; (404050 <udi_msc_setup+0xa8>)
  40400a:	785b      	ldrb	r3, [r3, #1]
  40400c:	2bff      	cmp	r3, #255	; 0xff
  40400e:	d11b      	bne.n	404048 <udi_msc_setup+0xa0>
			case USB_REQ_MSC_BULK_RESET:
				// Reset MSC interface
				if (0 != udd_g_ctrlreq.req.wLength)
  404010:	4b0f      	ldr	r3, [pc, #60]	; (404050 <udi_msc_setup+0xa8>)
  404012:	88db      	ldrh	r3, [r3, #6]
  404014:	2b00      	cmp	r3, #0
  404016:	d001      	beq.n	40401c <udi_msc_setup+0x74>
					return false;
  404018:	2300      	movs	r3, #0
  40401a:	e016      	b.n	40404a <udi_msc_setup+0xa2>
				if (0 != udd_g_ctrlreq.req.wValue)
  40401c:	4b0c      	ldr	r3, [pc, #48]	; (404050 <udi_msc_setup+0xa8>)
  40401e:	885b      	ldrh	r3, [r3, #2]
  404020:	2b00      	cmp	r3, #0
  404022:	d001      	beq.n	404028 <udi_msc_setup+0x80>
					return false;
  404024:	2300      	movs	r3, #0
  404026:	e010      	b.n	40404a <udi_msc_setup+0xa2>
				udi_msc_b_cbw_invalid = false;
  404028:	4b0b      	ldr	r3, [pc, #44]	; (404058 <udi_msc_setup+0xb0>)
  40402a:	2200      	movs	r2, #0
  40402c:	701a      	strb	r2, [r3, #0]
				udi_msc_b_trans_req = false;
  40402e:	4b0b      	ldr	r3, [pc, #44]	; (40405c <udi_msc_setup+0xb4>)
  404030:	2200      	movs	r2, #0
  404032:	701a      	strb	r2, [r3, #0]
				// Abort all tasks (transfer or clear stall wait) on endpoints
				udd_ep_abort(UDI_MSC_EP_OUT);
  404034:	2002      	movs	r0, #2
  404036:	4b0a      	ldr	r3, [pc, #40]	; (404060 <udi_msc_setup+0xb8>)
  404038:	4798      	blx	r3
				udd_ep_abort(UDI_MSC_EP_IN);
  40403a:	2081      	movs	r0, #129	; 0x81
  40403c:	4b08      	ldr	r3, [pc, #32]	; (404060 <udi_msc_setup+0xb8>)
  40403e:	4798      	blx	r3
				// Restart by CBW wait
				udi_msc_cbw_wait();
  404040:	4b08      	ldr	r3, [pc, #32]	; (404064 <udi_msc_setup+0xbc>)
  404042:	4798      	blx	r3
				return true;
  404044:	2301      	movs	r3, #1
  404046:	e000      	b.n	40404a <udi_msc_setup+0xa2>
			}
		}
	}
	return false;	// Not supported request
  404048:	2300      	movs	r3, #0
}
  40404a:	4618      	mov	r0, r3
  40404c:	bd80      	pop	{r7, pc}
  40404e:	bf00      	nop
  404050:	2001aba8 	.word	0x2001aba8
  404054:	2001a1f4 	.word	0x2001a1f4
  404058:	2001a20a 	.word	0x2001a20a
  40405c:	2001a20b 	.word	0x2001a20b
  404060:	00407d4d 	.word	0x00407d4d
  404064:	004040e9 	.word	0x004040e9

00404068 <udi_msc_getsetting>:

uint8_t udi_msc_getsetting(void)
{
  404068:	b480      	push	{r7}
  40406a:	af00      	add	r7, sp, #0
	return 0;	// MSC don't have multiple alternate setting
  40406c:	2300      	movs	r3, #0
}
  40406e:	4618      	mov	r0, r3
  404070:	46bd      	mov	sp, r7
  404072:	f85d 7b04 	ldr.w	r7, [sp], #4
  404076:	4770      	bx	lr

00404078 <udi_msc_cbw_invalid>:

//---------------------------------------------
//------- Routines to process CBW packet

static void udi_msc_cbw_invalid(void)
{
  404078:	b580      	push	{r7, lr}
  40407a:	af00      	add	r7, sp, #0
	if (!udi_msc_b_cbw_invalid)
  40407c:	4b08      	ldr	r3, [pc, #32]	; (4040a0 <udi_msc_cbw_invalid+0x28>)
  40407e:	781b      	ldrb	r3, [r3, #0]
  404080:	f083 0301 	eor.w	r3, r3, #1
  404084:	b2db      	uxtb	r3, r3
  404086:	2b00      	cmp	r3, #0
  404088:	d107      	bne.n	40409a <udi_msc_cbw_invalid+0x22>
		return;	// Don't re-stall endpoint if error reseted by setup
	udd_ep_set_halt(UDI_MSC_EP_OUT);
  40408a:	2002      	movs	r0, #2
  40408c:	4b05      	ldr	r3, [pc, #20]	; (4040a4 <udi_msc_cbw_invalid+0x2c>)
  40408e:	4798      	blx	r3
	// If stall cleared then re-stall it. Only Setup MSC Reset can clear it
	udd_ep_wait_stall_clear(UDI_MSC_EP_OUT, udi_msc_cbw_invalid);
  404090:	4905      	ldr	r1, [pc, #20]	; (4040a8 <udi_msc_cbw_invalid+0x30>)
  404092:	2002      	movs	r0, #2
  404094:	4b05      	ldr	r3, [pc, #20]	; (4040ac <udi_msc_cbw_invalid+0x34>)
  404096:	4798      	blx	r3
  404098:	e000      	b.n	40409c <udi_msc_cbw_invalid+0x24>
		return;	// Don't re-stall endpoint if error reseted by setup
  40409a:	bf00      	nop
}
  40409c:	bd80      	pop	{r7, pc}
  40409e:	bf00      	nop
  4040a0:	2001a20a 	.word	0x2001a20a
  4040a4:	00407869 	.word	0x00407869
  4040a8:	00404079 	.word	0x00404079
  4040ac:	00407fc1 	.word	0x00407fc1

004040b0 <udi_msc_csw_invalid>:

static void udi_msc_csw_invalid(void)
{
  4040b0:	b580      	push	{r7, lr}
  4040b2:	af00      	add	r7, sp, #0
	if (!udi_msc_b_cbw_invalid)
  4040b4:	4b08      	ldr	r3, [pc, #32]	; (4040d8 <udi_msc_csw_invalid+0x28>)
  4040b6:	781b      	ldrb	r3, [r3, #0]
  4040b8:	f083 0301 	eor.w	r3, r3, #1
  4040bc:	b2db      	uxtb	r3, r3
  4040be:	2b00      	cmp	r3, #0
  4040c0:	d107      	bne.n	4040d2 <udi_msc_csw_invalid+0x22>
		return;	// Don't re-stall endpoint if error reseted by setup
	udd_ep_set_halt(UDI_MSC_EP_IN);
  4040c2:	2081      	movs	r0, #129	; 0x81
  4040c4:	4b05      	ldr	r3, [pc, #20]	; (4040dc <udi_msc_csw_invalid+0x2c>)
  4040c6:	4798      	blx	r3
	// If stall cleared then re-stall it. Only Setup MSC Reset can clear it
	udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_invalid);
  4040c8:	4905      	ldr	r1, [pc, #20]	; (4040e0 <udi_msc_csw_invalid+0x30>)
  4040ca:	2081      	movs	r0, #129	; 0x81
  4040cc:	4b05      	ldr	r3, [pc, #20]	; (4040e4 <udi_msc_csw_invalid+0x34>)
  4040ce:	4798      	blx	r3
  4040d0:	e000      	b.n	4040d4 <udi_msc_csw_invalid+0x24>
		return;	// Don't re-stall endpoint if error reseted by setup
  4040d2:	bf00      	nop
}
  4040d4:	bd80      	pop	{r7, pc}
  4040d6:	bf00      	nop
  4040d8:	2001a20a 	.word	0x2001a20a
  4040dc:	00407869 	.word	0x00407869
  4040e0:	004040b1 	.word	0x004040b1
  4040e4:	00407fc1 	.word	0x00407fc1

004040e8 <udi_msc_cbw_wait>:

static void udi_msc_cbw_wait(void)
{
  4040e8:	b590      	push	{r4, r7, lr}
  4040ea:	b083      	sub	sp, #12
  4040ec:	af02      	add	r7, sp, #8
	// Register buffer and callback on OUT endpoint
	if (!udd_ep_run(UDI_MSC_EP_OUT, true,
  4040ee:	4b0b      	ldr	r3, [pc, #44]	; (40411c <udi_msc_cbw_wait+0x34>)
  4040f0:	9300      	str	r3, [sp, #0]
  4040f2:	231f      	movs	r3, #31
  4040f4:	4a0a      	ldr	r2, [pc, #40]	; (404120 <udi_msc_cbw_wait+0x38>)
  4040f6:	2101      	movs	r1, #1
  4040f8:	2002      	movs	r0, #2
  4040fa:	4c0a      	ldr	r4, [pc, #40]	; (404124 <udi_msc_cbw_wait+0x3c>)
  4040fc:	47a0      	blx	r4
  4040fe:	4603      	mov	r3, r0
  404100:	f083 0301 	eor.w	r3, r3, #1
  404104:	b2db      	uxtb	r3, r3
  404106:	2b00      	cmp	r3, #0
  404108:	d003      	beq.n	404112 <udi_msc_cbw_wait+0x2a>
					(uint8_t *) & udi_msc_cbw,
					sizeof(udi_msc_cbw),
					udi_msc_cbw_received)) {
		// OUT endpoint not available (halted), then wait a clear of halt.
		udd_ep_wait_stall_clear(UDI_MSC_EP_OUT, udi_msc_cbw_wait);
  40410a:	4907      	ldr	r1, [pc, #28]	; (404128 <udi_msc_cbw_wait+0x40>)
  40410c:	2002      	movs	r0, #2
  40410e:	4b07      	ldr	r3, [pc, #28]	; (40412c <udi_msc_cbw_wait+0x44>)
  404110:	4798      	blx	r3
	}
}
  404112:	bf00      	nop
  404114:	3704      	adds	r7, #4
  404116:	46bd      	mov	sp, r7
  404118:	bd90      	pop	{r4, r7, pc}
  40411a:	bf00      	nop
  40411c:	00404131 	.word	0x00404131
  404120:	2001a1d4 	.word	0x2001a1d4
  404124:	00407bf5 	.word	0x00407bf5
  404128:	004040e9 	.word	0x004040e9
  40412c:	00407fc1 	.word	0x00407fc1

00404130 <udi_msc_cbw_received>:


static void udi_msc_cbw_received(udd_ep_status_t status,
		iram_size_t nb_received, udd_ep_id_t ep)
{
  404130:	b580      	push	{r7, lr}
  404132:	b082      	sub	sp, #8
  404134:	af00      	add	r7, sp, #0
  404136:	4603      	mov	r3, r0
  404138:	6039      	str	r1, [r7, #0]
  40413a:	71fb      	strb	r3, [r7, #7]
  40413c:	4613      	mov	r3, r2
  40413e:	71bb      	strb	r3, [r7, #6]
	UNUSED(ep);
	// Check status of transfer
	if (UDD_EP_TRANSFER_OK != status) {
  404140:	79fb      	ldrb	r3, [r7, #7]
  404142:	2b00      	cmp	r3, #0
  404144:	f040 8111 	bne.w	40436a <udi_msc_cbw_received+0x23a>
		// Now wait MSC setup reset to relaunch CBW reception
		return;
	}
	// Check CBW integrity:
	// transfer status/CBW length/CBW signature
	if ((sizeof(udi_msc_cbw) != nb_received)
  404148:	683b      	ldr	r3, [r7, #0]
  40414a:	2b1f      	cmp	r3, #31
  40414c:	d104      	bne.n	404158 <udi_msc_cbw_received+0x28>
			|| (udi_msc_cbw.dCBWSignature !=
  40414e:	4b89      	ldr	r3, [pc, #548]	; (404374 <udi_msc_cbw_received+0x244>)
  404150:	681b      	ldr	r3, [r3, #0]
  404152:	4a89      	ldr	r2, [pc, #548]	; (404378 <udi_msc_cbw_received+0x248>)
  404154:	4293      	cmp	r3, r2
  404156:	d007      	beq.n	404168 <udi_msc_cbw_received+0x38>
					CPU_TO_BE32(USB_CBW_SIGNATURE))) {
		// (5.2.1) Devices receiving a CBW with an invalid signature should stall
		// further traffic on the Bulk In pipe, and either stall further traffic
		// or accept and discard further traffic on the Bulk Out pipe, until
		// reset recovery.
		udi_msc_b_cbw_invalid = true;
  404158:	4b88      	ldr	r3, [pc, #544]	; (40437c <udi_msc_cbw_received+0x24c>)
  40415a:	2201      	movs	r2, #1
  40415c:	701a      	strb	r2, [r3, #0]
		udi_msc_cbw_invalid();
  40415e:	4b88      	ldr	r3, [pc, #544]	; (404380 <udi_msc_cbw_received+0x250>)
  404160:	4798      	blx	r3
		udi_msc_csw_invalid();
  404162:	4b88      	ldr	r3, [pc, #544]	; (404384 <udi_msc_cbw_received+0x254>)
  404164:	4798      	blx	r3
		return;
  404166:	e101      	b.n	40436c <udi_msc_cbw_received+0x23c>
	}
	// Check LUN asked
	udi_msc_cbw.bCBWLUN &= USB_CBW_LUN_MASK;
  404168:	4b82      	ldr	r3, [pc, #520]	; (404374 <udi_msc_cbw_received+0x244>)
  40416a:	7b5b      	ldrb	r3, [r3, #13]
  40416c:	f003 030f 	and.w	r3, r3, #15
  404170:	b2da      	uxtb	r2, r3
  404172:	4b80      	ldr	r3, [pc, #512]	; (404374 <udi_msc_cbw_received+0x244>)
  404174:	735a      	strb	r2, [r3, #13]
	if (udi_msc_cbw.bCBWLUN > udi_msc_nb_lun) {
  404176:	4b7f      	ldr	r3, [pc, #508]	; (404374 <udi_msc_cbw_received+0x244>)
  404178:	7b5a      	ldrb	r2, [r3, #13]
  40417a:	4b83      	ldr	r3, [pc, #524]	; (404388 <udi_msc_cbw_received+0x258>)
  40417c:	781b      	ldrb	r3, [r3, #0]
  40417e:	429a      	cmp	r2, r3
  404180:	d904      	bls.n	40418c <udi_msc_cbw_received+0x5c>
		// Bad LUN, then stop command process
		udi_msc_sense_fail_cdb_invalid();
  404182:	4b82      	ldr	r3, [pc, #520]	; (40438c <udi_msc_cbw_received+0x25c>)
  404184:	4798      	blx	r3
		udi_msc_csw_process();
  404186:	4b82      	ldr	r3, [pc, #520]	; (404390 <udi_msc_cbw_received+0x260>)
  404188:	4798      	blx	r3
		return;
  40418a:	e0ef      	b.n	40436c <udi_msc_cbw_received+0x23c>
	}
	// Prepare CSW residue field with the size requested
	udi_msc_csw.dCSWDataResidue =
			le32_to_cpu(udi_msc_cbw.dCBWDataTransferLength);
  40418c:	4b79      	ldr	r3, [pc, #484]	; (404374 <udi_msc_cbw_received+0x244>)
  40418e:	689b      	ldr	r3, [r3, #8]
	udi_msc_csw.dCSWDataResidue =
  404190:	4a80      	ldr	r2, [pc, #512]	; (404394 <udi_msc_cbw_received+0x264>)
  404192:	6093      	str	r3, [r2, #8]

	// Decode opcode
	switch (udi_msc_cbw.CDB[0]) {
  404194:	4b77      	ldr	r3, [pc, #476]	; (404374 <udi_msc_cbw_received+0x244>)
  404196:	7bdb      	ldrb	r3, [r3, #15]
  404198:	2b5a      	cmp	r3, #90	; 0x5a
  40419a:	f200 80e0 	bhi.w	40435e <udi_msc_cbw_received+0x22e>
  40419e:	a201      	add	r2, pc, #4	; (adr r2, 4041a4 <udi_msc_cbw_received+0x74>)
  4041a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4041a4:	0040432d 	.word	0x0040432d
  4041a8:	0040435f 	.word	0x0040435f
  4041ac:	0040435f 	.word	0x0040435f
  4041b0:	00404311 	.word	0x00404311
  4041b4:	0040435f 	.word	0x0040435f
  4041b8:	0040435f 	.word	0x0040435f
  4041bc:	0040435f 	.word	0x0040435f
  4041c0:	0040435f 	.word	0x0040435f
  4041c4:	0040435f 	.word	0x0040435f
  4041c8:	0040435f 	.word	0x0040435f
  4041cc:	0040435f 	.word	0x0040435f
  4041d0:	0040435f 	.word	0x0040435f
  4041d4:	0040435f 	.word	0x0040435f
  4041d8:	0040435f 	.word	0x0040435f
  4041dc:	0040435f 	.word	0x0040435f
  4041e0:	0040435f 	.word	0x0040435f
  4041e4:	0040435f 	.word	0x0040435f
  4041e8:	0040435f 	.word	0x0040435f
  4041ec:	00404317 	.word	0x00404317
  4041f0:	0040435f 	.word	0x0040435f
  4041f4:	0040435f 	.word	0x0040435f
  4041f8:	0040435f 	.word	0x0040435f
  4041fc:	0040435f 	.word	0x0040435f
  404200:	0040435f 	.word	0x0040435f
  404204:	0040435f 	.word	0x0040435f
  404208:	0040435f 	.word	0x0040435f
  40420c:	0040431d 	.word	0x0040431d
  404210:	00404339 	.word	0x00404339
  404214:	0040435f 	.word	0x0040435f
  404218:	0040435f 	.word	0x0040435f
  40421c:	0040433f 	.word	0x0040433f
  404220:	0040435f 	.word	0x0040435f
  404224:	0040435f 	.word	0x0040435f
  404228:	0040435f 	.word	0x0040435f
  40422c:	0040435f 	.word	0x0040435f
  404230:	0040435f 	.word	0x0040435f
  404234:	0040435f 	.word	0x0040435f
  404238:	00404333 	.word	0x00404333
  40423c:	0040435f 	.word	0x0040435f
  404240:	0040435f 	.word	0x0040435f
  404244:	0040434f 	.word	0x0040434f
  404248:	0040435f 	.word	0x0040435f
  40424c:	00404357 	.word	0x00404357
  404250:	0040435f 	.word	0x0040435f
  404254:	0040435f 	.word	0x0040435f
  404258:	0040435f 	.word	0x0040435f
  40425c:	0040435f 	.word	0x0040435f
  404260:	00404345 	.word	0x00404345
  404264:	0040435f 	.word	0x0040435f
  404268:	0040435f 	.word	0x0040435f
  40426c:	0040435f 	.word	0x0040435f
  404270:	0040435f 	.word	0x0040435f
  404274:	0040435f 	.word	0x0040435f
  404278:	0040435f 	.word	0x0040435f
  40427c:	0040435f 	.word	0x0040435f
  404280:	0040435f 	.word	0x0040435f
  404284:	0040435f 	.word	0x0040435f
  404288:	0040435f 	.word	0x0040435f
  40428c:	0040435f 	.word	0x0040435f
  404290:	0040435f 	.word	0x0040435f
  404294:	0040435f 	.word	0x0040435f
  404298:	0040435f 	.word	0x0040435f
  40429c:	0040435f 	.word	0x0040435f
  4042a0:	0040435f 	.word	0x0040435f
  4042a4:	0040435f 	.word	0x0040435f
  4042a8:	0040435f 	.word	0x0040435f
  4042ac:	0040435f 	.word	0x0040435f
  4042b0:	0040435f 	.word	0x0040435f
  4042b4:	0040435f 	.word	0x0040435f
  4042b8:	0040435f 	.word	0x0040435f
  4042bc:	0040435f 	.word	0x0040435f
  4042c0:	0040435f 	.word	0x0040435f
  4042c4:	0040435f 	.word	0x0040435f
  4042c8:	0040435f 	.word	0x0040435f
  4042cc:	0040435f 	.word	0x0040435f
  4042d0:	0040435f 	.word	0x0040435f
  4042d4:	0040435f 	.word	0x0040435f
  4042d8:	0040435f 	.word	0x0040435f
  4042dc:	0040435f 	.word	0x0040435f
  4042e0:	0040435f 	.word	0x0040435f
  4042e4:	0040435f 	.word	0x0040435f
  4042e8:	0040435f 	.word	0x0040435f
  4042ec:	0040435f 	.word	0x0040435f
  4042f0:	0040435f 	.word	0x0040435f
  4042f4:	0040435f 	.word	0x0040435f
  4042f8:	0040435f 	.word	0x0040435f
  4042fc:	0040435f 	.word	0x0040435f
  404300:	0040435f 	.word	0x0040435f
  404304:	0040435f 	.word	0x0040435f
  404308:	0040435f 	.word	0x0040435f
  40430c:	00404325 	.word	0x00404325
	case SPC_REQUEST_SENSE:
		udi_msc_spc_requestsense();
  404310:	4b21      	ldr	r3, [pc, #132]	; (404398 <udi_msc_cbw_received+0x268>)
  404312:	4798      	blx	r3
		break;
  404314:	e02a      	b.n	40436c <udi_msc_cbw_received+0x23c>

	case SPC_INQUIRY:
		udi_msc_spc_inquiry();
  404316:	4b21      	ldr	r3, [pc, #132]	; (40439c <udi_msc_cbw_received+0x26c>)
  404318:	4798      	blx	r3
		break;
  40431a:	e027      	b.n	40436c <udi_msc_cbw_received+0x23c>

	case SPC_MODE_SENSE6:
		udi_msc_spc_mode_sense(false);
  40431c:	2000      	movs	r0, #0
  40431e:	4b20      	ldr	r3, [pc, #128]	; (4043a0 <udi_msc_cbw_received+0x270>)
  404320:	4798      	blx	r3
		break;
  404322:	e023      	b.n	40436c <udi_msc_cbw_received+0x23c>
	case SPC_MODE_SENSE10:
		udi_msc_spc_mode_sense(true);
  404324:	2001      	movs	r0, #1
  404326:	4b1e      	ldr	r3, [pc, #120]	; (4043a0 <udi_msc_cbw_received+0x270>)
  404328:	4798      	blx	r3
		break;
  40432a:	e01f      	b.n	40436c <udi_msc_cbw_received+0x23c>

	case SPC_TEST_UNIT_READY:
		udi_msc_spc_testunitready();
  40432c:	4b1d      	ldr	r3, [pc, #116]	; (4043a4 <udi_msc_cbw_received+0x274>)
  40432e:	4798      	blx	r3
		break;
  404330:	e01c      	b.n	40436c <udi_msc_cbw_received+0x23c>

	case SBC_READ_CAPACITY10:
		udi_msc_sbc_read_capacity();
  404332:	4b1d      	ldr	r3, [pc, #116]	; (4043a8 <udi_msc_cbw_received+0x278>)
  404334:	4798      	blx	r3
		break;
  404336:	e019      	b.n	40436c <udi_msc_cbw_received+0x23c>

	case SBC_START_STOP_UNIT:
		udi_msc_sbc_start_stop();
  404338:	4b1c      	ldr	r3, [pc, #112]	; (4043ac <udi_msc_cbw_received+0x27c>)
  40433a:	4798      	blx	r3
		break;
  40433c:	e016      	b.n	40436c <udi_msc_cbw_received+0x23c>

		// Accepts request to support plug/plug in case of card reader
	case SPC_PREVENT_ALLOW_MEDIUM_REMOVAL:
		udi_msc_spc_prevent_allow_medium_removal();
  40433e:	4b1c      	ldr	r3, [pc, #112]	; (4043b0 <udi_msc_cbw_received+0x280>)
  404340:	4798      	blx	r3
		break;
  404342:	e013      	b.n	40436c <udi_msc_cbw_received+0x23c>

		// Accepts request to support full format from Windows
	case SBC_VERIFY10:
		udi_msc_sense_pass();
  404344:	4b1b      	ldr	r3, [pc, #108]	; (4043b4 <udi_msc_cbw_received+0x284>)
  404346:	4798      	blx	r3
		udi_msc_csw_process();
  404348:	4b11      	ldr	r3, [pc, #68]	; (404390 <udi_msc_cbw_received+0x260>)
  40434a:	4798      	blx	r3
		break;
  40434c:	e00e      	b.n	40436c <udi_msc_cbw_received+0x23c>

	case SBC_READ10:
		udi_msc_sbc_trans(true);
  40434e:	2001      	movs	r0, #1
  404350:	4b19      	ldr	r3, [pc, #100]	; (4043b8 <udi_msc_cbw_received+0x288>)
  404352:	4798      	blx	r3
		break;
  404354:	e00a      	b.n	40436c <udi_msc_cbw_received+0x23c>

	case SBC_WRITE10:
		udi_msc_sbc_trans(false);
  404356:	2000      	movs	r0, #0
  404358:	4b17      	ldr	r3, [pc, #92]	; (4043b8 <udi_msc_cbw_received+0x288>)
  40435a:	4798      	blx	r3
		break;
  40435c:	e006      	b.n	40436c <udi_msc_cbw_received+0x23c>

	default:
		udi_msc_sense_command_invalid();
  40435e:	4b17      	ldr	r3, [pc, #92]	; (4043bc <udi_msc_cbw_received+0x28c>)
  404360:	4798      	blx	r3
		udi_msc_csw_process();
  404362:	4b0b      	ldr	r3, [pc, #44]	; (404390 <udi_msc_cbw_received+0x260>)
  404364:	4798      	blx	r3
		break;
  404366:	bf00      	nop
  404368:	e000      	b.n	40436c <udi_msc_cbw_received+0x23c>
		return;
  40436a:	bf00      	nop
	}
}
  40436c:	3708      	adds	r7, #8
  40436e:	46bd      	mov	sp, r7
  404370:	bd80      	pop	{r7, pc}
  404372:	bf00      	nop
  404374:	2001a1d4 	.word	0x2001a1d4
  404378:	43425355 	.word	0x43425355
  40437c:	2001a20a 	.word	0x2001a20a
  404380:	00404079 	.word	0x00404079
  404384:	004040b1 	.word	0x004040b1
  404388:	2001a1f4 	.word	0x2001a1f4
  40438c:	00404661 	.word	0x00404661
  404390:	00404499 	.word	0x00404499
  404394:	200001f4 	.word	0x200001f4
  404398:	00404691 	.word	0x00404691
  40439c:	004046e1 	.word	0x004046e1
  4043a0:	00404851 	.word	0x00404851
  4043a4:	00404829 	.word	0x00404829
  4043a8:	00404a15 	.word	0x00404a15
  4043ac:	004049a1 	.word	0x004049a1
  4043b0:	00404969 	.word	0x00404969
  4043b4:	004045e5 	.word	0x004045e5
  4043b8:	00404aad 	.word	0x00404aad
  4043bc:	00404679 	.word	0x00404679

004043c0 <udi_msc_cbw_validate>:


static bool udi_msc_cbw_validate(uint32_t alloc_len, uint8_t dir_flag)
{
  4043c0:	b580      	push	{r7, lr}
  4043c2:	b082      	sub	sp, #8
  4043c4:	af00      	add	r7, sp, #0
  4043c6:	6078      	str	r0, [r7, #4]
  4043c8:	460b      	mov	r3, r1
  4043ca:	70fb      	strb	r3, [r7, #3]
	 *  - Case  7: Hi < Di
	 *  - Case  8: Hi <> Do
	 *  - Case 10: Ho <> Di
	 *  - Case 13: Ho < Do
	 */
	if (((udi_msc_cbw.bmCBWFlags ^ dir_flag) & USB_CBW_DIRECTION_IN)
  4043cc:	4b0b      	ldr	r3, [pc, #44]	; (4043fc <udi_msc_cbw_validate+0x3c>)
  4043ce:	7b1a      	ldrb	r2, [r3, #12]
  4043d0:	78fb      	ldrb	r3, [r7, #3]
  4043d2:	4053      	eors	r3, r2
  4043d4:	b2db      	uxtb	r3, r3
  4043d6:	b25b      	sxtb	r3, r3
  4043d8:	2b00      	cmp	r3, #0
  4043da:	db04      	blt.n	4043e6 <udi_msc_cbw_validate+0x26>
			|| (udi_msc_csw.dCSWDataResidue < alloc_len)) {
  4043dc:	4b08      	ldr	r3, [pc, #32]	; (404400 <udi_msc_cbw_validate+0x40>)
  4043de:	689a      	ldr	r2, [r3, #8]
  4043e0:	687b      	ldr	r3, [r7, #4]
  4043e2:	429a      	cmp	r2, r3
  4043e4:	d205      	bcs.n	4043f2 <udi_msc_cbw_validate+0x32>
		udi_msc_sense_fail_cdb_invalid();
  4043e6:	4b07      	ldr	r3, [pc, #28]	; (404404 <udi_msc_cbw_validate+0x44>)
  4043e8:	4798      	blx	r3
		udi_msc_csw_process();
  4043ea:	4b07      	ldr	r3, [pc, #28]	; (404408 <udi_msc_cbw_validate+0x48>)
  4043ec:	4798      	blx	r3
		return false;
  4043ee:	2300      	movs	r3, #0
  4043f0:	e000      	b.n	4043f4 <udi_msc_cbw_validate+0x34>
	 *  - Case  4: Hi > Dn
	 *  - Case  5: Hi > Di
	 *  - Case  9: Ho > Dn
	 *  - Case 11: Ho > Do
	 */
	return true;
  4043f2:	2301      	movs	r3, #1
}
  4043f4:	4618      	mov	r0, r3
  4043f6:	3708      	adds	r7, #8
  4043f8:	46bd      	mov	sp, r7
  4043fa:	bd80      	pop	{r7, pc}
  4043fc:	2001a1d4 	.word	0x2001a1d4
  404400:	200001f4 	.word	0x200001f4
  404404:	00404661 	.word	0x00404661
  404408:	00404499 	.word	0x00404499

0040440c <udi_msc_data_send>:

//---------------------------------------------
//------- Routines to process small data packet

static void udi_msc_data_send(uint8_t * buffer, uint8_t buf_size)
{
  40440c:	b590      	push	{r4, r7, lr}
  40440e:	b085      	sub	sp, #20
  404410:	af02      	add	r7, sp, #8
  404412:	6078      	str	r0, [r7, #4]
  404414:	460b      	mov	r3, r1
  404416:	70fb      	strb	r3, [r7, #3]
	// Sends data on IN endpoint
	if (!udd_ep_run(UDI_MSC_EP_IN, true,
  404418:	78fa      	ldrb	r2, [r7, #3]
  40441a:	4b0b      	ldr	r3, [pc, #44]	; (404448 <udi_msc_data_send+0x3c>)
  40441c:	9300      	str	r3, [sp, #0]
  40441e:	4613      	mov	r3, r2
  404420:	687a      	ldr	r2, [r7, #4]
  404422:	2101      	movs	r1, #1
  404424:	2081      	movs	r0, #129	; 0x81
  404426:	4c09      	ldr	r4, [pc, #36]	; (40444c <udi_msc_data_send+0x40>)
  404428:	47a0      	blx	r4
  40442a:	4603      	mov	r3, r0
  40442c:	f083 0301 	eor.w	r3, r3, #1
  404430:	b2db      	uxtb	r3, r3
  404432:	2b00      	cmp	r3, #0
  404434:	d003      	beq.n	40443e <udi_msc_data_send+0x32>
					buffer, buf_size, udi_msc_data_sent)) {
		// If endpoint not available, then exit process command
		udi_msc_sense_fail_hardware();
  404436:	4b06      	ldr	r3, [pc, #24]	; (404450 <udi_msc_data_send+0x44>)
  404438:	4798      	blx	r3
		udi_msc_csw_process();
  40443a:	4b06      	ldr	r3, [pc, #24]	; (404454 <udi_msc_data_send+0x48>)
  40443c:	4798      	blx	r3
	}
}
  40443e:	bf00      	nop
  404440:	370c      	adds	r7, #12
  404442:	46bd      	mov	sp, r7
  404444:	bd90      	pop	{r4, r7, pc}
  404446:	bf00      	nop
  404448:	00404459 	.word	0x00404459
  40444c:	00407bf5 	.word	0x00407bf5
  404450:	00404631 	.word	0x00404631
  404454:	00404499 	.word	0x00404499

00404458 <udi_msc_data_sent>:


static void udi_msc_data_sent(udd_ep_status_t status, iram_size_t nb_sent,
		udd_ep_id_t ep)
{
  404458:	b580      	push	{r7, lr}
  40445a:	b082      	sub	sp, #8
  40445c:	af00      	add	r7, sp, #0
  40445e:	4603      	mov	r3, r0
  404460:	6039      	str	r1, [r7, #0]
  404462:	71fb      	strb	r3, [r7, #7]
  404464:	4613      	mov	r3, r2
  404466:	71bb      	strb	r3, [r7, #6]
	UNUSED(ep);
	if (UDD_EP_TRANSFER_OK != status) {
  404468:	79fb      	ldrb	r3, [r7, #7]
  40446a:	2b00      	cmp	r3, #0
  40446c:	d10a      	bne.n	404484 <udi_msc_data_sent+0x2c>
		// Error protocol
		// Now wait MSC setup reset to relaunch CBW reception
		return;
	}
	// Update sense data
	udi_msc_sense_pass();
  40446e:	4b07      	ldr	r3, [pc, #28]	; (40448c <udi_msc_data_sent+0x34>)
  404470:	4798      	blx	r3
	// Update CSW
	udi_msc_csw.dCSWDataResidue -= nb_sent;
  404472:	4b07      	ldr	r3, [pc, #28]	; (404490 <udi_msc_data_sent+0x38>)
  404474:	689a      	ldr	r2, [r3, #8]
  404476:	683b      	ldr	r3, [r7, #0]
  404478:	1ad3      	subs	r3, r2, r3
  40447a:	4a05      	ldr	r2, [pc, #20]	; (404490 <udi_msc_data_sent+0x38>)
  40447c:	6093      	str	r3, [r2, #8]
	udi_msc_csw_process();
  40447e:	4b05      	ldr	r3, [pc, #20]	; (404494 <udi_msc_data_sent+0x3c>)
  404480:	4798      	blx	r3
  404482:	e000      	b.n	404486 <udi_msc_data_sent+0x2e>
		return;
  404484:	bf00      	nop
}
  404486:	3708      	adds	r7, #8
  404488:	46bd      	mov	sp, r7
  40448a:	bd80      	pop	{r7, pc}
  40448c:	004045e5 	.word	0x004045e5
  404490:	200001f4 	.word	0x200001f4
  404494:	00404499 	.word	0x00404499

00404498 <udi_msc_csw_process>:

//---------------------------------------------
//------- Routines to process CSW packet

static void udi_msc_csw_process(void)
{
  404498:	b580      	push	{r7, lr}
  40449a:	af00      	add	r7, sp, #0
	if (0 != udi_msc_csw.dCSWDataResidue) {
  40449c:	4b0d      	ldr	r3, [pc, #52]	; (4044d4 <udi_msc_csw_process+0x3c>)
  40449e:	689b      	ldr	r3, [r3, #8]
  4044a0:	2b00      	cmp	r3, #0
  4044a2:	d00b      	beq.n	4044bc <udi_msc_csw_process+0x24>
		// Residue not NULL
		// then STALL next request from USB host on corresponding endpoint
		if (udi_msc_cbw.bmCBWFlags & USB_CBW_DIRECTION_IN)
  4044a4:	4b0c      	ldr	r3, [pc, #48]	; (4044d8 <udi_msc_csw_process+0x40>)
  4044a6:	7b1b      	ldrb	r3, [r3, #12]
  4044a8:	b25b      	sxtb	r3, r3
  4044aa:	2b00      	cmp	r3, #0
  4044ac:	da03      	bge.n	4044b6 <udi_msc_csw_process+0x1e>
			udd_ep_set_halt(UDI_MSC_EP_IN);
  4044ae:	2081      	movs	r0, #129	; 0x81
  4044b0:	4b0a      	ldr	r3, [pc, #40]	; (4044dc <udi_msc_csw_process+0x44>)
  4044b2:	4798      	blx	r3
  4044b4:	e002      	b.n	4044bc <udi_msc_csw_process+0x24>
		else
			udd_ep_set_halt(UDI_MSC_EP_OUT);
  4044b6:	2002      	movs	r0, #2
  4044b8:	4b08      	ldr	r3, [pc, #32]	; (4044dc <udi_msc_csw_process+0x44>)
  4044ba:	4798      	blx	r3
	}
	// Prepare and send CSW
	udi_msc_csw.dCSWTag = udi_msc_cbw.dCBWTag;
  4044bc:	4b06      	ldr	r3, [pc, #24]	; (4044d8 <udi_msc_csw_process+0x40>)
  4044be:	685b      	ldr	r3, [r3, #4]
  4044c0:	4a04      	ldr	r2, [pc, #16]	; (4044d4 <udi_msc_csw_process+0x3c>)
  4044c2:	6053      	str	r3, [r2, #4]
	udi_msc_csw.dCSWDataResidue = cpu_to_le32(udi_msc_csw.dCSWDataResidue);
  4044c4:	4b03      	ldr	r3, [pc, #12]	; (4044d4 <udi_msc_csw_process+0x3c>)
  4044c6:	689b      	ldr	r3, [r3, #8]
  4044c8:	4a02      	ldr	r2, [pc, #8]	; (4044d4 <udi_msc_csw_process+0x3c>)
  4044ca:	6093      	str	r3, [r2, #8]
	udi_msc_csw_send();
  4044cc:	4b04      	ldr	r3, [pc, #16]	; (4044e0 <udi_msc_csw_process+0x48>)
  4044ce:	4798      	blx	r3
}
  4044d0:	bf00      	nop
  4044d2:	bd80      	pop	{r7, pc}
  4044d4:	200001f4 	.word	0x200001f4
  4044d8:	2001a1d4 	.word	0x2001a1d4
  4044dc:	00407869 	.word	0x00407869
  4044e0:	004044e5 	.word	0x004044e5

004044e4 <udi_msc_csw_send>:


void udi_msc_csw_send(void)
{
  4044e4:	b590      	push	{r4, r7, lr}
  4044e6:	b083      	sub	sp, #12
  4044e8:	af02      	add	r7, sp, #8
	// Sends CSW on IN endpoint
	if (!udd_ep_run(UDI_MSC_EP_IN, false,
  4044ea:	4b0b      	ldr	r3, [pc, #44]	; (404518 <udi_msc_csw_send+0x34>)
  4044ec:	9300      	str	r3, [sp, #0]
  4044ee:	230d      	movs	r3, #13
  4044f0:	4a0a      	ldr	r2, [pc, #40]	; (40451c <udi_msc_csw_send+0x38>)
  4044f2:	2100      	movs	r1, #0
  4044f4:	2081      	movs	r0, #129	; 0x81
  4044f6:	4c0a      	ldr	r4, [pc, #40]	; (404520 <udi_msc_csw_send+0x3c>)
  4044f8:	47a0      	blx	r4
  4044fa:	4603      	mov	r3, r0
  4044fc:	f083 0301 	eor.w	r3, r3, #1
  404500:	b2db      	uxtb	r3, r3
  404502:	2b00      	cmp	r3, #0
  404504:	d003      	beq.n	40450e <udi_msc_csw_send+0x2a>
					(uint8_t *) & udi_msc_csw,
					sizeof(udi_msc_csw),
					udi_msc_csw_sent)) {
		// Endpoint not available
		// then restart CSW sent when endpoint IN STALL will be cleared
		udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_send);
  404506:	4907      	ldr	r1, [pc, #28]	; (404524 <udi_msc_csw_send+0x40>)
  404508:	2081      	movs	r0, #129	; 0x81
  40450a:	4b07      	ldr	r3, [pc, #28]	; (404528 <udi_msc_csw_send+0x44>)
  40450c:	4798      	blx	r3
	}
}
  40450e:	bf00      	nop
  404510:	3704      	adds	r7, #4
  404512:	46bd      	mov	sp, r7
  404514:	bd90      	pop	{r4, r7, pc}
  404516:	bf00      	nop
  404518:	0040452d 	.word	0x0040452d
  40451c:	200001f4 	.word	0x200001f4
  404520:	00407bf5 	.word	0x00407bf5
  404524:	004044e5 	.word	0x004044e5
  404528:	00407fc1 	.word	0x00407fc1

0040452c <udi_msc_csw_sent>:


static void udi_msc_csw_sent(udd_ep_status_t status, iram_size_t nb_sent,
		udd_ep_id_t ep)
{
  40452c:	b580      	push	{r7, lr}
  40452e:	b082      	sub	sp, #8
  404530:	af00      	add	r7, sp, #0
  404532:	4603      	mov	r3, r0
  404534:	6039      	str	r1, [r7, #0]
  404536:	71fb      	strb	r3, [r7, #7]
  404538:	4613      	mov	r3, r2
  40453a:	71bb      	strb	r3, [r7, #6]
	UNUSED(ep);
	UNUSED(status);
	UNUSED(nb_sent);
	// CSW is sent or not
	// In all case, restart process and wait CBW
	udi_msc_cbw_wait();
  40453c:	4b02      	ldr	r3, [pc, #8]	; (404548 <udi_msc_csw_sent+0x1c>)
  40453e:	4798      	blx	r3
}
  404540:	bf00      	nop
  404542:	3708      	adds	r7, #8
  404544:	46bd      	mov	sp, r7
  404546:	bd80      	pop	{r7, pc}
  404548:	004040e9 	.word	0x004040e9

0040454c <udi_msc_clear_sense>:

//---------------------------------------------
//------- Routines manage sense data

static void udi_msc_clear_sense(void)
{
  40454c:	b580      	push	{r7, lr}
  40454e:	af00      	add	r7, sp, #0
	memset((uint8_t*)&udi_msc_sense, 0, sizeof(struct scsi_request_sense_data));
  404550:	2212      	movs	r2, #18
  404552:	2100      	movs	r1, #0
  404554:	4805      	ldr	r0, [pc, #20]	; (40456c <udi_msc_clear_sense+0x20>)
  404556:	4b06      	ldr	r3, [pc, #24]	; (404570 <udi_msc_clear_sense+0x24>)
  404558:	4798      	blx	r3
	udi_msc_sense.valid_reponse_code = SCSI_SENSE_VALID | SCSI_SENSE_CURRENT;
  40455a:	4b04      	ldr	r3, [pc, #16]	; (40456c <udi_msc_clear_sense+0x20>)
  40455c:	22f0      	movs	r2, #240	; 0xf0
  40455e:	701a      	strb	r2, [r3, #0]
	udi_msc_sense.AddSenseLen = SCSI_SENSE_ADDL_LEN(sizeof(udi_msc_sense));
  404560:	4b02      	ldr	r3, [pc, #8]	; (40456c <udi_msc_clear_sense+0x20>)
  404562:	220a      	movs	r2, #10
  404564:	71da      	strb	r2, [r3, #7]
}
  404566:	bf00      	nop
  404568:	bd80      	pop	{r7, pc}
  40456a:	bf00      	nop
  40456c:	2001a1f8 	.word	0x2001a1f8
  404570:	0040e261 	.word	0x0040e261

00404574 <udi_msc_sense_fail>:

static void udi_msc_sense_fail(uint8_t sense_key, uint16_t add_sense,
		uint32_t lba)
{
  404574:	b580      	push	{r7, lr}
  404576:	b082      	sub	sp, #8
  404578:	af00      	add	r7, sp, #0
  40457a:	4603      	mov	r3, r0
  40457c:	603a      	str	r2, [r7, #0]
  40457e:	71fb      	strb	r3, [r7, #7]
  404580:	460b      	mov	r3, r1
  404582:	80bb      	strh	r3, [r7, #4]
	udi_msc_clear_sense();
  404584:	4b14      	ldr	r3, [pc, #80]	; (4045d8 <udi_msc_sense_fail+0x64>)
  404586:	4798      	blx	r3
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_FAIL;
  404588:	4b14      	ldr	r3, [pc, #80]	; (4045dc <udi_msc_sense_fail+0x68>)
  40458a:	2201      	movs	r2, #1
  40458c:	731a      	strb	r2, [r3, #12]
	udi_msc_sense.sense_flag_key = sense_key;
  40458e:	4a14      	ldr	r2, [pc, #80]	; (4045e0 <udi_msc_sense_fail+0x6c>)
  404590:	79fb      	ldrb	r3, [r7, #7]
  404592:	7093      	strb	r3, [r2, #2]
	udi_msc_sense.information[0] = lba >> 24;
  404594:	683b      	ldr	r3, [r7, #0]
  404596:	0e1b      	lsrs	r3, r3, #24
  404598:	b2da      	uxtb	r2, r3
  40459a:	4b11      	ldr	r3, [pc, #68]	; (4045e0 <udi_msc_sense_fail+0x6c>)
  40459c:	70da      	strb	r2, [r3, #3]
	udi_msc_sense.information[1] = lba >> 16;
  40459e:	683b      	ldr	r3, [r7, #0]
  4045a0:	0c1b      	lsrs	r3, r3, #16
  4045a2:	b2da      	uxtb	r2, r3
  4045a4:	4b0e      	ldr	r3, [pc, #56]	; (4045e0 <udi_msc_sense_fail+0x6c>)
  4045a6:	711a      	strb	r2, [r3, #4]
	udi_msc_sense.information[2] = lba >> 8;
  4045a8:	683b      	ldr	r3, [r7, #0]
  4045aa:	0a1b      	lsrs	r3, r3, #8
  4045ac:	b2da      	uxtb	r2, r3
  4045ae:	4b0c      	ldr	r3, [pc, #48]	; (4045e0 <udi_msc_sense_fail+0x6c>)
  4045b0:	715a      	strb	r2, [r3, #5]
	udi_msc_sense.information[3] = lba;
  4045b2:	683b      	ldr	r3, [r7, #0]
  4045b4:	b2da      	uxtb	r2, r3
  4045b6:	4b0a      	ldr	r3, [pc, #40]	; (4045e0 <udi_msc_sense_fail+0x6c>)
  4045b8:	719a      	strb	r2, [r3, #6]
	udi_msc_sense.AddSenseCode = add_sense >> 8;
  4045ba:	88bb      	ldrh	r3, [r7, #4]
  4045bc:	0a1b      	lsrs	r3, r3, #8
  4045be:	b29b      	uxth	r3, r3
  4045c0:	b2da      	uxtb	r2, r3
  4045c2:	4b07      	ldr	r3, [pc, #28]	; (4045e0 <udi_msc_sense_fail+0x6c>)
  4045c4:	731a      	strb	r2, [r3, #12]
	udi_msc_sense.AddSnsCodeQlfr = add_sense;
  4045c6:	88bb      	ldrh	r3, [r7, #4]
  4045c8:	b2da      	uxtb	r2, r3
  4045ca:	4b05      	ldr	r3, [pc, #20]	; (4045e0 <udi_msc_sense_fail+0x6c>)
  4045cc:	735a      	strb	r2, [r3, #13]
}
  4045ce:	bf00      	nop
  4045d0:	3708      	adds	r7, #8
  4045d2:	46bd      	mov	sp, r7
  4045d4:	bd80      	pop	{r7, pc}
  4045d6:	bf00      	nop
  4045d8:	0040454d 	.word	0x0040454d
  4045dc:	200001f4 	.word	0x200001f4
  4045e0:	2001a1f8 	.word	0x2001a1f8

004045e4 <udi_msc_sense_pass>:

static void udi_msc_sense_pass(void)
{
  4045e4:	b580      	push	{r7, lr}
  4045e6:	af00      	add	r7, sp, #0
	udi_msc_clear_sense();
  4045e8:	4b03      	ldr	r3, [pc, #12]	; (4045f8 <udi_msc_sense_pass+0x14>)
  4045ea:	4798      	blx	r3
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_PASS;
  4045ec:	4b03      	ldr	r3, [pc, #12]	; (4045fc <udi_msc_sense_pass+0x18>)
  4045ee:	2200      	movs	r2, #0
  4045f0:	731a      	strb	r2, [r3, #12]
}
  4045f2:	bf00      	nop
  4045f4:	bd80      	pop	{r7, pc}
  4045f6:	bf00      	nop
  4045f8:	0040454d 	.word	0x0040454d
  4045fc:	200001f4 	.word	0x200001f4

00404600 <udi_msc_sense_fail_not_present>:


static void udi_msc_sense_fail_not_present(void)
{
  404600:	b580      	push	{r7, lr}
  404602:	af00      	add	r7, sp, #0
	udi_msc_sense_fail(SCSI_SK_NOT_READY, SCSI_ASC_MEDIUM_NOT_PRESENT, 0);
  404604:	2200      	movs	r2, #0
  404606:	f44f 5168 	mov.w	r1, #14848	; 0x3a00
  40460a:	2002      	movs	r0, #2
  40460c:	4b01      	ldr	r3, [pc, #4]	; (404614 <udi_msc_sense_fail_not_present+0x14>)
  40460e:	4798      	blx	r3
}
  404610:	bf00      	nop
  404612:	bd80      	pop	{r7, pc}
  404614:	00404575 	.word	0x00404575

00404618 <udi_msc_sense_fail_busy_or_change>:

static void udi_msc_sense_fail_busy_or_change(void)
{
  404618:	b580      	push	{r7, lr}
  40461a:	af00      	add	r7, sp, #0
	udi_msc_sense_fail(SCSI_SK_UNIT_ATTENTION,
  40461c:	2200      	movs	r2, #0
  40461e:	f44f 5120 	mov.w	r1, #10240	; 0x2800
  404622:	2006      	movs	r0, #6
  404624:	4b01      	ldr	r3, [pc, #4]	; (40462c <udi_msc_sense_fail_busy_or_change+0x14>)
  404626:	4798      	blx	r3
			SCSI_ASC_NOT_READY_TO_READY_CHANGE, 0);
}
  404628:	bf00      	nop
  40462a:	bd80      	pop	{r7, pc}
  40462c:	00404575 	.word	0x00404575

00404630 <udi_msc_sense_fail_hardware>:

static void udi_msc_sense_fail_hardware(void)
{
  404630:	b580      	push	{r7, lr}
  404632:	af00      	add	r7, sp, #0
	udi_msc_sense_fail(SCSI_SK_HARDWARE_ERROR,
  404634:	2200      	movs	r2, #0
  404636:	2100      	movs	r1, #0
  404638:	2004      	movs	r0, #4
  40463a:	4b02      	ldr	r3, [pc, #8]	; (404644 <udi_msc_sense_fail_hardware+0x14>)
  40463c:	4798      	blx	r3
			SCSI_ASC_NO_ADDITIONAL_SENSE_INFO, 0);
}
  40463e:	bf00      	nop
  404640:	bd80      	pop	{r7, pc}
  404642:	bf00      	nop
  404644:	00404575 	.word	0x00404575

00404648 <udi_msc_sense_fail_protected>:

static void udi_msc_sense_fail_protected(void)
{
  404648:	b580      	push	{r7, lr}
  40464a:	af00      	add	r7, sp, #0
	udi_msc_sense_fail(SCSI_SK_DATA_PROTECT, SCSI_ASC_WRITE_PROTECTED, 0);
  40464c:	2200      	movs	r2, #0
  40464e:	f44f 511c 	mov.w	r1, #9984	; 0x2700
  404652:	2007      	movs	r0, #7
  404654:	4b01      	ldr	r3, [pc, #4]	; (40465c <udi_msc_sense_fail_protected+0x14>)
  404656:	4798      	blx	r3
}
  404658:	bf00      	nop
  40465a:	bd80      	pop	{r7, pc}
  40465c:	00404575 	.word	0x00404575

00404660 <udi_msc_sense_fail_cdb_invalid>:

static void udi_msc_sense_fail_cdb_invalid(void)
{
  404660:	b580      	push	{r7, lr}
  404662:	af00      	add	r7, sp, #0
	udi_msc_sense_fail(SCSI_SK_ILLEGAL_REQUEST,
  404664:	2200      	movs	r2, #0
  404666:	f44f 5110 	mov.w	r1, #9216	; 0x2400
  40466a:	2005      	movs	r0, #5
  40466c:	4b01      	ldr	r3, [pc, #4]	; (404674 <udi_msc_sense_fail_cdb_invalid+0x14>)
  40466e:	4798      	blx	r3
			SCSI_ASC_INVALID_FIELD_IN_CDB, 0);
}
  404670:	bf00      	nop
  404672:	bd80      	pop	{r7, pc}
  404674:	00404575 	.word	0x00404575

00404678 <udi_msc_sense_command_invalid>:

static void udi_msc_sense_command_invalid(void)
{
  404678:	b580      	push	{r7, lr}
  40467a:	af00      	add	r7, sp, #0
	udi_msc_sense_fail(SCSI_SK_ILLEGAL_REQUEST,
  40467c:	2200      	movs	r2, #0
  40467e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  404682:	2005      	movs	r0, #5
  404684:	4b01      	ldr	r3, [pc, #4]	; (40468c <udi_msc_sense_command_invalid+0x14>)
  404686:	4798      	blx	r3
			SCSI_ASC_INVALID_COMMAND_OPERATION_CODE, 0);
}
  404688:	bf00      	nop
  40468a:	bd80      	pop	{r7, pc}
  40468c:	00404575 	.word	0x00404575

00404690 <udi_msc_spc_requestsense>:

//---------------------------------------------
//------- Routines manage SCSI Commands

static void udi_msc_spc_requestsense(void)
{
  404690:	b580      	push	{r7, lr}
  404692:	b082      	sub	sp, #8
  404694:	af00      	add	r7, sp, #0
	uint8_t length = udi_msc_cbw.CDB[4];
  404696:	4b0e      	ldr	r3, [pc, #56]	; (4046d0 <udi_msc_spc_requestsense+0x40>)
  404698:	7cdb      	ldrb	r3, [r3, #19]
  40469a:	71fb      	strb	r3, [r7, #7]

	// Can't send more than sense data length
	if (length > sizeof(udi_msc_sense))
  40469c:	79fb      	ldrb	r3, [r7, #7]
  40469e:	2b12      	cmp	r3, #18
  4046a0:	d901      	bls.n	4046a6 <udi_msc_spc_requestsense+0x16>
		length = sizeof(udi_msc_sense);
  4046a2:	2312      	movs	r3, #18
  4046a4:	71fb      	strb	r3, [r7, #7]

	if (!udi_msc_cbw_validate(length, USB_CBW_DIRECTION_IN))
  4046a6:	79fb      	ldrb	r3, [r7, #7]
  4046a8:	2180      	movs	r1, #128	; 0x80
  4046aa:	4618      	mov	r0, r3
  4046ac:	4b09      	ldr	r3, [pc, #36]	; (4046d4 <udi_msc_spc_requestsense+0x44>)
  4046ae:	4798      	blx	r3
  4046b0:	4603      	mov	r3, r0
  4046b2:	f083 0301 	eor.w	r3, r3, #1
  4046b6:	b2db      	uxtb	r3, r3
  4046b8:	2b00      	cmp	r3, #0
  4046ba:	d105      	bne.n	4046c8 <udi_msc_spc_requestsense+0x38>
		return;
	// Send sense data
	udi_msc_data_send((uint8_t*)&udi_msc_sense, length);
  4046bc:	79fb      	ldrb	r3, [r7, #7]
  4046be:	4619      	mov	r1, r3
  4046c0:	4805      	ldr	r0, [pc, #20]	; (4046d8 <udi_msc_spc_requestsense+0x48>)
  4046c2:	4b06      	ldr	r3, [pc, #24]	; (4046dc <udi_msc_spc_requestsense+0x4c>)
  4046c4:	4798      	blx	r3
  4046c6:	e000      	b.n	4046ca <udi_msc_spc_requestsense+0x3a>
		return;
  4046c8:	bf00      	nop
}
  4046ca:	3708      	adds	r7, #8
  4046cc:	46bd      	mov	sp, r7
  4046ce:	bd80      	pop	{r7, pc}
  4046d0:	2001a1d4 	.word	0x2001a1d4
  4046d4:	004043c1 	.word	0x004043c1
  4046d8:	2001a1f8 	.word	0x2001a1f8
  4046dc:	0040440d 	.word	0x0040440d

004046e0 <udi_msc_spc_inquiry>:


static void udi_msc_spc_inquiry(void)
{
  4046e0:	b590      	push	{r4, r7, lr}
  4046e2:	b083      	sub	sp, #12
  4046e4:	af00      	add	r7, sp, #0
		.addl_len = SCSI_INQ_ADDL_LEN(sizeof(struct scsi_inquiry_data)),
		.vendor_id = {UDI_MSC_GLOBAL_VENDOR_ID},
		.product_rev = {UDI_MSC_GLOBAL_PRODUCT_VERSION},
	};

	length = udi_msc_cbw.CDB[4];
  4046e6:	4b35      	ldr	r3, [pc, #212]	; (4047bc <udi_msc_spc_inquiry+0xdc>)
  4046e8:	7cdb      	ldrb	r3, [r3, #19]
  4046ea:	71fb      	strb	r3, [r7, #7]

	// Can't send more than inquiry data length
	if (length > sizeof(udi_msc_inquiry_data))
  4046ec:	79fb      	ldrb	r3, [r7, #7]
  4046ee:	2b24      	cmp	r3, #36	; 0x24
  4046f0:	d901      	bls.n	4046f6 <udi_msc_spc_inquiry+0x16>
		length = sizeof(udi_msc_inquiry_data);
  4046f2:	2324      	movs	r3, #36	; 0x24
  4046f4:	71fb      	strb	r3, [r7, #7]

	if (!udi_msc_cbw_validate(length, USB_CBW_DIRECTION_IN))
  4046f6:	79fb      	ldrb	r3, [r7, #7]
  4046f8:	2180      	movs	r1, #128	; 0x80
  4046fa:	4618      	mov	r0, r3
  4046fc:	4b30      	ldr	r3, [pc, #192]	; (4047c0 <udi_msc_spc_inquiry+0xe0>)
  4046fe:	4798      	blx	r3
  404700:	4603      	mov	r3, r0
  404702:	f083 0301 	eor.w	r3, r3, #1
  404706:	b2db      	uxtb	r3, r3
  404708:	2b00      	cmp	r3, #0
  40470a:	d152      	bne.n	4047b2 <udi_msc_spc_inquiry+0xd2>
		return;
	if ((0 != (udi_msc_cbw.CDB[1] & (SCSI_INQ_REQ_EVPD | SCSI_INQ_REQ_CMDT)))
  40470c:	4b2b      	ldr	r3, [pc, #172]	; (4047bc <udi_msc_spc_inquiry+0xdc>)
  40470e:	7c1b      	ldrb	r3, [r3, #16]
  404710:	f003 0303 	and.w	r3, r3, #3
  404714:	2b00      	cmp	r3, #0
  404716:	d103      	bne.n	404720 <udi_msc_spc_inquiry+0x40>
			|| (0 != udi_msc_cbw.CDB[2])) {
  404718:	4b28      	ldr	r3, [pc, #160]	; (4047bc <udi_msc_spc_inquiry+0xdc>)
  40471a:	7c5b      	ldrb	r3, [r3, #17]
  40471c:	2b00      	cmp	r3, #0
  40471e:	d004      	beq.n	40472a <udi_msc_spc_inquiry+0x4a>
		// CMDT and EPVD bits are not at 0
		// PAGE or OPERATION CODE fields are not empty
		//  = No standard inquiry asked
		udi_msc_sense_fail_cdb_invalid(); // Command is unsupported
  404720:	4b28      	ldr	r3, [pc, #160]	; (4047c4 <udi_msc_spc_inquiry+0xe4>)
  404722:	4798      	blx	r3
		udi_msc_csw_process();
  404724:	4b28      	ldr	r3, [pc, #160]	; (4047c8 <udi_msc_spc_inquiry+0xe8>)
  404726:	4798      	blx	r3
		return;
  404728:	e044      	b.n	4047b4 <udi_msc_spc_inquiry+0xd4>
	}

	udi_msc_inquiry_data.flags1 = mem_removal(udi_msc_cbw.bCBWLUN) ?
  40472a:	4b24      	ldr	r3, [pc, #144]	; (4047bc <udi_msc_spc_inquiry+0xdc>)
  40472c:	7b5b      	ldrb	r3, [r3, #13]
  40472e:	4618      	mov	r0, r3
  404730:	4b26      	ldr	r3, [pc, #152]	; (4047cc <udi_msc_spc_inquiry+0xec>)
  404732:	4798      	blx	r3
  404734:	4603      	mov	r3, r0
  404736:	2b00      	cmp	r3, #0
  404738:	d001      	beq.n	40473e <udi_msc_spc_inquiry+0x5e>
  40473a:	2280      	movs	r2, #128	; 0x80
  40473c:	e000      	b.n	404740 <udi_msc_spc_inquiry+0x60>
  40473e:	2200      	movs	r2, #0
  404740:	4b23      	ldr	r3, [pc, #140]	; (4047d0 <udi_msc_spc_inquiry+0xf0>)
  404742:	705a      	strb	r2, [r3, #1]
			SCSI_INQ_RMB : 0;

	//* Fill product ID field
	// Copy name in product id field
	memcpy(udi_msc_inquiry_data.product_id,
			mem_name(udi_msc_cbw.bCBWLUN)+1, // To remove first '"'
  404744:	4b1d      	ldr	r3, [pc, #116]	; (4047bc <udi_msc_spc_inquiry+0xdc>)
  404746:	7b5b      	ldrb	r3, [r3, #13]
  404748:	4618      	mov	r0, r3
  40474a:	4b22      	ldr	r3, [pc, #136]	; (4047d4 <udi_msc_spc_inquiry+0xf4>)
  40474c:	4798      	blx	r3
  40474e:	4603      	mov	r3, r0
  404750:	1c5a      	adds	r2, r3, #1
	memcpy(udi_msc_inquiry_data.product_id,
  404752:	4b1f      	ldr	r3, [pc, #124]	; (4047d0 <udi_msc_spc_inquiry+0xf0>)
  404754:	f103 0410 	add.w	r4, r3, #16
  404758:	4613      	mov	r3, r2
  40475a:	6818      	ldr	r0, [r3, #0]
  40475c:	6859      	ldr	r1, [r3, #4]
  40475e:	689a      	ldr	r2, [r3, #8]
  404760:	68db      	ldr	r3, [r3, #12]
  404762:	c40f      	stmia	r4!, {r0, r1, r2, r3}
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
  404764:	2300      	movs	r3, #0
  404766:	71bb      	strb	r3, [r7, #6]
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
  404768:	e00e      	b.n	404788 <udi_msc_spc_inquiry+0xa8>
		if ((0 == udi_msc_inquiry_data.product_id[i])
  40476a:	79bb      	ldrb	r3, [r7, #6]
  40476c:	4a18      	ldr	r2, [pc, #96]	; (4047d0 <udi_msc_spc_inquiry+0xf0>)
  40476e:	4413      	add	r3, r2
  404770:	7c1b      	ldrb	r3, [r3, #16]
  404772:	2b00      	cmp	r3, #0
  404774:	d014      	beq.n	4047a0 <udi_msc_spc_inquiry+0xc0>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
  404776:	79bb      	ldrb	r3, [r7, #6]
  404778:	4a15      	ldr	r2, [pc, #84]	; (4047d0 <udi_msc_spc_inquiry+0xf0>)
  40477a:	4413      	add	r3, r2
  40477c:	7c1b      	ldrb	r3, [r3, #16]
  40477e:	2b22      	cmp	r3, #34	; 0x22
  404780:	d00e      	beq.n	4047a0 <udi_msc_spc_inquiry+0xc0>
			break;
		}
		i++;
  404782:	79bb      	ldrb	r3, [r7, #6]
  404784:	3301      	adds	r3, #1
  404786:	71bb      	strb	r3, [r7, #6]
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
  404788:	79bb      	ldrb	r3, [r7, #6]
  40478a:	2b10      	cmp	r3, #16
  40478c:	d1ed      	bne.n	40476a <udi_msc_spc_inquiry+0x8a>
	}
	// Padding with space char
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
  40478e:	e007      	b.n	4047a0 <udi_msc_spc_inquiry+0xc0>
		udi_msc_inquiry_data.product_id[i] = ' ';
  404790:	79bb      	ldrb	r3, [r7, #6]
  404792:	4a0f      	ldr	r2, [pc, #60]	; (4047d0 <udi_msc_spc_inquiry+0xf0>)
  404794:	4413      	add	r3, r2
  404796:	2220      	movs	r2, #32
  404798:	741a      	strb	r2, [r3, #16]
		i++;
  40479a:	79bb      	ldrb	r3, [r7, #6]
  40479c:	3301      	adds	r3, #1
  40479e:	71bb      	strb	r3, [r7, #6]
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
  4047a0:	79bb      	ldrb	r3, [r7, #6]
  4047a2:	2b10      	cmp	r3, #16
  4047a4:	d1f4      	bne.n	404790 <udi_msc_spc_inquiry+0xb0>
	}

	// Send inquiry data
	udi_msc_data_send((uint8_t *) & udi_msc_inquiry_data, length);
  4047a6:	79fb      	ldrb	r3, [r7, #7]
  4047a8:	4619      	mov	r1, r3
  4047aa:	4809      	ldr	r0, [pc, #36]	; (4047d0 <udi_msc_spc_inquiry+0xf0>)
  4047ac:	4b0a      	ldr	r3, [pc, #40]	; (4047d8 <udi_msc_spc_inquiry+0xf8>)
  4047ae:	4798      	blx	r3
  4047b0:	e000      	b.n	4047b4 <udi_msc_spc_inquiry+0xd4>
		return;
  4047b2:	bf00      	nop
}
  4047b4:	370c      	adds	r7, #12
  4047b6:	46bd      	mov	sp, r7
  4047b8:	bd90      	pop	{r4, r7, pc}
  4047ba:	bf00      	nop
  4047bc:	2001a1d4 	.word	0x2001a1d4
  4047c0:	004043c1 	.word	0x004043c1
  4047c4:	00404661 	.word	0x00404661
  4047c8:	00404499 	.word	0x00404499
  4047cc:	004033d9 	.word	0x004033d9
  4047d0:	20000204 	.word	0x20000204
  4047d4:	00403419 	.word	0x00403419
  4047d8:	0040440d 	.word	0x0040440d

004047dc <udi_msc_spc_testunitready_global>:


static bool udi_msc_spc_testunitready_global(void)
{
  4047dc:	b580      	push	{r7, lr}
  4047de:	af00      	add	r7, sp, #0
	switch (mem_test_unit_ready(udi_msc_cbw.bCBWLUN)) {
  4047e0:	4b0c      	ldr	r3, [pc, #48]	; (404814 <udi_msc_spc_testunitready_global+0x38>)
  4047e2:	7b5b      	ldrb	r3, [r3, #13]
  4047e4:	4618      	mov	r0, r3
  4047e6:	4b0c      	ldr	r3, [pc, #48]	; (404818 <udi_msc_spc_testunitready_global+0x3c>)
  4047e8:	4798      	blx	r3
  4047ea:	4603      	mov	r3, r0
  4047ec:	2b02      	cmp	r3, #2
  4047ee:	d008      	beq.n	404802 <udi_msc_spc_testunitready_global+0x26>
  4047f0:	2b03      	cmp	r3, #3
  4047f2:	d003      	beq.n	4047fc <udi_msc_spc_testunitready_global+0x20>
  4047f4:	2b00      	cmp	r3, #0
  4047f6:	d107      	bne.n	404808 <udi_msc_spc_testunitready_global+0x2c>
	case CTRL_GOOD:
		return true;	// Don't change sense data
  4047f8:	2301      	movs	r3, #1
  4047fa:	e009      	b.n	404810 <udi_msc_spc_testunitready_global+0x34>
	case CTRL_BUSY:
		udi_msc_sense_fail_busy_or_change();
  4047fc:	4b07      	ldr	r3, [pc, #28]	; (40481c <udi_msc_spc_testunitready_global+0x40>)
  4047fe:	4798      	blx	r3
		break;
  404800:	e005      	b.n	40480e <udi_msc_spc_testunitready_global+0x32>
	case CTRL_NO_PRESENT:
		udi_msc_sense_fail_not_present();
  404802:	4b07      	ldr	r3, [pc, #28]	; (404820 <udi_msc_spc_testunitready_global+0x44>)
  404804:	4798      	blx	r3
		break;
  404806:	e002      	b.n	40480e <udi_msc_spc_testunitready_global+0x32>
	case CTRL_FAIL:
	default:
		udi_msc_sense_fail_hardware();
  404808:	4b06      	ldr	r3, [pc, #24]	; (404824 <udi_msc_spc_testunitready_global+0x48>)
  40480a:	4798      	blx	r3
		break;
  40480c:	bf00      	nop
	}
	return false;
  40480e:	2300      	movs	r3, #0
}
  404810:	4618      	mov	r0, r3
  404812:	bd80      	pop	{r7, pc}
  404814:	2001a1d4 	.word	0x2001a1d4
  404818:	00403279 	.word	0x00403279
  40481c:	00404619 	.word	0x00404619
  404820:	00404601 	.word	0x00404601
  404824:	00404631 	.word	0x00404631

00404828 <udi_msc_spc_testunitready>:


static void udi_msc_spc_testunitready(void)
{
  404828:	b580      	push	{r7, lr}
  40482a:	af00      	add	r7, sp, #0
	if (udi_msc_spc_testunitready_global()) {
  40482c:	4b05      	ldr	r3, [pc, #20]	; (404844 <udi_msc_spc_testunitready+0x1c>)
  40482e:	4798      	blx	r3
  404830:	4603      	mov	r3, r0
  404832:	2b00      	cmp	r3, #0
  404834:	d001      	beq.n	40483a <udi_msc_spc_testunitready+0x12>
		// LUN ready, then update sense data with status pass
		udi_msc_sense_pass();
  404836:	4b04      	ldr	r3, [pc, #16]	; (404848 <udi_msc_spc_testunitready+0x20>)
  404838:	4798      	blx	r3
	}
	// Send status in CSW packet
	udi_msc_csw_process();
  40483a:	4b04      	ldr	r3, [pc, #16]	; (40484c <udi_msc_spc_testunitready+0x24>)
  40483c:	4798      	blx	r3
}
  40483e:	bf00      	nop
  404840:	bd80      	pop	{r7, pc}
  404842:	bf00      	nop
  404844:	004047dd 	.word	0x004047dd
  404848:	004045e5 	.word	0x004045e5
  40484c:	00404499 	.word	0x00404499

00404850 <udi_msc_spc_mode_sense>:


static void udi_msc_spc_mode_sense(bool b_sense10)
{
  404850:	b580      	push	{r7, lr}
  404852:	b086      	sub	sp, #24
  404854:	af00      	add	r7, sp, #0
  404856:	4603      	mov	r3, r0
  404858:	71fb      	strb	r3, [r7, #7]
	uint8_t wp;
	struct spc_control_page_info_execpt *ptr_mode;
	UDC_BSS(4)  static union sense_6_10 sense;

	// Clear all fields
	memset(&sense, 0, sizeof(sense));
  40485a:	2214      	movs	r2, #20
  40485c:	2100      	movs	r1, #0
  40485e:	483a      	ldr	r0, [pc, #232]	; (404948 <udi_msc_spc_mode_sense+0xf8>)
  404860:	4b3a      	ldr	r3, [pc, #232]	; (40494c <udi_msc_spc_mode_sense+0xfc>)
  404862:	4798      	blx	r3

	// Initialize process
	if (b_sense10) {
  404864:	79fb      	ldrb	r3, [r7, #7]
  404866:	2b00      	cmp	r3, #0
  404868:	d007      	beq.n	40487a <udi_msc_spc_mode_sense+0x2a>
		request_lgt = udi_msc_cbw.CDB[8];
  40486a:	4b39      	ldr	r3, [pc, #228]	; (404950 <udi_msc_spc_mode_sense+0x100>)
  40486c:	7ddb      	ldrb	r3, [r3, #23]
  40486e:	75bb      	strb	r3, [r7, #22]
		ptr_mode = &sense.s10.sense_data;
  404870:	4b38      	ldr	r3, [pc, #224]	; (404954 <udi_msc_spc_mode_sense+0x104>)
  404872:	613b      	str	r3, [r7, #16]
		data_sense_lgt = sizeof(struct scsi_mode_param_header10);
  404874:	2308      	movs	r3, #8
  404876:	75fb      	strb	r3, [r7, #23]
  404878:	e006      	b.n	404888 <udi_msc_spc_mode_sense+0x38>
	} else {
		request_lgt = udi_msc_cbw.CDB[4];
  40487a:	4b35      	ldr	r3, [pc, #212]	; (404950 <udi_msc_spc_mode_sense+0x100>)
  40487c:	7cdb      	ldrb	r3, [r3, #19]
  40487e:	75bb      	strb	r3, [r7, #22]
		ptr_mode = &sense.s6.sense_data;
  404880:	4b35      	ldr	r3, [pc, #212]	; (404958 <udi_msc_spc_mode_sense+0x108>)
  404882:	613b      	str	r3, [r7, #16]
		data_sense_lgt = sizeof(struct scsi_mode_param_header6);
  404884:	2304      	movs	r3, #4
  404886:	75fb      	strb	r3, [r7, #23]
	}

	// No Block descriptor

	// Fill page(s)
	mode = udi_msc_cbw.CDB[2] & SCSI_MS_MODE_ALL;
  404888:	4b31      	ldr	r3, [pc, #196]	; (404950 <udi_msc_spc_mode_sense+0x100>)
  40488a:	7c5b      	ldrb	r3, [r3, #17]
  40488c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  404890:	73fb      	strb	r3, [r7, #15]
	if ((SCSI_MS_MODE_INFEXP == mode)
  404892:	7bfb      	ldrb	r3, [r7, #15]
  404894:	2b1c      	cmp	r3, #28
  404896:	d002      	beq.n	40489e <udi_msc_spc_mode_sense+0x4e>
			|| (SCSI_MS_MODE_ALL == mode)) {
  404898:	7bfb      	ldrb	r3, [r7, #15]
  40489a:	2b3f      	cmp	r3, #63	; 0x3f
  40489c:	d10b      	bne.n	4048b6 <udi_msc_spc_mode_sense+0x66>
		// Informational exceptions control page (from SPC)
		ptr_mode->page_code =
  40489e:	693b      	ldr	r3, [r7, #16]
  4048a0:	221c      	movs	r2, #28
  4048a2:	701a      	strb	r2, [r3, #0]
				SCSI_MS_MODE_INFEXP;
		ptr_mode->page_length =
  4048a4:	693b      	ldr	r3, [r7, #16]
  4048a6:	220a      	movs	r2, #10
  4048a8:	705a      	strb	r2, [r3, #1]
				SPC_MP_INFEXP_PAGE_LENGTH;
		ptr_mode->mrie =
  4048aa:	693b      	ldr	r3, [r7, #16]
  4048ac:	2205      	movs	r2, #5
  4048ae:	70da      	strb	r2, [r3, #3]
				SPC_MP_INFEXP_MRIE_NO_SENSE;
		data_sense_lgt += sizeof(struct spc_control_page_info_execpt);
  4048b0:	7dfb      	ldrb	r3, [r7, #23]
  4048b2:	330c      	adds	r3, #12
  4048b4:	75fb      	strb	r3, [r7, #23]
	}
	// Can't send more than mode sense data length
	if (request_lgt > data_sense_lgt)
  4048b6:	7dba      	ldrb	r2, [r7, #22]
  4048b8:	7dfb      	ldrb	r3, [r7, #23]
  4048ba:	429a      	cmp	r2, r3
  4048bc:	d901      	bls.n	4048c2 <udi_msc_spc_mode_sense+0x72>
		request_lgt = data_sense_lgt;
  4048be:	7dfb      	ldrb	r3, [r7, #23]
  4048c0:	75bb      	strb	r3, [r7, #22]
	if (!udi_msc_cbw_validate(request_lgt, USB_CBW_DIRECTION_IN))
  4048c2:	7dbb      	ldrb	r3, [r7, #22]
  4048c4:	2180      	movs	r1, #128	; 0x80
  4048c6:	4618      	mov	r0, r3
  4048c8:	4b24      	ldr	r3, [pc, #144]	; (40495c <udi_msc_spc_mode_sense+0x10c>)
  4048ca:	4798      	blx	r3
  4048cc:	4603      	mov	r3, r0
  4048ce:	f083 0301 	eor.w	r3, r3, #1
  4048d2:	b2db      	uxtb	r3, r3
  4048d4:	2b00      	cmp	r3, #0
  4048d6:	d132      	bne.n	40493e <udi_msc_spc_mode_sense+0xee>
		return;

	// Fill mode parameter header length
	wp = (mem_wr_protect(udi_msc_cbw.bCBWLUN)) ? SCSI_MS_SBC_WP : 0;
  4048d8:	4b1d      	ldr	r3, [pc, #116]	; (404950 <udi_msc_spc_mode_sense+0x100>)
  4048da:	7b5b      	ldrb	r3, [r3, #13]
  4048dc:	4618      	mov	r0, r3
  4048de:	4b20      	ldr	r3, [pc, #128]	; (404960 <udi_msc_spc_mode_sense+0x110>)
  4048e0:	4798      	blx	r3
  4048e2:	4603      	mov	r3, r0
  4048e4:	2b00      	cmp	r3, #0
  4048e6:	d001      	beq.n	4048ec <udi_msc_spc_mode_sense+0x9c>
  4048e8:	2380      	movs	r3, #128	; 0x80
  4048ea:	e000      	b.n	4048ee <udi_msc_spc_mode_sense+0x9e>
  4048ec:	2300      	movs	r3, #0
  4048ee:	73bb      	strb	r3, [r7, #14]

	if (b_sense10) {
  4048f0:	79fb      	ldrb	r3, [r7, #7]
  4048f2:	2b00      	cmp	r3, #0
  4048f4:	d015      	beq.n	404922 <udi_msc_spc_mode_sense+0xd2>
		sense.s10.header.mode_data_length =
				cpu_to_be16((data_sense_lgt - 2));
  4048f6:	7dfb      	ldrb	r3, [r7, #23]
  4048f8:	b29b      	uxth	r3, r3
  4048fa:	3b02      	subs	r3, #2
  4048fc:	b29b      	uxth	r3, r3
  4048fe:	0a1b      	lsrs	r3, r3, #8
  404900:	b29b      	uxth	r3, r3
  404902:	b21a      	sxth	r2, r3
  404904:	7dfb      	ldrb	r3, [r7, #23]
  404906:	b29b      	uxth	r3, r3
  404908:	3b02      	subs	r3, #2
  40490a:	b29b      	uxth	r3, r3
  40490c:	021b      	lsls	r3, r3, #8
  40490e:	b21b      	sxth	r3, r3
  404910:	4313      	orrs	r3, r2
  404912:	b21b      	sxth	r3, r3
  404914:	b29a      	uxth	r2, r3
		sense.s10.header.mode_data_length =
  404916:	4b0c      	ldr	r3, [pc, #48]	; (404948 <udi_msc_spc_mode_sense+0xf8>)
  404918:	801a      	strh	r2, [r3, #0]
		//sense.s10.header.medium_type                 = 0;
		sense.s10.header.device_specific_parameter = wp;
  40491a:	4a0b      	ldr	r2, [pc, #44]	; (404948 <udi_msc_spc_mode_sense+0xf8>)
  40491c:	7bbb      	ldrb	r3, [r7, #14]
  40491e:	70d3      	strb	r3, [r2, #3]
  404920:	e007      	b.n	404932 <udi_msc_spc_mode_sense+0xe2>
		//sense.s10.header.block_descriptor_length     = 0;
	} else {
		sense.s6.header.mode_data_length = data_sense_lgt - 1;
  404922:	7dfb      	ldrb	r3, [r7, #23]
  404924:	3b01      	subs	r3, #1
  404926:	b2da      	uxtb	r2, r3
  404928:	4b07      	ldr	r3, [pc, #28]	; (404948 <udi_msc_spc_mode_sense+0xf8>)
  40492a:	701a      	strb	r2, [r3, #0]
		//sense.s6.header.medium_type                  = 0;
		sense.s6.header.device_specific_parameter = wp;
  40492c:	4a06      	ldr	r2, [pc, #24]	; (404948 <udi_msc_spc_mode_sense+0xf8>)
  40492e:	7bbb      	ldrb	r3, [r7, #14]
  404930:	7093      	strb	r3, [r2, #2]
		//sense.s6.header.block_descriptor_length      = 0;
	}

	// Send mode sense data
	udi_msc_data_send((uint8_t *) & sense, request_lgt);
  404932:	7dbb      	ldrb	r3, [r7, #22]
  404934:	4619      	mov	r1, r3
  404936:	4804      	ldr	r0, [pc, #16]	; (404948 <udi_msc_spc_mode_sense+0xf8>)
  404938:	4b0a      	ldr	r3, [pc, #40]	; (404964 <udi_msc_spc_mode_sense+0x114>)
  40493a:	4798      	blx	r3
  40493c:	e000      	b.n	404940 <udi_msc_spc_mode_sense+0xf0>
		return;
  40493e:	bf00      	nop
}
  404940:	3718      	adds	r7, #24
  404942:	46bd      	mov	sp, r7
  404944:	bd80      	pop	{r7, pc}
  404946:	bf00      	nop
  404948:	2001a218 	.word	0x2001a218
  40494c:	0040e261 	.word	0x0040e261
  404950:	2001a1d4 	.word	0x2001a1d4
  404954:	2001a220 	.word	0x2001a220
  404958:	2001a21c 	.word	0x2001a21c
  40495c:	004043c1 	.word	0x004043c1
  404960:	00403399 	.word	0x00403399
  404964:	0040440d 	.word	0x0040440d

00404968 <udi_msc_spc_prevent_allow_medium_removal>:


static void udi_msc_spc_prevent_allow_medium_removal(void)
{
  404968:	b580      	push	{r7, lr}
  40496a:	b082      	sub	sp, #8
  40496c:	af00      	add	r7, sp, #0
	uint8_t prevent = udi_msc_cbw.CDB[4];
  40496e:	4b08      	ldr	r3, [pc, #32]	; (404990 <udi_msc_spc_prevent_allow_medium_removal+0x28>)
  404970:	7cdb      	ldrb	r3, [r3, #19]
  404972:	71fb      	strb	r3, [r7, #7]
	if (0 == prevent) {
  404974:	79fb      	ldrb	r3, [r7, #7]
  404976:	2b00      	cmp	r3, #0
  404978:	d102      	bne.n	404980 <udi_msc_spc_prevent_allow_medium_removal+0x18>
		udi_msc_sense_pass();
  40497a:	4b06      	ldr	r3, [pc, #24]	; (404994 <udi_msc_spc_prevent_allow_medium_removal+0x2c>)
  40497c:	4798      	blx	r3
  40497e:	e001      	b.n	404984 <udi_msc_spc_prevent_allow_medium_removal+0x1c>
	} else {
		udi_msc_sense_fail_cdb_invalid(); // Command is unsupported
  404980:	4b05      	ldr	r3, [pc, #20]	; (404998 <udi_msc_spc_prevent_allow_medium_removal+0x30>)
  404982:	4798      	blx	r3
	}
	udi_msc_csw_process();
  404984:	4b05      	ldr	r3, [pc, #20]	; (40499c <udi_msc_spc_prevent_allow_medium_removal+0x34>)
  404986:	4798      	blx	r3
}
  404988:	bf00      	nop
  40498a:	3708      	adds	r7, #8
  40498c:	46bd      	mov	sp, r7
  40498e:	bd80      	pop	{r7, pc}
  404990:	2001a1d4 	.word	0x2001a1d4
  404994:	004045e5 	.word	0x004045e5
  404998:	00404661 	.word	0x00404661
  40499c:	00404499 	.word	0x00404499

004049a0 <udi_msc_sbc_start_stop>:


static void udi_msc_sbc_start_stop(void)
{
  4049a0:	b580      	push	{r7, lr}
  4049a2:	b082      	sub	sp, #8
  4049a4:	af00      	add	r7, sp, #0
	bool start = 0x1 & udi_msc_cbw.CDB[4];
  4049a6:	4b17      	ldr	r3, [pc, #92]	; (404a04 <udi_msc_sbc_start_stop+0x64>)
  4049a8:	7cdb      	ldrb	r3, [r3, #19]
  4049aa:	f003 0301 	and.w	r3, r3, #1
  4049ae:	2b00      	cmp	r3, #0
  4049b0:	bf14      	ite	ne
  4049b2:	2301      	movne	r3, #1
  4049b4:	2300      	moveq	r3, #0
  4049b6:	71fb      	strb	r3, [r7, #7]
	bool loej = 0x2 & udi_msc_cbw.CDB[4];
  4049b8:	4b12      	ldr	r3, [pc, #72]	; (404a04 <udi_msc_sbc_start_stop+0x64>)
  4049ba:	7cdb      	ldrb	r3, [r3, #19]
  4049bc:	f003 0302 	and.w	r3, r3, #2
  4049c0:	2b00      	cmp	r3, #0
  4049c2:	bf14      	ite	ne
  4049c4:	2301      	movne	r3, #1
  4049c6:	2300      	moveq	r3, #0
  4049c8:	71bb      	strb	r3, [r7, #6]
	if (loej) {
  4049ca:	79bb      	ldrb	r3, [r7, #6]
  4049cc:	2b00      	cmp	r3, #0
  4049ce:	d011      	beq.n	4049f4 <udi_msc_sbc_start_stop+0x54>
		mem_unload(udi_msc_cbw.bCBWLUN, !start);
  4049d0:	4b0c      	ldr	r3, [pc, #48]	; (404a04 <udi_msc_sbc_start_stop+0x64>)
  4049d2:	7b5a      	ldrb	r2, [r3, #13]
  4049d4:	79fb      	ldrb	r3, [r7, #7]
  4049d6:	2b00      	cmp	r3, #0
  4049d8:	bf14      	ite	ne
  4049da:	2301      	movne	r3, #1
  4049dc:	2300      	moveq	r3, #0
  4049de:	b2db      	uxtb	r3, r3
  4049e0:	f083 0301 	eor.w	r3, r3, #1
  4049e4:	b2db      	uxtb	r3, r3
  4049e6:	f003 0301 	and.w	r3, r3, #1
  4049ea:	b2db      	uxtb	r3, r3
  4049ec:	4619      	mov	r1, r3
  4049ee:	4610      	mov	r0, r2
  4049f0:	4b05      	ldr	r3, [pc, #20]	; (404a08 <udi_msc_sbc_start_stop+0x68>)
  4049f2:	4798      	blx	r3
	}
	udi_msc_sense_pass();
  4049f4:	4b05      	ldr	r3, [pc, #20]	; (404a0c <udi_msc_sbc_start_stop+0x6c>)
  4049f6:	4798      	blx	r3
	udi_msc_csw_process();
  4049f8:	4b05      	ldr	r3, [pc, #20]	; (404a10 <udi_msc_sbc_start_stop+0x70>)
  4049fa:	4798      	blx	r3
}
  4049fc:	bf00      	nop
  4049fe:	3708      	adds	r7, #8
  404a00:	46bd      	mov	sp, r7
  404a02:	bd80      	pop	{r7, pc}
  404a04:	2001a1d4 	.word	0x2001a1d4
  404a08:	00403319 	.word	0x00403319
  404a0c:	004045e5 	.word	0x004045e5
  404a10:	00404499 	.word	0x00404499

00404a14 <udi_msc_sbc_read_capacity>:


static void udi_msc_sbc_read_capacity(void)
{
  404a14:	b580      	push	{r7, lr}
  404a16:	af00      	add	r7, sp, #0
	UDC_BSS(4) static struct sbc_read_capacity10_data udi_msc_capacity;

	if (!udi_msc_cbw_validate(sizeof(udi_msc_capacity),
  404a18:	2180      	movs	r1, #128	; 0x80
  404a1a:	2008      	movs	r0, #8
  404a1c:	4b1a      	ldr	r3, [pc, #104]	; (404a88 <udi_msc_sbc_read_capacity+0x74>)
  404a1e:	4798      	blx	r3
  404a20:	4603      	mov	r3, r0
  404a22:	f083 0301 	eor.w	r3, r3, #1
  404a26:	b2db      	uxtb	r3, r3
  404a28:	2b00      	cmp	r3, #0
  404a2a:	d12b      	bne.n	404a84 <udi_msc_sbc_read_capacity+0x70>
					USB_CBW_DIRECTION_IN))
		return;

	// Get capacity of LUN
	switch (mem_read_capacity(udi_msc_cbw.bCBWLUN,
  404a2c:	4b17      	ldr	r3, [pc, #92]	; (404a8c <udi_msc_sbc_read_capacity+0x78>)
  404a2e:	7b5b      	ldrb	r3, [r3, #13]
  404a30:	4917      	ldr	r1, [pc, #92]	; (404a90 <udi_msc_sbc_read_capacity+0x7c>)
  404a32:	4618      	mov	r0, r3
  404a34:	4b17      	ldr	r3, [pc, #92]	; (404a94 <udi_msc_sbc_read_capacity+0x80>)
  404a36:	4798      	blx	r3
  404a38:	4603      	mov	r3, r0
  404a3a:	2b02      	cmp	r3, #2
  404a3c:	d009      	beq.n	404a52 <udi_msc_sbc_read_capacity+0x3e>
  404a3e:	2b03      	cmp	r3, #3
  404a40:	d002      	beq.n	404a48 <udi_msc_sbc_read_capacity+0x34>
  404a42:	2b00      	cmp	r3, #0
  404a44:	d00f      	beq.n	404a66 <udi_msc_sbc_read_capacity+0x52>
  404a46:	e009      	b.n	404a5c <udi_msc_sbc_read_capacity+0x48>
					&udi_msc_capacity.max_lba)) {
	case CTRL_GOOD:
		break;
	case CTRL_BUSY:
		udi_msc_sense_fail_busy_or_change();
  404a48:	4b13      	ldr	r3, [pc, #76]	; (404a98 <udi_msc_sbc_read_capacity+0x84>)
  404a4a:	4798      	blx	r3
		udi_msc_csw_process();
  404a4c:	4b13      	ldr	r3, [pc, #76]	; (404a9c <udi_msc_sbc_read_capacity+0x88>)
  404a4e:	4798      	blx	r3
		return;
  404a50:	e019      	b.n	404a86 <udi_msc_sbc_read_capacity+0x72>
	case CTRL_NO_PRESENT:
		udi_msc_sense_fail_not_present();
  404a52:	4b13      	ldr	r3, [pc, #76]	; (404aa0 <udi_msc_sbc_read_capacity+0x8c>)
  404a54:	4798      	blx	r3
		udi_msc_csw_process();
  404a56:	4b11      	ldr	r3, [pc, #68]	; (404a9c <udi_msc_sbc_read_capacity+0x88>)
  404a58:	4798      	blx	r3
		return;
  404a5a:	e014      	b.n	404a86 <udi_msc_sbc_read_capacity+0x72>
	default:
		udi_msc_sense_fail_hardware();
  404a5c:	4b11      	ldr	r3, [pc, #68]	; (404aa4 <udi_msc_sbc_read_capacity+0x90>)
  404a5e:	4798      	blx	r3
		udi_msc_csw_process();
  404a60:	4b0e      	ldr	r3, [pc, #56]	; (404a9c <udi_msc_sbc_read_capacity+0x88>)
  404a62:	4798      	blx	r3
		return;
  404a64:	e00f      	b.n	404a86 <udi_msc_sbc_read_capacity+0x72>
		break;
  404a66:	bf00      	nop
	}

	// Format capacity data
	udi_msc_capacity.block_len = CPU_TO_BE32(UDI_MSC_BLOCK_SIZE);
  404a68:	4b09      	ldr	r3, [pc, #36]	; (404a90 <udi_msc_sbc_read_capacity+0x7c>)
  404a6a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  404a6e:	605a      	str	r2, [r3, #4]
	udi_msc_capacity.max_lba = cpu_to_be32(udi_msc_capacity.max_lba);
  404a70:	4b07      	ldr	r3, [pc, #28]	; (404a90 <udi_msc_sbc_read_capacity+0x7c>)
  404a72:	681b      	ldr	r3, [r3, #0]
  404a74:	ba1b      	rev	r3, r3
  404a76:	4a06      	ldr	r2, [pc, #24]	; (404a90 <udi_msc_sbc_read_capacity+0x7c>)
  404a78:	6013      	str	r3, [r2, #0]
	// Send the corresponding sense data
	udi_msc_data_send((uint8_t *) & udi_msc_capacity,
  404a7a:	2108      	movs	r1, #8
  404a7c:	4804      	ldr	r0, [pc, #16]	; (404a90 <udi_msc_sbc_read_capacity+0x7c>)
  404a7e:	4b0a      	ldr	r3, [pc, #40]	; (404aa8 <udi_msc_sbc_read_capacity+0x94>)
  404a80:	4798      	blx	r3
  404a82:	e000      	b.n	404a86 <udi_msc_sbc_read_capacity+0x72>
		return;
  404a84:	bf00      	nop
			sizeof(udi_msc_capacity));
}
  404a86:	bd80      	pop	{r7, pc}
  404a88:	004043c1 	.word	0x004043c1
  404a8c:	2001a1d4 	.word	0x2001a1d4
  404a90:	2001a22c 	.word	0x2001a22c
  404a94:	004032b1 	.word	0x004032b1
  404a98:	00404619 	.word	0x00404619
  404a9c:	00404499 	.word	0x00404499
  404aa0:	00404601 	.word	0x00404601
  404aa4:	00404631 	.word	0x00404631
  404aa8:	0040440d 	.word	0x0040440d

00404aac <udi_msc_sbc_trans>:


static void udi_msc_sbc_trans(bool b_read)
{
  404aac:	b580      	push	{r7, lr}
  404aae:	b084      	sub	sp, #16
  404ab0:	af00      	add	r7, sp, #0
  404ab2:	4603      	mov	r3, r0
  404ab4:	71fb      	strb	r3, [r7, #7]
	uint32_t trans_size;

	if (!b_read) {
  404ab6:	79fb      	ldrb	r3, [r7, #7]
  404ab8:	f083 0301 	eor.w	r3, r3, #1
  404abc:	b2db      	uxtb	r3, r3
  404abe:	2b00      	cmp	r3, #0
  404ac0:	d00c      	beq.n	404adc <udi_msc_sbc_trans+0x30>
		// Write operation then check Write Protect
		if (mem_wr_protect(udi_msc_cbw.bCBWLUN)) {
  404ac2:	4b22      	ldr	r3, [pc, #136]	; (404b4c <udi_msc_sbc_trans+0xa0>)
  404ac4:	7b5b      	ldrb	r3, [r3, #13]
  404ac6:	4618      	mov	r0, r3
  404ac8:	4b21      	ldr	r3, [pc, #132]	; (404b50 <udi_msc_sbc_trans+0xa4>)
  404aca:	4798      	blx	r3
  404acc:	4603      	mov	r3, r0
  404ace:	2b00      	cmp	r3, #0
  404ad0:	d004      	beq.n	404adc <udi_msc_sbc_trans+0x30>
			// Write not authorized
			udi_msc_sense_fail_protected();
  404ad2:	4b20      	ldr	r3, [pc, #128]	; (404b54 <udi_msc_sbc_trans+0xa8>)
  404ad4:	4798      	blx	r3
			udi_msc_csw_process();
  404ad6:	4b20      	ldr	r3, [pc, #128]	; (404b58 <udi_msc_sbc_trans+0xac>)
  404ad8:	4798      	blx	r3
			return;
  404ada:	e033      	b.n	404b44 <udi_msc_sbc_trans+0x98>
		}
	}
	// Read/Write command fields (address and number of block)
	MSB0(udi_msc_addr) = udi_msc_cbw.CDB[2];
  404adc:	4b1f      	ldr	r3, [pc, #124]	; (404b5c <udi_msc_sbc_trans+0xb0>)
  404ade:	4a1b      	ldr	r2, [pc, #108]	; (404b4c <udi_msc_sbc_trans+0xa0>)
  404ae0:	7c52      	ldrb	r2, [r2, #17]
  404ae2:	701a      	strb	r2, [r3, #0]
	MSB1(udi_msc_addr) = udi_msc_cbw.CDB[3];
  404ae4:	4b1e      	ldr	r3, [pc, #120]	; (404b60 <udi_msc_sbc_trans+0xb4>)
  404ae6:	4a19      	ldr	r2, [pc, #100]	; (404b4c <udi_msc_sbc_trans+0xa0>)
  404ae8:	7c92      	ldrb	r2, [r2, #18]
  404aea:	701a      	strb	r2, [r3, #0]
	MSB2(udi_msc_addr) = udi_msc_cbw.CDB[4];
  404aec:	4b1d      	ldr	r3, [pc, #116]	; (404b64 <udi_msc_sbc_trans+0xb8>)
  404aee:	4a17      	ldr	r2, [pc, #92]	; (404b4c <udi_msc_sbc_trans+0xa0>)
  404af0:	7cd2      	ldrb	r2, [r2, #19]
  404af2:	701a      	strb	r2, [r3, #0]
	MSB3(udi_msc_addr) = udi_msc_cbw.CDB[5];
  404af4:	4b1c      	ldr	r3, [pc, #112]	; (404b68 <udi_msc_sbc_trans+0xbc>)
  404af6:	4a15      	ldr	r2, [pc, #84]	; (404b4c <udi_msc_sbc_trans+0xa0>)
  404af8:	7d12      	ldrb	r2, [r2, #20]
  404afa:	701a      	strb	r2, [r3, #0]
	MSB(udi_msc_nb_block) = udi_msc_cbw.CDB[7];
  404afc:	4b1b      	ldr	r3, [pc, #108]	; (404b6c <udi_msc_sbc_trans+0xc0>)
  404afe:	4a13      	ldr	r2, [pc, #76]	; (404b4c <udi_msc_sbc_trans+0xa0>)
  404b00:	7d92      	ldrb	r2, [r2, #22]
  404b02:	701a      	strb	r2, [r3, #0]
	LSB(udi_msc_nb_block) = udi_msc_cbw.CDB[8];
  404b04:	4b1a      	ldr	r3, [pc, #104]	; (404b70 <udi_msc_sbc_trans+0xc4>)
  404b06:	4a11      	ldr	r2, [pc, #68]	; (404b4c <udi_msc_sbc_trans+0xa0>)
  404b08:	7dd2      	ldrb	r2, [r2, #23]
  404b0a:	701a      	strb	r2, [r3, #0]

	// Compute number of byte to transfer and valid it
	trans_size = (uint32_t) udi_msc_nb_block *UDI_MSC_BLOCK_SIZE;
  404b0c:	4b18      	ldr	r3, [pc, #96]	; (404b70 <udi_msc_sbc_trans+0xc4>)
  404b0e:	881b      	ldrh	r3, [r3, #0]
  404b10:	025b      	lsls	r3, r3, #9
  404b12:	60fb      	str	r3, [r7, #12]
	if (!udi_msc_cbw_validate(trans_size,
  404b14:	79fb      	ldrb	r3, [r7, #7]
  404b16:	2b00      	cmp	r3, #0
  404b18:	d001      	beq.n	404b1e <udi_msc_sbc_trans+0x72>
  404b1a:	2380      	movs	r3, #128	; 0x80
  404b1c:	e000      	b.n	404b20 <udi_msc_sbc_trans+0x74>
  404b1e:	2300      	movs	r3, #0
  404b20:	4619      	mov	r1, r3
  404b22:	68f8      	ldr	r0, [r7, #12]
  404b24:	4b13      	ldr	r3, [pc, #76]	; (404b74 <udi_msc_sbc_trans+0xc8>)
  404b26:	4798      	blx	r3
  404b28:	4603      	mov	r3, r0
  404b2a:	f083 0301 	eor.w	r3, r3, #1
  404b2e:	b2db      	uxtb	r3, r3
  404b30:	2b00      	cmp	r3, #0
  404b32:	d106      	bne.n	404b42 <udi_msc_sbc_trans+0x96>
					(b_read) ? USB_CBW_DIRECTION_IN :
					USB_CBW_DIRECTION_OUT))
		return;

	// Record transfer request to do it in a task and not under interrupt
	udi_msc_b_read = b_read;
  404b34:	4a10      	ldr	r2, [pc, #64]	; (404b78 <udi_msc_sbc_trans+0xcc>)
  404b36:	79fb      	ldrb	r3, [r7, #7]
  404b38:	7013      	strb	r3, [r2, #0]
	udi_msc_b_trans_req = true;
  404b3a:	4b10      	ldr	r3, [pc, #64]	; (404b7c <udi_msc_sbc_trans+0xd0>)
  404b3c:	2201      	movs	r2, #1
  404b3e:	701a      	strb	r2, [r3, #0]
  404b40:	e000      	b.n	404b44 <udi_msc_sbc_trans+0x98>
		return;
  404b42:	bf00      	nop
	UDI_MSC_NOTIFY_TRANS_EXT();
}
  404b44:	3710      	adds	r7, #16
  404b46:	46bd      	mov	sp, r7
  404b48:	bd80      	pop	{r7, pc}
  404b4a:	bf00      	nop
  404b4c:	2001a1d4 	.word	0x2001a1d4
  404b50:	00403399 	.word	0x00403399
  404b54:	00404649 	.word	0x00404649
  404b58:	00404499 	.word	0x00404499
  404b5c:	2001a213 	.word	0x2001a213
  404b60:	2001a212 	.word	0x2001a212
  404b64:	2001a211 	.word	0x2001a211
  404b68:	2001a210 	.word	0x2001a210
  404b6c:	2001a215 	.word	0x2001a215
  404b70:	2001a214 	.word	0x2001a214
  404b74:	004043c1 	.word	0x004043c1
  404b78:	2001a20c 	.word	0x2001a20c
  404b7c:	2001a20b 	.word	0x2001a20b

00404b80 <udi_msc_process_trans>:


bool udi_msc_process_trans(void)
{
  404b80:	b580      	push	{r7, lr}
  404b82:	b082      	sub	sp, #8
  404b84:	af00      	add	r7, sp, #0
	Ctrl_status status;

	if (!udi_msc_b_trans_req)
  404b86:	4b27      	ldr	r3, [pc, #156]	; (404c24 <udi_msc_process_trans+0xa4>)
  404b88:	781b      	ldrb	r3, [r3, #0]
  404b8a:	f083 0301 	eor.w	r3, r3, #1
  404b8e:	b2db      	uxtb	r3, r3
  404b90:	2b00      	cmp	r3, #0
  404b92:	d001      	beq.n	404b98 <udi_msc_process_trans+0x18>
		return false;	// No Transfer request to do
  404b94:	2300      	movs	r3, #0
  404b96:	e040      	b.n	404c1a <udi_msc_process_trans+0x9a>
	udi_msc_b_trans_req = false;
  404b98:	4b22      	ldr	r3, [pc, #136]	; (404c24 <udi_msc_process_trans+0xa4>)
  404b9a:	2200      	movs	r2, #0
  404b9c:	701a      	strb	r2, [r3, #0]
	udi_msc_b_reset_trans = false;
  404b9e:	4b22      	ldr	r3, [pc, #136]	; (404c28 <udi_msc_process_trans+0xa8>)
  404ba0:	2200      	movs	r2, #0
  404ba2:	701a      	strb	r2, [r3, #0]

	// Start transfer
	if (udi_msc_b_read) {
  404ba4:	4b21      	ldr	r3, [pc, #132]	; (404c2c <udi_msc_process_trans+0xac>)
  404ba6:	781b      	ldrb	r3, [r3, #0]
  404ba8:	2b00      	cmp	r3, #0
  404baa:	d00b      	beq.n	404bc4 <udi_msc_process_trans+0x44>
		status = memory_2_usb(udi_msc_cbw.bCBWLUN, udi_msc_addr,
  404bac:	4b20      	ldr	r3, [pc, #128]	; (404c30 <udi_msc_process_trans+0xb0>)
  404bae:	7b58      	ldrb	r0, [r3, #13]
  404bb0:	4b20      	ldr	r3, [pc, #128]	; (404c34 <udi_msc_process_trans+0xb4>)
  404bb2:	6819      	ldr	r1, [r3, #0]
  404bb4:	4b20      	ldr	r3, [pc, #128]	; (404c38 <udi_msc_process_trans+0xb8>)
  404bb6:	881b      	ldrh	r3, [r3, #0]
  404bb8:	461a      	mov	r2, r3
  404bba:	4b20      	ldr	r3, [pc, #128]	; (404c3c <udi_msc_process_trans+0xbc>)
  404bbc:	4798      	blx	r3
  404bbe:	4603      	mov	r3, r0
  404bc0:	71fb      	strb	r3, [r7, #7]
  404bc2:	e00a      	b.n	404bda <udi_msc_process_trans+0x5a>
				udi_msc_nb_block);
	} else {
		status = usb_2_memory(udi_msc_cbw.bCBWLUN, udi_msc_addr,
  404bc4:	4b1a      	ldr	r3, [pc, #104]	; (404c30 <udi_msc_process_trans+0xb0>)
  404bc6:	7b58      	ldrb	r0, [r3, #13]
  404bc8:	4b1a      	ldr	r3, [pc, #104]	; (404c34 <udi_msc_process_trans+0xb4>)
  404bca:	6819      	ldr	r1, [r3, #0]
  404bcc:	4b1a      	ldr	r3, [pc, #104]	; (404c38 <udi_msc_process_trans+0xb8>)
  404bce:	881b      	ldrh	r3, [r3, #0]
  404bd0:	461a      	mov	r2, r3
  404bd2:	4b1b      	ldr	r3, [pc, #108]	; (404c40 <udi_msc_process_trans+0xc0>)
  404bd4:	4798      	blx	r3
  404bd6:	4603      	mov	r3, r0
  404bd8:	71fb      	strb	r3, [r7, #7]
				udi_msc_nb_block);
	}

	// Check if transfer is aborted by reset
	if (udi_msc_b_reset_trans) {
  404bda:	4b13      	ldr	r3, [pc, #76]	; (404c28 <udi_msc_process_trans+0xa8>)
  404bdc:	781b      	ldrb	r3, [r3, #0]
  404bde:	b2db      	uxtb	r3, r3
  404be0:	2b00      	cmp	r3, #0
  404be2:	d004      	beq.n	404bee <udi_msc_process_trans+0x6e>
		udi_msc_b_reset_trans = false;
  404be4:	4b10      	ldr	r3, [pc, #64]	; (404c28 <udi_msc_process_trans+0xa8>)
  404be6:	2200      	movs	r2, #0
  404be8:	701a      	strb	r2, [r3, #0]
		return true;
  404bea:	2301      	movs	r3, #1
  404bec:	e015      	b.n	404c1a <udi_msc_process_trans+0x9a>
	}

	// Check status of transfer
	switch (status) {
  404bee:	79fb      	ldrb	r3, [r7, #7]
  404bf0:	2b02      	cmp	r3, #2
  404bf2:	d009      	beq.n	404c08 <udi_msc_process_trans+0x88>
  404bf4:	2b03      	cmp	r3, #3
  404bf6:	d004      	beq.n	404c02 <udi_msc_process_trans+0x82>
  404bf8:	2b00      	cmp	r3, #0
  404bfa:	d108      	bne.n	404c0e <udi_msc_process_trans+0x8e>
	case CTRL_GOOD:
		udi_msc_sense_pass();
  404bfc:	4b11      	ldr	r3, [pc, #68]	; (404c44 <udi_msc_process_trans+0xc4>)
  404bfe:	4798      	blx	r3
		break;
  404c00:	e008      	b.n	404c14 <udi_msc_process_trans+0x94>
	case CTRL_BUSY:
		udi_msc_sense_fail_busy_or_change();
  404c02:	4b11      	ldr	r3, [pc, #68]	; (404c48 <udi_msc_process_trans+0xc8>)
  404c04:	4798      	blx	r3
		break;
  404c06:	e005      	b.n	404c14 <udi_msc_process_trans+0x94>
	case CTRL_NO_PRESENT:
		udi_msc_sense_fail_not_present();
  404c08:	4b10      	ldr	r3, [pc, #64]	; (404c4c <udi_msc_process_trans+0xcc>)
  404c0a:	4798      	blx	r3
		break;
  404c0c:	e002      	b.n	404c14 <udi_msc_process_trans+0x94>
	default:
	case CTRL_FAIL:
		udi_msc_sense_fail_hardware();
  404c0e:	4b10      	ldr	r3, [pc, #64]	; (404c50 <udi_msc_process_trans+0xd0>)
  404c10:	4798      	blx	r3
		break;
  404c12:	bf00      	nop
	}
	// Send status of transfer in CSW packet
	udi_msc_csw_process();
  404c14:	4b0f      	ldr	r3, [pc, #60]	; (404c54 <udi_msc_process_trans+0xd4>)
  404c16:	4798      	blx	r3
	return true;
  404c18:	2301      	movs	r3, #1
}
  404c1a:	4618      	mov	r0, r3
  404c1c:	3708      	adds	r7, #8
  404c1e:	46bd      	mov	sp, r7
  404c20:	bd80      	pop	{r7, pc}
  404c22:	bf00      	nop
  404c24:	2001a20b 	.word	0x2001a20b
  404c28:	20000202 	.word	0x20000202
  404c2c:	2001a20c 	.word	0x2001a20c
  404c30:	2001a1d4 	.word	0x2001a1d4
  404c34:	2001a210 	.word	0x2001a210
  404c38:	2001a214 	.word	0x2001a214
  404c3c:	00403451 	.word	0x00403451
  404c40:	004034a9 	.word	0x004034a9
  404c44:	004045e5 	.word	0x004045e5
  404c48:	00404619 	.word	0x00404619
  404c4c:	00404601 	.word	0x00404601
  404c50:	00404631 	.word	0x00404631
  404c54:	00404499 	.word	0x00404499

00404c58 <udi_msc_trans_ack>:


static void udi_msc_trans_ack(udd_ep_status_t status, iram_size_t n,
		udd_ep_id_t ep)
{
  404c58:	b480      	push	{r7}
  404c5a:	b083      	sub	sp, #12
  404c5c:	af00      	add	r7, sp, #0
  404c5e:	4603      	mov	r3, r0
  404c60:	6039      	str	r1, [r7, #0]
  404c62:	71fb      	strb	r3, [r7, #7]
  404c64:	4613      	mov	r3, r2
  404c66:	71bb      	strb	r3, [r7, #6]
	UNUSED(ep);
	UNUSED(n);
	// Update variable to signal the end of transfer
	udi_msc_b_abort_trans = (UDD_EP_TRANSFER_OK != status) ? true : false;
  404c68:	79fb      	ldrb	r3, [r7, #7]
  404c6a:	2b00      	cmp	r3, #0
  404c6c:	bf14      	ite	ne
  404c6e:	2301      	movne	r3, #1
  404c70:	2300      	moveq	r3, #0
  404c72:	b2da      	uxtb	r2, r3
  404c74:	4b05      	ldr	r3, [pc, #20]	; (404c8c <udi_msc_trans_ack+0x34>)
  404c76:	701a      	strb	r2, [r3, #0]
	udi_msc_b_ack_trans = true;
  404c78:	4b05      	ldr	r3, [pc, #20]	; (404c90 <udi_msc_trans_ack+0x38>)
  404c7a:	2201      	movs	r2, #1
  404c7c:	701a      	strb	r2, [r3, #0]
}
  404c7e:	bf00      	nop
  404c80:	370c      	adds	r7, #12
  404c82:	46bd      	mov	sp, r7
  404c84:	f85d 7b04 	ldr.w	r7, [sp], #4
  404c88:	4770      	bx	lr
  404c8a:	bf00      	nop
  404c8c:	2001ab9a 	.word	0x2001ab9a
  404c90:	20000201 	.word	0x20000201

00404c94 <udi_msc_trans_block>:


bool udi_msc_trans_block(bool b_read, uint8_t * block, iram_size_t block_size,
		void (*callback) (udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep))
{
  404c94:	b590      	push	{r4, r7, lr}
  404c96:	b087      	sub	sp, #28
  404c98:	af02      	add	r7, sp, #8
  404c9a:	60b9      	str	r1, [r7, #8]
  404c9c:	607a      	str	r2, [r7, #4]
  404c9e:	603b      	str	r3, [r7, #0]
  404ca0:	4603      	mov	r3, r0
  404ca2:	73fb      	strb	r3, [r7, #15]
	if (!udi_msc_b_ack_trans)
  404ca4:	4b2e      	ldr	r3, [pc, #184]	; (404d60 <udi_msc_trans_block+0xcc>)
  404ca6:	781b      	ldrb	r3, [r3, #0]
  404ca8:	b2db      	uxtb	r3, r3
  404caa:	f083 0301 	eor.w	r3, r3, #1
  404cae:	b2db      	uxtb	r3, r3
  404cb0:	2b00      	cmp	r3, #0
  404cb2:	d001      	beq.n	404cb8 <udi_msc_trans_block+0x24>
		return false;	// No possible, transfer on going
  404cb4:	2300      	movs	r3, #0
  404cb6:	e04e      	b.n	404d56 <udi_msc_trans_block+0xc2>

	// Start transfer Internal RAM<->USB line
	udi_msc_b_ack_trans = false;
  404cb8:	4b29      	ldr	r3, [pc, #164]	; (404d60 <udi_msc_trans_block+0xcc>)
  404cba:	2200      	movs	r2, #0
  404cbc:	701a      	strb	r2, [r3, #0]
	if (!udd_ep_run((b_read) ? UDI_MSC_EP_IN : UDI_MSC_EP_OUT,
  404cbe:	7bfb      	ldrb	r3, [r7, #15]
  404cc0:	2b00      	cmp	r3, #0
  404cc2:	d001      	beq.n	404cc8 <udi_msc_trans_block+0x34>
  404cc4:	2081      	movs	r0, #129	; 0x81
  404cc6:	e000      	b.n	404cca <udi_msc_trans_block+0x36>
  404cc8:	2002      	movs	r0, #2
  404cca:	683b      	ldr	r3, [r7, #0]
  404ccc:	2b00      	cmp	r3, #0
  404cce:	d001      	beq.n	404cd4 <udi_msc_trans_block+0x40>
  404cd0:	683b      	ldr	r3, [r7, #0]
  404cd2:	e000      	b.n	404cd6 <udi_msc_trans_block+0x42>
  404cd4:	4b23      	ldr	r3, [pc, #140]	; (404d64 <udi_msc_trans_block+0xd0>)
  404cd6:	9300      	str	r3, [sp, #0]
  404cd8:	687b      	ldr	r3, [r7, #4]
  404cda:	68ba      	ldr	r2, [r7, #8]
  404cdc:	2100      	movs	r1, #0
  404cde:	4c22      	ldr	r4, [pc, #136]	; (404d68 <udi_msc_trans_block+0xd4>)
  404ce0:	47a0      	blx	r4
  404ce2:	4603      	mov	r3, r0
  404ce4:	f083 0301 	eor.w	r3, r3, #1
  404ce8:	b2db      	uxtb	r3, r3
  404cea:	2b00      	cmp	r3, #0
  404cec:	d004      	beq.n	404cf8 <udi_msc_trans_block+0x64>
					false,
					block,
					block_size,
					(NULL == callback) ? udi_msc_trans_ack :
					callback)) {
		udi_msc_b_ack_trans = true;
  404cee:	4b1c      	ldr	r3, [pc, #112]	; (404d60 <udi_msc_trans_block+0xcc>)
  404cf0:	2201      	movs	r2, #1
  404cf2:	701a      	strb	r2, [r3, #0]
		return false;
  404cf4:	2300      	movs	r3, #0
  404cf6:	e02e      	b.n	404d56 <udi_msc_trans_block+0xc2>
	}
	if (NULL == callback) {
  404cf8:	683b      	ldr	r3, [r7, #0]
  404cfa:	2b00      	cmp	r3, #0
  404cfc:	d124      	bne.n	404d48 <udi_msc_trans_block+0xb4>
		while (!udi_msc_b_ack_trans);
  404cfe:	bf00      	nop
  404d00:	4b17      	ldr	r3, [pc, #92]	; (404d60 <udi_msc_trans_block+0xcc>)
  404d02:	781b      	ldrb	r3, [r3, #0]
  404d04:	b2db      	uxtb	r3, r3
  404d06:	f083 0301 	eor.w	r3, r3, #1
  404d0a:	b2db      	uxtb	r3, r3
  404d0c:	2b00      	cmp	r3, #0
  404d0e:	d1f7      	bne.n	404d00 <udi_msc_trans_block+0x6c>
		if (udi_msc_b_abort_trans) {
  404d10:	4b16      	ldr	r3, [pc, #88]	; (404d6c <udi_msc_trans_block+0xd8>)
  404d12:	781b      	ldrb	r3, [r3, #0]
  404d14:	b2db      	uxtb	r3, r3
  404d16:	2b00      	cmp	r3, #0
  404d18:	d001      	beq.n	404d1e <udi_msc_trans_block+0x8a>
			return false;
  404d1a:	2300      	movs	r3, #0
  404d1c:	e01b      	b.n	404d56 <udi_msc_trans_block+0xc2>
		}
		udi_msc_csw.dCSWDataResidue -= block_size;
  404d1e:	4b14      	ldr	r3, [pc, #80]	; (404d70 <udi_msc_trans_block+0xdc>)
  404d20:	689a      	ldr	r2, [r3, #8]
  404d22:	687b      	ldr	r3, [r7, #4]
  404d24:	1ad3      	subs	r3, r2, r3
  404d26:	4a12      	ldr	r2, [pc, #72]	; (404d70 <udi_msc_trans_block+0xdc>)
  404d28:	6093      	str	r3, [r2, #8]
		return (!udi_msc_b_abort_trans);
  404d2a:	4b10      	ldr	r3, [pc, #64]	; (404d6c <udi_msc_trans_block+0xd8>)
  404d2c:	781b      	ldrb	r3, [r3, #0]
  404d2e:	b2db      	uxtb	r3, r3
  404d30:	2b00      	cmp	r3, #0
  404d32:	bf14      	ite	ne
  404d34:	2301      	movne	r3, #1
  404d36:	2300      	moveq	r3, #0
  404d38:	b2db      	uxtb	r3, r3
  404d3a:	f083 0301 	eor.w	r3, r3, #1
  404d3e:	b2db      	uxtb	r3, r3
  404d40:	f003 0301 	and.w	r3, r3, #1
  404d44:	b2db      	uxtb	r3, r3
  404d46:	e006      	b.n	404d56 <udi_msc_trans_block+0xc2>
	}
	udi_msc_csw.dCSWDataResidue -= block_size;
  404d48:	4b09      	ldr	r3, [pc, #36]	; (404d70 <udi_msc_trans_block+0xdc>)
  404d4a:	689a      	ldr	r2, [r3, #8]
  404d4c:	687b      	ldr	r3, [r7, #4]
  404d4e:	1ad3      	subs	r3, r2, r3
  404d50:	4a07      	ldr	r2, [pc, #28]	; (404d70 <udi_msc_trans_block+0xdc>)
  404d52:	6093      	str	r3, [r2, #8]
	return true;
  404d54:	2301      	movs	r3, #1
}
  404d56:	4618      	mov	r0, r3
  404d58:	3714      	adds	r7, #20
  404d5a:	46bd      	mov	sp, r7
  404d5c:	bd90      	pop	{r4, r7, pc}
  404d5e:	bf00      	nop
  404d60:	20000201 	.word	0x20000201
  404d64:	00404c59 	.word	0x00404c59
  404d68:	00407bf5 	.word	0x00407bf5
  404d6c:	2001ab9a 	.word	0x2001ab9a
  404d70:	200001f4 	.word	0x200001f4

00404d74 <udc_get_string_serial_name>:
	}
#  define USB_DEVICE_SERIAL_NAME_SIZE \
	USB_DEVICE_GET_SERIAL_NAME_LENGTH
#elif defined USB_DEVICE_SERIAL_NAME
	static const uint8_t *udc_get_string_serial_name(void)
	{
  404d74:	b480      	push	{r7}
  404d76:	af00      	add	r7, sp, #0
		return (const uint8_t *)USB_DEVICE_SERIAL_NAME;
  404d78:	4b02      	ldr	r3, [pc, #8]	; (404d84 <udc_get_string_serial_name+0x10>)
	}
  404d7a:	4618      	mov	r0, r3
  404d7c:	46bd      	mov	sp, r7
  404d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
  404d82:	4770      	bx	lr
  404d84:	00410e58 	.word	0x00410e58

00404d88 <udc_get_eof_conf>:
 * \brief Returns a value to check the end of USB Configuration descriptor
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
  404d88:	b480      	push	{r7}
  404d8a:	af00      	add	r7, sp, #0
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
  404d8c:	4b06      	ldr	r3, [pc, #24]	; (404da8 <udc_get_eof_conf+0x20>)
  404d8e:	681b      	ldr	r3, [r3, #0]
  404d90:	681b      	ldr	r3, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
  404d92:	4a05      	ldr	r2, [pc, #20]	; (404da8 <udc_get_eof_conf+0x20>)
  404d94:	6812      	ldr	r2, [r2, #0]
  404d96:	6812      	ldr	r2, [r2, #0]
  404d98:	8852      	ldrh	r2, [r2, #2]
  404d9a:	b292      	uxth	r2, r2
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
  404d9c:	4413      	add	r3, r2
}
  404d9e:	4618      	mov	r0, r3
  404da0:	46bd      	mov	sp, r7
  404da2:	f85d 7b04 	ldr.w	r7, [sp], #4
  404da6:	4770      	bx	lr
  404da8:	2001a240 	.word	0x2001a240

00404dac <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
  404dac:	b580      	push	{r7, lr}
  404dae:	b084      	sub	sp, #16
  404db0:	af00      	add	r7, sp, #0
  404db2:	6078      	str	r0, [r7, #4]
  404db4:	460b      	mov	r3, r1
  404db6:	70fb      	strb	r3, [r7, #3]
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
  404db8:	4b12      	ldr	r3, [pc, #72]	; (404e04 <udc_next_desc_in_iface+0x58>)
  404dba:	4798      	blx	r3
  404dbc:	60f8      	str	r0, [r7, #12]
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
  404dbe:	687b      	ldr	r3, [r7, #4]
  404dc0:	781b      	ldrb	r3, [r3, #0]
  404dc2:	461a      	mov	r2, r3
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
  404dc4:	687b      	ldr	r3, [r7, #4]
  404dc6:	4413      	add	r3, r2
  404dc8:	607b      	str	r3, [r7, #4]
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
  404dca:	e010      	b.n	404dee <udc_next_desc_in_iface+0x42>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
  404dcc:	687b      	ldr	r3, [r7, #4]
  404dce:	785b      	ldrb	r3, [r3, #1]
  404dd0:	2b04      	cmp	r3, #4
  404dd2:	d011      	beq.n	404df8 <udc_next_desc_in_iface+0x4c>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
  404dd4:	687b      	ldr	r3, [r7, #4]
  404dd6:	785b      	ldrb	r3, [r3, #1]
  404dd8:	78fa      	ldrb	r2, [r7, #3]
  404dda:	429a      	cmp	r2, r3
  404ddc:	d101      	bne.n	404de2 <udc_next_desc_in_iface+0x36>
			return desc; // Specific descriptor found
  404dde:	687b      	ldr	r3, [r7, #4]
  404de0:	e00c      	b.n	404dfc <udc_next_desc_in_iface+0x50>
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
  404de2:	687b      	ldr	r3, [r7, #4]
  404de4:	781b      	ldrb	r3, [r3, #0]
  404de6:	461a      	mov	r2, r3
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
  404de8:	687b      	ldr	r3, [r7, #4]
  404dea:	4413      	add	r3, r2
  404dec:	607b      	str	r3, [r7, #4]
	while (ptr_eof_desc > desc) {
  404dee:	68fa      	ldr	r2, [r7, #12]
  404df0:	687b      	ldr	r3, [r7, #4]
  404df2:	429a      	cmp	r2, r3
  404df4:	d8ea      	bhi.n	404dcc <udc_next_desc_in_iface+0x20>
  404df6:	e000      	b.n	404dfa <udc_next_desc_in_iface+0x4e>
			break; // End of global interface descriptor
  404df8:	bf00      	nop
	}
	return NULL; // No specific descriptor found
  404dfa:	2300      	movs	r3, #0
}
  404dfc:	4618      	mov	r0, r3
  404dfe:	3710      	adds	r7, #16
  404e00:	46bd      	mov	sp, r7
  404e02:	bd80      	pop	{r7, pc}
  404e04:	00404d89 	.word	0x00404d89

00404e08 <udc_update_iface_desc>:
 * \param setting_num   Setting number of interface to find
 *
 * \return 1 if found or 0 if not found
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
  404e08:	b580      	push	{r7, lr}
  404e0a:	b084      	sub	sp, #16
  404e0c:	af00      	add	r7, sp, #0
  404e0e:	4603      	mov	r3, r0
  404e10:	460a      	mov	r2, r1
  404e12:	71fb      	strb	r3, [r7, #7]
  404e14:	4613      	mov	r3, r2
  404e16:	71bb      	strb	r3, [r7, #6]
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
  404e18:	4b1e      	ldr	r3, [pc, #120]	; (404e94 <udc_update_iface_desc+0x8c>)
  404e1a:	781b      	ldrb	r3, [r3, #0]
  404e1c:	2b00      	cmp	r3, #0
  404e1e:	d101      	bne.n	404e24 <udc_update_iface_desc+0x1c>
		return false;
  404e20:	2300      	movs	r3, #0
  404e22:	e032      	b.n	404e8a <udc_update_iface_desc+0x82>
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  404e24:	4b1c      	ldr	r3, [pc, #112]	; (404e98 <udc_update_iface_desc+0x90>)
  404e26:	681b      	ldr	r3, [r3, #0]
  404e28:	681b      	ldr	r3, [r3, #0]
  404e2a:	791b      	ldrb	r3, [r3, #4]
  404e2c:	79fa      	ldrb	r2, [r7, #7]
  404e2e:	429a      	cmp	r2, r3
  404e30:	d301      	bcc.n	404e36 <udc_update_iface_desc+0x2e>
		return false;
  404e32:	2300      	movs	r3, #0
  404e34:	e029      	b.n	404e8a <udc_update_iface_desc+0x82>
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;
  404e36:	4b18      	ldr	r3, [pc, #96]	; (404e98 <udc_update_iface_desc+0x90>)
  404e38:	681b      	ldr	r3, [r3, #0]
  404e3a:	681b      	ldr	r3, [r3, #0]
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
  404e3c:	4a17      	ldr	r2, [pc, #92]	; (404e9c <udc_update_iface_desc+0x94>)
  404e3e:	6013      	str	r3, [r2, #0]

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
  404e40:	4b17      	ldr	r3, [pc, #92]	; (404ea0 <udc_update_iface_desc+0x98>)
  404e42:	4798      	blx	r3
  404e44:	60f8      	str	r0, [r7, #12]
	while (ptr_end_desc >
  404e46:	e01a      	b.n	404e7e <udc_update_iface_desc+0x76>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
  404e48:	4b14      	ldr	r3, [pc, #80]	; (404e9c <udc_update_iface_desc+0x94>)
  404e4a:	681b      	ldr	r3, [r3, #0]
  404e4c:	785b      	ldrb	r3, [r3, #1]
  404e4e:	2b04      	cmp	r3, #4
  404e50:	d10d      	bne.n	404e6e <udc_update_iface_desc+0x66>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
  404e52:	4b12      	ldr	r3, [pc, #72]	; (404e9c <udc_update_iface_desc+0x94>)
  404e54:	681b      	ldr	r3, [r3, #0]
  404e56:	789b      	ldrb	r3, [r3, #2]
  404e58:	79fa      	ldrb	r2, [r7, #7]
  404e5a:	429a      	cmp	r2, r3
  404e5c:	d107      	bne.n	404e6e <udc_update_iface_desc+0x66>
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
  404e5e:	4b0f      	ldr	r3, [pc, #60]	; (404e9c <udc_update_iface_desc+0x94>)
  404e60:	681b      	ldr	r3, [r3, #0]
  404e62:	78db      	ldrb	r3, [r3, #3]
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
  404e64:	79ba      	ldrb	r2, [r7, #6]
  404e66:	429a      	cmp	r2, r3
  404e68:	d101      	bne.n	404e6e <udc_update_iface_desc+0x66>
				return true; // Interface found
  404e6a:	2301      	movs	r3, #1
  404e6c:	e00d      	b.n	404e8a <udc_update_iface_desc+0x82>
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
  404e6e:	4b0b      	ldr	r3, [pc, #44]	; (404e9c <udc_update_iface_desc+0x94>)
  404e70:	681b      	ldr	r3, [r3, #0]
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
  404e72:	4a0a      	ldr	r2, [pc, #40]	; (404e9c <udc_update_iface_desc+0x94>)
  404e74:	6812      	ldr	r2, [r2, #0]
  404e76:	7812      	ldrb	r2, [r2, #0]
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
  404e78:	4413      	add	r3, r2
  404e7a:	4a08      	ldr	r2, [pc, #32]	; (404e9c <udc_update_iface_desc+0x94>)
  404e7c:	6013      	str	r3, [r2, #0]
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
  404e7e:	4b07      	ldr	r3, [pc, #28]	; (404e9c <udc_update_iface_desc+0x94>)
  404e80:	681b      	ldr	r3, [r3, #0]
	while (ptr_end_desc >
  404e82:	68fa      	ldr	r2, [r7, #12]
  404e84:	429a      	cmp	r2, r3
  404e86:	d8df      	bhi.n	404e48 <udc_update_iface_desc+0x40>
	}
	return false; // Interface not found
  404e88:	2300      	movs	r3, #0
}
  404e8a:	4618      	mov	r0, r3
  404e8c:	3710      	adds	r7, #16
  404e8e:	46bd      	mov	sp, r7
  404e90:	bd80      	pop	{r7, pc}
  404e92:	bf00      	nop
  404e94:	2001a23c 	.word	0x2001a23c
  404e98:	2001a240 	.word	0x2001a240
  404e9c:	2001a244 	.word	0x2001a244
  404ea0:	00404d89 	.word	0x00404d89

00404ea4 <udc_iface_disable>:
 * \param iface_num     Interface number to disable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_disable(uint8_t iface_num)
{
  404ea4:	b580      	push	{r7, lr}
  404ea6:	b084      	sub	sp, #16
  404ea8:	af00      	add	r7, sp, #0
  404eaa:	4603      	mov	r3, r0
  404eac:	71fb      	strb	r3, [r7, #7]
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface
	// to update udc_ptr_iface before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
  404eae:	79fb      	ldrb	r3, [r7, #7]
  404eb0:	2100      	movs	r1, #0
  404eb2:	4618      	mov	r0, r3
  404eb4:	4b1e      	ldr	r3, [pc, #120]	; (404f30 <udc_iface_disable+0x8c>)
  404eb6:	4798      	blx	r3
  404eb8:	4603      	mov	r3, r0
  404eba:	f083 0301 	eor.w	r3, r3, #1
  404ebe:	b2db      	uxtb	r3, r3
  404ec0:	2b00      	cmp	r3, #0
  404ec2:	d001      	beq.n	404ec8 <udc_iface_disable+0x24>
		return false;
  404ec4:	2300      	movs	r3, #0
  404ec6:	e02f      	b.n	404f28 <udc_iface_disable+0x84>
	}

	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
  404ec8:	4b1a      	ldr	r3, [pc, #104]	; (404f34 <udc_iface_disable+0x90>)
  404eca:	681b      	ldr	r3, [r3, #0]
  404ecc:	685a      	ldr	r2, [r3, #4]
  404ece:	79fb      	ldrb	r3, [r7, #7]
  404ed0:	009b      	lsls	r3, r3, #2
  404ed2:	4413      	add	r3, r2
  404ed4:	681b      	ldr	r3, [r3, #0]
  404ed6:	60bb      	str	r3, [r7, #8]

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  404ed8:	68bb      	ldr	r3, [r7, #8]
  404eda:	68db      	ldr	r3, [r3, #12]
  404edc:	4798      	blx	r3
  404ede:	4603      	mov	r3, r0
  404ee0:	461a      	mov	r2, r3
  404ee2:	79fb      	ldrb	r3, [r7, #7]
  404ee4:	4611      	mov	r1, r2
  404ee6:	4618      	mov	r0, r3
  404ee8:	4b11      	ldr	r3, [pc, #68]	; (404f30 <udc_iface_disable+0x8c>)
  404eea:	4798      	blx	r3
  404eec:	4603      	mov	r3, r0
  404eee:	f083 0301 	eor.w	r3, r3, #1
  404ef2:	b2db      	uxtb	r3, r3
  404ef4:	2b00      	cmp	r3, #0
  404ef6:	d001      	beq.n	404efc <udc_iface_disable+0x58>
		return false;
  404ef8:	2300      	movs	r3, #0
  404efa:	e015      	b.n	404f28 <udc_iface_disable+0x84>
	}

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
  404efc:	4b0e      	ldr	r3, [pc, #56]	; (404f38 <udc_iface_disable+0x94>)
  404efe:	681b      	ldr	r3, [r3, #0]
  404f00:	60fb      	str	r3, [r7, #12]
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  404f02:	2105      	movs	r1, #5
  404f04:	68f8      	ldr	r0, [r7, #12]
  404f06:	4b0d      	ldr	r3, [pc, #52]	; (404f3c <udc_iface_disable+0x98>)
  404f08:	4798      	blx	r3
  404f0a:	60f8      	str	r0, [r7, #12]
					udc_next_desc_in_iface((UDC_DESC_STORAGE
					usb_conf_desc_t *)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
  404f0c:	68fb      	ldr	r3, [r7, #12]
  404f0e:	2b00      	cmp	r3, #0
  404f10:	d005      	beq.n	404f1e <udc_iface_disable+0x7a>
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
  404f12:	68fb      	ldr	r3, [r7, #12]
  404f14:	789b      	ldrb	r3, [r3, #2]
  404f16:	4618      	mov	r0, r3
  404f18:	4b09      	ldr	r3, [pc, #36]	; (404f40 <udc_iface_disable+0x9c>)
  404f1a:	4798      	blx	r3
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  404f1c:	e7f1      	b.n	404f02 <udc_iface_disable+0x5e>
				break;
  404f1e:	bf00      	nop
		}
	}
#endif

	// Disable interface
	udi_api->disable();
  404f20:	68bb      	ldr	r3, [r7, #8]
  404f22:	685b      	ldr	r3, [r3, #4]
  404f24:	4798      	blx	r3
	return true;
  404f26:	2301      	movs	r3, #1
}
  404f28:	4618      	mov	r0, r3
  404f2a:	3710      	adds	r7, #16
  404f2c:	46bd      	mov	sp, r7
  404f2e:	bd80      	pop	{r7, pc}
  404f30:	00404e09 	.word	0x00404e09
  404f34:	2001a240 	.word	0x2001a240
  404f38:	2001a244 	.word	0x2001a244
  404f3c:	00404dad 	.word	0x00404dad
  404f40:	00407771 	.word	0x00407771

00404f44 <udc_iface_enable>:
 * \param setting_num   Setting number to enable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
  404f44:	b580      	push	{r7, lr}
  404f46:	b084      	sub	sp, #16
  404f48:	af00      	add	r7, sp, #0
  404f4a:	4603      	mov	r3, r0
  404f4c:	460a      	mov	r2, r1
  404f4e:	71fb      	strb	r3, [r7, #7]
  404f50:	4613      	mov	r3, r2
  404f52:	71bb      	strb	r3, [r7, #6]
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num)) {
  404f54:	79ba      	ldrb	r2, [r7, #6]
  404f56:	79fb      	ldrb	r3, [r7, #7]
  404f58:	4611      	mov	r1, r2
  404f5a:	4618      	mov	r0, r3
  404f5c:	4b1a      	ldr	r3, [pc, #104]	; (404fc8 <udc_iface_enable+0x84>)
  404f5e:	4798      	blx	r3
  404f60:	4603      	mov	r3, r0
  404f62:	f083 0301 	eor.w	r3, r3, #1
  404f66:	b2db      	uxtb	r3, r3
  404f68:	2b00      	cmp	r3, #0
  404f6a:	d001      	beq.n	404f70 <udc_iface_enable+0x2c>
		return false;
  404f6c:	2300      	movs	r3, #0
  404f6e:	e027      	b.n	404fc0 <udc_iface_enable+0x7c>

#if (0!=USB_DEVICE_MAX_EP)
	usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
  404f70:	4b16      	ldr	r3, [pc, #88]	; (404fcc <udc_iface_enable+0x88>)
  404f72:	681b      	ldr	r3, [r3, #0]
  404f74:	60fb      	str	r3, [r7, #12]
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  404f76:	2105      	movs	r1, #5
  404f78:	68f8      	ldr	r0, [r7, #12]
  404f7a:	4b15      	ldr	r3, [pc, #84]	; (404fd0 <udc_iface_enable+0x8c>)
  404f7c:	4798      	blx	r3
  404f7e:	60f8      	str	r0, [r7, #12]
				udc_next_desc_in_iface((UDC_DESC_STORAGE
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
  404f80:	68fb      	ldr	r3, [r7, #12]
  404f82:	2b00      	cmp	r3, #0
  404f84:	d011      	beq.n	404faa <udc_iface_enable+0x66>
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
  404f86:	68fb      	ldr	r3, [r7, #12]
  404f88:	7898      	ldrb	r0, [r3, #2]
  404f8a:	68fb      	ldr	r3, [r7, #12]
  404f8c:	78d9      	ldrb	r1, [r3, #3]
  404f8e:	68fb      	ldr	r3, [r7, #12]
  404f90:	889b      	ldrh	r3, [r3, #4]
  404f92:	b29b      	uxth	r3, r3
  404f94:	461a      	mov	r2, r3
  404f96:	4b0f      	ldr	r3, [pc, #60]	; (404fd4 <udc_iface_enable+0x90>)
  404f98:	4798      	blx	r3
  404f9a:	4603      	mov	r3, r0
  404f9c:	f083 0301 	eor.w	r3, r3, #1
  404fa0:	b2db      	uxtb	r3, r3
  404fa2:	2b00      	cmp	r3, #0
  404fa4:	d0e7      	beq.n	404f76 <udc_iface_enable+0x32>
				ep_desc->bmAttributes,
				le16_to_cpu
				(ep_desc->wMaxPacketSize))) {
			return false;
  404fa6:	2300      	movs	r3, #0
  404fa8:	e00a      	b.n	404fc0 <udc_iface_enable+0x7c>
			break;
  404faa:	bf00      	nop
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
  404fac:	4b0a      	ldr	r3, [pc, #40]	; (404fd8 <udc_iface_enable+0x94>)
  404fae:	681b      	ldr	r3, [r3, #0]
  404fb0:	685a      	ldr	r2, [r3, #4]
  404fb2:	79fb      	ldrb	r3, [r7, #7]
  404fb4:	009b      	lsls	r3, r3, #2
  404fb6:	4413      	add	r3, r2
  404fb8:	681b      	ldr	r3, [r3, #0]
  404fba:	681b      	ldr	r3, [r3, #0]
  404fbc:	4798      	blx	r3
  404fbe:	4603      	mov	r3, r0
}
  404fc0:	4618      	mov	r0, r3
  404fc2:	3710      	adds	r7, #16
  404fc4:	46bd      	mov	sp, r7
  404fc6:	bd80      	pop	{r7, pc}
  404fc8:	00404e09 	.word	0x00404e09
  404fcc:	2001a244 	.word	0x2001a244
  404fd0:	00404dad 	.word	0x00404dad
  404fd4:	0040756d 	.word	0x0040756d
  404fd8:	2001a240 	.word	0x2001a240

00404fdc <udc_start>:

/*! \brief Start the USB Device stack
 */
void udc_start(void)
{
  404fdc:	b580      	push	{r7, lr}
  404fde:	af00      	add	r7, sp, #0
	udd_enable();
  404fe0:	4b01      	ldr	r3, [pc, #4]	; (404fe8 <udc_start+0xc>)
  404fe2:	4798      	blx	r3
}
  404fe4:	bf00      	nop
  404fe6:	bd80      	pop	{r7, pc}
  404fe8:	00407371 	.word	0x00407371

00404fec <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device,
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
  404fec:	b580      	push	{r7, lr}
  404fee:	b082      	sub	sp, #8
  404ff0:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	if (udc_num_configuration) {
  404ff2:	4b0f      	ldr	r3, [pc, #60]	; (405030 <udc_reset+0x44>)
  404ff4:	781b      	ldrb	r3, [r3, #0]
  404ff6:	2b00      	cmp	r3, #0
  404ff8:	d010      	beq.n	40501c <udc_reset+0x30>
		for (iface_num = 0;
  404ffa:	2300      	movs	r3, #0
  404ffc:	71fb      	strb	r3, [r7, #7]
  404ffe:	e006      	b.n	40500e <udc_reset+0x22>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
  405000:	79fb      	ldrb	r3, [r7, #7]
  405002:	4618      	mov	r0, r3
  405004:	4b0b      	ldr	r3, [pc, #44]	; (405034 <udc_reset+0x48>)
  405006:	4798      	blx	r3
				iface_num++) {
  405008:	79fb      	ldrb	r3, [r7, #7]
  40500a:	3301      	adds	r3, #1
  40500c:	71fb      	strb	r3, [r7, #7]
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  40500e:	4b0a      	ldr	r3, [pc, #40]	; (405038 <udc_reset+0x4c>)
  405010:	681b      	ldr	r3, [r3, #0]
  405012:	681b      	ldr	r3, [r3, #0]
  405014:	791b      	ldrb	r3, [r3, #4]
		for (iface_num = 0;
  405016:	79fa      	ldrb	r2, [r7, #7]
  405018:	429a      	cmp	r2, r3
  40501a:	d3f1      	bcc.n	405000 <udc_reset+0x14>
		}
	}
	udc_num_configuration = 0;
  40501c:	4b04      	ldr	r3, [pc, #16]	; (405030 <udc_reset+0x44>)
  40501e:	2200      	movs	r2, #0
  405020:	701a      	strb	r2, [r3, #0]
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
	}
#endif
	udc_device_status =
  405022:	4b06      	ldr	r3, [pc, #24]	; (40503c <udc_reset+0x50>)
  405024:	2201      	movs	r2, #1
  405026:	801a      	strh	r2, [r3, #0]
#if (USB_DEVICE_ATTR & USB_CONFIG_ATTR_SELF_POWERED)
			CPU_TO_LE16(USB_DEV_STATUS_SELF_POWERED);
#else
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}
  405028:	bf00      	nop
  40502a:	3708      	adds	r7, #8
  40502c:	46bd      	mov	sp, r7
  40502e:	bd80      	pop	{r7, pc}
  405030:	2001a23c 	.word	0x2001a23c
  405034:	00404ea5 	.word	0x00404ea5
  405038:	2001a240 	.word	0x2001a240
  40503c:	2001a234 	.word	0x2001a234

00405040 <udc_sof_notify>:

void udc_sof_notify(void)
{
  405040:	b580      	push	{r7, lr}
  405042:	b082      	sub	sp, #8
  405044:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	if (udc_num_configuration) {
  405046:	4b14      	ldr	r3, [pc, #80]	; (405098 <udc_sof_notify+0x58>)
  405048:	781b      	ldrb	r3, [r3, #0]
  40504a:	2b00      	cmp	r3, #0
  40504c:	d01f      	beq.n	40508e <udc_sof_notify+0x4e>
		for (iface_num = 0;
  40504e:	2300      	movs	r3, #0
  405050:	71fb      	strb	r3, [r7, #7]
  405052:	e015      	b.n	405080 <udc_sof_notify+0x40>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
  405054:	4b11      	ldr	r3, [pc, #68]	; (40509c <udc_sof_notify+0x5c>)
  405056:	681b      	ldr	r3, [r3, #0]
  405058:	685a      	ldr	r2, [r3, #4]
  40505a:	79fb      	ldrb	r3, [r7, #7]
  40505c:	009b      	lsls	r3, r3, #2
  40505e:	4413      	add	r3, r2
  405060:	681b      	ldr	r3, [r3, #0]
  405062:	691b      	ldr	r3, [r3, #16]
  405064:	2b00      	cmp	r3, #0
  405066:	d008      	beq.n	40507a <udc_sof_notify+0x3a>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
  405068:	4b0c      	ldr	r3, [pc, #48]	; (40509c <udc_sof_notify+0x5c>)
  40506a:	681b      	ldr	r3, [r3, #0]
  40506c:	685a      	ldr	r2, [r3, #4]
  40506e:	79fb      	ldrb	r3, [r7, #7]
  405070:	009b      	lsls	r3, r3, #2
  405072:	4413      	add	r3, r2
  405074:	681b      	ldr	r3, [r3, #0]
  405076:	691b      	ldr	r3, [r3, #16]
  405078:	4798      	blx	r3
				iface_num++) {
  40507a:	79fb      	ldrb	r3, [r7, #7]
  40507c:	3301      	adds	r3, #1
  40507e:	71fb      	strb	r3, [r7, #7]
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  405080:	4b06      	ldr	r3, [pc, #24]	; (40509c <udc_sof_notify+0x5c>)
  405082:	681b      	ldr	r3, [r3, #0]
  405084:	681b      	ldr	r3, [r3, #0]
  405086:	791b      	ldrb	r3, [r3, #4]
		for (iface_num = 0;
  405088:	79fa      	ldrb	r2, [r7, #7]
  40508a:	429a      	cmp	r2, r3
  40508c:	d3e2      	bcc.n	405054 <udc_sof_notify+0x14>
			}
		}
	}
}
  40508e:	bf00      	nop
  405090:	3708      	adds	r7, #8
  405092:	46bd      	mov	sp, r7
  405094:	bd80      	pop	{r7, pc}
  405096:	bf00      	nop
  405098:	2001a23c 	.word	0x2001a23c
  40509c:	2001a240 	.word	0x2001a240

004050a0 <udc_req_std_dev_get_status>:
 * \brief Standard device request to get device status
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
  4050a0:	b580      	push	{r7, lr}
  4050a2:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
  4050a4:	4b06      	ldr	r3, [pc, #24]	; (4050c0 <udc_req_std_dev_get_status+0x20>)
  4050a6:	88db      	ldrh	r3, [r3, #6]
  4050a8:	2b02      	cmp	r3, #2
  4050aa:	d001      	beq.n	4050b0 <udc_req_std_dev_get_status+0x10>
		return false;
  4050ac:	2300      	movs	r3, #0
  4050ae:	e004      	b.n	4050ba <udc_req_std_dev_get_status+0x1a>
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
  4050b0:	2102      	movs	r1, #2
  4050b2:	4804      	ldr	r0, [pc, #16]	; (4050c4 <udc_req_std_dev_get_status+0x24>)
  4050b4:	4b04      	ldr	r3, [pc, #16]	; (4050c8 <udc_req_std_dev_get_status+0x28>)
  4050b6:	4798      	blx	r3
			sizeof(udc_device_status));
	return true;
  4050b8:	2301      	movs	r3, #1
}
  4050ba:	4618      	mov	r0, r3
  4050bc:	bd80      	pop	{r7, pc}
  4050be:	bf00      	nop
  4050c0:	2001aba8 	.word	0x2001aba8
  4050c4:	2001a234 	.word	0x2001a234
  4050c8:	00407545 	.word	0x00407545

004050cc <udc_req_std_ep_get_status>:
 * \brief Standard endpoint request to get endpoint status
 *
 * \return true if success
 */
static bool udc_req_std_ep_get_status(void)
{
  4050cc:	b580      	push	{r7, lr}
  4050ce:	af00      	add	r7, sp, #0
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
  4050d0:	4b0b      	ldr	r3, [pc, #44]	; (405100 <udc_req_std_ep_get_status+0x34>)
  4050d2:	88db      	ldrh	r3, [r3, #6]
  4050d4:	2b02      	cmp	r3, #2
  4050d6:	d001      	beq.n	4050dc <udc_req_std_ep_get_status+0x10>
		return false;
  4050d8:	2300      	movs	r3, #0
  4050da:	e00e      	b.n	4050fa <udc_req_std_ep_get_status+0x2e>
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
  4050dc:	4b08      	ldr	r3, [pc, #32]	; (405100 <udc_req_std_ep_get_status+0x34>)
  4050de:	889b      	ldrh	r3, [r3, #4]
  4050e0:	b2db      	uxtb	r3, r3
  4050e2:	4618      	mov	r0, r3
  4050e4:	4b07      	ldr	r3, [pc, #28]	; (405104 <udc_req_std_ep_get_status+0x38>)
  4050e6:	4798      	blx	r3
  4050e8:	4603      	mov	r3, r0
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;
  4050ea:	b29a      	uxth	r2, r3
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
  4050ec:	4b06      	ldr	r3, [pc, #24]	; (405108 <udc_req_std_ep_get_status+0x3c>)
  4050ee:	801a      	strh	r2, [r3, #0]

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
  4050f0:	2102      	movs	r1, #2
  4050f2:	4805      	ldr	r0, [pc, #20]	; (405108 <udc_req_std_ep_get_status+0x3c>)
  4050f4:	4b05      	ldr	r3, [pc, #20]	; (40510c <udc_req_std_ep_get_status+0x40>)
  4050f6:	4798      	blx	r3
			sizeof(udc_ep_status));
	return true;
  4050f8:	2301      	movs	r3, #1
}
  4050fa:	4618      	mov	r0, r3
  4050fc:	bd80      	pop	{r7, pc}
  4050fe:	bf00      	nop
  405100:	2001aba8 	.word	0x2001aba8
  405104:	004077f5 	.word	0x004077f5
  405108:	2001a248 	.word	0x2001a248
  40510c:	00407545 	.word	0x00407545

00405110 <udc_req_std_dev_clear_feature>:
 * \brief Standard device request to change device status
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
  405110:	b480      	push	{r7}
  405112:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
  405114:	4b0c      	ldr	r3, [pc, #48]	; (405148 <udc_req_std_dev_clear_feature+0x38>)
  405116:	88db      	ldrh	r3, [r3, #6]
  405118:	2b00      	cmp	r3, #0
  40511a:	d001      	beq.n	405120 <udc_req_std_dev_clear_feature+0x10>
		return false;
  40511c:	2300      	movs	r3, #0
  40511e:	e00d      	b.n	40513c <udc_req_std_dev_clear_feature+0x2c>
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
  405120:	4b09      	ldr	r3, [pc, #36]	; (405148 <udc_req_std_dev_clear_feature+0x38>)
  405122:	885b      	ldrh	r3, [r3, #2]
  405124:	2b01      	cmp	r3, #1
  405126:	d108      	bne.n	40513a <udc_req_std_dev_clear_feature+0x2a>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
  405128:	4b08      	ldr	r3, [pc, #32]	; (40514c <udc_req_std_dev_clear_feature+0x3c>)
  40512a:	881b      	ldrh	r3, [r3, #0]
  40512c:	f023 0302 	bic.w	r3, r3, #2
  405130:	b29a      	uxth	r2, r3
  405132:	4b06      	ldr	r3, [pc, #24]	; (40514c <udc_req_std_dev_clear_feature+0x3c>)
  405134:	801a      	strh	r2, [r3, #0]
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
  405136:	2301      	movs	r3, #1
  405138:	e000      	b.n	40513c <udc_req_std_dev_clear_feature+0x2c>
	}
	return false;
  40513a:	2300      	movs	r3, #0
}
  40513c:	4618      	mov	r0, r3
  40513e:	46bd      	mov	sp, r7
  405140:	f85d 7b04 	ldr.w	r7, [sp], #4
  405144:	4770      	bx	lr
  405146:	bf00      	nop
  405148:	2001aba8 	.word	0x2001aba8
  40514c:	2001a234 	.word	0x2001a234

00405150 <udc_req_std_ep_clear_feature>:
 * \brief Standard endpoint request to clear endpoint feature
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
  405150:	b580      	push	{r7, lr}
  405152:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
  405154:	4b0a      	ldr	r3, [pc, #40]	; (405180 <udc_req_std_ep_clear_feature+0x30>)
  405156:	88db      	ldrh	r3, [r3, #6]
  405158:	2b00      	cmp	r3, #0
  40515a:	d001      	beq.n	405160 <udc_req_std_ep_clear_feature+0x10>
		return false;
  40515c:	2300      	movs	r3, #0
  40515e:	e00c      	b.n	40517a <udc_req_std_ep_clear_feature+0x2a>
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
  405160:	4b07      	ldr	r3, [pc, #28]	; (405180 <udc_req_std_ep_clear_feature+0x30>)
  405162:	885b      	ldrh	r3, [r3, #2]
  405164:	2b00      	cmp	r3, #0
  405166:	d107      	bne.n	405178 <udc_req_std_ep_clear_feature+0x28>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
  405168:	4b05      	ldr	r3, [pc, #20]	; (405180 <udc_req_std_ep_clear_feature+0x30>)
  40516a:	889b      	ldrh	r3, [r3, #4]
  40516c:	b2db      	uxtb	r3, r3
  40516e:	4618      	mov	r0, r3
  405170:	4b04      	ldr	r3, [pc, #16]	; (405184 <udc_req_std_ep_clear_feature+0x34>)
  405172:	4798      	blx	r3
  405174:	4603      	mov	r3, r0
  405176:	e000      	b.n	40517a <udc_req_std_ep_clear_feature+0x2a>
	}
	return false;
  405178:	2300      	movs	r3, #0
}
  40517a:	4618      	mov	r0, r3
  40517c:	bd80      	pop	{r7, pc}
  40517e:	bf00      	nop
  405180:	2001aba8 	.word	0x2001aba8
  405184:	004079d5 	.word	0x004079d5

00405188 <udc_req_std_dev_set_feature>:
 * \brief Standard device request to set a feature
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
  405188:	b480      	push	{r7}
  40518a:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
  40518c:	4b09      	ldr	r3, [pc, #36]	; (4051b4 <udc_req_std_dev_set_feature+0x2c>)
  40518e:	88db      	ldrh	r3, [r3, #6]
  405190:	2b00      	cmp	r3, #0
  405192:	d001      	beq.n	405198 <udc_req_std_dev_set_feature+0x10>
		return false;
  405194:	2300      	movs	r3, #0
  405196:	e007      	b.n	4051a8 <udc_req_std_dev_set_feature+0x20>
	}

	switch (udd_g_ctrlreq.req.wValue) {
  405198:	4b06      	ldr	r3, [pc, #24]	; (4051b4 <udc_req_std_dev_set_feature+0x2c>)
  40519a:	885b      	ldrh	r3, [r3, #2]
  40519c:	2b01      	cmp	r3, #1
  40519e:	d002      	beq.n	4051a6 <udc_req_std_dev_set_feature+0x1e>
			break;
		}
		break;
#endif
	default:
		break;
  4051a0:	bf00      	nop
	}
	return false;
  4051a2:	2300      	movs	r3, #0
  4051a4:	e000      	b.n	4051a8 <udc_req_std_dev_set_feature+0x20>
		return false;
  4051a6:	2300      	movs	r3, #0
}
  4051a8:	4618      	mov	r0, r3
  4051aa:	46bd      	mov	sp, r7
  4051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
  4051b0:	4770      	bx	lr
  4051b2:	bf00      	nop
  4051b4:	2001aba8 	.word	0x2001aba8

004051b8 <udc_req_std_ep_set_feature>:
 *
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
  4051b8:	b580      	push	{r7, lr}
  4051ba:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
  4051bc:	4b0d      	ldr	r3, [pc, #52]	; (4051f4 <udc_req_std_ep_set_feature+0x3c>)
  4051be:	88db      	ldrh	r3, [r3, #6]
  4051c0:	2b00      	cmp	r3, #0
  4051c2:	d001      	beq.n	4051c8 <udc_req_std_ep_set_feature+0x10>
		return false;
  4051c4:	2300      	movs	r3, #0
  4051c6:	e012      	b.n	4051ee <udc_req_std_ep_set_feature+0x36>
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
  4051c8:	4b0a      	ldr	r3, [pc, #40]	; (4051f4 <udc_req_std_ep_set_feature+0x3c>)
  4051ca:	885b      	ldrh	r3, [r3, #2]
  4051cc:	2b00      	cmp	r3, #0
  4051ce:	d10d      	bne.n	4051ec <udc_req_std_ep_set_feature+0x34>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
  4051d0:	4b08      	ldr	r3, [pc, #32]	; (4051f4 <udc_req_std_ep_set_feature+0x3c>)
  4051d2:	889b      	ldrh	r3, [r3, #4]
  4051d4:	b2db      	uxtb	r3, r3
  4051d6:	4618      	mov	r0, r3
  4051d8:	4b07      	ldr	r3, [pc, #28]	; (4051f8 <udc_req_std_ep_set_feature+0x40>)
  4051da:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
  4051dc:	4b05      	ldr	r3, [pc, #20]	; (4051f4 <udc_req_std_ep_set_feature+0x3c>)
  4051de:	889b      	ldrh	r3, [r3, #4]
  4051e0:	b2db      	uxtb	r3, r3
  4051e2:	4618      	mov	r0, r3
  4051e4:	4b05      	ldr	r3, [pc, #20]	; (4051fc <udc_req_std_ep_set_feature+0x44>)
  4051e6:	4798      	blx	r3
  4051e8:	4603      	mov	r3, r0
  4051ea:	e000      	b.n	4051ee <udc_req_std_ep_set_feature+0x36>
	}
	return false;
  4051ec:	2300      	movs	r3, #0
}
  4051ee:	4618      	mov	r0, r3
  4051f0:	bd80      	pop	{r7, pc}
  4051f2:	bf00      	nop
  4051f4:	2001aba8 	.word	0x2001aba8
  4051f8:	00407d4d 	.word	0x00407d4d
  4051fc:	00407869 	.word	0x00407869

00405200 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
  405200:	b580      	push	{r7, lr}
  405202:	af00      	add	r7, sp, #0
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
  405204:	4b05      	ldr	r3, [pc, #20]	; (40521c <udc_valid_address+0x1c>)
  405206:	885b      	ldrh	r3, [r3, #2]
  405208:	b2db      	uxtb	r3, r3
  40520a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  40520e:	b2db      	uxtb	r3, r3
  405210:	4618      	mov	r0, r3
  405212:	4b03      	ldr	r3, [pc, #12]	; (405220 <udc_valid_address+0x20>)
  405214:	4798      	blx	r3
}
  405216:	bf00      	nop
  405218:	bd80      	pop	{r7, pc}
  40521a:	bf00      	nop
  40521c:	2001aba8 	.word	0x2001aba8
  405220:	00407481 	.word	0x00407481

00405224 <udc_req_std_dev_set_address>:
 * \brief Standard device request to set device address
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
  405224:	b480      	push	{r7}
  405226:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
  405228:	4b07      	ldr	r3, [pc, #28]	; (405248 <udc_req_std_dev_set_address+0x24>)
  40522a:	88db      	ldrh	r3, [r3, #6]
  40522c:	2b00      	cmp	r3, #0
  40522e:	d001      	beq.n	405234 <udc_req_std_dev_set_address+0x10>
		return false;
  405230:	2300      	movs	r3, #0
  405232:	e003      	b.n	40523c <udc_req_std_dev_set_address+0x18>
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
  405234:	4b04      	ldr	r3, [pc, #16]	; (405248 <udc_req_std_dev_set_address+0x24>)
  405236:	4a05      	ldr	r2, [pc, #20]	; (40524c <udc_req_std_dev_set_address+0x28>)
  405238:	611a      	str	r2, [r3, #16]
	return true;
  40523a:	2301      	movs	r3, #1
}
  40523c:	4618      	mov	r0, r3
  40523e:	46bd      	mov	sp, r7
  405240:	f85d 7b04 	ldr.w	r7, [sp], #4
  405244:	4770      	bx	lr
  405246:	bf00      	nop
  405248:	2001aba8 	.word	0x2001aba8
  40524c:	00405201 	.word	0x00405201

00405250 <udc_req_std_dev_get_str_desc>:
 * \brief Standard device request to get device string descriptor
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_str_desc(void)
{
  405250:	b580      	push	{r7, lr}
  405252:	b084      	sub	sp, #16
  405254:	af00      	add	r7, sp, #0
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;
  405256:	2300      	movs	r3, #0
  405258:	71fb      	strb	r3, [r7, #7]

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
  40525a:	4b2c      	ldr	r3, [pc, #176]	; (40530c <udc_req_std_dev_get_str_desc+0xbc>)
  40525c:	885b      	ldrh	r3, [r3, #2]
  40525e:	b2db      	uxtb	r3, r3
  405260:	2b03      	cmp	r3, #3
  405262:	d820      	bhi.n	4052a6 <udc_req_std_dev_get_str_desc+0x56>
  405264:	a201      	add	r2, pc, #4	; (adr r2, 40526c <udc_req_std_dev_get_str_desc+0x1c>)
  405266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40526a:	bf00      	nop
  40526c:	0040527d 	.word	0x0040527d
  405270:	00405287 	.word	0x00405287
  405274:	00405291 	.word	0x00405291
  405278:	0040529b 	.word	0x0040529b
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
  40527c:	2104      	movs	r1, #4
  40527e:	4824      	ldr	r0, [pc, #144]	; (405310 <udc_req_std_dev_get_str_desc+0xc0>)
  405280:	4b24      	ldr	r3, [pc, #144]	; (405314 <udc_req_std_dev_get_str_desc+0xc4>)
  405282:	4798      	blx	r3
				sizeof(udc_string_desc_languageid));
		break;
  405284:	e017      	b.n	4052b6 <udc_req_std_dev_get_str_desc+0x66>

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
  405286:	2309      	movs	r3, #9
  405288:	71fb      	strb	r3, [r7, #7]
		str = udc_string_manufacturer_name;
  40528a:	4b23      	ldr	r3, [pc, #140]	; (405318 <udc_req_std_dev_get_str_desc+0xc8>)
  40528c:	60bb      	str	r3, [r7, #8]
		break;
  40528e:	e012      	b.n	4052b6 <udc_req_std_dev_get_str_desc+0x66>
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
  405290:	230b      	movs	r3, #11
  405292:	71fb      	strb	r3, [r7, #7]
		str = udc_string_product_name;
  405294:	4b21      	ldr	r3, [pc, #132]	; (40531c <udc_req_std_dev_get_str_desc+0xcc>)
  405296:	60bb      	str	r3, [r7, #8]
		break;
  405298:	e00d      	b.n	4052b6 <udc_req_std_dev_get_str_desc+0x66>
#endif
#if defined USB_DEVICE_SERIAL_NAME || defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	case 3:
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
  40529a:	230c      	movs	r3, #12
  40529c:	71fb      	strb	r3, [r7, #7]
		str = udc_get_string_serial_name();
  40529e:	4b20      	ldr	r3, [pc, #128]	; (405320 <udc_req_std_dev_get_str_desc+0xd0>)
  4052a0:	4798      	blx	r3
  4052a2:	60b8      	str	r0, [r7, #8]
		break;
  4052a4:	e007      	b.n	4052b6 <udc_req_std_dev_get_str_desc+0x66>
#endif
	default:
#ifdef UDC_GET_EXTRA_STRING
		if (UDC_GET_EXTRA_STRING()) {
  4052a6:	4b1f      	ldr	r3, [pc, #124]	; (405324 <udc_req_std_dev_get_str_desc+0xd4>)
  4052a8:	4798      	blx	r3
  4052aa:	4603      	mov	r3, r0
  4052ac:	2b00      	cmp	r3, #0
  4052ae:	d101      	bne.n	4052b4 <udc_req_std_dev_get_str_desc+0x64>
			break;
		}
#endif
		return false;
  4052b0:	2300      	movs	r3, #0
  4052b2:	e027      	b.n	405304 <udc_req_std_dev_get_str_desc+0xb4>
			break;
  4052b4:	bf00      	nop
	}

	if (str_length) {
  4052b6:	79fb      	ldrb	r3, [r7, #7]
  4052b8:	2b00      	cmp	r3, #0
  4052ba:	d022      	beq.n	405302 <udc_req_std_dev_get_str_desc+0xb2>
		for(i = 0; i < str_length; i++) {
  4052bc:	2300      	movs	r3, #0
  4052be:	73fb      	strb	r3, [r7, #15]
  4052c0:	e00d      	b.n	4052de <udc_req_std_dev_get_str_desc+0x8e>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
  4052c2:	7bfb      	ldrb	r3, [r7, #15]
  4052c4:	7bfa      	ldrb	r2, [r7, #15]
  4052c6:	68b9      	ldr	r1, [r7, #8]
  4052c8:	440a      	add	r2, r1
  4052ca:	7812      	ldrb	r2, [r2, #0]
  4052cc:	b291      	uxth	r1, r2
  4052ce:	4a16      	ldr	r2, [pc, #88]	; (405328 <udc_req_std_dev_get_str_desc+0xd8>)
  4052d0:	005b      	lsls	r3, r3, #1
  4052d2:	4413      	add	r3, r2
  4052d4:	460a      	mov	r2, r1
  4052d6:	805a      	strh	r2, [r3, #2]
		for(i = 0; i < str_length; i++) {
  4052d8:	7bfb      	ldrb	r3, [r7, #15]
  4052da:	3301      	adds	r3, #1
  4052dc:	73fb      	strb	r3, [r7, #15]
  4052de:	7bfa      	ldrb	r2, [r7, #15]
  4052e0:	79fb      	ldrb	r3, [r7, #7]
  4052e2:	429a      	cmp	r2, r3
  4052e4:	d3ed      	bcc.n	4052c2 <udc_req_std_dev_get_str_desc+0x72>
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
  4052e6:	79fb      	ldrb	r3, [r7, #7]
  4052e8:	3301      	adds	r3, #1
  4052ea:	b2db      	uxtb	r3, r3
  4052ec:	005b      	lsls	r3, r3, #1
  4052ee:	b2da      	uxtb	r2, r3
  4052f0:	4b0d      	ldr	r3, [pc, #52]	; (405328 <udc_req_std_dev_get_str_desc+0xd8>)
  4052f2:	701a      	strb	r2, [r3, #0]
		udd_set_setup_payload(
			(uint8_t *) &udc_string_desc,
			udc_string_desc.header.bLength);
  4052f4:	4b0c      	ldr	r3, [pc, #48]	; (405328 <udc_req_std_dev_get_str_desc+0xd8>)
  4052f6:	781b      	ldrb	r3, [r3, #0]
		udd_set_setup_payload(
  4052f8:	b29b      	uxth	r3, r3
  4052fa:	4619      	mov	r1, r3
  4052fc:	480a      	ldr	r0, [pc, #40]	; (405328 <udc_req_std_dev_get_str_desc+0xd8>)
  4052fe:	4b05      	ldr	r3, [pc, #20]	; (405314 <udc_req_std_dev_get_str_desc+0xc4>)
  405300:	4798      	blx	r3
	}

	return true;
  405302:	2301      	movs	r3, #1
}
  405304:	4618      	mov	r0, r3
  405306:	3710      	adds	r7, #16
  405308:	46bd      	mov	sp, r7
  40530a:	bd80      	pop	{r7, pc}
  40530c:	2001aba8 	.word	0x2001aba8
  405310:	20000228 	.word	0x20000228
  405314:	00407545 	.word	0x00407545
  405318:	2000022c 	.word	0x2000022c
  40531c:	20000238 	.word	0x20000238
  405320:	00404d75 	.word	0x00404d75
  405324:	0040dc31 	.word	0x0040dc31
  405328:	20000244 	.word	0x20000244

0040532c <udc_req_std_dev_get_descriptor>:
 * \brief Standard device request to get descriptors about USB device
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_descriptor(void)
{
  40532c:	b580      	push	{r7, lr}
  40532e:	b082      	sub	sp, #8
  405330:	af00      	add	r7, sp, #0
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
  405332:	4b41      	ldr	r3, [pc, #260]	; (405438 <udc_req_std_dev_get_descriptor+0x10c>)
  405334:	885b      	ldrh	r3, [r3, #2]
  405336:	71fb      	strb	r3, [r7, #7]

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
  405338:	4b3f      	ldr	r3, [pc, #252]	; (405438 <udc_req_std_dev_get_descriptor+0x10c>)
  40533a:	885b      	ldrh	r3, [r3, #2]
  40533c:	0a1b      	lsrs	r3, r3, #8
  40533e:	b29b      	uxth	r3, r3
  405340:	b2db      	uxtb	r3, r3
  405342:	3b01      	subs	r3, #1
  405344:	2b0e      	cmp	r3, #14
  405346:	d865      	bhi.n	405414 <udc_req_std_dev_get_descriptor+0xe8>
  405348:	a201      	add	r2, pc, #4	; (adr r2, 405350 <udc_req_std_dev_get_descriptor+0x24>)
  40534a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40534e:	bf00      	nop
  405350:	0040538d 	.word	0x0040538d
  405354:	004053a3 	.word	0x004053a3
  405358:	00405401 	.word	0x00405401
  40535c:	00405415 	.word	0x00405415
  405360:	00405415 	.word	0x00405415
  405364:	00405415 	.word	0x00405415
  405368:	00405415 	.word	0x00405415
  40536c:	00405415 	.word	0x00405415
  405370:	00405415 	.word	0x00405415
  405374:	00405415 	.word	0x00405415
  405378:	00405415 	.word	0x00405415
  40537c:	00405415 	.word	0x00405415
  405380:	00405415 	.word	0x00405415
  405384:	00405415 	.word	0x00405415
  405388:	004053df 	.word	0x004053df
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
  40538c:	4b2b      	ldr	r3, [pc, #172]	; (40543c <udc_req_std_dev_get_descriptor+0x110>)
  40538e:	681a      	ldr	r2, [r3, #0]
				udc_config.confdev_lsfs->bLength);
  405390:	4b2a      	ldr	r3, [pc, #168]	; (40543c <udc_req_std_dev_get_descriptor+0x110>)
  405392:	681b      	ldr	r3, [r3, #0]
  405394:	781b      	ldrb	r3, [r3, #0]
			udd_set_setup_payload(
  405396:	b29b      	uxth	r3, r3
  405398:	4619      	mov	r1, r3
  40539a:	4610      	mov	r0, r2
  40539c:	4b28      	ldr	r3, [pc, #160]	; (405440 <udc_req_std_dev_get_descriptor+0x114>)
  40539e:	4798      	blx	r3
		}
		break;
  4053a0:	e03b      	b.n	40541a <udc_req_std_dev_get_descriptor+0xee>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
  4053a2:	4b26      	ldr	r3, [pc, #152]	; (40543c <udc_req_std_dev_get_descriptor+0x110>)
  4053a4:	681b      	ldr	r3, [r3, #0]
  4053a6:	7c5b      	ldrb	r3, [r3, #17]
  4053a8:	79fa      	ldrb	r2, [r7, #7]
  4053aa:	429a      	cmp	r2, r3
  4053ac:	d301      	bcc.n	4053b2 <udc_req_std_dev_get_descriptor+0x86>
					bNumConfigurations) {
				return false;
  4053ae:	2300      	movs	r3, #0
  4053b0:	e03e      	b.n	405430 <udc_req_std_dev_get_descriptor+0x104>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
  4053b2:	4b22      	ldr	r3, [pc, #136]	; (40543c <udc_req_std_dev_get_descriptor+0x110>)
  4053b4:	685a      	ldr	r2, [r3, #4]
  4053b6:	79fb      	ldrb	r3, [r7, #7]
  4053b8:	00db      	lsls	r3, r3, #3
  4053ba:	4413      	add	r3, r2
  4053bc:	6818      	ldr	r0, [r3, #0]
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
  4053be:	4b1f      	ldr	r3, [pc, #124]	; (40543c <udc_req_std_dev_get_descriptor+0x110>)
  4053c0:	685a      	ldr	r2, [r3, #4]
  4053c2:	79fb      	ldrb	r3, [r7, #7]
  4053c4:	00db      	lsls	r3, r3, #3
  4053c6:	4413      	add	r3, r2
  4053c8:	681b      	ldr	r3, [r3, #0]
			udd_set_setup_payload(
  4053ca:	885b      	ldrh	r3, [r3, #2]
  4053cc:	b29b      	uxth	r3, r3
  4053ce:	4619      	mov	r1, r3
  4053d0:	4b1b      	ldr	r3, [pc, #108]	; (405440 <udc_req_std_dev_get_descriptor+0x114>)
  4053d2:	4798      	blx	r3
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
  4053d4:	4b18      	ldr	r3, [pc, #96]	; (405438 <udc_req_std_dev_get_descriptor+0x10c>)
  4053d6:	689b      	ldr	r3, [r3, #8]
  4053d8:	2202      	movs	r2, #2
  4053da:	705a      	strb	r2, [r3, #1]
				USB_DT_CONFIGURATION;
		break;
  4053dc:	e01d      	b.n	40541a <udc_req_std_dev_get_descriptor+0xee>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
  4053de:	4b17      	ldr	r3, [pc, #92]	; (40543c <udc_req_std_dev_get_descriptor+0x110>)
  4053e0:	689b      	ldr	r3, [r3, #8]
  4053e2:	2b00      	cmp	r3, #0
  4053e4:	d101      	bne.n	4053ea <udc_req_std_dev_get_descriptor+0xbe>
			return false;
  4053e6:	2300      	movs	r3, #0
  4053e8:	e022      	b.n	405430 <udc_req_std_dev_get_descriptor+0x104>
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
  4053ea:	4b14      	ldr	r3, [pc, #80]	; (40543c <udc_req_std_dev_get_descriptor+0x110>)
  4053ec:	689a      	ldr	r2, [r3, #8]
				udc_config.conf_bos->wTotalLength);
  4053ee:	4b13      	ldr	r3, [pc, #76]	; (40543c <udc_req_std_dev_get_descriptor+0x110>)
  4053f0:	689b      	ldr	r3, [r3, #8]
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
  4053f2:	885b      	ldrh	r3, [r3, #2]
  4053f4:	b29b      	uxth	r3, r3
  4053f6:	4619      	mov	r1, r3
  4053f8:	4610      	mov	r0, r2
  4053fa:	4b11      	ldr	r3, [pc, #68]	; (405440 <udc_req_std_dev_get_descriptor+0x114>)
  4053fc:	4798      	blx	r3
		break;
  4053fe:	e00c      	b.n	40541a <udc_req_std_dev_get_descriptor+0xee>

	case USB_DT_STRING:
		// String descriptor requested
		if (!udc_req_std_dev_get_str_desc()) {
  405400:	4b10      	ldr	r3, [pc, #64]	; (405444 <udc_req_std_dev_get_descriptor+0x118>)
  405402:	4798      	blx	r3
  405404:	4603      	mov	r3, r0
  405406:	f083 0301 	eor.w	r3, r3, #1
  40540a:	b2db      	uxtb	r3, r3
  40540c:	2b00      	cmp	r3, #0
  40540e:	d003      	beq.n	405418 <udc_req_std_dev_get_descriptor+0xec>
			return false;
  405410:	2300      	movs	r3, #0
  405412:	e00d      	b.n	405430 <udc_req_std_dev_get_descriptor+0x104>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
  405414:	2300      	movs	r3, #0
  405416:	e00b      	b.n	405430 <udc_req_std_dev_get_descriptor+0x104>
		break;
  405418:	bf00      	nop
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
  40541a:	4b07      	ldr	r3, [pc, #28]	; (405438 <udc_req_std_dev_get_descriptor+0x10c>)
  40541c:	88da      	ldrh	r2, [r3, #6]
  40541e:	4b06      	ldr	r3, [pc, #24]	; (405438 <udc_req_std_dev_get_descriptor+0x10c>)
  405420:	899b      	ldrh	r3, [r3, #12]
  405422:	429a      	cmp	r2, r3
  405424:	d203      	bcs.n	40542e <udc_req_std_dev_get_descriptor+0x102>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
  405426:	4b04      	ldr	r3, [pc, #16]	; (405438 <udc_req_std_dev_get_descriptor+0x10c>)
  405428:	88da      	ldrh	r2, [r3, #6]
  40542a:	4b03      	ldr	r3, [pc, #12]	; (405438 <udc_req_std_dev_get_descriptor+0x10c>)
  40542c:	819a      	strh	r2, [r3, #12]
	}
	return true;
  40542e:	2301      	movs	r3, #1
}
  405430:	4618      	mov	r0, r3
  405432:	3708      	adds	r7, #8
  405434:	46bd      	mov	sp, r7
  405436:	bd80      	pop	{r7, pc}
  405438:	2001aba8 	.word	0x2001aba8
  40543c:	200001d4 	.word	0x200001d4
  405440:	00407545 	.word	0x00407545
  405444:	00405251 	.word	0x00405251

00405448 <udc_req_std_dev_get_configuration>:
 * \brief Standard device request to get configuration number
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
  405448:	b580      	push	{r7, lr}
  40544a:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength != 1) {
  40544c:	4b06      	ldr	r3, [pc, #24]	; (405468 <udc_req_std_dev_get_configuration+0x20>)
  40544e:	88db      	ldrh	r3, [r3, #6]
  405450:	2b01      	cmp	r3, #1
  405452:	d001      	beq.n	405458 <udc_req_std_dev_get_configuration+0x10>
		return false;
  405454:	2300      	movs	r3, #0
  405456:	e004      	b.n	405462 <udc_req_std_dev_get_configuration+0x1a>
	}

	udd_set_setup_payload(&udc_num_configuration,1);
  405458:	2101      	movs	r1, #1
  40545a:	4804      	ldr	r0, [pc, #16]	; (40546c <udc_req_std_dev_get_configuration+0x24>)
  40545c:	4b04      	ldr	r3, [pc, #16]	; (405470 <udc_req_std_dev_get_configuration+0x28>)
  40545e:	4798      	blx	r3
	return true;
  405460:	2301      	movs	r3, #1
}
  405462:	4618      	mov	r0, r3
  405464:	bd80      	pop	{r7, pc}
  405466:	bf00      	nop
  405468:	2001aba8 	.word	0x2001aba8
  40546c:	2001a23c 	.word	0x2001a23c
  405470:	00407545 	.word	0x00407545

00405474 <udc_req_std_dev_set_configuration>:
 * \brief Standard device request to enable a configuration
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_configuration(void)
{
  405474:	b580      	push	{r7, lr}
  405476:	b082      	sub	sp, #8
  405478:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
  40547a:	4b27      	ldr	r3, [pc, #156]	; (405518 <udc_req_std_dev_set_configuration+0xa4>)
  40547c:	88db      	ldrh	r3, [r3, #6]
  40547e:	2b00      	cmp	r3, #0
  405480:	d001      	beq.n	405486 <udc_req_std_dev_set_configuration+0x12>
		return false;
  405482:	2300      	movs	r3, #0
  405484:	e043      	b.n	40550e <udc_req_std_dev_set_configuration+0x9a>
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
  405486:	4b25      	ldr	r3, [pc, #148]	; (40551c <udc_req_std_dev_set_configuration+0xa8>)
  405488:	4798      	blx	r3
  40548a:	4603      	mov	r3, r0
  40548c:	2b00      	cmp	r3, #0
  40548e:	d101      	bne.n	405494 <udc_req_std_dev_set_configuration+0x20>
		return false;
  405490:	2300      	movs	r3, #0
  405492:	e03c      	b.n	40550e <udc_req_std_dev_set_configuration+0x9a>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
  405494:	4b20      	ldr	r3, [pc, #128]	; (405518 <udc_req_std_dev_set_configuration+0xa4>)
  405496:	885b      	ldrh	r3, [r3, #2]
  405498:	b2db      	uxtb	r3, r3
				udc_config.confdev_lsfs->bNumConfigurations) {
  40549a:	4a21      	ldr	r2, [pc, #132]	; (405520 <udc_req_std_dev_set_configuration+0xac>)
  40549c:	6812      	ldr	r2, [r2, #0]
  40549e:	7c52      	ldrb	r2, [r2, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
  4054a0:	4293      	cmp	r3, r2
  4054a2:	dd01      	ble.n	4054a8 <udc_req_std_dev_set_configuration+0x34>
			return false;
  4054a4:	2300      	movs	r3, #0
  4054a6:	e032      	b.n	40550e <udc_req_std_dev_set_configuration+0x9a>
		}
	}

	// Reset current configuration
	udc_reset();
  4054a8:	4b1e      	ldr	r3, [pc, #120]	; (405524 <udc_req_std_dev_set_configuration+0xb0>)
  4054aa:	4798      	blx	r3

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
  4054ac:	4b1a      	ldr	r3, [pc, #104]	; (405518 <udc_req_std_dev_set_configuration+0xa4>)
  4054ae:	885b      	ldrh	r3, [r3, #2]
  4054b0:	b2da      	uxtb	r2, r3
  4054b2:	4b1d      	ldr	r3, [pc, #116]	; (405528 <udc_req_std_dev_set_configuration+0xb4>)
  4054b4:	701a      	strb	r2, [r3, #0]
	if (udc_num_configuration == 0) {
  4054b6:	4b1c      	ldr	r3, [pc, #112]	; (405528 <udc_req_std_dev_set_configuration+0xb4>)
  4054b8:	781b      	ldrb	r3, [r3, #0]
  4054ba:	2b00      	cmp	r3, #0
  4054bc:	d101      	bne.n	4054c2 <udc_req_std_dev_set_configuration+0x4e>
		return true; // Default empty configuration requested
  4054be:	2301      	movs	r3, #1
  4054c0:	e025      	b.n	40550e <udc_req_std_dev_set_configuration+0x9a>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
  4054c2:	4b17      	ldr	r3, [pc, #92]	; (405520 <udc_req_std_dev_set_configuration+0xac>)
  4054c4:	685a      	ldr	r2, [r3, #4]
  4054c6:	4b18      	ldr	r3, [pc, #96]	; (405528 <udc_req_std_dev_set_configuration+0xb4>)
  4054c8:	781b      	ldrb	r3, [r3, #0]
  4054ca:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
  4054ce:	3b01      	subs	r3, #1
  4054d0:	00db      	lsls	r3, r3, #3
  4054d2:	4413      	add	r3, r2
  4054d4:	4a15      	ldr	r2, [pc, #84]	; (40552c <udc_req_std_dev_set_configuration+0xb8>)
  4054d6:	6013      	str	r3, [r2, #0]
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  4054d8:	2300      	movs	r3, #0
  4054da:	71fb      	strb	r3, [r7, #7]
  4054dc:	e00f      	b.n	4054fe <udc_req_std_dev_set_configuration+0x8a>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
  4054de:	79fb      	ldrb	r3, [r7, #7]
  4054e0:	2100      	movs	r1, #0
  4054e2:	4618      	mov	r0, r3
  4054e4:	4b12      	ldr	r3, [pc, #72]	; (405530 <udc_req_std_dev_set_configuration+0xbc>)
  4054e6:	4798      	blx	r3
  4054e8:	4603      	mov	r3, r0
  4054ea:	f083 0301 	eor.w	r3, r3, #1
  4054ee:	b2db      	uxtb	r3, r3
  4054f0:	2b00      	cmp	r3, #0
  4054f2:	d001      	beq.n	4054f8 <udc_req_std_dev_set_configuration+0x84>
			return false;
  4054f4:	2300      	movs	r3, #0
  4054f6:	e00a      	b.n	40550e <udc_req_std_dev_set_configuration+0x9a>
			iface_num++) {
  4054f8:	79fb      	ldrb	r3, [r7, #7]
  4054fa:	3301      	adds	r3, #1
  4054fc:	71fb      	strb	r3, [r7, #7]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  4054fe:	4b0b      	ldr	r3, [pc, #44]	; (40552c <udc_req_std_dev_set_configuration+0xb8>)
  405500:	681b      	ldr	r3, [r3, #0]
  405502:	681b      	ldr	r3, [r3, #0]
  405504:	791b      	ldrb	r3, [r3, #4]
  405506:	79fa      	ldrb	r2, [r7, #7]
  405508:	429a      	cmp	r2, r3
  40550a:	d3e8      	bcc.n	4054de <udc_req_std_dev_set_configuration+0x6a>
		}
	}
	return true;
  40550c:	2301      	movs	r3, #1
}
  40550e:	4618      	mov	r0, r3
  405510:	3708      	adds	r7, #8
  405512:	46bd      	mov	sp, r7
  405514:	bd80      	pop	{r7, pc}
  405516:	bf00      	nop
  405518:	2001aba8 	.word	0x2001aba8
  40551c:	004074e5 	.word	0x004074e5
  405520:	200001d4 	.word	0x200001d4
  405524:	00404fed 	.word	0x00404fed
  405528:	2001a23c 	.word	0x2001a23c
  40552c:	2001a240 	.word	0x2001a240
  405530:	00404f45 	.word	0x00404f45

00405534 <udc_req_std_iface_get_setting>:
 * to get the alternate setting number of an interface
 *
 * \return true if success
 */
static bool udc_req_std_iface_get_setting(void)
{
  405534:	b580      	push	{r7, lr}
  405536:	b082      	sub	sp, #8
  405538:	af00      	add	r7, sp, #0
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
  40553a:	4b1e      	ldr	r3, [pc, #120]	; (4055b4 <udc_req_std_iface_get_setting+0x80>)
  40553c:	88db      	ldrh	r3, [r3, #6]
  40553e:	2b01      	cmp	r3, #1
  405540:	d001      	beq.n	405546 <udc_req_std_iface_get_setting+0x12>
		return false; // Error in request
  405542:	2300      	movs	r3, #0
  405544:	e032      	b.n	4055ac <udc_req_std_iface_get_setting+0x78>
	}
	if (!udc_num_configuration) {
  405546:	4b1c      	ldr	r3, [pc, #112]	; (4055b8 <udc_req_std_iface_get_setting+0x84>)
  405548:	781b      	ldrb	r3, [r3, #0]
  40554a:	2b00      	cmp	r3, #0
  40554c:	d101      	bne.n	405552 <udc_req_std_iface_get_setting+0x1e>
		return false; // The device is not is configured state yet
  40554e:	2300      	movs	r3, #0
  405550:	e02c      	b.n	4055ac <udc_req_std_iface_get_setting+0x78>
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  405552:	4b18      	ldr	r3, [pc, #96]	; (4055b4 <udc_req_std_iface_get_setting+0x80>)
  405554:	889b      	ldrh	r3, [r3, #4]
  405556:	71fb      	strb	r3, [r7, #7]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  405558:	4b18      	ldr	r3, [pc, #96]	; (4055bc <udc_req_std_iface_get_setting+0x88>)
  40555a:	681b      	ldr	r3, [r3, #0]
  40555c:	681b      	ldr	r3, [r3, #0]
  40555e:	791b      	ldrb	r3, [r3, #4]
  405560:	79fa      	ldrb	r2, [r7, #7]
  405562:	429a      	cmp	r2, r3
  405564:	d301      	bcc.n	40556a <udc_req_std_iface_get_setting+0x36>
		return false;
  405566:	2300      	movs	r3, #0
  405568:	e020      	b.n	4055ac <udc_req_std_iface_get_setting+0x78>
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
  40556a:	79fb      	ldrb	r3, [r7, #7]
  40556c:	2100      	movs	r1, #0
  40556e:	4618      	mov	r0, r3
  405570:	4b13      	ldr	r3, [pc, #76]	; (4055c0 <udc_req_std_iface_get_setting+0x8c>)
  405572:	4798      	blx	r3
  405574:	4603      	mov	r3, r0
  405576:	f083 0301 	eor.w	r3, r3, #1
  40557a:	b2db      	uxtb	r3, r3
  40557c:	2b00      	cmp	r3, #0
  40557e:	d001      	beq.n	405584 <udc_req_std_iface_get_setting+0x50>
		return false;
  405580:	2300      	movs	r3, #0
  405582:	e013      	b.n	4055ac <udc_req_std_iface_get_setting+0x78>
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
  405584:	4b0d      	ldr	r3, [pc, #52]	; (4055bc <udc_req_std_iface_get_setting+0x88>)
  405586:	681b      	ldr	r3, [r3, #0]
  405588:	685a      	ldr	r2, [r3, #4]
  40558a:	79fb      	ldrb	r3, [r7, #7]
  40558c:	009b      	lsls	r3, r3, #2
  40558e:	4413      	add	r3, r2
  405590:	681b      	ldr	r3, [r3, #0]
  405592:	603b      	str	r3, [r7, #0]
	udc_iface_setting = udi_api->getsetting();
  405594:	683b      	ldr	r3, [r7, #0]
  405596:	68db      	ldr	r3, [r3, #12]
  405598:	4798      	blx	r3
  40559a:	4603      	mov	r3, r0
  40559c:	461a      	mov	r2, r3
  40559e:	4b09      	ldr	r3, [pc, #36]	; (4055c4 <udc_req_std_iface_get_setting+0x90>)
  4055a0:	701a      	strb	r2, [r3, #0]

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
  4055a2:	2101      	movs	r1, #1
  4055a4:	4807      	ldr	r0, [pc, #28]	; (4055c4 <udc_req_std_iface_get_setting+0x90>)
  4055a6:	4b08      	ldr	r3, [pc, #32]	; (4055c8 <udc_req_std_iface_get_setting+0x94>)
  4055a8:	4798      	blx	r3
	return true;
  4055aa:	2301      	movs	r3, #1
}
  4055ac:	4618      	mov	r0, r3
  4055ae:	3708      	adds	r7, #8
  4055b0:	46bd      	mov	sp, r7
  4055b2:	bd80      	pop	{r7, pc}
  4055b4:	2001aba8 	.word	0x2001aba8
  4055b8:	2001a23c 	.word	0x2001a23c
  4055bc:	2001a240 	.word	0x2001a240
  4055c0:	00404e09 	.word	0x00404e09
  4055c4:	2001a238 	.word	0x2001a238
  4055c8:	00407545 	.word	0x00407545

004055cc <udc_req_std_iface_set_setting>:
 * to set an alternate setting of an interface
 *
 * \return true if success
 */
static bool udc_req_std_iface_set_setting(void)
{
  4055cc:	b580      	push	{r7, lr}
  4055ce:	b082      	sub	sp, #8
  4055d0:	af00      	add	r7, sp, #0
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
  4055d2:	4b14      	ldr	r3, [pc, #80]	; (405624 <udc_req_std_iface_set_setting+0x58>)
  4055d4:	88db      	ldrh	r3, [r3, #6]
  4055d6:	2b00      	cmp	r3, #0
  4055d8:	d001      	beq.n	4055de <udc_req_std_iface_set_setting+0x12>
		return false; // Error in request
  4055da:	2300      	movs	r3, #0
  4055dc:	e01e      	b.n	40561c <udc_req_std_iface_set_setting+0x50>
	}
	if (!udc_num_configuration) {
  4055de:	4b12      	ldr	r3, [pc, #72]	; (405628 <udc_req_std_iface_set_setting+0x5c>)
  4055e0:	781b      	ldrb	r3, [r3, #0]
  4055e2:	2b00      	cmp	r3, #0
  4055e4:	d101      	bne.n	4055ea <udc_req_std_iface_set_setting+0x1e>
		return false; // The device is not is configured state yet
  4055e6:	2300      	movs	r3, #0
  4055e8:	e018      	b.n	40561c <udc_req_std_iface_set_setting+0x50>
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  4055ea:	4b0e      	ldr	r3, [pc, #56]	; (405624 <udc_req_std_iface_set_setting+0x58>)
  4055ec:	889b      	ldrh	r3, [r3, #4]
  4055ee:	71fb      	strb	r3, [r7, #7]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
  4055f0:	4b0c      	ldr	r3, [pc, #48]	; (405624 <udc_req_std_iface_set_setting+0x58>)
  4055f2:	885b      	ldrh	r3, [r3, #2]
  4055f4:	71bb      	strb	r3, [r7, #6]

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
  4055f6:	79fb      	ldrb	r3, [r7, #7]
  4055f8:	4618      	mov	r0, r3
  4055fa:	4b0c      	ldr	r3, [pc, #48]	; (40562c <udc_req_std_iface_set_setting+0x60>)
  4055fc:	4798      	blx	r3
  4055fe:	4603      	mov	r3, r0
  405600:	f083 0301 	eor.w	r3, r3, #1
  405604:	b2db      	uxtb	r3, r3
  405606:	2b00      	cmp	r3, #0
  405608:	d001      	beq.n	40560e <udc_req_std_iface_set_setting+0x42>
		return false;
  40560a:	2300      	movs	r3, #0
  40560c:	e006      	b.n	40561c <udc_req_std_iface_set_setting+0x50>
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
  40560e:	79ba      	ldrb	r2, [r7, #6]
  405610:	79fb      	ldrb	r3, [r7, #7]
  405612:	4611      	mov	r1, r2
  405614:	4618      	mov	r0, r3
  405616:	4b06      	ldr	r3, [pc, #24]	; (405630 <udc_req_std_iface_set_setting+0x64>)
  405618:	4798      	blx	r3
  40561a:	4603      	mov	r3, r0
}
  40561c:	4618      	mov	r0, r3
  40561e:	3708      	adds	r7, #8
  405620:	46bd      	mov	sp, r7
  405622:	bd80      	pop	{r7, pc}
  405624:	2001aba8 	.word	0x2001aba8
  405628:	2001a23c 	.word	0x2001a23c
  40562c:	00404ea5 	.word	0x00404ea5
  405630:	00404f45 	.word	0x00404f45

00405634 <udc_reqstd>:
 * \brief Main routine to manage the standard USB SETUP request
 *
 * \return true if the request is supported
 */
static bool udc_reqstd(void)
{
  405634:	b580      	push	{r7, lr}
  405636:	af00      	add	r7, sp, #0
	if (Udd_setup_is_in()) {
  405638:	4b4d      	ldr	r3, [pc, #308]	; (405770 <udc_reqstd+0x13c>)
  40563a:	781b      	ldrb	r3, [r3, #0]
  40563c:	b25b      	sxtb	r3, r3
  40563e:	2b00      	cmp	r3, #0
  405640:	da3e      	bge.n	4056c0 <udc_reqstd+0x8c>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
  405642:	4b4b      	ldr	r3, [pc, #300]	; (405770 <udc_reqstd+0x13c>)
  405644:	88db      	ldrh	r3, [r3, #6]
  405646:	2b00      	cmp	r3, #0
  405648:	d101      	bne.n	40564e <udc_reqstd+0x1a>
			return false; // Error for USB host
  40564a:	2300      	movs	r3, #0
  40564c:	e08e      	b.n	40576c <udc_reqstd+0x138>
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
  40564e:	4b48      	ldr	r3, [pc, #288]	; (405770 <udc_reqstd+0x13c>)
  405650:	781b      	ldrb	r3, [r3, #0]
  405652:	f003 031f 	and.w	r3, r3, #31
  405656:	2b00      	cmp	r3, #0
  405658:	d114      	bne.n	405684 <udc_reqstd+0x50>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
  40565a:	4b45      	ldr	r3, [pc, #276]	; (405770 <udc_reqstd+0x13c>)
  40565c:	785b      	ldrb	r3, [r3, #1]
  40565e:	2b06      	cmp	r3, #6
  405660:	d008      	beq.n	405674 <udc_reqstd+0x40>
  405662:	2b08      	cmp	r3, #8
  405664:	d00a      	beq.n	40567c <udc_reqstd+0x48>
  405666:	2b00      	cmp	r3, #0
  405668:	d000      	beq.n	40566c <udc_reqstd+0x38>
			case USB_REQ_GET_DESCRIPTOR:
				return udc_req_std_dev_get_descriptor();
			case USB_REQ_GET_CONFIGURATION:
				return udc_req_std_dev_get_configuration();
			default:
				break;
  40566a:	e00b      	b.n	405684 <udc_reqstd+0x50>
				return udc_req_std_dev_get_status();
  40566c:	4b41      	ldr	r3, [pc, #260]	; (405774 <udc_reqstd+0x140>)
  40566e:	4798      	blx	r3
  405670:	4603      	mov	r3, r0
  405672:	e07b      	b.n	40576c <udc_reqstd+0x138>
				return udc_req_std_dev_get_descriptor();
  405674:	4b40      	ldr	r3, [pc, #256]	; (405778 <udc_reqstd+0x144>)
  405676:	4798      	blx	r3
  405678:	4603      	mov	r3, r0
  40567a:	e077      	b.n	40576c <udc_reqstd+0x138>
				return udc_req_std_dev_get_configuration();
  40567c:	4b3f      	ldr	r3, [pc, #252]	; (40577c <udc_reqstd+0x148>)
  40567e:	4798      	blx	r3
  405680:	4603      	mov	r3, r0
  405682:	e073      	b.n	40576c <udc_reqstd+0x138>
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
  405684:	4b3a      	ldr	r3, [pc, #232]	; (405770 <udc_reqstd+0x13c>)
  405686:	781b      	ldrb	r3, [r3, #0]
  405688:	f003 031f 	and.w	r3, r3, #31
  40568c:	2b01      	cmp	r3, #1
  40568e:	d108      	bne.n	4056a2 <udc_reqstd+0x6e>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
  405690:	4b37      	ldr	r3, [pc, #220]	; (405770 <udc_reqstd+0x13c>)
  405692:	785b      	ldrb	r3, [r3, #1]
  405694:	2b0a      	cmp	r3, #10
  405696:	d000      	beq.n	40569a <udc_reqstd+0x66>
			case USB_REQ_GET_INTERFACE:
				return udc_req_std_iface_get_setting();
			default:
				break;
  405698:	e003      	b.n	4056a2 <udc_reqstd+0x6e>
				return udc_req_std_iface_get_setting();
  40569a:	4b39      	ldr	r3, [pc, #228]	; (405780 <udc_reqstd+0x14c>)
  40569c:	4798      	blx	r3
  40569e:	4603      	mov	r3, r0
  4056a0:	e064      	b.n	40576c <udc_reqstd+0x138>
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
  4056a2:	4b33      	ldr	r3, [pc, #204]	; (405770 <udc_reqstd+0x13c>)
  4056a4:	781b      	ldrb	r3, [r3, #0]
  4056a6:	f003 031f 	and.w	r3, r3, #31
  4056aa:	2b02      	cmp	r3, #2
  4056ac:	d15d      	bne.n	40576a <udc_reqstd+0x136>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
  4056ae:	4b30      	ldr	r3, [pc, #192]	; (405770 <udc_reqstd+0x13c>)
  4056b0:	785b      	ldrb	r3, [r3, #1]
  4056b2:	2b00      	cmp	r3, #0
  4056b4:	d000      	beq.n	4056b8 <udc_reqstd+0x84>
			case USB_REQ_GET_STATUS:
				return udc_req_std_ep_get_status();
			default:
				break;
  4056b6:	e058      	b.n	40576a <udc_reqstd+0x136>
				return udc_req_std_ep_get_status();
  4056b8:	4b32      	ldr	r3, [pc, #200]	; (405784 <udc_reqstd+0x150>)
  4056ba:	4798      	blx	r3
  4056bc:	4603      	mov	r3, r0
  4056be:	e055      	b.n	40576c <udc_reqstd+0x138>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
  4056c0:	4b2b      	ldr	r3, [pc, #172]	; (405770 <udc_reqstd+0x13c>)
  4056c2:	781b      	ldrb	r3, [r3, #0]
  4056c4:	f003 031f 	and.w	r3, r3, #31
  4056c8:	2b00      	cmp	r3, #0
  4056ca:	d12a      	bne.n	405722 <udc_reqstd+0xee>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
  4056cc:	4b28      	ldr	r3, [pc, #160]	; (405770 <udc_reqstd+0x13c>)
  4056ce:	785b      	ldrb	r3, [r3, #1]
  4056d0:	3b01      	subs	r3, #1
  4056d2:	2b08      	cmp	r3, #8
  4056d4:	d824      	bhi.n	405720 <udc_reqstd+0xec>
  4056d6:	a201      	add	r2, pc, #4	; (adr r2, 4056dc <udc_reqstd+0xa8>)
  4056d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4056dc:	00405709 	.word	0x00405709
  4056e0:	00405721 	.word	0x00405721
  4056e4:	00405711 	.word	0x00405711
  4056e8:	00405721 	.word	0x00405721
  4056ec:	00405701 	.word	0x00405701
  4056f0:	00405721 	.word	0x00405721
  4056f4:	00405721 	.word	0x00405721
  4056f8:	00405721 	.word	0x00405721
  4056fc:	00405719 	.word	0x00405719
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
  405700:	4b21      	ldr	r3, [pc, #132]	; (405788 <udc_reqstd+0x154>)
  405702:	4798      	blx	r3
  405704:	4603      	mov	r3, r0
  405706:	e031      	b.n	40576c <udc_reqstd+0x138>
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
  405708:	4b20      	ldr	r3, [pc, #128]	; (40578c <udc_reqstd+0x158>)
  40570a:	4798      	blx	r3
  40570c:	4603      	mov	r3, r0
  40570e:	e02d      	b.n	40576c <udc_reqstd+0x138>
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
  405710:	4b1f      	ldr	r3, [pc, #124]	; (405790 <udc_reqstd+0x15c>)
  405712:	4798      	blx	r3
  405714:	4603      	mov	r3, r0
  405716:	e029      	b.n	40576c <udc_reqstd+0x138>
			case USB_REQ_SET_CONFIGURATION:
				return udc_req_std_dev_set_configuration();
  405718:	4b1e      	ldr	r3, [pc, #120]	; (405794 <udc_reqstd+0x160>)
  40571a:	4798      	blx	r3
  40571c:	4603      	mov	r3, r0
  40571e:	e025      	b.n	40576c <udc_reqstd+0x138>
			case USB_REQ_SET_DESCRIPTOR:
				/* Not supported (defined as optional by the USB 2.0 spec) */
				break;
			default:
				break;
  405720:	bf00      	nop
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
  405722:	4b13      	ldr	r3, [pc, #76]	; (405770 <udc_reqstd+0x13c>)
  405724:	781b      	ldrb	r3, [r3, #0]
  405726:	f003 031f 	and.w	r3, r3, #31
  40572a:	2b01      	cmp	r3, #1
  40572c:	d108      	bne.n	405740 <udc_reqstd+0x10c>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
  40572e:	4b10      	ldr	r3, [pc, #64]	; (405770 <udc_reqstd+0x13c>)
  405730:	785b      	ldrb	r3, [r3, #1]
  405732:	2b0b      	cmp	r3, #11
  405734:	d000      	beq.n	405738 <udc_reqstd+0x104>
			case USB_REQ_SET_INTERFACE:
				return udc_req_std_iface_set_setting();
			default:
				break;
  405736:	e003      	b.n	405740 <udc_reqstd+0x10c>
				return udc_req_std_iface_set_setting();
  405738:	4b17      	ldr	r3, [pc, #92]	; (405798 <udc_reqstd+0x164>)
  40573a:	4798      	blx	r3
  40573c:	4603      	mov	r3, r0
  40573e:	e015      	b.n	40576c <udc_reqstd+0x138>
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
  405740:	4b0b      	ldr	r3, [pc, #44]	; (405770 <udc_reqstd+0x13c>)
  405742:	781b      	ldrb	r3, [r3, #0]
  405744:	f003 031f 	and.w	r3, r3, #31
  405748:	2b02      	cmp	r3, #2
  40574a:	d10e      	bne.n	40576a <udc_reqstd+0x136>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
  40574c:	4b08      	ldr	r3, [pc, #32]	; (405770 <udc_reqstd+0x13c>)
  40574e:	785b      	ldrb	r3, [r3, #1]
  405750:	2b01      	cmp	r3, #1
  405752:	d002      	beq.n	40575a <udc_reqstd+0x126>
  405754:	2b03      	cmp	r3, #3
  405756:	d004      	beq.n	405762 <udc_reqstd+0x12e>
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_ep_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_ep_set_feature();
			default:
				break;
  405758:	e007      	b.n	40576a <udc_reqstd+0x136>
				return udc_req_std_ep_clear_feature();
  40575a:	4b10      	ldr	r3, [pc, #64]	; (40579c <udc_reqstd+0x168>)
  40575c:	4798      	blx	r3
  40575e:	4603      	mov	r3, r0
  405760:	e004      	b.n	40576c <udc_reqstd+0x138>
				return udc_req_std_ep_set_feature();
  405762:	4b0f      	ldr	r3, [pc, #60]	; (4057a0 <udc_reqstd+0x16c>)
  405764:	4798      	blx	r3
  405766:	4603      	mov	r3, r0
  405768:	e000      	b.n	40576c <udc_reqstd+0x138>
			}
		}
#endif
	}
	return false;
  40576a:	2300      	movs	r3, #0
}
  40576c:	4618      	mov	r0, r3
  40576e:	bd80      	pop	{r7, pc}
  405770:	2001aba8 	.word	0x2001aba8
  405774:	004050a1 	.word	0x004050a1
  405778:	0040532d 	.word	0x0040532d
  40577c:	00405449 	.word	0x00405449
  405780:	00405535 	.word	0x00405535
  405784:	004050cd 	.word	0x004050cd
  405788:	00405225 	.word	0x00405225
  40578c:	00405111 	.word	0x00405111
  405790:	00405189 	.word	0x00405189
  405794:	00405475 	.word	0x00405475
  405798:	004055cd 	.word	0x004055cd
  40579c:	00405151 	.word	0x00405151
  4057a0:	004051b9 	.word	0x004051b9

004057a4 <udc_req_iface>:
 * \brief Send the SETUP interface request to UDI
 *
 * \return true if the request is supported
 */
static bool udc_req_iface(void)
{
  4057a4:	b580      	push	{r7, lr}
  4057a6:	b082      	sub	sp, #8
  4057a8:	af00      	add	r7, sp, #0
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
  4057aa:	4b20      	ldr	r3, [pc, #128]	; (40582c <udc_req_iface+0x88>)
  4057ac:	781b      	ldrb	r3, [r3, #0]
  4057ae:	2b00      	cmp	r3, #0
  4057b0:	d101      	bne.n	4057b6 <udc_req_iface+0x12>
		return false; // The device is not is configured state yet
  4057b2:	2300      	movs	r3, #0
  4057b4:	e036      	b.n	405824 <udc_req_iface+0x80>
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  4057b6:	4b1e      	ldr	r3, [pc, #120]	; (405830 <udc_req_iface+0x8c>)
  4057b8:	889b      	ldrh	r3, [r3, #4]
  4057ba:	71fb      	strb	r3, [r7, #7]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  4057bc:	4b1d      	ldr	r3, [pc, #116]	; (405834 <udc_req_iface+0x90>)
  4057be:	681b      	ldr	r3, [r3, #0]
  4057c0:	681b      	ldr	r3, [r3, #0]
  4057c2:	791b      	ldrb	r3, [r3, #4]
  4057c4:	79fa      	ldrb	r2, [r7, #7]
  4057c6:	429a      	cmp	r2, r3
  4057c8:	d301      	bcc.n	4057ce <udc_req_iface+0x2a>
		return false;
  4057ca:	2300      	movs	r3, #0
  4057cc:	e02a      	b.n	405824 <udc_req_iface+0x80>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
  4057ce:	79fb      	ldrb	r3, [r7, #7]
  4057d0:	2100      	movs	r1, #0
  4057d2:	4618      	mov	r0, r3
  4057d4:	4b18      	ldr	r3, [pc, #96]	; (405838 <udc_req_iface+0x94>)
  4057d6:	4798      	blx	r3
  4057d8:	4603      	mov	r3, r0
  4057da:	f083 0301 	eor.w	r3, r3, #1
  4057de:	b2db      	uxtb	r3, r3
  4057e0:	2b00      	cmp	r3, #0
  4057e2:	d001      	beq.n	4057e8 <udc_req_iface+0x44>
		return false;
  4057e4:	2300      	movs	r3, #0
  4057e6:	e01d      	b.n	405824 <udc_req_iface+0x80>
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
  4057e8:	4b12      	ldr	r3, [pc, #72]	; (405834 <udc_req_iface+0x90>)
  4057ea:	681b      	ldr	r3, [r3, #0]
  4057ec:	685a      	ldr	r2, [r3, #4]
  4057ee:	79fb      	ldrb	r3, [r7, #7]
  4057f0:	009b      	lsls	r3, r3, #2
  4057f2:	4413      	add	r3, r2
  4057f4:	681b      	ldr	r3, [r3, #0]
  4057f6:	603b      	str	r3, [r7, #0]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  4057f8:	683b      	ldr	r3, [r7, #0]
  4057fa:	68db      	ldr	r3, [r3, #12]
  4057fc:	4798      	blx	r3
  4057fe:	4603      	mov	r3, r0
  405800:	461a      	mov	r2, r3
  405802:	79fb      	ldrb	r3, [r7, #7]
  405804:	4611      	mov	r1, r2
  405806:	4618      	mov	r0, r3
  405808:	4b0b      	ldr	r3, [pc, #44]	; (405838 <udc_req_iface+0x94>)
  40580a:	4798      	blx	r3
  40580c:	4603      	mov	r3, r0
  40580e:	f083 0301 	eor.w	r3, r3, #1
  405812:	b2db      	uxtb	r3, r3
  405814:	2b00      	cmp	r3, #0
  405816:	d001      	beq.n	40581c <udc_req_iface+0x78>
		return false;
  405818:	2300      	movs	r3, #0
  40581a:	e003      	b.n	405824 <udc_req_iface+0x80>
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
  40581c:	683b      	ldr	r3, [r7, #0]
  40581e:	689b      	ldr	r3, [r3, #8]
  405820:	4798      	blx	r3
  405822:	4603      	mov	r3, r0
}
  405824:	4618      	mov	r0, r3
  405826:	3708      	adds	r7, #8
  405828:	46bd      	mov	sp, r7
  40582a:	bd80      	pop	{r7, pc}
  40582c:	2001a23c 	.word	0x2001a23c
  405830:	2001aba8 	.word	0x2001aba8
  405834:	2001a240 	.word	0x2001a240
  405838:	00404e09 	.word	0x00404e09

0040583c <udc_req_ep>:
 * \brief Send the SETUP interface request to UDI
 *
 * \return true if the request is supported
 */
static bool udc_req_ep(void)
{
  40583c:	b580      	push	{r7, lr}
  40583e:	b082      	sub	sp, #8
  405840:	af00      	add	r7, sp, #0
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
  405842:	4b1e      	ldr	r3, [pc, #120]	; (4058bc <udc_req_ep+0x80>)
  405844:	781b      	ldrb	r3, [r3, #0]
  405846:	2b00      	cmp	r3, #0
  405848:	d101      	bne.n	40584e <udc_req_ep+0x12>
		return false; // The device is not is configured state yet
  40584a:	2300      	movs	r3, #0
  40584c:	e032      	b.n	4058b4 <udc_req_ep+0x78>
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  40584e:	4b1c      	ldr	r3, [pc, #112]	; (4058c0 <udc_req_ep+0x84>)
  405850:	889b      	ldrh	r3, [r3, #4]
  405852:	71fb      	strb	r3, [r7, #7]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  405854:	2300      	movs	r3, #0
  405856:	71fb      	strb	r3, [r7, #7]
  405858:	e024      	b.n	4058a4 <udc_req_ep+0x68>
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
  40585a:	4b1a      	ldr	r3, [pc, #104]	; (4058c4 <udc_req_ep+0x88>)
  40585c:	681b      	ldr	r3, [r3, #0]
  40585e:	685a      	ldr	r2, [r3, #4]
  405860:	79fb      	ldrb	r3, [r7, #7]
  405862:	009b      	lsls	r3, r3, #2
  405864:	4413      	add	r3, r2
  405866:	681b      	ldr	r3, [r3, #0]
  405868:	603b      	str	r3, [r7, #0]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  40586a:	683b      	ldr	r3, [r7, #0]
  40586c:	68db      	ldr	r3, [r3, #12]
  40586e:	4798      	blx	r3
  405870:	4603      	mov	r3, r0
  405872:	461a      	mov	r2, r3
  405874:	79fb      	ldrb	r3, [r7, #7]
  405876:	4611      	mov	r1, r2
  405878:	4618      	mov	r0, r3
  40587a:	4b13      	ldr	r3, [pc, #76]	; (4058c8 <udc_req_ep+0x8c>)
  40587c:	4798      	blx	r3
  40587e:	4603      	mov	r3, r0
  405880:	f083 0301 	eor.w	r3, r3, #1
  405884:	b2db      	uxtb	r3, r3
  405886:	2b00      	cmp	r3, #0
  405888:	d001      	beq.n	40588e <udc_req_ep+0x52>
			return false;
  40588a:	2300      	movs	r3, #0
  40588c:	e012      	b.n	4058b4 <udc_req_ep+0x78>
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
  40588e:	683b      	ldr	r3, [r7, #0]
  405890:	689b      	ldr	r3, [r3, #8]
  405892:	4798      	blx	r3
  405894:	4603      	mov	r3, r0
  405896:	2b00      	cmp	r3, #0
  405898:	d001      	beq.n	40589e <udc_req_ep+0x62>
			return true;
  40589a:	2301      	movs	r3, #1
  40589c:	e00a      	b.n	4058b4 <udc_req_ep+0x78>
			iface_num++) {
  40589e:	79fb      	ldrb	r3, [r7, #7]
  4058a0:	3301      	adds	r3, #1
  4058a2:	71fb      	strb	r3, [r7, #7]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  4058a4:	4b07      	ldr	r3, [pc, #28]	; (4058c4 <udc_req_ep+0x88>)
  4058a6:	681b      	ldr	r3, [r3, #0]
  4058a8:	681b      	ldr	r3, [r3, #0]
  4058aa:	791b      	ldrb	r3, [r3, #4]
  4058ac:	79fa      	ldrb	r2, [r7, #7]
  4058ae:	429a      	cmp	r2, r3
  4058b0:	d3d3      	bcc.n	40585a <udc_req_ep+0x1e>
		}
	}
	return false;
  4058b2:	2300      	movs	r3, #0
}
  4058b4:	4618      	mov	r0, r3
  4058b6:	3708      	adds	r7, #8
  4058b8:	46bd      	mov	sp, r7
  4058ba:	bd80      	pop	{r7, pc}
  4058bc:	2001a23c 	.word	0x2001a23c
  4058c0:	2001aba8 	.word	0x2001aba8
  4058c4:	2001a240 	.word	0x2001a240
  4058c8:	00404e09 	.word	0x00404e09

004058cc <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
  4058cc:	b580      	push	{r7, lr}
  4058ce:	af00      	add	r7, sp, #0
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
  4058d0:	4b1e      	ldr	r3, [pc, #120]	; (40594c <udc_process_setup+0x80>)
  4058d2:	2200      	movs	r2, #0
  4058d4:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
  4058d6:	4b1d      	ldr	r3, [pc, #116]	; (40594c <udc_process_setup+0x80>)
  4058d8:	2200      	movs	r2, #0
  4058da:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
  4058dc:	4b1b      	ldr	r3, [pc, #108]	; (40594c <udc_process_setup+0x80>)
  4058de:	2200      	movs	r2, #0
  4058e0:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
  4058e2:	4b1a      	ldr	r3, [pc, #104]	; (40594c <udc_process_setup+0x80>)
  4058e4:	781b      	ldrb	r3, [r3, #0]
  4058e6:	b25b      	sxtb	r3, r3
  4058e8:	2b00      	cmp	r3, #0
  4058ea:	da05      	bge.n	4058f8 <udc_process_setup+0x2c>
		if (udd_g_ctrlreq.req.wLength == 0) {
  4058ec:	4b17      	ldr	r3, [pc, #92]	; (40594c <udc_process_setup+0x80>)
  4058ee:	88db      	ldrh	r3, [r3, #6]
  4058f0:	2b00      	cmp	r3, #0
  4058f2:	d101      	bne.n	4058f8 <udc_process_setup+0x2c>
			return false; // Error from USB host
  4058f4:	2300      	movs	r3, #0
  4058f6:	e027      	b.n	405948 <udc_process_setup+0x7c>
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
  4058f8:	4b14      	ldr	r3, [pc, #80]	; (40594c <udc_process_setup+0x80>)
  4058fa:	781b      	ldrb	r3, [r3, #0]
  4058fc:	f003 0360 	and.w	r3, r3, #96	; 0x60
  405900:	2b00      	cmp	r3, #0
  405902:	d106      	bne.n	405912 <udc_process_setup+0x46>
		if (udc_reqstd()) {
  405904:	4b12      	ldr	r3, [pc, #72]	; (405950 <udc_process_setup+0x84>)
  405906:	4798      	blx	r3
  405908:	4603      	mov	r3, r0
  40590a:	2b00      	cmp	r3, #0
  40590c:	d001      	beq.n	405912 <udc_process_setup+0x46>
			return true;
  40590e:	2301      	movs	r3, #1
  405910:	e01a      	b.n	405948 <udc_process_setup+0x7c>
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
  405912:	4b0e      	ldr	r3, [pc, #56]	; (40594c <udc_process_setup+0x80>)
  405914:	781b      	ldrb	r3, [r3, #0]
  405916:	f003 031f 	and.w	r3, r3, #31
  40591a:	2b01      	cmp	r3, #1
  40591c:	d106      	bne.n	40592c <udc_process_setup+0x60>
		if (udc_req_iface()) {
  40591e:	4b0d      	ldr	r3, [pc, #52]	; (405954 <udc_process_setup+0x88>)
  405920:	4798      	blx	r3
  405922:	4603      	mov	r3, r0
  405924:	2b00      	cmp	r3, #0
  405926:	d001      	beq.n	40592c <udc_process_setup+0x60>
			return true;
  405928:	2301      	movs	r3, #1
  40592a:	e00d      	b.n	405948 <udc_process_setup+0x7c>
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
  40592c:	4b07      	ldr	r3, [pc, #28]	; (40594c <udc_process_setup+0x80>)
  40592e:	781b      	ldrb	r3, [r3, #0]
  405930:	f003 031f 	and.w	r3, r3, #31
  405934:	2b02      	cmp	r3, #2
  405936:	d106      	bne.n	405946 <udc_process_setup+0x7a>
		if (udc_req_ep()) {
  405938:	4b07      	ldr	r3, [pc, #28]	; (405958 <udc_process_setup+0x8c>)
  40593a:	4798      	blx	r3
  40593c:	4603      	mov	r3, r0
  40593e:	2b00      	cmp	r3, #0
  405940:	d001      	beq.n	405946 <udc_process_setup+0x7a>
			return true;
  405942:	2301      	movs	r3, #1
  405944:	e000      	b.n	405948 <udc_process_setup+0x7c>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
  405946:	2300      	movs	r3, #0
#endif
}
  405948:	4618      	mov	r0, r3
  40594a:	bd80      	pop	{r7, pc}
  40594c:	2001aba8 	.word	0x2001aba8
  405950:	00405635 	.word	0x00405635
  405954:	004057a5 	.word	0x004057a5
  405958:	0040583d 	.word	0x0040583d

0040595c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  40595c:	b580      	push	{r7, lr}
  40595e:	b086      	sub	sp, #24
  405960:	af00      	add	r7, sp, #0
  405962:	60f8      	str	r0, [r7, #12]
  405964:	60b9      	str	r1, [r7, #8]
  405966:	607a      	str	r2, [r7, #4]
	int nChars = 0;
  405968:	2300      	movs	r3, #0
  40596a:	617b      	str	r3, [r7, #20]

	if (file != 0) {
  40596c:	68fb      	ldr	r3, [r7, #12]
  40596e:	2b00      	cmp	r3, #0
  405970:	d012      	beq.n	405998 <_read+0x3c>
		return -1;
  405972:	f04f 33ff 	mov.w	r3, #4294967295
  405976:	e013      	b.n	4059a0 <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
  405978:	4b0b      	ldr	r3, [pc, #44]	; (4059a8 <_read+0x4c>)
  40597a:	681b      	ldr	r3, [r3, #0]
  40597c:	4a0b      	ldr	r2, [pc, #44]	; (4059ac <_read+0x50>)
  40597e:	6812      	ldr	r2, [r2, #0]
  405980:	68b9      	ldr	r1, [r7, #8]
  405982:	4610      	mov	r0, r2
  405984:	4798      	blx	r3
		ptr++;
  405986:	68bb      	ldr	r3, [r7, #8]
  405988:	3301      	adds	r3, #1
  40598a:	60bb      	str	r3, [r7, #8]
		nChars++;
  40598c:	697b      	ldr	r3, [r7, #20]
  40598e:	3301      	adds	r3, #1
  405990:	617b      	str	r3, [r7, #20]
	for (; len > 0; --len) {
  405992:	687b      	ldr	r3, [r7, #4]
  405994:	3b01      	subs	r3, #1
  405996:	607b      	str	r3, [r7, #4]
  405998:	687b      	ldr	r3, [r7, #4]
  40599a:	2b00      	cmp	r3, #0
  40599c:	dcec      	bgt.n	405978 <_read+0x1c>
	}
	return nChars;
  40599e:	697b      	ldr	r3, [r7, #20]
}
  4059a0:	4618      	mov	r0, r3
  4059a2:	3718      	adds	r7, #24
  4059a4:	46bd      	mov	sp, r7
  4059a6:	bd80      	pop	{r7, pc}
  4059a8:	2001ab9c 	.word	0x2001ab9c
  4059ac:	2001aba4 	.word	0x2001aba4

004059b0 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  4059b0:	b580      	push	{r7, lr}
  4059b2:	b086      	sub	sp, #24
  4059b4:	af00      	add	r7, sp, #0
  4059b6:	60f8      	str	r0, [r7, #12]
  4059b8:	60b9      	str	r1, [r7, #8]
  4059ba:	607a      	str	r2, [r7, #4]
	int nChars = 0;
  4059bc:	2300      	movs	r3, #0
  4059be:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
  4059c0:	68fb      	ldr	r3, [r7, #12]
  4059c2:	2b01      	cmp	r3, #1
  4059c4:	d01e      	beq.n	405a04 <_write+0x54>
  4059c6:	68fb      	ldr	r3, [r7, #12]
  4059c8:	2b02      	cmp	r3, #2
  4059ca:	d01b      	beq.n	405a04 <_write+0x54>
  4059cc:	68fb      	ldr	r3, [r7, #12]
  4059ce:	2b03      	cmp	r3, #3
  4059d0:	d018      	beq.n	405a04 <_write+0x54>
		return -1;
  4059d2:	f04f 33ff 	mov.w	r3, #4294967295
  4059d6:	e019      	b.n	405a0c <_write+0x5c>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
  4059d8:	4b0e      	ldr	r3, [pc, #56]	; (405a14 <_write+0x64>)
  4059da:	681a      	ldr	r2, [r3, #0]
  4059dc:	4b0e      	ldr	r3, [pc, #56]	; (405a18 <_write+0x68>)
  4059de:	6818      	ldr	r0, [r3, #0]
  4059e0:	68bb      	ldr	r3, [r7, #8]
  4059e2:	1c59      	adds	r1, r3, #1
  4059e4:	60b9      	str	r1, [r7, #8]
  4059e6:	781b      	ldrb	r3, [r3, #0]
  4059e8:	4619      	mov	r1, r3
  4059ea:	4790      	blx	r2
  4059ec:	4603      	mov	r3, r0
  4059ee:	2b00      	cmp	r3, #0
  4059f0:	da02      	bge.n	4059f8 <_write+0x48>
			return -1;
  4059f2:	f04f 33ff 	mov.w	r3, #4294967295
  4059f6:	e009      	b.n	405a0c <_write+0x5c>
		}
		++nChars;
  4059f8:	697b      	ldr	r3, [r7, #20]
  4059fa:	3301      	adds	r3, #1
  4059fc:	617b      	str	r3, [r7, #20]
	for (; len != 0; --len) {
  4059fe:	687b      	ldr	r3, [r7, #4]
  405a00:	3b01      	subs	r3, #1
  405a02:	607b      	str	r3, [r7, #4]
  405a04:	687b      	ldr	r3, [r7, #4]
  405a06:	2b00      	cmp	r3, #0
  405a08:	d1e6      	bne.n	4059d8 <_write+0x28>
	}
	return nChars;
  405a0a:	697b      	ldr	r3, [r7, #20]
}
  405a0c:	4618      	mov	r0, r3
  405a0e:	3718      	adds	r7, #24
  405a10:	46bd      	mov	sp, r7
  405a12:	bd80      	pop	{r7, pc}
  405a14:	2001aba0 	.word	0x2001aba0
  405a18:	2001aba4 	.word	0x2001aba4

00405a1c <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  405a1c:	b580      	push	{r7, lr}
  405a1e:	b082      	sub	sp, #8
  405a20:	af00      	add	r7, sp, #0
  405a22:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  405a24:	6878      	ldr	r0, [r7, #4]
  405a26:	4b03      	ldr	r3, [pc, #12]	; (405a34 <sysclk_enable_peripheral_clock+0x18>)
  405a28:	4798      	blx	r3
}
  405a2a:	bf00      	nop
  405a2c:	3708      	adds	r7, #8
  405a2e:	46bd      	mov	sp, r7
  405a30:	bd80      	pop	{r7, pc}
  405a32:	bf00      	nop
  405a34:	0040681d 	.word	0x0040681d

00405a38 <ioport_init>:
{
  405a38:	b580      	push	{r7, lr}
  405a3a:	af00      	add	r7, sp, #0
	sysclk_enable_peripheral_clock(ID_PIOA);
  405a3c:	200b      	movs	r0, #11
  405a3e:	4b03      	ldr	r3, [pc, #12]	; (405a4c <ioport_init+0x14>)
  405a40:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOB);
  405a42:	200c      	movs	r0, #12
  405a44:	4b01      	ldr	r3, [pc, #4]	; (405a4c <ioport_init+0x14>)
  405a46:	4798      	blx	r3
}
  405a48:	bf00      	nop
  405a4a:	bd80      	pop	{r7, pc}
  405a4c:	00405a1d 	.word	0x00405a1d

00405a50 <ioport_disable_pin>:
{
  405a50:	b480      	push	{r7}
  405a52:	b089      	sub	sp, #36	; 0x24
  405a54:	af00      	add	r7, sp, #0
  405a56:	6078      	str	r0, [r7, #4]
  405a58:	687b      	ldr	r3, [r7, #4]
  405a5a:	61fb      	str	r3, [r7, #28]
  405a5c:	69fb      	ldr	r3, [r7, #28]
  405a5e:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  405a60:	69bb      	ldr	r3, [r7, #24]
  405a62:	095a      	lsrs	r2, r3, #5
  405a64:	69fb      	ldr	r3, [r7, #28]
  405a66:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
  405a68:	697b      	ldr	r3, [r7, #20]
  405a6a:	f003 031f 	and.w	r3, r3, #31
  405a6e:	2101      	movs	r1, #1
  405a70:	fa01 f303 	lsl.w	r3, r1, r3
  405a74:	613a      	str	r2, [r7, #16]
  405a76:	60fb      	str	r3, [r7, #12]
  405a78:	693b      	ldr	r3, [r7, #16]
  405a7a:	60bb      	str	r3, [r7, #8]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  405a7c:	68bb      	ldr	r3, [r7, #8]
  405a7e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  405a82:	f203 7307 	addw	r3, r3, #1799	; 0x707
  405a86:	025b      	lsls	r3, r3, #9
  405a88:	461a      	mov	r2, r3
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  405a8a:	68fb      	ldr	r3, [r7, #12]
  405a8c:	6053      	str	r3, [r2, #4]
}
  405a8e:	bf00      	nop
  405a90:	3724      	adds	r7, #36	; 0x24
  405a92:	46bd      	mov	sp, r7
  405a94:	f85d 7b04 	ldr.w	r7, [sp], #4
  405a98:	4770      	bx	lr

00405a9a <ioport_disable_port>:
{
  405a9a:	b480      	push	{r7}
  405a9c:	b087      	sub	sp, #28
  405a9e:	af00      	add	r7, sp, #0
  405aa0:	6078      	str	r0, [r7, #4]
  405aa2:	6039      	str	r1, [r7, #0]
  405aa4:	687b      	ldr	r3, [r7, #4]
  405aa6:	617b      	str	r3, [r7, #20]
  405aa8:	683b      	ldr	r3, [r7, #0]
  405aaa:	613b      	str	r3, [r7, #16]
  405aac:	697b      	ldr	r3, [r7, #20]
  405aae:	60fb      	str	r3, [r7, #12]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  405ab0:	68fb      	ldr	r3, [r7, #12]
  405ab2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  405ab6:	f203 7307 	addw	r3, r3, #1799	; 0x707
  405aba:	025b      	lsls	r3, r3, #9
  405abc:	461a      	mov	r2, r3
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  405abe:	693b      	ldr	r3, [r7, #16]
  405ac0:	6053      	str	r3, [r2, #4]
}
  405ac2:	bf00      	nop
  405ac4:	371c      	adds	r7, #28
  405ac6:	46bd      	mov	sp, r7
  405ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
  405acc:	4770      	bx	lr

00405ace <ioport_set_port_mode>:
{
  405ace:	b480      	push	{r7}
  405ad0:	b08b      	sub	sp, #44	; 0x2c
  405ad2:	af00      	add	r7, sp, #0
  405ad4:	60f8      	str	r0, [r7, #12]
  405ad6:	60b9      	str	r1, [r7, #8]
  405ad8:	607a      	str	r2, [r7, #4]
  405ada:	68fb      	ldr	r3, [r7, #12]
  405adc:	627b      	str	r3, [r7, #36]	; 0x24
  405ade:	68bb      	ldr	r3, [r7, #8]
  405ae0:	623b      	str	r3, [r7, #32]
  405ae2:	687b      	ldr	r3, [r7, #4]
  405ae4:	61fb      	str	r3, [r7, #28]
  405ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  405ae8:	61bb      	str	r3, [r7, #24]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  405aea:	69bb      	ldr	r3, [r7, #24]
  405aec:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  405af0:	f203 7307 	addw	r3, r3, #1799	; 0x707
  405af4:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_port_to_base(port);
  405af6:	617b      	str	r3, [r7, #20]
	if (mode & IOPORT_MODE_PULLUP) {
  405af8:	69fb      	ldr	r3, [r7, #28]
  405afa:	f003 0308 	and.w	r3, r3, #8
  405afe:	2b00      	cmp	r3, #0
  405b00:	d003      	beq.n	405b0a <ioport_set_port_mode+0x3c>
		base->PIO_PUER = mask;
  405b02:	697b      	ldr	r3, [r7, #20]
  405b04:	6a3a      	ldr	r2, [r7, #32]
  405b06:	665a      	str	r2, [r3, #100]	; 0x64
  405b08:	e002      	b.n	405b10 <ioport_set_port_mode+0x42>
		base->PIO_PUDR = mask;
  405b0a:	697b      	ldr	r3, [r7, #20]
  405b0c:	6a3a      	ldr	r2, [r7, #32]
  405b0e:	661a      	str	r2, [r3, #96]	; 0x60
	if (mode & IOPORT_MODE_PULLDOWN) {
  405b10:	69fb      	ldr	r3, [r7, #28]
  405b12:	f003 0310 	and.w	r3, r3, #16
  405b16:	2b00      	cmp	r3, #0
  405b18:	d004      	beq.n	405b24 <ioport_set_port_mode+0x56>
		base->PIO_PPDER = mask;
  405b1a:	697b      	ldr	r3, [r7, #20]
  405b1c:	6a3a      	ldr	r2, [r7, #32]
  405b1e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  405b22:	e003      	b.n	405b2c <ioport_set_port_mode+0x5e>
		base->PIO_PPDDR = mask;
  405b24:	697b      	ldr	r3, [r7, #20]
  405b26:	6a3a      	ldr	r2, [r7, #32]
  405b28:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	if (mode & IOPORT_MODE_OPEN_DRAIN) {
  405b2c:	69fb      	ldr	r3, [r7, #28]
  405b2e:	f003 0320 	and.w	r3, r3, #32
  405b32:	2b00      	cmp	r3, #0
  405b34:	d003      	beq.n	405b3e <ioport_set_port_mode+0x70>
		base->PIO_MDER = mask;
  405b36:	697b      	ldr	r3, [r7, #20]
  405b38:	6a3a      	ldr	r2, [r7, #32]
  405b3a:	651a      	str	r2, [r3, #80]	; 0x50
  405b3c:	e002      	b.n	405b44 <ioport_set_port_mode+0x76>
		base->PIO_MDDR = mask;
  405b3e:	697b      	ldr	r3, [r7, #20]
  405b40:	6a3a      	ldr	r2, [r7, #32]
  405b42:	655a      	str	r2, [r3, #84]	; 0x54
	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
  405b44:	69fb      	ldr	r3, [r7, #28]
  405b46:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  405b4a:	2b00      	cmp	r3, #0
  405b4c:	d003      	beq.n	405b56 <ioport_set_port_mode+0x88>
		base->PIO_IFER = mask;
  405b4e:	697b      	ldr	r3, [r7, #20]
  405b50:	6a3a      	ldr	r2, [r7, #32]
  405b52:	621a      	str	r2, [r3, #32]
  405b54:	e002      	b.n	405b5c <ioport_set_port_mode+0x8e>
		base->PIO_IFDR = mask;
  405b56:	697b      	ldr	r3, [r7, #20]
  405b58:	6a3a      	ldr	r2, [r7, #32]
  405b5a:	625a      	str	r2, [r3, #36]	; 0x24
	if (mode & IOPORT_MODE_DEBOUNCE) {
  405b5c:	69fb      	ldr	r3, [r7, #28]
  405b5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
  405b62:	2b00      	cmp	r3, #0
  405b64:	d004      	beq.n	405b70 <ioport_set_port_mode+0xa2>
		base->PIO_IFSCER = mask;
  405b66:	697b      	ldr	r3, [r7, #20]
  405b68:	6a3a      	ldr	r2, [r7, #32]
  405b6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  405b6e:	e003      	b.n	405b78 <ioport_set_port_mode+0xaa>
		base->PIO_IFSCDR = mask;
  405b70:	697b      	ldr	r3, [r7, #20]
  405b72:	6a3a      	ldr	r2, [r7, #32]
  405b74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	if (mode & IOPORT_MODE_MUX_BIT0) {
  405b78:	69fb      	ldr	r3, [r7, #28]
  405b7a:	f003 0301 	and.w	r3, r3, #1
  405b7e:	2b00      	cmp	r3, #0
  405b80:	d006      	beq.n	405b90 <ioport_set_port_mode+0xc2>
		base->PIO_ABCDSR[0] |= mask;
  405b82:	697b      	ldr	r3, [r7, #20]
  405b84:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  405b86:	6a3b      	ldr	r3, [r7, #32]
  405b88:	431a      	orrs	r2, r3
  405b8a:	697b      	ldr	r3, [r7, #20]
  405b8c:	671a      	str	r2, [r3, #112]	; 0x70
  405b8e:	e006      	b.n	405b9e <ioport_set_port_mode+0xd0>
		base->PIO_ABCDSR[0] &= ~mask;
  405b90:	697b      	ldr	r3, [r7, #20]
  405b92:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  405b94:	6a3b      	ldr	r3, [r7, #32]
  405b96:	43db      	mvns	r3, r3
  405b98:	401a      	ands	r2, r3
  405b9a:	697b      	ldr	r3, [r7, #20]
  405b9c:	671a      	str	r2, [r3, #112]	; 0x70
	if (mode & IOPORT_MODE_MUX_BIT1) {
  405b9e:	69fb      	ldr	r3, [r7, #28]
  405ba0:	f003 0302 	and.w	r3, r3, #2
  405ba4:	2b00      	cmp	r3, #0
  405ba6:	d006      	beq.n	405bb6 <ioport_set_port_mode+0xe8>
		base->PIO_ABCDSR[1] |= mask;
  405ba8:	697b      	ldr	r3, [r7, #20]
  405baa:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  405bac:	6a3b      	ldr	r3, [r7, #32]
  405bae:	431a      	orrs	r2, r3
  405bb0:	697b      	ldr	r3, [r7, #20]
  405bb2:	675a      	str	r2, [r3, #116]	; 0x74
}
  405bb4:	e006      	b.n	405bc4 <ioport_set_port_mode+0xf6>
		base->PIO_ABCDSR[1] &= ~mask;
  405bb6:	697b      	ldr	r3, [r7, #20]
  405bb8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  405bba:	6a3b      	ldr	r3, [r7, #32]
  405bbc:	43db      	mvns	r3, r3
  405bbe:	401a      	ands	r2, r3
  405bc0:	697b      	ldr	r3, [r7, #20]
  405bc2:	675a      	str	r2, [r3, #116]	; 0x74
  405bc4:	bf00      	nop
  405bc6:	372c      	adds	r7, #44	; 0x2c
  405bc8:	46bd      	mov	sp, r7
  405bca:	f85d 7b04 	ldr.w	r7, [sp], #4
  405bce:	4770      	bx	lr

00405bd0 <ioport_set_pin_mode>:
{
  405bd0:	b480      	push	{r7}
  405bd2:	b08d      	sub	sp, #52	; 0x34
  405bd4:	af00      	add	r7, sp, #0
  405bd6:	6078      	str	r0, [r7, #4]
  405bd8:	6039      	str	r1, [r7, #0]
  405bda:	687b      	ldr	r3, [r7, #4]
  405bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  405bde:	683b      	ldr	r3, [r7, #0]
  405be0:	62bb      	str	r3, [r7, #40]	; 0x28
  405be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  405be4:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
  405be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  405be8:	095a      	lsrs	r2, r3, #5
  405bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  405bec:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
  405bee:	6a3b      	ldr	r3, [r7, #32]
  405bf0:	f003 031f 	and.w	r3, r3, #31
  405bf4:	2101      	movs	r1, #1
  405bf6:	fa01 f303 	lsl.w	r3, r1, r3
  405bfa:	61fa      	str	r2, [r7, #28]
  405bfc:	61bb      	str	r3, [r7, #24]
  405bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
  405c00:	617b      	str	r3, [r7, #20]
  405c02:	69fb      	ldr	r3, [r7, #28]
  405c04:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  405c06:	693b      	ldr	r3, [r7, #16]
  405c08:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  405c0c:	f203 7307 	addw	r3, r3, #1799	; 0x707
  405c10:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_port_to_base(port);
  405c12:	60fb      	str	r3, [r7, #12]
	if (mode & IOPORT_MODE_PULLUP) {
  405c14:	697b      	ldr	r3, [r7, #20]
  405c16:	f003 0308 	and.w	r3, r3, #8
  405c1a:	2b00      	cmp	r3, #0
  405c1c:	d003      	beq.n	405c26 <ioport_set_pin_mode+0x56>
		base->PIO_PUER = mask;
  405c1e:	68fb      	ldr	r3, [r7, #12]
  405c20:	69ba      	ldr	r2, [r7, #24]
  405c22:	665a      	str	r2, [r3, #100]	; 0x64
  405c24:	e002      	b.n	405c2c <ioport_set_pin_mode+0x5c>
		base->PIO_PUDR = mask;
  405c26:	68fb      	ldr	r3, [r7, #12]
  405c28:	69ba      	ldr	r2, [r7, #24]
  405c2a:	661a      	str	r2, [r3, #96]	; 0x60
	if (mode & IOPORT_MODE_PULLDOWN) {
  405c2c:	697b      	ldr	r3, [r7, #20]
  405c2e:	f003 0310 	and.w	r3, r3, #16
  405c32:	2b00      	cmp	r3, #0
  405c34:	d004      	beq.n	405c40 <ioport_set_pin_mode+0x70>
		base->PIO_PPDER = mask;
  405c36:	68fb      	ldr	r3, [r7, #12]
  405c38:	69ba      	ldr	r2, [r7, #24]
  405c3a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  405c3e:	e003      	b.n	405c48 <ioport_set_pin_mode+0x78>
		base->PIO_PPDDR = mask;
  405c40:	68fb      	ldr	r3, [r7, #12]
  405c42:	69ba      	ldr	r2, [r7, #24]
  405c44:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	if (mode & IOPORT_MODE_OPEN_DRAIN) {
  405c48:	697b      	ldr	r3, [r7, #20]
  405c4a:	f003 0320 	and.w	r3, r3, #32
  405c4e:	2b00      	cmp	r3, #0
  405c50:	d003      	beq.n	405c5a <ioport_set_pin_mode+0x8a>
		base->PIO_MDER = mask;
  405c52:	68fb      	ldr	r3, [r7, #12]
  405c54:	69ba      	ldr	r2, [r7, #24]
  405c56:	651a      	str	r2, [r3, #80]	; 0x50
  405c58:	e002      	b.n	405c60 <ioport_set_pin_mode+0x90>
		base->PIO_MDDR = mask;
  405c5a:	68fb      	ldr	r3, [r7, #12]
  405c5c:	69ba      	ldr	r2, [r7, #24]
  405c5e:	655a      	str	r2, [r3, #84]	; 0x54
	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
  405c60:	697b      	ldr	r3, [r7, #20]
  405c62:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  405c66:	2b00      	cmp	r3, #0
  405c68:	d003      	beq.n	405c72 <ioport_set_pin_mode+0xa2>
		base->PIO_IFER = mask;
  405c6a:	68fb      	ldr	r3, [r7, #12]
  405c6c:	69ba      	ldr	r2, [r7, #24]
  405c6e:	621a      	str	r2, [r3, #32]
  405c70:	e002      	b.n	405c78 <ioport_set_pin_mode+0xa8>
		base->PIO_IFDR = mask;
  405c72:	68fb      	ldr	r3, [r7, #12]
  405c74:	69ba      	ldr	r2, [r7, #24]
  405c76:	625a      	str	r2, [r3, #36]	; 0x24
	if (mode & IOPORT_MODE_DEBOUNCE) {
  405c78:	697b      	ldr	r3, [r7, #20]
  405c7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
  405c7e:	2b00      	cmp	r3, #0
  405c80:	d004      	beq.n	405c8c <ioport_set_pin_mode+0xbc>
		base->PIO_IFSCER = mask;
  405c82:	68fb      	ldr	r3, [r7, #12]
  405c84:	69ba      	ldr	r2, [r7, #24]
  405c86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  405c8a:	e003      	b.n	405c94 <ioport_set_pin_mode+0xc4>
		base->PIO_IFSCDR = mask;
  405c8c:	68fb      	ldr	r3, [r7, #12]
  405c8e:	69ba      	ldr	r2, [r7, #24]
  405c90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	if (mode & IOPORT_MODE_MUX_BIT0) {
  405c94:	697b      	ldr	r3, [r7, #20]
  405c96:	f003 0301 	and.w	r3, r3, #1
  405c9a:	2b00      	cmp	r3, #0
  405c9c:	d006      	beq.n	405cac <ioport_set_pin_mode+0xdc>
		base->PIO_ABCDSR[0] |= mask;
  405c9e:	68fb      	ldr	r3, [r7, #12]
  405ca0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  405ca2:	69bb      	ldr	r3, [r7, #24]
  405ca4:	431a      	orrs	r2, r3
  405ca6:	68fb      	ldr	r3, [r7, #12]
  405ca8:	671a      	str	r2, [r3, #112]	; 0x70
  405caa:	e006      	b.n	405cba <ioport_set_pin_mode+0xea>
		base->PIO_ABCDSR[0] &= ~mask;
  405cac:	68fb      	ldr	r3, [r7, #12]
  405cae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  405cb0:	69bb      	ldr	r3, [r7, #24]
  405cb2:	43db      	mvns	r3, r3
  405cb4:	401a      	ands	r2, r3
  405cb6:	68fb      	ldr	r3, [r7, #12]
  405cb8:	671a      	str	r2, [r3, #112]	; 0x70
	if (mode & IOPORT_MODE_MUX_BIT1) {
  405cba:	697b      	ldr	r3, [r7, #20]
  405cbc:	f003 0302 	and.w	r3, r3, #2
  405cc0:	2b00      	cmp	r3, #0
  405cc2:	d006      	beq.n	405cd2 <ioport_set_pin_mode+0x102>
		base->PIO_ABCDSR[1] |= mask;
  405cc4:	68fb      	ldr	r3, [r7, #12]
  405cc6:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  405cc8:	69bb      	ldr	r3, [r7, #24]
  405cca:	431a      	orrs	r2, r3
  405ccc:	68fb      	ldr	r3, [r7, #12]
  405cce:	675a      	str	r2, [r3, #116]	; 0x74
}
  405cd0:	e006      	b.n	405ce0 <ioport_set_pin_mode+0x110>
		base->PIO_ABCDSR[1] &= ~mask;
  405cd2:	68fb      	ldr	r3, [r7, #12]
  405cd4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  405cd6:	69bb      	ldr	r3, [r7, #24]
  405cd8:	43db      	mvns	r3, r3
  405cda:	401a      	ands	r2, r3
  405cdc:	68fb      	ldr	r3, [r7, #12]
  405cde:	675a      	str	r2, [r3, #116]	; 0x74
  405ce0:	bf00      	nop
  405ce2:	3734      	adds	r7, #52	; 0x34
  405ce4:	46bd      	mov	sp, r7
  405ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
  405cea:	4770      	bx	lr

00405cec <ioport_set_pin_dir>:
{
  405cec:	b480      	push	{r7}
  405cee:	b08d      	sub	sp, #52	; 0x34
  405cf0:	af00      	add	r7, sp, #0
  405cf2:	6078      	str	r0, [r7, #4]
  405cf4:	460b      	mov	r3, r1
  405cf6:	70fb      	strb	r3, [r7, #3]
  405cf8:	687b      	ldr	r3, [r7, #4]
  405cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  405cfc:	78fb      	ldrb	r3, [r7, #3]
  405cfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  405d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  405d04:	627b      	str	r3, [r7, #36]	; 0x24
  405d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  405d08:	623b      	str	r3, [r7, #32]
	return pin >> 5;
  405d0a:	6a3b      	ldr	r3, [r7, #32]
  405d0c:	095b      	lsrs	r3, r3, #5
  405d0e:	61fb      	str	r3, [r7, #28]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  405d10:	69fb      	ldr	r3, [r7, #28]
  405d12:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  405d16:	f203 7307 	addw	r3, r3, #1799	; 0x707
  405d1a:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
  405d1c:	61bb      	str	r3, [r7, #24]
	if (dir == IOPORT_DIR_OUTPUT) {
  405d1e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  405d22:	2b01      	cmp	r3, #1
  405d24:	d109      	bne.n	405d3a <ioport_set_pin_dir+0x4e>
  405d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  405d28:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
  405d2a:	697b      	ldr	r3, [r7, #20]
  405d2c:	f003 031f 	and.w	r3, r3, #31
  405d30:	2201      	movs	r2, #1
  405d32:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  405d34:	69bb      	ldr	r3, [r7, #24]
  405d36:	611a      	str	r2, [r3, #16]
  405d38:	e00c      	b.n	405d54 <ioport_set_pin_dir+0x68>
	} else if (dir == IOPORT_DIR_INPUT) {
  405d3a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  405d3e:	2b00      	cmp	r3, #0
  405d40:	d108      	bne.n	405d54 <ioport_set_pin_dir+0x68>
  405d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  405d44:	613b      	str	r3, [r7, #16]
	return 1U << (pin & 0x1F);
  405d46:	693b      	ldr	r3, [r7, #16]
  405d48:	f003 031f 	and.w	r3, r3, #31
  405d4c:	2201      	movs	r2, #1
  405d4e:	409a      	lsls	r2, r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  405d50:	69bb      	ldr	r3, [r7, #24]
  405d52:	615a      	str	r2, [r3, #20]
  405d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  405d56:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  405d58:	68fb      	ldr	r3, [r7, #12]
  405d5a:	f003 031f 	and.w	r3, r3, #31
  405d5e:	2201      	movs	r2, #1
  405d60:	409a      	lsls	r2, r3
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  405d62:	69bb      	ldr	r3, [r7, #24]
  405d64:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
}
  405d68:	bf00      	nop
  405d6a:	3734      	adds	r7, #52	; 0x34
  405d6c:	46bd      	mov	sp, r7
  405d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
  405d72:	4770      	bx	lr

00405d74 <ioport_set_pin_level>:
{
  405d74:	b480      	push	{r7}
  405d76:	b08b      	sub	sp, #44	; 0x2c
  405d78:	af00      	add	r7, sp, #0
  405d7a:	6078      	str	r0, [r7, #4]
  405d7c:	460b      	mov	r3, r1
  405d7e:	70fb      	strb	r3, [r7, #3]
  405d80:	687b      	ldr	r3, [r7, #4]
  405d82:	627b      	str	r3, [r7, #36]	; 0x24
  405d84:	78fb      	ldrb	r3, [r7, #3]
  405d86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  405d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  405d8c:	61fb      	str	r3, [r7, #28]
  405d8e:	69fb      	ldr	r3, [r7, #28]
  405d90:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  405d92:	69bb      	ldr	r3, [r7, #24]
  405d94:	095b      	lsrs	r3, r3, #5
  405d96:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  405d98:	697b      	ldr	r3, [r7, #20]
  405d9a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  405d9e:	f203 7307 	addw	r3, r3, #1799	; 0x707
  405da2:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
  405da4:	613b      	str	r3, [r7, #16]
	if (level) {
  405da6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  405daa:	2b00      	cmp	r3, #0
  405dac:	d009      	beq.n	405dc2 <ioport_set_pin_level+0x4e>
  405dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  405db0:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  405db2:	68fb      	ldr	r3, [r7, #12]
  405db4:	f003 031f 	and.w	r3, r3, #31
  405db8:	2201      	movs	r2, #1
  405dba:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  405dbc:	693b      	ldr	r3, [r7, #16]
  405dbe:	631a      	str	r2, [r3, #48]	; 0x30
}
  405dc0:	e008      	b.n	405dd4 <ioport_set_pin_level+0x60>
  405dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  405dc4:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
  405dc6:	68bb      	ldr	r3, [r7, #8]
  405dc8:	f003 031f 	and.w	r3, r3, #31
  405dcc:	2201      	movs	r2, #1
  405dce:	409a      	lsls	r2, r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  405dd0:	693b      	ldr	r3, [r7, #16]
  405dd2:	635a      	str	r2, [r3, #52]	; 0x34
  405dd4:	bf00      	nop
  405dd6:	372c      	adds	r7, #44	; 0x2c
  405dd8:	46bd      	mov	sp, r7
  405dda:	f85d 7b04 	ldr.w	r7, [sp], #4
  405dde:	4770      	bx	lr

00405de0 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
  405de0:	b580      	push	{r7, lr}
  405de2:	af00      	add	r7, sp, #0

#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	WDT->WDT_MR = WDT_MR_WDDIS;
  405de4:	4b2f      	ldr	r3, [pc, #188]	; (405ea4 <system_board_init+0xc4>)
  405de6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  405dea:	605a      	str	r2, [r3, #4]
#endif
	ioport_init();
  405dec:	4b2e      	ldr	r3, [pc, #184]	; (405ea8 <system_board_init+0xc8>)
  405dee:	4798      	blx	r3

	/* Initialize LED0, turned off */
	ioport_set_pin_dir(LED_0_PIN, IOPORT_DIR_OUTPUT);
  405df0:	2101      	movs	r1, #1
  405df2:	2006      	movs	r0, #6
  405df4:	4b2d      	ldr	r3, [pc, #180]	; (405eac <system_board_init+0xcc>)
  405df6:	4798      	blx	r3
	ioport_set_pin_level(LED_0_PIN, IOPORT_PIN_LEVEL_HIGH);
  405df8:	2101      	movs	r1, #1
  405dfa:	2006      	movs	r0, #6
  405dfc:	4b2c      	ldr	r3, [pc, #176]	; (405eb0 <system_board_init+0xd0>)
  405dfe:	4798      	blx	r3

	/* Initialize SW0 */
	ioport_set_pin_dir(BUTTON_0_PIN, IOPORT_DIR_INPUT);
  405e00:	2100      	movs	r1, #0
  405e02:	2002      	movs	r0, #2
  405e04:	4b29      	ldr	r3, [pc, #164]	; (405eac <system_board_init+0xcc>)
  405e06:	4798      	blx	r3
	ioport_set_pin_mode(BUTTON_0_PIN, IOPORT_MODE_PULLUP);
  405e08:	2108      	movs	r1, #8
  405e0a:	2002      	movs	r0, #2
  405e0c:	4b29      	ldr	r3, [pc, #164]	; (405eb4 <system_board_init+0xd4>)
  405e0e:	4798      	blx	r3

	/* Initialize EXT3 LED0, LED1 & LED2, turned off */
	ioport_set_pin_level(OLED1_LED1_PIN, !OLED1_LED1_ACTIVE);
  405e10:	2101      	movs	r1, #1
  405e12:	2001      	movs	r0, #1
  405e14:	4b26      	ldr	r3, [pc, #152]	; (405eb0 <system_board_init+0xd0>)
  405e16:	4798      	blx	r3
	ioport_set_pin_dir(OLED1_LED1_PIN, IOPORT_DIR_OUTPUT);
  405e18:	2101      	movs	r1, #1
  405e1a:	2001      	movs	r0, #1
  405e1c:	4b23      	ldr	r3, [pc, #140]	; (405eac <system_board_init+0xcc>)
  405e1e:	4798      	blx	r3
	ioport_set_pin_level(OLED1_LED2_PIN, !OLED1_LED2_ACTIVE);
  405e20:	2101      	movs	r1, #1
  405e22:	202d      	movs	r0, #45	; 0x2d
  405e24:	4b22      	ldr	r3, [pc, #136]	; (405eb0 <system_board_init+0xd0>)
  405e26:	4798      	blx	r3
	ioport_set_pin_dir(OLED1_LED2_PIN, IOPORT_DIR_OUTPUT);
  405e28:	2101      	movs	r1, #1
  405e2a:	202d      	movs	r0, #45	; 0x2d
  405e2c:	4b1f      	ldr	r3, [pc, #124]	; (405eac <system_board_init+0xcc>)
  405e2e:	4798      	blx	r3
	ioport_set_pin_level(OLED1_LED3_PIN, !OLED1_LED3_ACTIVE);
  405e30:	2101      	movs	r1, #1
  405e32:	202f      	movs	r0, #47	; 0x2f
  405e34:	4b1e      	ldr	r3, [pc, #120]	; (405eb0 <system_board_init+0xd0>)
  405e36:	4798      	blx	r3
	ioport_set_pin_dir(OLED1_LED3_PIN, IOPORT_DIR_OUTPUT);
  405e38:	2101      	movs	r1, #1
  405e3a:	202f      	movs	r0, #47	; 0x2f
  405e3c:	4b1b      	ldr	r3, [pc, #108]	; (405eac <system_board_init+0xcc>)
  405e3e:	4798      	blx	r3

#if defined (CONF_BOARD_UART_CONSOLE)
	/* Configure UART pins */
	ioport_set_port_peripheral_mode(PINS_USART7_PORT, PINS_USART7,
  405e40:	2201      	movs	r2, #1
  405e42:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  405e46:	2000      	movs	r0, #0
  405e48:	4b1b      	ldr	r3, [pc, #108]	; (405eb8 <system_board_init+0xd8>)
  405e4a:	4798      	blx	r3
  405e4c:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  405e50:	2000      	movs	r0, #0
  405e52:	4b1a      	ldr	r3, [pc, #104]	; (405ebc <system_board_init+0xdc>)
  405e54:	4798      	blx	r3
	ioport_set_pin_peripheral_mode(EXT3_PIN_8,
			IOPORT_MODE_MUX_B);
#endif

#if defined(CONF_BOARD_SPI) || defined(CONF_BOARD_SD_MMC_SPI)
	ioport_set_pin_peripheral_mode(SPI_MISO_GPIO, SPI_MISO_FLAGS);
  405e56:	2100      	movs	r1, #0
  405e58:	200c      	movs	r0, #12
  405e5a:	4b16      	ldr	r3, [pc, #88]	; (405eb4 <system_board_init+0xd4>)
  405e5c:	4798      	blx	r3
  405e5e:	200c      	movs	r0, #12
  405e60:	4b17      	ldr	r3, [pc, #92]	; (405ec0 <system_board_init+0xe0>)
  405e62:	4798      	blx	r3
	ioport_set_pin_peripheral_mode(SPI_MOSI_GPIO, SPI_MOSI_FLAGS);
  405e64:	2100      	movs	r1, #0
  405e66:	200d      	movs	r0, #13
  405e68:	4b12      	ldr	r3, [pc, #72]	; (405eb4 <system_board_init+0xd4>)
  405e6a:	4798      	blx	r3
  405e6c:	200d      	movs	r0, #13
  405e6e:	4b14      	ldr	r3, [pc, #80]	; (405ec0 <system_board_init+0xe0>)
  405e70:	4798      	blx	r3
	ioport_set_pin_peripheral_mode(SPI_SPCK_GPIO, SPI_SPCK_FLAGS);
  405e72:	2100      	movs	r1, #0
  405e74:	200e      	movs	r0, #14
  405e76:	4b0f      	ldr	r3, [pc, #60]	; (405eb4 <system_board_init+0xd4>)
  405e78:	4798      	blx	r3
  405e7a:	200e      	movs	r0, #14
  405e7c:	4b10      	ldr	r3, [pc, #64]	; (405ec0 <system_board_init+0xe0>)
  405e7e:	4798      	blx	r3

#ifdef CONF_BOARD_SD_MMC_SPI
	/* Setting SD detection pin */
	ioport_set_pin_dir(SD_MMC_0_CD_GPIO, IOPORT_DIR_INPUT);
  405e80:	2100      	movs	r1, #0
  405e82:	201d      	movs	r0, #29
  405e84:	4b09      	ldr	r3, [pc, #36]	; (405eac <system_board_init+0xcc>)
  405e86:	4798      	blx	r3
	ioport_set_pin_mode(SD_MMC_0_CD_GPIO, IOPORT_MODE_PULLUP);
  405e88:	2108      	movs	r1, #8
  405e8a:	201d      	movs	r0, #29
  405e8c:	4b09      	ldr	r3, [pc, #36]	; (405eb4 <system_board_init+0xd4>)
  405e8e:	4798      	blx	r3
#endif

#ifdef CONF_BOARD_SPI_NPCS0
	ioport_set_pin_peripheral_mode(SPI_NPCS0_GPIO, SPI_NPCS0_FLAGS);
  405e90:	2100      	movs	r1, #0
  405e92:	200b      	movs	r0, #11
  405e94:	4b07      	ldr	r3, [pc, #28]	; (405eb4 <system_board_init+0xd4>)
  405e96:	4798      	blx	r3
  405e98:	200b      	movs	r0, #11
  405e9a:	4b09      	ldr	r3, [pc, #36]	; (405ec0 <system_board_init+0xe0>)
  405e9c:	4798      	blx	r3
	//gpio_configure_pin(USB_VBUS_PIN, USB_VBUS_FLAGS);
	pio_configure_pin(USB_VBUS_PIN, USB_VBUS_FLAGS);
#  endif
#endif

}
  405e9e:	bf00      	nop
  405ea0:	bd80      	pop	{r7, pc}
  405ea2:	bf00      	nop
  405ea4:	400e1450 	.word	0x400e1450
  405ea8:	00405a39 	.word	0x00405a39
  405eac:	00405ced 	.word	0x00405ced
  405eb0:	00405d75 	.word	0x00405d75
  405eb4:	00405bd1 	.word	0x00405bd1
  405eb8:	00405acf 	.word	0x00405acf
  405ebc:	00405a9b 	.word	0x00405a9b
  405ec0:	00405a51 	.word	0x00405a51

00405ec4 <cpu_irq_save>:
{
  405ec4:	b480      	push	{r7}
  405ec6:	b083      	sub	sp, #12
  405ec8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  405eca:	f3ef 8310 	mrs	r3, PRIMASK
  405ece:	607b      	str	r3, [r7, #4]
  return(result);
  405ed0:	687b      	ldr	r3, [r7, #4]
	volatile irqflags_t flags = cpu_irq_is_enabled();
  405ed2:	2b00      	cmp	r3, #0
  405ed4:	bf0c      	ite	eq
  405ed6:	2301      	moveq	r3, #1
  405ed8:	2300      	movne	r3, #0
  405eda:	b2db      	uxtb	r3, r3
  405edc:	603b      	str	r3, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  405ede:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  405ee0:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  405ee4:	4b04      	ldr	r3, [pc, #16]	; (405ef8 <cpu_irq_save+0x34>)
  405ee6:	2200      	movs	r2, #0
  405ee8:	701a      	strb	r2, [r3, #0]
	return flags;
  405eea:	683b      	ldr	r3, [r7, #0]
}
  405eec:	4618      	mov	r0, r3
  405eee:	370c      	adds	r7, #12
  405ef0:	46bd      	mov	sp, r7
  405ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
  405ef6:	4770      	bx	lr
  405ef8:	2000025e 	.word	0x2000025e

00405efc <cpu_irq_is_enabled_flags>:
{
  405efc:	b480      	push	{r7}
  405efe:	b083      	sub	sp, #12
  405f00:	af00      	add	r7, sp, #0
  405f02:	6078      	str	r0, [r7, #4]
	return (flags);
  405f04:	687b      	ldr	r3, [r7, #4]
  405f06:	2b00      	cmp	r3, #0
  405f08:	bf14      	ite	ne
  405f0a:	2301      	movne	r3, #1
  405f0c:	2300      	moveq	r3, #0
  405f0e:	b2db      	uxtb	r3, r3
}
  405f10:	4618      	mov	r0, r3
  405f12:	370c      	adds	r7, #12
  405f14:	46bd      	mov	sp, r7
  405f16:	f85d 7b04 	ldr.w	r7, [sp], #4
  405f1a:	4770      	bx	lr

00405f1c <cpu_irq_restore>:
{
  405f1c:	b580      	push	{r7, lr}
  405f1e:	b082      	sub	sp, #8
  405f20:	af00      	add	r7, sp, #0
  405f22:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
  405f24:	6878      	ldr	r0, [r7, #4]
  405f26:	4b07      	ldr	r3, [pc, #28]	; (405f44 <cpu_irq_restore+0x28>)
  405f28:	4798      	blx	r3
  405f2a:	4603      	mov	r3, r0
  405f2c:	2b00      	cmp	r3, #0
  405f2e:	d005      	beq.n	405f3c <cpu_irq_restore+0x20>
		cpu_irq_enable();
  405f30:	4b05      	ldr	r3, [pc, #20]	; (405f48 <cpu_irq_restore+0x2c>)
  405f32:	2201      	movs	r2, #1
  405f34:	701a      	strb	r2, [r3, #0]
  405f36:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  405f3a:	b662      	cpsie	i
}
  405f3c:	bf00      	nop
  405f3e:	3708      	adds	r7, #8
  405f40:	46bd      	mov	sp, r7
  405f42:	bd80      	pop	{r7, pc}
  405f44:	00405efd 	.word	0x00405efd
  405f48:	2000025e 	.word	0x2000025e

00405f4c <sysclk_enable_peripheral_clock>:
{
  405f4c:	b580      	push	{r7, lr}
  405f4e:	b082      	sub	sp, #8
  405f50:	af00      	add	r7, sp, #0
  405f52:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  405f54:	6878      	ldr	r0, [r7, #4]
  405f56:	4b03      	ldr	r3, [pc, #12]	; (405f64 <sysclk_enable_peripheral_clock+0x18>)
  405f58:	4798      	blx	r3
}
  405f5a:	bf00      	nop
  405f5c:	3708      	adds	r7, #8
  405f5e:	46bd      	mov	sp, r7
  405f60:	bd80      	pop	{r7, pc}
  405f62:	bf00      	nop
  405f64:	0040681d 	.word	0x0040681d

00405f68 <sleepmgr_lock_mode>:
 * not put the device to sleep in the deeper sleep modes.
 *
 * \param mode Sleep mode to lock.
 */
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
  405f68:	b580      	push	{r7, lr}
  405f6a:	b084      	sub	sp, #16
  405f6c:	af00      	add	r7, sp, #0
  405f6e:	4603      	mov	r3, r0
  405f70:	71fb      	strb	r3, [r7, #7]
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
  405f72:	79fb      	ldrb	r3, [r7, #7]
  405f74:	4a0a      	ldr	r2, [pc, #40]	; (405fa0 <sleepmgr_lock_mode+0x38>)
  405f76:	5cd3      	ldrb	r3, [r2, r3]
  405f78:	2bff      	cmp	r3, #255	; 0xff
  405f7a:	d100      	bne.n	405f7e <sleepmgr_lock_mode+0x16>
		while (true) {
  405f7c:	e7fe      	b.n	405f7c <sleepmgr_lock_mode+0x14>
			// Check APP or change the data type to uint16_t.
		}
	}

	// Enter a critical section
	flags = cpu_irq_save();
  405f7e:	4b09      	ldr	r3, [pc, #36]	; (405fa4 <sleepmgr_lock_mode+0x3c>)
  405f80:	4798      	blx	r3
  405f82:	60f8      	str	r0, [r7, #12]

	++sleepmgr_locks[mode];
  405f84:	79fb      	ldrb	r3, [r7, #7]
  405f86:	4a06      	ldr	r2, [pc, #24]	; (405fa0 <sleepmgr_lock_mode+0x38>)
  405f88:	5cd2      	ldrb	r2, [r2, r3]
  405f8a:	3201      	adds	r2, #1
  405f8c:	b2d1      	uxtb	r1, r2
  405f8e:	4a04      	ldr	r2, [pc, #16]	; (405fa0 <sleepmgr_lock_mode+0x38>)
  405f90:	54d1      	strb	r1, [r2, r3]

	// Leave the critical section
	cpu_irq_restore(flags);
  405f92:	68f8      	ldr	r0, [r7, #12]
  405f94:	4b04      	ldr	r3, [pc, #16]	; (405fa8 <sleepmgr_lock_mode+0x40>)
  405f96:	4798      	blx	r3
#else
	UNUSED(mode);
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
  405f98:	bf00      	nop
  405f9a:	3710      	adds	r7, #16
  405f9c:	46bd      	mov	sp, r7
  405f9e:	bd80      	pop	{r7, pc}
  405fa0:	2001ab94 	.word	0x2001ab94
  405fa4:	00405ec5 	.word	0x00405ec5
  405fa8:	00405f1d 	.word	0x00405f1d

00405fac <flexcom_enable>:
 *
 * \param p_flexcom  Pointer to a FLEXCOM instance.
 *
 */
void flexcom_enable(Flexcom *p_flexcom)
{
  405fac:	b580      	push	{r7, lr}
  405fae:	b082      	sub	sp, #8
  405fb0:	af00      	add	r7, sp, #0
  405fb2:	6078      	str	r0, [r7, #4]
#if SAMG55
    #define PMC_PCK_PRES_CLK_1  PMC_PCK_PRES(0)
#endif

	sleepmgr_lock_mode(SLEEPMGR_ACTIVE);
  405fb4:	2000      	movs	r0, #0
  405fb6:	4b4a      	ldr	r3, [pc, #296]	; (4060e0 <flexcom_enable+0x134>)
  405fb8:	4798      	blx	r3
	/* Enable PMC clock for FLEXCOM */
#ifdef ID_FLEXCOM7
	 if (p_flexcom == FLEXCOM7) {
  405fba:	687b      	ldr	r3, [r7, #4]
  405fbc:	4a49      	ldr	r2, [pc, #292]	; (4060e4 <flexcom_enable+0x138>)
  405fbe:	4293      	cmp	r3, r2
  405fc0:	d10d      	bne.n	405fde <flexcom_enable+0x32>
		sysclk_enable_peripheral_clock(ID_FLEXCOM7);
  405fc2:	2007      	movs	r0, #7
  405fc4:	4b48      	ldr	r3, [pc, #288]	; (4060e8 <flexcom_enable+0x13c>)
  405fc6:	4798      	blx	r3
		/* Enable PCK output */
		pmc_disable_pck(PMC_PCK_7);
  405fc8:	2007      	movs	r0, #7
  405fca:	4b48      	ldr	r3, [pc, #288]	; (4060ec <flexcom_enable+0x140>)
  405fcc:	4798      	blx	r3
		pmc_switch_pck_to_mck(PMC_PCK_7, PMC_PCK_PRES_CLK_1);
  405fce:	2100      	movs	r1, #0
  405fd0:	2007      	movs	r0, #7
  405fd2:	4b47      	ldr	r3, [pc, #284]	; (4060f0 <flexcom_enable+0x144>)
  405fd4:	4798      	blx	r3
		pmc_enable_pck(PMC_PCK_7);
  405fd6:	2007      	movs	r0, #7
  405fd8:	4b46      	ldr	r3, [pc, #280]	; (4060f4 <flexcom_enable+0x148>)
  405fda:	4798      	blx	r3
	} else
#endif
	{
		Assert(false);
	}
}
  405fdc:	e07c      	b.n	4060d8 <flexcom_enable+0x12c>
	if (p_flexcom == FLEXCOM6) {
  405fde:	687b      	ldr	r3, [r7, #4]
  405fe0:	4a45      	ldr	r2, [pc, #276]	; (4060f8 <flexcom_enable+0x14c>)
  405fe2:	4293      	cmp	r3, r2
  405fe4:	d10d      	bne.n	406002 <flexcom_enable+0x56>
		sysclk_enable_peripheral_clock(ID_FLEXCOM6);
  405fe6:	2016      	movs	r0, #22
  405fe8:	4b3f      	ldr	r3, [pc, #252]	; (4060e8 <flexcom_enable+0x13c>)
  405fea:	4798      	blx	r3
		pmc_disable_pck(PMC_PCK_7);
  405fec:	2007      	movs	r0, #7
  405fee:	4b3f      	ldr	r3, [pc, #252]	; (4060ec <flexcom_enable+0x140>)
  405ff0:	4798      	blx	r3
		pmc_switch_pck_to_mck(PMC_PCK_7, PMC_PCK_PRES_CLK_1);
  405ff2:	2100      	movs	r1, #0
  405ff4:	2007      	movs	r0, #7
  405ff6:	4b3e      	ldr	r3, [pc, #248]	; (4060f0 <flexcom_enable+0x144>)
  405ff8:	4798      	blx	r3
		pmc_enable_pck(PMC_PCK_7);
  405ffa:	2007      	movs	r0, #7
  405ffc:	4b3d      	ldr	r3, [pc, #244]	; (4060f4 <flexcom_enable+0x148>)
  405ffe:	4798      	blx	r3
}
  406000:	e06a      	b.n	4060d8 <flexcom_enable+0x12c>
	if (p_flexcom == FLEXCOM5) {
  406002:	687b      	ldr	r3, [r7, #4]
  406004:	4a3d      	ldr	r2, [pc, #244]	; (4060fc <flexcom_enable+0x150>)
  406006:	4293      	cmp	r3, r2
  406008:	d10d      	bne.n	406026 <flexcom_enable+0x7a>
		sysclk_enable_peripheral_clock(ID_FLEXCOM5);
  40600a:	2015      	movs	r0, #21
  40600c:	4b36      	ldr	r3, [pc, #216]	; (4060e8 <flexcom_enable+0x13c>)
  40600e:	4798      	blx	r3
		pmc_disable_pck(PMC_PCK_7);
  406010:	2007      	movs	r0, #7
  406012:	4b36      	ldr	r3, [pc, #216]	; (4060ec <flexcom_enable+0x140>)
  406014:	4798      	blx	r3
		pmc_switch_pck_to_mck(PMC_PCK_7, PMC_PCK_PRES_CLK_1);
  406016:	2100      	movs	r1, #0
  406018:	2007      	movs	r0, #7
  40601a:	4b35      	ldr	r3, [pc, #212]	; (4060f0 <flexcom_enable+0x144>)
  40601c:	4798      	blx	r3
		pmc_enable_pck(PMC_PCK_7);
  40601e:	2007      	movs	r0, #7
  406020:	4b34      	ldr	r3, [pc, #208]	; (4060f4 <flexcom_enable+0x148>)
  406022:	4798      	blx	r3
}
  406024:	e058      	b.n	4060d8 <flexcom_enable+0x12c>
	if (p_flexcom == FLEXCOM4) {
  406026:	687b      	ldr	r3, [r7, #4]
  406028:	4a35      	ldr	r2, [pc, #212]	; (406100 <flexcom_enable+0x154>)
  40602a:	4293      	cmp	r3, r2
  40602c:	d10d      	bne.n	40604a <flexcom_enable+0x9e>
		sysclk_enable_peripheral_clock(ID_FLEXCOM4);
  40602e:	2014      	movs	r0, #20
  406030:	4b2d      	ldr	r3, [pc, #180]	; (4060e8 <flexcom_enable+0x13c>)
  406032:	4798      	blx	r3
		pmc_disable_pck(PMC_PCK_7);
  406034:	2007      	movs	r0, #7
  406036:	4b2d      	ldr	r3, [pc, #180]	; (4060ec <flexcom_enable+0x140>)
  406038:	4798      	blx	r3
		pmc_switch_pck_to_mck(PMC_PCK_7, PMC_PCK_PRES_CLK_1);
  40603a:	2100      	movs	r1, #0
  40603c:	2007      	movs	r0, #7
  40603e:	4b2c      	ldr	r3, [pc, #176]	; (4060f0 <flexcom_enable+0x144>)
  406040:	4798      	blx	r3
		pmc_enable_pck(PMC_PCK_7);
  406042:	2007      	movs	r0, #7
  406044:	4b2b      	ldr	r3, [pc, #172]	; (4060f4 <flexcom_enable+0x148>)
  406046:	4798      	blx	r3
}
  406048:	e046      	b.n	4060d8 <flexcom_enable+0x12c>
	if (p_flexcom == FLEXCOM3) {
  40604a:	687b      	ldr	r3, [r7, #4]
  40604c:	4a2d      	ldr	r2, [pc, #180]	; (406104 <flexcom_enable+0x158>)
  40604e:	4293      	cmp	r3, r2
  406050:	d10d      	bne.n	40606e <flexcom_enable+0xc2>
		sysclk_enable_peripheral_clock(ID_FLEXCOM3);
  406052:	2013      	movs	r0, #19
  406054:	4b24      	ldr	r3, [pc, #144]	; (4060e8 <flexcom_enable+0x13c>)
  406056:	4798      	blx	r3
		pmc_disable_pck(PMC_PCK_6);
  406058:	2006      	movs	r0, #6
  40605a:	4b24      	ldr	r3, [pc, #144]	; (4060ec <flexcom_enable+0x140>)
  40605c:	4798      	blx	r3
		pmc_switch_pck_to_mck(PMC_PCK_6, PMC_PCK_PRES_CLK_1);
  40605e:	2100      	movs	r1, #0
  406060:	2006      	movs	r0, #6
  406062:	4b23      	ldr	r3, [pc, #140]	; (4060f0 <flexcom_enable+0x144>)
  406064:	4798      	blx	r3
		pmc_enable_pck(PMC_PCK_6);
  406066:	2006      	movs	r0, #6
  406068:	4b22      	ldr	r3, [pc, #136]	; (4060f4 <flexcom_enable+0x148>)
  40606a:	4798      	blx	r3
}
  40606c:	e034      	b.n	4060d8 <flexcom_enable+0x12c>
	if (p_flexcom == FLEXCOM2) {
  40606e:	687b      	ldr	r3, [r7, #4]
  406070:	4a25      	ldr	r2, [pc, #148]	; (406108 <flexcom_enable+0x15c>)
  406072:	4293      	cmp	r3, r2
  406074:	d10d      	bne.n	406092 <flexcom_enable+0xe6>
		sysclk_enable_peripheral_clock(ID_FLEXCOM2);
  406076:	200e      	movs	r0, #14
  406078:	4b1b      	ldr	r3, [pc, #108]	; (4060e8 <flexcom_enable+0x13c>)
  40607a:	4798      	blx	r3
		pmc_disable_pck(PMC_PCK_6);
  40607c:	2006      	movs	r0, #6
  40607e:	4b1b      	ldr	r3, [pc, #108]	; (4060ec <flexcom_enable+0x140>)
  406080:	4798      	blx	r3
		pmc_switch_pck_to_mck(PMC_PCK_6, PMC_PCK_PRES_CLK_1);
  406082:	2100      	movs	r1, #0
  406084:	2006      	movs	r0, #6
  406086:	4b1a      	ldr	r3, [pc, #104]	; (4060f0 <flexcom_enable+0x144>)
  406088:	4798      	blx	r3
		pmc_enable_pck(PMC_PCK_6);
  40608a:	2006      	movs	r0, #6
  40608c:	4b19      	ldr	r3, [pc, #100]	; (4060f4 <flexcom_enable+0x148>)
  40608e:	4798      	blx	r3
}
  406090:	e022      	b.n	4060d8 <flexcom_enable+0x12c>
	if (p_flexcom == FLEXCOM1) {
  406092:	687b      	ldr	r3, [r7, #4]
  406094:	4a1d      	ldr	r2, [pc, #116]	; (40610c <flexcom_enable+0x160>)
  406096:	4293      	cmp	r3, r2
  406098:	d10d      	bne.n	4060b6 <flexcom_enable+0x10a>
		sysclk_enable_peripheral_clock(ID_FLEXCOM1);
  40609a:	2009      	movs	r0, #9
  40609c:	4b12      	ldr	r3, [pc, #72]	; (4060e8 <flexcom_enable+0x13c>)
  40609e:	4798      	blx	r3
		pmc_disable_pck(PMC_PCK_6);
  4060a0:	2006      	movs	r0, #6
  4060a2:	4b12      	ldr	r3, [pc, #72]	; (4060ec <flexcom_enable+0x140>)
  4060a4:	4798      	blx	r3
		pmc_switch_pck_to_mck(PMC_PCK_6, PMC_PCK_PRES_CLK_1);
  4060a6:	2100      	movs	r1, #0
  4060a8:	2006      	movs	r0, #6
  4060aa:	4b11      	ldr	r3, [pc, #68]	; (4060f0 <flexcom_enable+0x144>)
  4060ac:	4798      	blx	r3
		pmc_enable_pck(PMC_PCK_6);
  4060ae:	2006      	movs	r0, #6
  4060b0:	4b10      	ldr	r3, [pc, #64]	; (4060f4 <flexcom_enable+0x148>)
  4060b2:	4798      	blx	r3
}
  4060b4:	e010      	b.n	4060d8 <flexcom_enable+0x12c>
	if (p_flexcom == FLEXCOM0) {
  4060b6:	687b      	ldr	r3, [r7, #4]
  4060b8:	4a15      	ldr	r2, [pc, #84]	; (406110 <flexcom_enable+0x164>)
  4060ba:	4293      	cmp	r3, r2
  4060bc:	d10c      	bne.n	4060d8 <flexcom_enable+0x12c>
		sysclk_enable_peripheral_clock(ID_FLEXCOM0);
  4060be:	2008      	movs	r0, #8
  4060c0:	4b09      	ldr	r3, [pc, #36]	; (4060e8 <flexcom_enable+0x13c>)
  4060c2:	4798      	blx	r3
		pmc_disable_pck(PMC_PCK_6);
  4060c4:	2006      	movs	r0, #6
  4060c6:	4b09      	ldr	r3, [pc, #36]	; (4060ec <flexcom_enable+0x140>)
  4060c8:	4798      	blx	r3
		pmc_switch_pck_to_mck(PMC_PCK_6, PMC_PCK_PRES_CLK_1);
  4060ca:	2100      	movs	r1, #0
  4060cc:	2006      	movs	r0, #6
  4060ce:	4b08      	ldr	r3, [pc, #32]	; (4060f0 <flexcom_enable+0x144>)
  4060d0:	4798      	blx	r3
		pmc_enable_pck(PMC_PCK_6);
  4060d2:	2006      	movs	r0, #6
  4060d4:	4b07      	ldr	r3, [pc, #28]	; (4060f4 <flexcom_enable+0x148>)
  4060d6:	4798      	blx	r3
}
  4060d8:	bf00      	nop
  4060da:	3708      	adds	r7, #8
  4060dc:	46bd      	mov	sp, r7
  4060de:	bd80      	pop	{r7, pc}
  4060e0:	00405f69 	.word	0x00405f69
  4060e4:	40034000 	.word	0x40034000
  4060e8:	00405f4d 	.word	0x00405f4d
  4060ec:	00406a05 	.word	0x00406a05
  4060f0:	00406985 	.word	0x00406985
  4060f4:	004069dd 	.word	0x004069dd
  4060f8:	40040000 	.word	0x40040000
  4060fc:	40008000 	.word	0x40008000
  406100:	4001c000 	.word	0x4001c000
  406104:	40018000 	.word	0x40018000
  406108:	40024000 	.word	0x40024000
  40610c:	40020000 	.word	0x40020000
  406110:	4000c000 	.word	0x4000c000

00406114 <flexcom_set_opmode>:
 * \param p_flexcom  Pointer to a FLEXCOM instance.
 * \param opmode  Opration mode.
 *
 */
void flexcom_set_opmode(Flexcom *p_flexcom, enum flexcom_opmode opmode)
{
  406114:	b480      	push	{r7}
  406116:	b083      	sub	sp, #12
  406118:	af00      	add	r7, sp, #0
  40611a:	6078      	str	r0, [r7, #4]
  40611c:	460b      	mov	r3, r1
  40611e:	70fb      	strb	r3, [r7, #3]
	p_flexcom->FLEXCOM_MR = opmode;
  406120:	78fa      	ldrb	r2, [r7, #3]
  406122:	687b      	ldr	r3, [r7, #4]
  406124:	601a      	str	r2, [r3, #0]
}
  406126:	bf00      	nop
  406128:	370c      	adds	r7, #12
  40612a:	46bd      	mov	sp, r7
  40612c:	f85d 7b04 	ldr.w	r7, [sp], #4
  406130:	4770      	bx	lr
	...

00406134 <matrix_set_usb_device>:
/**
 * \brief Set USB device mode.
 *
 */
void matrix_set_usb_device(void)
{
  406134:	b480      	push	{r7}
  406136:	b083      	sub	sp, #12
  406138:	af00      	add	r7, sp, #0
	Matrix *p_matrix = MATRIX;
  40613a:	4b0c      	ldr	r3, [pc, #48]	; (40616c <matrix_set_usb_device+0x38>)
  40613c:	607b      	str	r3, [r7, #4]

	p_matrix->CCFG_SYSIO &= ~(CCFG_SYSIO_SYSIO10 | CCFG_SYSIO_SYSIO11);
  40613e:	687b      	ldr	r3, [r7, #4]
  406140:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
  406144:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
  406148:	687b      	ldr	r3, [r7, #4]
  40614a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

	p_matrix->CCFG_USBMR |= CCFG_USBMR_DEVICE;
  40614e:	687b      	ldr	r3, [r7, #4]
  406150:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
  406154:	f043 0201 	orr.w	r2, r3, #1
  406158:	687b      	ldr	r3, [r7, #4]
  40615a:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
  40615e:	bf00      	nop
  406160:	370c      	adds	r7, #12
  406162:	46bd      	mov	sp, r7
  406164:	f85d 7b04 	ldr.w	r7, [sp], #4
  406168:	4770      	bx	lr
  40616a:	bf00      	nop
  40616c:	400e0200 	.word	0x400e0200

00406170 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
  406170:	b480      	push	{r7}
  406172:	b085      	sub	sp, #20
  406174:	af00      	add	r7, sp, #0
  406176:	60f8      	str	r0, [r7, #12]
  406178:	60b9      	str	r1, [r7, #8]
  40617a:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  40617c:	687b      	ldr	r3, [r7, #4]
  40617e:	2b00      	cmp	r3, #0
  406180:	d003      	beq.n	40618a <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
  406182:	68fb      	ldr	r3, [r7, #12]
  406184:	68ba      	ldr	r2, [r7, #8]
  406186:	665a      	str	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
	}
}
  406188:	e002      	b.n	406190 <pio_pull_up+0x20>
		p_pio->PIO_PUDR = ul_mask;
  40618a:	68fb      	ldr	r3, [r7, #12]
  40618c:	68ba      	ldr	r2, [r7, #8]
  40618e:	661a      	str	r2, [r3, #96]	; 0x60
}
  406190:	bf00      	nop
  406192:	3714      	adds	r7, #20
  406194:	46bd      	mov	sp, r7
  406196:	f85d 7b04 	ldr.w	r7, [sp], #4
  40619a:	4770      	bx	lr

0040619c <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  40619c:	b480      	push	{r7}
  40619e:	b087      	sub	sp, #28
  4061a0:	af00      	add	r7, sp, #0
  4061a2:	60f8      	str	r0, [r7, #12]
  4061a4:	60b9      	str	r1, [r7, #8]
  4061a6:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  4061a8:	68fb      	ldr	r3, [r7, #12]
  4061aa:	687a      	ldr	r2, [r7, #4]
  4061ac:	645a      	str	r2, [r3, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  4061ae:	68bb      	ldr	r3, [r7, #8]
  4061b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  4061b4:	d02b      	beq.n	40620e <pio_set_peripheral+0x72>
  4061b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  4061ba:	d805      	bhi.n	4061c8 <pio_set_peripheral+0x2c>
  4061bc:	2b00      	cmp	r3, #0
  4061be:	d03f      	beq.n	406240 <pio_set_peripheral+0xa4>
  4061c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  4061c4:	d00a      	beq.n	4061dc <pio_set_peripheral+0x40>
  4061c6:	e037      	b.n	406238 <pio_set_peripheral+0x9c>
  4061c8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  4061cc:	d038      	beq.n	406240 <pio_set_peripheral+0xa4>
  4061ce:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  4061d2:	d035      	beq.n	406240 <pio_set_peripheral+0xa4>
  4061d4:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  4061d8:	d032      	beq.n	406240 <pio_set_peripheral+0xa4>
  4061da:	e02d      	b.n	406238 <pio_set_peripheral+0x9c>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4061dc:	68fb      	ldr	r3, [r7, #12]
  4061de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  4061e0:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4061e2:	68fb      	ldr	r3, [r7, #12]
  4061e4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4061e6:	687b      	ldr	r3, [r7, #4]
  4061e8:	43d9      	mvns	r1, r3
  4061ea:	697b      	ldr	r3, [r7, #20]
  4061ec:	400b      	ands	r3, r1
  4061ee:	401a      	ands	r2, r3
  4061f0:	68fb      	ldr	r3, [r7, #12]
  4061f2:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4061f4:	68fb      	ldr	r3, [r7, #12]
  4061f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  4061f8:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4061fa:	68fb      	ldr	r3, [r7, #12]
  4061fc:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4061fe:	687b      	ldr	r3, [r7, #4]
  406200:	43d9      	mvns	r1, r3
  406202:	697b      	ldr	r3, [r7, #20]
  406204:	400b      	ands	r3, r1
  406206:	401a      	ands	r2, r3
  406208:	68fb      	ldr	r3, [r7, #12]
  40620a:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  40620c:	e014      	b.n	406238 <pio_set_peripheral+0x9c>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  40620e:	68fb      	ldr	r3, [r7, #12]
  406210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  406212:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  406214:	687a      	ldr	r2, [r7, #4]
  406216:	697b      	ldr	r3, [r7, #20]
  406218:	431a      	orrs	r2, r3
  40621a:	68fb      	ldr	r3, [r7, #12]
  40621c:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40621e:	68fb      	ldr	r3, [r7, #12]
  406220:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  406222:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  406224:	68fb      	ldr	r3, [r7, #12]
  406226:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  406228:	687b      	ldr	r3, [r7, #4]
  40622a:	43d9      	mvns	r1, r3
  40622c:	697b      	ldr	r3, [r7, #20]
  40622e:	400b      	ands	r3, r1
  406230:	401a      	ands	r2, r3
  406232:	68fb      	ldr	r3, [r7, #12]
  406234:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  406236:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  406238:	68fb      	ldr	r3, [r7, #12]
  40623a:	687a      	ldr	r2, [r7, #4]
  40623c:	605a      	str	r2, [r3, #4]
  40623e:	e000      	b.n	406242 <pio_set_peripheral+0xa6>
		return;
  406240:	bf00      	nop
}
  406242:	371c      	adds	r7, #28
  406244:	46bd      	mov	sp, r7
  406246:	f85d 7b04 	ldr.w	r7, [sp], #4
  40624a:	4770      	bx	lr

0040624c <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
  40624c:	b580      	push	{r7, lr}
  40624e:	b084      	sub	sp, #16
  406250:	af00      	add	r7, sp, #0
  406252:	60f8      	str	r0, [r7, #12]
  406254:	60b9      	str	r1, [r7, #8]
  406256:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
  406258:	68b9      	ldr	r1, [r7, #8]
  40625a:	68f8      	ldr	r0, [r7, #12]
  40625c:	4b19      	ldr	r3, [pc, #100]	; (4062c4 <pio_set_input+0x78>)
  40625e:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
  406260:	687b      	ldr	r3, [r7, #4]
  406262:	f003 0301 	and.w	r3, r3, #1
  406266:	461a      	mov	r2, r3
  406268:	68b9      	ldr	r1, [r7, #8]
  40626a:	68f8      	ldr	r0, [r7, #12]
  40626c:	4b16      	ldr	r3, [pc, #88]	; (4062c8 <pio_set_input+0x7c>)
  40626e:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  406270:	687b      	ldr	r3, [r7, #4]
  406272:	f003 030a 	and.w	r3, r3, #10
  406276:	2b00      	cmp	r3, #0
  406278:	d003      	beq.n	406282 <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
  40627a:	68fb      	ldr	r3, [r7, #12]
  40627c:	68ba      	ldr	r2, [r7, #8]
  40627e:	621a      	str	r2, [r3, #32]
  406280:	e002      	b.n	406288 <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
  406282:	68fb      	ldr	r3, [r7, #12]
  406284:	68ba      	ldr	r2, [r7, #8]
  406286:	625a      	str	r2, [r3, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  406288:	687b      	ldr	r3, [r7, #4]
  40628a:	f003 0302 	and.w	r3, r3, #2
  40628e:	2b00      	cmp	r3, #0
  406290:	d004      	beq.n	40629c <pio_set_input+0x50>
		p_pio->PIO_IFSCDR = ul_mask;
  406292:	68fb      	ldr	r3, [r7, #12]
  406294:	68ba      	ldr	r2, [r7, #8]
  406296:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  40629a:	e008      	b.n	4062ae <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  40629c:	687b      	ldr	r3, [r7, #4]
  40629e:	f003 0308 	and.w	r3, r3, #8
  4062a2:	2b00      	cmp	r3, #0
  4062a4:	d003      	beq.n	4062ae <pio_set_input+0x62>
			p_pio->PIO_IFSCER = ul_mask;
  4062a6:	68fb      	ldr	r3, [r7, #12]
  4062a8:	68ba      	ldr	r2, [r7, #8]
  4062aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  4062ae:	68fb      	ldr	r3, [r7, #12]
  4062b0:	68ba      	ldr	r2, [r7, #8]
  4062b2:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
  4062b4:	68fb      	ldr	r3, [r7, #12]
  4062b6:	68ba      	ldr	r2, [r7, #8]
  4062b8:	601a      	str	r2, [r3, #0]
}
  4062ba:	bf00      	nop
  4062bc:	3710      	adds	r7, #16
  4062be:	46bd      	mov	sp, r7
  4062c0:	bd80      	pop	{r7, pc}
  4062c2:	bf00      	nop
  4062c4:	00406331 	.word	0x00406331
  4062c8:	00406171 	.word	0x00406171

004062cc <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  4062cc:	b580      	push	{r7, lr}
  4062ce:	b084      	sub	sp, #16
  4062d0:	af00      	add	r7, sp, #0
  4062d2:	60f8      	str	r0, [r7, #12]
  4062d4:	60b9      	str	r1, [r7, #8]
  4062d6:	607a      	str	r2, [r7, #4]
  4062d8:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
  4062da:	68b9      	ldr	r1, [r7, #8]
  4062dc:	68f8      	ldr	r0, [r7, #12]
  4062de:	4b12      	ldr	r3, [pc, #72]	; (406328 <pio_set_output+0x5c>)
  4062e0:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
  4062e2:	69ba      	ldr	r2, [r7, #24]
  4062e4:	68b9      	ldr	r1, [r7, #8]
  4062e6:	68f8      	ldr	r0, [r7, #12]
  4062e8:	4b10      	ldr	r3, [pc, #64]	; (40632c <pio_set_output+0x60>)
  4062ea:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  4062ec:	683b      	ldr	r3, [r7, #0]
  4062ee:	2b00      	cmp	r3, #0
  4062f0:	d003      	beq.n	4062fa <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
  4062f2:	68fb      	ldr	r3, [r7, #12]
  4062f4:	68ba      	ldr	r2, [r7, #8]
  4062f6:	651a      	str	r2, [r3, #80]	; 0x50
  4062f8:	e002      	b.n	406300 <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  4062fa:	68fb      	ldr	r3, [r7, #12]
  4062fc:	68ba      	ldr	r2, [r7, #8]
  4062fe:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  406300:	687b      	ldr	r3, [r7, #4]
  406302:	2b00      	cmp	r3, #0
  406304:	d003      	beq.n	40630e <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
  406306:	68fb      	ldr	r3, [r7, #12]
  406308:	68ba      	ldr	r2, [r7, #8]
  40630a:	631a      	str	r2, [r3, #48]	; 0x30
  40630c:	e002      	b.n	406314 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
  40630e:	68fb      	ldr	r3, [r7, #12]
  406310:	68ba      	ldr	r2, [r7, #8]
  406312:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  406314:	68fb      	ldr	r3, [r7, #12]
  406316:	68ba      	ldr	r2, [r7, #8]
  406318:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
  40631a:	68fb      	ldr	r3, [r7, #12]
  40631c:	68ba      	ldr	r2, [r7, #8]
  40631e:	601a      	str	r2, [r3, #0]
}
  406320:	bf00      	nop
  406322:	3710      	adds	r7, #16
  406324:	46bd      	mov	sp, r7
  406326:	bd80      	pop	{r7, pc}
  406328:	00406331 	.word	0x00406331
  40632c:	00406171 	.word	0x00406171

00406330 <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  406330:	b480      	push	{r7}
  406332:	b083      	sub	sp, #12
  406334:	af00      	add	r7, sp, #0
  406336:	6078      	str	r0, [r7, #4]
  406338:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
  40633a:	687b      	ldr	r3, [r7, #4]
  40633c:	683a      	ldr	r2, [r7, #0]
  40633e:	645a      	str	r2, [r3, #68]	; 0x44
}
  406340:	bf00      	nop
  406342:	370c      	adds	r7, #12
  406344:	46bd      	mov	sp, r7
  406346:	f85d 7b04 	ldr.w	r7, [sp], #4
  40634a:	4770      	bx	lr

0040634c <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  40634c:	b480      	push	{r7}
  40634e:	b083      	sub	sp, #12
  406350:	af00      	add	r7, sp, #0
  406352:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  406354:	687b      	ldr	r3, [r7, #4]
  406356:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  406358:	4618      	mov	r0, r3
  40635a:	370c      	adds	r7, #12
  40635c:	46bd      	mov	sp, r7
  40635e:	f85d 7b04 	ldr.w	r7, [sp], #4
  406362:	4770      	bx	lr

00406364 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  406364:	b480      	push	{r7}
  406366:	b083      	sub	sp, #12
  406368:	af00      	add	r7, sp, #0
  40636a:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  40636c:	687b      	ldr	r3, [r7, #4]
  40636e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  406370:	4618      	mov	r0, r3
  406372:	370c      	adds	r7, #12
  406374:	46bd      	mov	sp, r7
  406376:	f85d 7b04 	ldr.w	r7, [sp], #4
  40637a:	4770      	bx	lr

0040637c <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  40637c:	b590      	push	{r4, r7, lr}
  40637e:	b087      	sub	sp, #28
  406380:	af02      	add	r7, sp, #8
  406382:	6078      	str	r0, [r7, #4]
  406384:	6039      	str	r1, [r7, #0]
	Pio *p_pio = pio_get_pin_group(ul_pin);
  406386:	6878      	ldr	r0, [r7, #4]
  406388:	4b45      	ldr	r3, [pc, #276]	; (4064a0 <pio_configure_pin+0x124>)
  40638a:	4798      	blx	r3
  40638c:	60f8      	str	r0, [r7, #12]

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  40638e:	683b      	ldr	r3, [r7, #0]
  406390:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
  406394:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  406398:	d046      	beq.n	406428 <pio_configure_pin+0xac>
  40639a:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  40639e:	d806      	bhi.n	4063ae <pio_configure_pin+0x32>
  4063a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  4063a4:	d00a      	beq.n	4063bc <pio_configure_pin+0x40>
  4063a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  4063aa:	d022      	beq.n	4063f2 <pio_configure_pin+0x76>
  4063ac:	e070      	b.n	406490 <pio_configure_pin+0x114>
  4063ae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  4063b2:	d045      	beq.n	406440 <pio_configure_pin+0xc4>
  4063b4:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  4063b8:	d042      	beq.n	406440 <pio_configure_pin+0xc4>
  4063ba:	e069      	b.n	406490 <pio_configure_pin+0x114>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  4063bc:	687b      	ldr	r3, [r7, #4]
  4063be:	f003 031f 	and.w	r3, r3, #31
  4063c2:	2201      	movs	r2, #1
  4063c4:	fa02 f303 	lsl.w	r3, r2, r3
  4063c8:	461a      	mov	r2, r3
  4063ca:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4063ce:	68f8      	ldr	r0, [r7, #12]
  4063d0:	4b34      	ldr	r3, [pc, #208]	; (4064a4 <pio_configure_pin+0x128>)
  4063d2:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  4063d4:	687b      	ldr	r3, [r7, #4]
  4063d6:	f003 031f 	and.w	r3, r3, #31
  4063da:	2201      	movs	r2, #1
  4063dc:	fa02 f303 	lsl.w	r3, r2, r3
  4063e0:	4619      	mov	r1, r3
  4063e2:	683b      	ldr	r3, [r7, #0]
  4063e4:	f003 0301 	and.w	r3, r3, #1
  4063e8:	461a      	mov	r2, r3
  4063ea:	68f8      	ldr	r0, [r7, #12]
  4063ec:	4b2e      	ldr	r3, [pc, #184]	; (4064a8 <pio_configure_pin+0x12c>)
  4063ee:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  4063f0:	e050      	b.n	406494 <pio_configure_pin+0x118>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  4063f2:	687b      	ldr	r3, [r7, #4]
  4063f4:	f003 031f 	and.w	r3, r3, #31
  4063f8:	2201      	movs	r2, #1
  4063fa:	fa02 f303 	lsl.w	r3, r2, r3
  4063fe:	461a      	mov	r2, r3
  406400:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  406404:	68f8      	ldr	r0, [r7, #12]
  406406:	4b27      	ldr	r3, [pc, #156]	; (4064a4 <pio_configure_pin+0x128>)
  406408:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  40640a:	687b      	ldr	r3, [r7, #4]
  40640c:	f003 031f 	and.w	r3, r3, #31
  406410:	2201      	movs	r2, #1
  406412:	fa02 f303 	lsl.w	r3, r2, r3
  406416:	4619      	mov	r1, r3
  406418:	683b      	ldr	r3, [r7, #0]
  40641a:	f003 0301 	and.w	r3, r3, #1
  40641e:	461a      	mov	r2, r3
  406420:	68f8      	ldr	r0, [r7, #12]
  406422:	4b21      	ldr	r3, [pc, #132]	; (4064a8 <pio_configure_pin+0x12c>)
  406424:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  406426:	e035      	b.n	406494 <pio_configure_pin+0x118>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  406428:	687b      	ldr	r3, [r7, #4]
  40642a:	f003 031f 	and.w	r3, r3, #31
  40642e:	2201      	movs	r2, #1
  406430:	fa02 f303 	lsl.w	r3, r2, r3
  406434:	683a      	ldr	r2, [r7, #0]
  406436:	4619      	mov	r1, r3
  406438:	68f8      	ldr	r0, [r7, #12]
  40643a:	4b1c      	ldr	r3, [pc, #112]	; (4064ac <pio_configure_pin+0x130>)
  40643c:	4798      	blx	r3
		break;
  40643e:	e029      	b.n	406494 <pio_configure_pin+0x118>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  406440:	687b      	ldr	r3, [r7, #4]
  406442:	f003 031f 	and.w	r3, r3, #31
  406446:	2201      	movs	r2, #1
  406448:	fa02 f303 	lsl.w	r3, r2, r3
  40644c:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  40644e:	683b      	ldr	r3, [r7, #0]
  406450:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  406454:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  406458:	bf0c      	ite	eq
  40645a:	2301      	moveq	r3, #1
  40645c:	2300      	movne	r3, #0
  40645e:	b2db      	uxtb	r3, r3
  406460:	461a      	mov	r2, r3
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
  406462:	683b      	ldr	r3, [r7, #0]
  406464:	f003 0304 	and.w	r3, r3, #4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  406468:	2b00      	cmp	r3, #0
  40646a:	bf14      	ite	ne
  40646c:	2301      	movne	r3, #1
  40646e:	2300      	moveq	r3, #0
  406470:	b2db      	uxtb	r3, r3
  406472:	4618      	mov	r0, r3
				(ul_flags & PIO_PULLUP) ? 1 : 0);
  406474:	683b      	ldr	r3, [r7, #0]
  406476:	f003 0301 	and.w	r3, r3, #1
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  40647a:	2b00      	cmp	r3, #0
  40647c:	bf14      	ite	ne
  40647e:	2301      	movne	r3, #1
  406480:	2300      	moveq	r3, #0
  406482:	b2db      	uxtb	r3, r3
  406484:	9300      	str	r3, [sp, #0]
  406486:	4603      	mov	r3, r0
  406488:	68f8      	ldr	r0, [r7, #12]
  40648a:	4c09      	ldr	r4, [pc, #36]	; (4064b0 <pio_configure_pin+0x134>)
  40648c:	47a0      	blx	r4
		break;
  40648e:	e001      	b.n	406494 <pio_configure_pin+0x118>

	default:
		return 0;
  406490:	2300      	movs	r3, #0
  406492:	e000      	b.n	406496 <pio_configure_pin+0x11a>
	}

	return 1;
  406494:	2301      	movs	r3, #1
}
  406496:	4618      	mov	r0, r3
  406498:	3714      	adds	r7, #20
  40649a:	46bd      	mov	sp, r7
  40649c:	bd90      	pop	{r4, r7, pc}
  40649e:	bf00      	nop
  4064a0:	004064b5 	.word	0x004064b5
  4064a4:	0040619d 	.word	0x0040619d
  4064a8:	00406171 	.word	0x00406171
  4064ac:	0040624d 	.word	0x0040624d
  4064b0:	004062cd 	.word	0x004062cd

004064b4 <pio_get_pin_group>:
 * \param ul_pin The pin index.
 *
 * \return Pointer to \ref Pio struct for GPIO port.
 */
Pio *pio_get_pin_group(uint32_t ul_pin)
{
  4064b4:	b480      	push	{r7}
  4064b6:	b085      	sub	sp, #20
  4064b8:	af00      	add	r7, sp, #0
  4064ba:	6078      	str	r0, [r7, #4]
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  4064bc:	687b      	ldr	r3, [r7, #4]
  4064be:	095b      	lsrs	r3, r3, #5
  4064c0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4064c4:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4064c8:	025b      	lsls	r3, r3, #9
  4064ca:	60fb      	str	r3, [r7, #12]
#endif
	return p_pio;
  4064cc:	68fb      	ldr	r3, [r7, #12]
}
  4064ce:	4618      	mov	r0, r3
  4064d0:	3714      	adds	r7, #20
  4064d2:	46bd      	mov	sp, r7
  4064d4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4064d8:	4770      	bx	lr
	...

004064dc <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  4064dc:	b580      	push	{r7, lr}
  4064de:	b084      	sub	sp, #16
  4064e0:	af00      	add	r7, sp, #0
  4064e2:	6078      	str	r0, [r7, #4]
  4064e4:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  4064e6:	6878      	ldr	r0, [r7, #4]
  4064e8:	4b26      	ldr	r3, [pc, #152]	; (406584 <pio_handler_process+0xa8>)
  4064ea:	4798      	blx	r3
  4064ec:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  4064ee:	6878      	ldr	r0, [r7, #4]
  4064f0:	4b25      	ldr	r3, [pc, #148]	; (406588 <pio_handler_process+0xac>)
  4064f2:	4798      	blx	r3
  4064f4:	4602      	mov	r2, r0
  4064f6:	68fb      	ldr	r3, [r7, #12]
  4064f8:	4013      	ands	r3, r2
  4064fa:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  4064fc:	68fb      	ldr	r3, [r7, #12]
  4064fe:	2b00      	cmp	r3, #0
  406500:	d03c      	beq.n	40657c <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
  406502:	2300      	movs	r3, #0
  406504:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  406506:	e034      	b.n	406572 <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  406508:	4a20      	ldr	r2, [pc, #128]	; (40658c <pio_handler_process+0xb0>)
  40650a:	68bb      	ldr	r3, [r7, #8]
  40650c:	011b      	lsls	r3, r3, #4
  40650e:	4413      	add	r3, r2
  406510:	681a      	ldr	r2, [r3, #0]
  406512:	683b      	ldr	r3, [r7, #0]
  406514:	429a      	cmp	r2, r3
  406516:	d126      	bne.n	406566 <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  406518:	4a1c      	ldr	r2, [pc, #112]	; (40658c <pio_handler_process+0xb0>)
  40651a:	68bb      	ldr	r3, [r7, #8]
  40651c:	011b      	lsls	r3, r3, #4
  40651e:	4413      	add	r3, r2
  406520:	3304      	adds	r3, #4
  406522:	681a      	ldr	r2, [r3, #0]
  406524:	68fb      	ldr	r3, [r7, #12]
  406526:	4013      	ands	r3, r2
  406528:	2b00      	cmp	r3, #0
  40652a:	d01c      	beq.n	406566 <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  40652c:	4a17      	ldr	r2, [pc, #92]	; (40658c <pio_handler_process+0xb0>)
  40652e:	68bb      	ldr	r3, [r7, #8]
  406530:	011b      	lsls	r3, r3, #4
  406532:	4413      	add	r3, r2
  406534:	330c      	adds	r3, #12
  406536:	681b      	ldr	r3, [r3, #0]
  406538:	4914      	ldr	r1, [pc, #80]	; (40658c <pio_handler_process+0xb0>)
  40653a:	68ba      	ldr	r2, [r7, #8]
  40653c:	0112      	lsls	r2, r2, #4
  40653e:	440a      	add	r2, r1
  406540:	6810      	ldr	r0, [r2, #0]
  406542:	4912      	ldr	r1, [pc, #72]	; (40658c <pio_handler_process+0xb0>)
  406544:	68ba      	ldr	r2, [r7, #8]
  406546:	0112      	lsls	r2, r2, #4
  406548:	440a      	add	r2, r1
  40654a:	3204      	adds	r2, #4
  40654c:	6812      	ldr	r2, [r2, #0]
  40654e:	4611      	mov	r1, r2
  406550:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  406552:	4a0e      	ldr	r2, [pc, #56]	; (40658c <pio_handler_process+0xb0>)
  406554:	68bb      	ldr	r3, [r7, #8]
  406556:	011b      	lsls	r3, r3, #4
  406558:	4413      	add	r3, r2
  40655a:	3304      	adds	r3, #4
  40655c:	681b      	ldr	r3, [r3, #0]
  40655e:	43db      	mvns	r3, r3
  406560:	68fa      	ldr	r2, [r7, #12]
  406562:	4013      	ands	r3, r2
  406564:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  406566:	68bb      	ldr	r3, [r7, #8]
  406568:	3301      	adds	r3, #1
  40656a:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  40656c:	68bb      	ldr	r3, [r7, #8]
  40656e:	2b06      	cmp	r3, #6
  406570:	d803      	bhi.n	40657a <pio_handler_process+0x9e>
		while (status != 0) {
  406572:	68fb      	ldr	r3, [r7, #12]
  406574:	2b00      	cmp	r3, #0
  406576:	d1c7      	bne.n	406508 <pio_handler_process+0x2c>
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
  406578:	e000      	b.n	40657c <pio_handler_process+0xa0>
				break;
  40657a:	bf00      	nop
}
  40657c:	bf00      	nop
  40657e:	3710      	adds	r7, #16
  406580:	46bd      	mov	sp, r7
  406582:	bd80      	pop	{r7, pc}
  406584:	0040634d 	.word	0x0040634d
  406588:	00406365 	.word	0x00406365
  40658c:	2001a24c 	.word	0x2001a24c

00406590 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  406590:	b580      	push	{r7, lr}
  406592:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  406594:	210b      	movs	r1, #11
  406596:	4802      	ldr	r0, [pc, #8]	; (4065a0 <PIOA_Handler+0x10>)
  406598:	4b02      	ldr	r3, [pc, #8]	; (4065a4 <PIOA_Handler+0x14>)
  40659a:	4798      	blx	r3
}
  40659c:	bf00      	nop
  40659e:	bd80      	pop	{r7, pc}
  4065a0:	400e0e00 	.word	0x400e0e00
  4065a4:	004064dd 	.word	0x004064dd

004065a8 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4065a8:	b580      	push	{r7, lr}
  4065aa:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  4065ac:	210c      	movs	r1, #12
  4065ae:	4802      	ldr	r0, [pc, #8]	; (4065b8 <PIOB_Handler+0x10>)
  4065b0:	4b02      	ldr	r3, [pc, #8]	; (4065bc <PIOB_Handler+0x14>)
  4065b2:	4798      	blx	r3
}
  4065b4:	bf00      	nop
  4065b6:	bd80      	pop	{r7, pc}
  4065b8:	400e1000 	.word	0x400e1000
  4065bc:	004064dd 	.word	0x004064dd

004065c0 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  4065c0:	b480      	push	{r7}
  4065c2:	b085      	sub	sp, #20
  4065c4:	af00      	add	r7, sp, #0
  4065c6:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4065c8:	491d      	ldr	r1, [pc, #116]	; (406640 <pmc_switch_mck_to_pllack+0x80>)
  4065ca:	4b1d      	ldr	r3, [pc, #116]	; (406640 <pmc_switch_mck_to_pllack+0x80>)
  4065cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4065ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  4065d2:	687b      	ldr	r3, [r7, #4]
  4065d4:	4313      	orrs	r3, r2
  4065d6:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4065d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4065dc:	60fb      	str	r3, [r7, #12]
  4065de:	e007      	b.n	4065f0 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4065e0:	68fb      	ldr	r3, [r7, #12]
  4065e2:	2b00      	cmp	r3, #0
  4065e4:	d101      	bne.n	4065ea <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  4065e6:	2301      	movs	r3, #1
  4065e8:	e023      	b.n	406632 <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  4065ea:	68fb      	ldr	r3, [r7, #12]
  4065ec:	3b01      	subs	r3, #1
  4065ee:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4065f0:	4b13      	ldr	r3, [pc, #76]	; (406640 <pmc_switch_mck_to_pllack+0x80>)
  4065f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4065f4:	f003 0308 	and.w	r3, r3, #8
  4065f8:	2b00      	cmp	r3, #0
  4065fa:	d0f1      	beq.n	4065e0 <pmc_switch_mck_to_pllack+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4065fc:	4a10      	ldr	r2, [pc, #64]	; (406640 <pmc_switch_mck_to_pllack+0x80>)
  4065fe:	4b10      	ldr	r3, [pc, #64]	; (406640 <pmc_switch_mck_to_pllack+0x80>)
  406600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  406602:	f023 0303 	bic.w	r3, r3, #3
  406606:	f043 0302 	orr.w	r3, r3, #2
  40660a:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40660c:	f44f 6300 	mov.w	r3, #2048	; 0x800
  406610:	60fb      	str	r3, [r7, #12]
  406612:	e007      	b.n	406624 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  406614:	68fb      	ldr	r3, [r7, #12]
  406616:	2b00      	cmp	r3, #0
  406618:	d101      	bne.n	40661e <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  40661a:	2301      	movs	r3, #1
  40661c:	e009      	b.n	406632 <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  40661e:	68fb      	ldr	r3, [r7, #12]
  406620:	3b01      	subs	r3, #1
  406622:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  406624:	4b06      	ldr	r3, [pc, #24]	; (406640 <pmc_switch_mck_to_pllack+0x80>)
  406626:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  406628:	f003 0308 	and.w	r3, r3, #8
  40662c:	2b00      	cmp	r3, #0
  40662e:	d0f1      	beq.n	406614 <pmc_switch_mck_to_pllack+0x54>
		}
	}

	return 0;
  406630:	2300      	movs	r3, #0
}
  406632:	4618      	mov	r0, r3
  406634:	3714      	adds	r7, #20
  406636:	46bd      	mov	sp, r7
  406638:	f85d 7b04 	ldr.w	r7, [sp], #4
  40663c:	4770      	bx	lr
  40663e:	bf00      	nop
  406640:	400e0400 	.word	0x400e0400

00406644 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  406644:	b480      	push	{r7}
  406646:	b083      	sub	sp, #12
  406648:	af00      	add	r7, sp, #0
  40664a:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  40664c:	687b      	ldr	r3, [r7, #4]
  40664e:	2b01      	cmp	r3, #1
  406650:	d107      	bne.n	406662 <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  406652:	4a08      	ldr	r2, [pc, #32]	; (406674 <pmc_switch_sclk_to_32kxtal+0x30>)
  406654:	4b07      	ldr	r3, [pc, #28]	; (406674 <pmc_switch_sclk_to_32kxtal+0x30>)
  406656:	689b      	ldr	r3, [r3, #8]
  406658:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
  40665c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  406660:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  406662:	4b04      	ldr	r3, [pc, #16]	; (406674 <pmc_switch_sclk_to_32kxtal+0x30>)
  406664:	4a04      	ldr	r2, [pc, #16]	; (406678 <pmc_switch_sclk_to_32kxtal+0x34>)
  406666:	601a      	str	r2, [r3, #0]
}
  406668:	bf00      	nop
  40666a:	370c      	adds	r7, #12
  40666c:	46bd      	mov	sp, r7
  40666e:	f85d 7b04 	ldr.w	r7, [sp], #4
  406672:	4770      	bx	lr
  406674:	400e1410 	.word	0x400e1410
  406678:	a5000008 	.word	0xa5000008

0040667c <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  40667c:	b480      	push	{r7}
  40667e:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  406680:	4b09      	ldr	r3, [pc, #36]	; (4066a8 <pmc_osc_is_ready_32kxtal+0x2c>)
  406682:	695b      	ldr	r3, [r3, #20]
  406684:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  406688:	2b00      	cmp	r3, #0
  40668a:	d007      	beq.n	40669c <pmc_osc_is_ready_32kxtal+0x20>
  40668c:	4b07      	ldr	r3, [pc, #28]	; (4066ac <pmc_osc_is_ready_32kxtal+0x30>)
  40668e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  406690:	f003 0380 	and.w	r3, r3, #128	; 0x80
  406694:	2b00      	cmp	r3, #0
  406696:	d001      	beq.n	40669c <pmc_osc_is_ready_32kxtal+0x20>
  406698:	2301      	movs	r3, #1
  40669a:	e000      	b.n	40669e <pmc_osc_is_ready_32kxtal+0x22>
  40669c:	2300      	movs	r3, #0
}
  40669e:	4618      	mov	r0, r3
  4066a0:	46bd      	mov	sp, r7
  4066a2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4066a6:	4770      	bx	lr
  4066a8:	400e1410 	.word	0x400e1410
  4066ac:	400e0400 	.word	0x400e0400

004066b0 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  4066b0:	b480      	push	{r7}
  4066b2:	b083      	sub	sp, #12
  4066b4:	af00      	add	r7, sp, #0
  4066b6:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  4066b8:	4a18      	ldr	r2, [pc, #96]	; (40671c <pmc_switch_mainck_to_fastrc+0x6c>)
  4066ba:	4b18      	ldr	r3, [pc, #96]	; (40671c <pmc_switch_mainck_to_fastrc+0x6c>)
  4066bc:	6a1b      	ldr	r3, [r3, #32]
  4066be:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4066c2:	f043 0308 	orr.w	r3, r3, #8
  4066c6:	6213      	str	r3, [r2, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  4066c8:	bf00      	nop
  4066ca:	4b14      	ldr	r3, [pc, #80]	; (40671c <pmc_switch_mainck_to_fastrc+0x6c>)
  4066cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4066ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  4066d2:	2b00      	cmp	r3, #0
  4066d4:	d0f9      	beq.n	4066ca <pmc_switch_mainck_to_fastrc+0x1a>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  4066d6:	4911      	ldr	r1, [pc, #68]	; (40671c <pmc_switch_mainck_to_fastrc+0x6c>)
  4066d8:	4b10      	ldr	r3, [pc, #64]	; (40671c <pmc_switch_mainck_to_fastrc+0x6c>)
  4066da:	6a1b      	ldr	r3, [r3, #32]
  4066dc:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  4066e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  4066e4:	687a      	ldr	r2, [r7, #4]
  4066e6:	4313      	orrs	r3, r2
  4066e8:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  4066ec:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  4066ee:	bf00      	nop
  4066f0:	4b0a      	ldr	r3, [pc, #40]	; (40671c <pmc_switch_mainck_to_fastrc+0x6c>)
  4066f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4066f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  4066f8:	2b00      	cmp	r3, #0
  4066fa:	d0f9      	beq.n	4066f0 <pmc_switch_mainck_to_fastrc+0x40>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  4066fc:	4a07      	ldr	r2, [pc, #28]	; (40671c <pmc_switch_mainck_to_fastrc+0x6c>)
  4066fe:	4b07      	ldr	r3, [pc, #28]	; (40671c <pmc_switch_mainck_to_fastrc+0x6c>)
  406700:	6a1b      	ldr	r3, [r3, #32]
  406702:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
  406706:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  40670a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40670e:	6213      	str	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD;
}
  406710:	bf00      	nop
  406712:	370c      	adds	r7, #12
  406714:	46bd      	mov	sp, r7
  406716:	f85d 7b04 	ldr.w	r7, [sp], #4
  40671a:	4770      	bx	lr
  40671c:	400e0400 	.word	0x400e0400

00406720 <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  406720:	b480      	push	{r7}
  406722:	b083      	sub	sp, #12
  406724:	af00      	add	r7, sp, #0
  406726:	6078      	str	r0, [r7, #4]
  406728:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  40672a:	687b      	ldr	r3, [r7, #4]
  40672c:	2b00      	cmp	r3, #0
  40672e:	d008      	beq.n	406742 <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  406730:	4916      	ldr	r1, [pc, #88]	; (40678c <pmc_switch_mainck_to_xtal+0x6c>)
  406732:	4b16      	ldr	r3, [pc, #88]	; (40678c <pmc_switch_mainck_to_xtal+0x6c>)
  406734:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  406736:	4a16      	ldr	r2, [pc, #88]	; (406790 <pmc_switch_mainck_to_xtal+0x70>)
  406738:	401a      	ands	r2, r3
  40673a:	4b16      	ldr	r3, [pc, #88]	; (406794 <pmc_switch_mainck_to_xtal+0x74>)
  40673c:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40673e:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
  406740:	e01e      	b.n	406780 <pmc_switch_mainck_to_xtal+0x60>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  406742:	4912      	ldr	r1, [pc, #72]	; (40678c <pmc_switch_mainck_to_xtal+0x6c>)
  406744:	4b11      	ldr	r3, [pc, #68]	; (40678c <pmc_switch_mainck_to_xtal+0x6c>)
  406746:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  406748:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  40674c:	f023 0303 	bic.w	r3, r3, #3
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  406750:	683a      	ldr	r2, [r7, #0]
  406752:	0212      	lsls	r2, r2, #8
  406754:	b292      	uxth	r2, r2
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  406756:	4313      	orrs	r3, r2
  406758:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40675c:	f043 0301 	orr.w	r3, r3, #1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  406760:	620b      	str	r3, [r1, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  406762:	bf00      	nop
  406764:	4b09      	ldr	r3, [pc, #36]	; (40678c <pmc_switch_mainck_to_xtal+0x6c>)
  406766:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  406768:	f003 0301 	and.w	r3, r3, #1
  40676c:	2b00      	cmp	r3, #0
  40676e:	d0f9      	beq.n	406764 <pmc_switch_mainck_to_xtal+0x44>
		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  406770:	4a06      	ldr	r2, [pc, #24]	; (40678c <pmc_switch_mainck_to_xtal+0x6c>)
  406772:	4b06      	ldr	r3, [pc, #24]	; (40678c <pmc_switch_mainck_to_xtal+0x6c>)
  406774:	6a1b      	ldr	r3, [r3, #32]
  406776:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  40677a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  40677e:	6213      	str	r3, [r2, #32]
}
  406780:	bf00      	nop
  406782:	370c      	adds	r7, #12
  406784:	46bd      	mov	sp, r7
  406786:	f85d 7b04 	ldr.w	r7, [sp], #4
  40678a:	4770      	bx	lr
  40678c:	400e0400 	.word	0x400e0400
  406790:	fec8fffc 	.word	0xfec8fffc
  406794:	01370002 	.word	0x01370002

00406798 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  406798:	b480      	push	{r7}
  40679a:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  40679c:	4b04      	ldr	r3, [pc, #16]	; (4067b0 <pmc_osc_is_ready_mainck+0x18>)
  40679e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4067a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  4067a4:	4618      	mov	r0, r3
  4067a6:	46bd      	mov	sp, r7
  4067a8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4067ac:	4770      	bx	lr
  4067ae:	bf00      	nop
  4067b0:	400e0400 	.word	0x400e0400

004067b4 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  4067b4:	b480      	push	{r7}
  4067b6:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
  4067b8:	4b03      	ldr	r3, [pc, #12]	; (4067c8 <pmc_disable_pllack+0x14>)
  4067ba:	2200      	movs	r2, #0
  4067bc:	629a      	str	r2, [r3, #40]	; 0x28
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
#endif
}
  4067be:	bf00      	nop
  4067c0:	46bd      	mov	sp, r7
  4067c2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4067c6:	4770      	bx	lr
  4067c8:	400e0400 	.word	0x400e0400

004067cc <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  4067cc:	b480      	push	{r7}
  4067ce:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  4067d0:	4b04      	ldr	r3, [pc, #16]	; (4067e4 <pmc_is_locked_pllack+0x18>)
  4067d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4067d4:	f003 0302 	and.w	r3, r3, #2
}
  4067d8:	4618      	mov	r0, r3
  4067da:	46bd      	mov	sp, r7
  4067dc:	f85d 7b04 	ldr.w	r7, [sp], #4
  4067e0:	4770      	bx	lr
  4067e2:	bf00      	nop
  4067e4:	400e0400 	.word	0x400e0400

004067e8 <pmc_disable_pllbck>:

/**
 * \brief Disable PLLB clock.
 */
void pmc_disable_pllbck(void)
{
  4067e8:	b480      	push	{r7}
  4067ea:	af00      	add	r7, sp, #0
	PMC->CKGR_PLLBR = CKGR_PLLBR_MULB(0);
  4067ec:	4b03      	ldr	r3, [pc, #12]	; (4067fc <pmc_disable_pllbck+0x14>)
  4067ee:	2200      	movs	r2, #0
  4067f0:	62da      	str	r2, [r3, #44]	; 0x2c
}
  4067f2:	bf00      	nop
  4067f4:	46bd      	mov	sp, r7
  4067f6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4067fa:	4770      	bx	lr
  4067fc:	400e0400 	.word	0x400e0400

00406800 <pmc_is_locked_pllbck>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllbck(void)
{
  406800:	b480      	push	{r7}
  406802:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKB);
  406804:	4b04      	ldr	r3, [pc, #16]	; (406818 <pmc_is_locked_pllbck+0x18>)
  406806:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  406808:	f003 0304 	and.w	r3, r3, #4
}
  40680c:	4618      	mov	r0, r3
  40680e:	46bd      	mov	sp, r7
  406810:	f85d 7b04 	ldr.w	r7, [sp], #4
  406814:	4770      	bx	lr
  406816:	bf00      	nop
  406818:	400e0400 	.word	0x400e0400

0040681c <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  40681c:	b480      	push	{r7}
  40681e:	b083      	sub	sp, #12
  406820:	af00      	add	r7, sp, #0
  406822:	6078      	str	r0, [r7, #4]
	PMC->PMC_PCR = ul_id & 0x7F;
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
  406824:	687b      	ldr	r3, [r7, #4]
  406826:	2b32      	cmp	r3, #50	; 0x32
  406828:	d901      	bls.n	40682e <pmc_enable_periph_clk+0x12>
		return 1;
  40682a:	2301      	movs	r3, #1
  40682c:	e02f      	b.n	40688e <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  40682e:	687b      	ldr	r3, [r7, #4]
  406830:	2b1f      	cmp	r3, #31
  406832:	d813      	bhi.n	40685c <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  406834:	4b19      	ldr	r3, [pc, #100]	; (40689c <pmc_enable_periph_clk+0x80>)
  406836:	699a      	ldr	r2, [r3, #24]
  406838:	2101      	movs	r1, #1
  40683a:	687b      	ldr	r3, [r7, #4]
  40683c:	fa01 f303 	lsl.w	r3, r1, r3
  406840:	401a      	ands	r2, r3
  406842:	2101      	movs	r1, #1
  406844:	687b      	ldr	r3, [r7, #4]
  406846:	fa01 f303 	lsl.w	r3, r1, r3
  40684a:	429a      	cmp	r2, r3
  40684c:	d01e      	beq.n	40688c <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
  40684e:	4a13      	ldr	r2, [pc, #76]	; (40689c <pmc_enable_periph_clk+0x80>)
  406850:	2101      	movs	r1, #1
  406852:	687b      	ldr	r3, [r7, #4]
  406854:	fa01 f303 	lsl.w	r3, r1, r3
  406858:	6113      	str	r3, [r2, #16]
  40685a:	e017      	b.n	40688c <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  40685c:	687b      	ldr	r3, [r7, #4]
  40685e:	3b20      	subs	r3, #32
  406860:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  406862:	4b0e      	ldr	r3, [pc, #56]	; (40689c <pmc_enable_periph_clk+0x80>)
  406864:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  406868:	2101      	movs	r1, #1
  40686a:	687b      	ldr	r3, [r7, #4]
  40686c:	fa01 f303 	lsl.w	r3, r1, r3
  406870:	401a      	ands	r2, r3
  406872:	2101      	movs	r1, #1
  406874:	687b      	ldr	r3, [r7, #4]
  406876:	fa01 f303 	lsl.w	r3, r1, r3
  40687a:	429a      	cmp	r2, r3
  40687c:	d006      	beq.n	40688c <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
  40687e:	4a07      	ldr	r2, [pc, #28]	; (40689c <pmc_enable_periph_clk+0x80>)
  406880:	2101      	movs	r1, #1
  406882:	687b      	ldr	r3, [r7, #4]
  406884:	fa01 f303 	lsl.w	r3, r1, r3
  406888:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  40688c:	2300      	movs	r3, #0
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  40688e:	4618      	mov	r0, r3
  406890:	370c      	adds	r7, #12
  406892:	46bd      	mov	sp, r7
  406894:	f85d 7b04 	ldr.w	r7, [sp], #4
  406898:	4770      	bx	lr
  40689a:	bf00      	nop
  40689c:	400e0400 	.word	0x400e0400

004068a0 <pmc_disable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_disable_periph_clk(uint32_t ul_id)
{
  4068a0:	b480      	push	{r7}
  4068a2:	b083      	sub	sp, #12
  4068a4:	af00      	add	r7, sp, #0
  4068a6:	6078      	str	r0, [r7, #4]
	PMC->PMC_PCR = ul_id & 0x7F;
	pcr = PMC->PMC_PCR | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
  4068a8:	687b      	ldr	r3, [r7, #4]
  4068aa:	2b32      	cmp	r3, #50	; 0x32
  4068ac:	d901      	bls.n	4068b2 <pmc_disable_periph_clk+0x12>
		return 1;
  4068ae:	2301      	movs	r3, #1
  4068b0:	e02f      	b.n	406912 <pmc_disable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  4068b2:	687b      	ldr	r3, [r7, #4]
  4068b4:	2b1f      	cmp	r3, #31
  4068b6:	d813      	bhi.n	4068e0 <pmc_disable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) == (1u << ul_id)) {
  4068b8:	4b19      	ldr	r3, [pc, #100]	; (406920 <pmc_disable_periph_clk+0x80>)
  4068ba:	699a      	ldr	r2, [r3, #24]
  4068bc:	2101      	movs	r1, #1
  4068be:	687b      	ldr	r3, [r7, #4]
  4068c0:	fa01 f303 	lsl.w	r3, r1, r3
  4068c4:	401a      	ands	r2, r3
  4068c6:	2101      	movs	r1, #1
  4068c8:	687b      	ldr	r3, [r7, #4]
  4068ca:	fa01 f303 	lsl.w	r3, r1, r3
  4068ce:	429a      	cmp	r2, r3
  4068d0:	d11e      	bne.n	406910 <pmc_disable_periph_clk+0x70>
			PMC->PMC_PCDR0 = 1 << ul_id;
  4068d2:	4a13      	ldr	r2, [pc, #76]	; (406920 <pmc_disable_periph_clk+0x80>)
  4068d4:	2101      	movs	r1, #1
  4068d6:	687b      	ldr	r3, [r7, #4]
  4068d8:	fa01 f303 	lsl.w	r3, r1, r3
  4068dc:	6153      	str	r3, [r2, #20]
  4068de:	e017      	b.n	406910 <pmc_disable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 \
		|| SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  4068e0:	687b      	ldr	r3, [r7, #4]
  4068e2:	3b20      	subs	r3, #32
  4068e4:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
  4068e6:	4b0e      	ldr	r3, [pc, #56]	; (406920 <pmc_disable_periph_clk+0x80>)
  4068e8:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  4068ec:	2101      	movs	r1, #1
  4068ee:	687b      	ldr	r3, [r7, #4]
  4068f0:	fa01 f303 	lsl.w	r3, r1, r3
  4068f4:	401a      	ands	r2, r3
  4068f6:	2101      	movs	r1, #1
  4068f8:	687b      	ldr	r3, [r7, #4]
  4068fa:	fa01 f303 	lsl.w	r3, r1, r3
  4068fe:	429a      	cmp	r2, r3
  406900:	d106      	bne.n	406910 <pmc_disable_periph_clk+0x70>
			PMC->PMC_PCDR1 = 1 << ul_id;
  406902:	4a07      	ldr	r2, [pc, #28]	; (406920 <pmc_disable_periph_clk+0x80>)
  406904:	2101      	movs	r1, #1
  406906:	687b      	ldr	r3, [r7, #4]
  406908:	fa01 f303 	lsl.w	r3, r1, r3
  40690c:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
		}
#endif
	}
	return 0;
  406910:	2300      	movs	r3, #0
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  406912:	4618      	mov	r0, r3
  406914:	370c      	adds	r7, #12
  406916:	46bd      	mov	sp, r7
  406918:	f85d 7b04 	ldr.w	r7, [sp], #4
  40691c:	4770      	bx	lr
  40691e:	bf00      	nop
  406920:	400e0400 	.word	0x400e0400

00406924 <pmc_pck_set_source>:
 *
 * \param ul_id Peripheral ID.
 * \param ul_source Source selection value.
 */
void pmc_pck_set_source(uint32_t ul_id, uint32_t ul_source)
{
  406924:	b480      	push	{r7}
  406926:	b083      	sub	sp, #12
  406928:	af00      	add	r7, sp, #0
  40692a:	6078      	str	r0, [r7, #4]
  40692c:	6039      	str	r1, [r7, #0]
	PMC->PMC_PCK[ul_id] =
  40692e:	4914      	ldr	r1, [pc, #80]	; (406980 <pmc_pck_set_source+0x5c>)
			(PMC->PMC_PCK[ul_id] & ~PMC_PCK_CSS_Msk) | ul_source;
  406930:	4a13      	ldr	r2, [pc, #76]	; (406980 <pmc_pck_set_source+0x5c>)
  406932:	687b      	ldr	r3, [r7, #4]
  406934:	3310      	adds	r3, #16
  406936:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  40693a:	f023 0207 	bic.w	r2, r3, #7
  40693e:	683b      	ldr	r3, [r7, #0]
  406940:	431a      	orrs	r2, r3
	PMC->PMC_PCK[ul_id] =
  406942:	687b      	ldr	r3, [r7, #4]
  406944:	3310      	adds	r3, #16
  406946:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	while ((PMC->PMC_SCER & (PMC_SCER_PCK0 << ul_id))
  40694a:	bf00      	nop
  40694c:	4b0c      	ldr	r3, [pc, #48]	; (406980 <pmc_pck_set_source+0x5c>)
  40694e:	681a      	ldr	r2, [r3, #0]
  406950:	f44f 7180 	mov.w	r1, #256	; 0x100
  406954:	687b      	ldr	r3, [r7, #4]
  406956:	fa01 f303 	lsl.w	r3, r1, r3
  40695a:	4013      	ands	r3, r2
  40695c:	2b00      	cmp	r3, #0
  40695e:	d009      	beq.n	406974 <pmc_pck_set_source+0x50>
			&& !(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)));
  406960:	4b07      	ldr	r3, [pc, #28]	; (406980 <pmc_pck_set_source+0x5c>)
  406962:	6e9a      	ldr	r2, [r3, #104]	; 0x68
  406964:	f44f 7180 	mov.w	r1, #256	; 0x100
  406968:	687b      	ldr	r3, [r7, #4]
  40696a:	fa01 f303 	lsl.w	r3, r1, r3
  40696e:	4013      	ands	r3, r2
  406970:	2b00      	cmp	r3, #0
  406972:	d0eb      	beq.n	40694c <pmc_pck_set_source+0x28>
}
  406974:	bf00      	nop
  406976:	370c      	adds	r7, #12
  406978:	46bd      	mov	sp, r7
  40697a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40697e:	4770      	bx	lr
  406980:	400e0400 	.word	0x400e0400

00406984 <pmc_switch_pck_to_mck>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_pck_to_mck(uint32_t ul_id, uint32_t ul_pres)
{
  406984:	b480      	push	{r7}
  406986:	b085      	sub	sp, #20
  406988:	af00      	add	r7, sp, #0
  40698a:	6078      	str	r0, [r7, #4]
  40698c:	6039      	str	r1, [r7, #0]
	uint32_t ul_timeout;

	PMC->PMC_PCK[ul_id] = PMC_PCK_CSS_MCK | ul_pres;
  40698e:	4912      	ldr	r1, [pc, #72]	; (4069d8 <pmc_switch_pck_to_mck+0x54>)
  406990:	683b      	ldr	r3, [r7, #0]
  406992:	f043 0204 	orr.w	r2, r3, #4
  406996:	687b      	ldr	r3, [r7, #4]
  406998:	3310      	adds	r3, #16
  40699a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (ul_timeout = PMC_TIMEOUT;
  40699e:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4069a2:	60fb      	str	r3, [r7, #12]
  4069a4:	e007      	b.n	4069b6 <pmc_switch_pck_to_mck+0x32>
	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
		if (ul_timeout == 0) {
  4069a6:	68fb      	ldr	r3, [r7, #12]
  4069a8:	2b00      	cmp	r3, #0
  4069aa:	d101      	bne.n	4069b0 <pmc_switch_pck_to_mck+0x2c>
			return 1;
  4069ac:	2301      	movs	r3, #1
  4069ae:	e00d      	b.n	4069cc <pmc_switch_pck_to_mck+0x48>
	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
  4069b0:	68fb      	ldr	r3, [r7, #12]
  4069b2:	3b01      	subs	r3, #1
  4069b4:	60fb      	str	r3, [r7, #12]
  4069b6:	4b08      	ldr	r3, [pc, #32]	; (4069d8 <pmc_switch_pck_to_mck+0x54>)
  4069b8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
  4069ba:	f44f 7180 	mov.w	r1, #256	; 0x100
  4069be:	687b      	ldr	r3, [r7, #4]
  4069c0:	fa01 f303 	lsl.w	r3, r1, r3
  4069c4:	4013      	ands	r3, r2
	for (ul_timeout = PMC_TIMEOUT;
  4069c6:	2b00      	cmp	r3, #0
  4069c8:	d0ed      	beq.n	4069a6 <pmc_switch_pck_to_mck+0x22>
		}
	}

	return 0;
  4069ca:	2300      	movs	r3, #0
}
  4069cc:	4618      	mov	r0, r3
  4069ce:	3714      	adds	r7, #20
  4069d0:	46bd      	mov	sp, r7
  4069d2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4069d6:	4770      	bx	lr
  4069d8:	400e0400 	.word	0x400e0400

004069dc <pmc_enable_pck>:
 * \brief Enable the specified programmable clock.
 *
 * \param ul_id Id of the programmable clock.
 */
void pmc_enable_pck(uint32_t ul_id)
{
  4069dc:	b480      	push	{r7}
  4069de:	b083      	sub	sp, #12
  4069e0:	af00      	add	r7, sp, #0
  4069e2:	6078      	str	r0, [r7, #4]
	PMC->PMC_SCER = PMC_SCER_PCK0 << ul_id;
  4069e4:	4a06      	ldr	r2, [pc, #24]	; (406a00 <pmc_enable_pck+0x24>)
  4069e6:	f44f 7180 	mov.w	r1, #256	; 0x100
  4069ea:	687b      	ldr	r3, [r7, #4]
  4069ec:	fa01 f303 	lsl.w	r3, r1, r3
  4069f0:	6013      	str	r3, [r2, #0]
}
  4069f2:	bf00      	nop
  4069f4:	370c      	adds	r7, #12
  4069f6:	46bd      	mov	sp, r7
  4069f8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4069fc:	4770      	bx	lr
  4069fe:	bf00      	nop
  406a00:	400e0400 	.word	0x400e0400

00406a04 <pmc_disable_pck>:
 * \brief Disable the specified programmable clock.
 *
 * \param ul_id Id of the programmable clock.
 */
void pmc_disable_pck(uint32_t ul_id)
{
  406a04:	b480      	push	{r7}
  406a06:	b083      	sub	sp, #12
  406a08:	af00      	add	r7, sp, #0
  406a0a:	6078      	str	r0, [r7, #4]
	PMC->PMC_SCDR = PMC_SCER_PCK0 << ul_id;
  406a0c:	4a06      	ldr	r2, [pc, #24]	; (406a28 <pmc_disable_pck+0x24>)
  406a0e:	f44f 7180 	mov.w	r1, #256	; 0x100
  406a12:	687b      	ldr	r3, [r7, #4]
  406a14:	fa01 f303 	lsl.w	r3, r1, r3
  406a18:	6053      	str	r3, [r2, #4]
}
  406a1a:	bf00      	nop
  406a1c:	370c      	adds	r7, #12
  406a1e:	46bd      	mov	sp, r7
  406a20:	f85d 7b04 	ldr.w	r7, [sp], #4
  406a24:	4770      	bx	lr
  406a26:	bf00      	nop
  406a28:	400e0400 	.word	0x400e0400

00406a2c <pmc_switch_udpck_to_pllbck>:
 * \brief Switch UDP (USB) clock source selection to PLLB clock.
 *
 * \param ul_usbdiv Clock divisor.
 */
void pmc_switch_udpck_to_pllbck(uint32_t ul_usbdiv)
{
  406a2c:	b480      	push	{r7}
  406a2e:	b083      	sub	sp, #12
  406a30:	af00      	add	r7, sp, #0
  406a32:	6078      	str	r0, [r7, #4]
	PMC->PMC_USB = PMC_USB_USBDIV(ul_usbdiv) | PMC_USB_USBS;
  406a34:	4a06      	ldr	r2, [pc, #24]	; (406a50 <pmc_switch_udpck_to_pllbck+0x24>)
  406a36:	687b      	ldr	r3, [r7, #4]
  406a38:	021b      	lsls	r3, r3, #8
  406a3a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
  406a3e:	f043 0301 	orr.w	r3, r3, #1
  406a42:	6393      	str	r3, [r2, #56]	; 0x38
}
  406a44:	bf00      	nop
  406a46:	370c      	adds	r7, #12
  406a48:	46bd      	mov	sp, r7
  406a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
  406a4e:	4770      	bx	lr
  406a50:	400e0400 	.word	0x400e0400

00406a54 <pmc_enable_udpck>:
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
/**
 * \brief Enable UDP (USB) clock.
 */
void pmc_enable_udpck(void)
{
  406a54:	b480      	push	{r7}
  406a56:	af00      	add	r7, sp, #0
#if (SAM3S || SAM4S || SAM4E || SAMG55)
	PMC->PMC_SCER = PMC_SCER_UDP;
  406a58:	4b03      	ldr	r3, [pc, #12]	; (406a68 <pmc_enable_udpck+0x14>)
  406a5a:	2280      	movs	r2, #128	; 0x80
  406a5c:	601a      	str	r2, [r3, #0]
#elif (SAMV71 || SAMV70 || SAME70 || SAMS70)
	PMC->PMC_SCER = PMC_SCER_USBCLK;
#else
	PMC->PMC_SCER = PMC_SCER_UOTGCLK;
# endif
}
  406a5e:	bf00      	nop
  406a60:	46bd      	mov	sp, r7
  406a62:	f85d 7b04 	ldr.w	r7, [sp], #4
  406a66:	4770      	bx	lr
  406a68:	400e0400 	.word	0x400e0400

00406a6c <pmc_set_fast_startup_input>:
 *        (event generation).
 *
 * \param ul_inputs Wake up inputs to enable.
 */
void pmc_set_fast_startup_input(uint32_t ul_inputs)
{
  406a6c:	b480      	push	{r7}
  406a6e:	b083      	sub	sp, #12
  406a70:	af00      	add	r7, sp, #0
  406a72:	6078      	str	r0, [r7, #4]
	ul_inputs &= PMC_FAST_STARTUP_Msk;
  406a74:	687b      	ldr	r3, [r7, #4]
  406a76:	f3c3 0312 	ubfx	r3, r3, #0, #19
  406a7a:	607b      	str	r3, [r7, #4]
	PMC->PMC_FSMR |= ul_inputs;
  406a7c:	4905      	ldr	r1, [pc, #20]	; (406a94 <pmc_set_fast_startup_input+0x28>)
  406a7e:	4b05      	ldr	r3, [pc, #20]	; (406a94 <pmc_set_fast_startup_input+0x28>)
  406a80:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  406a82:	687b      	ldr	r3, [r7, #4]
  406a84:	4313      	orrs	r3, r2
  406a86:	670b      	str	r3, [r1, #112]	; 0x70
}
  406a88:	bf00      	nop
  406a8a:	370c      	adds	r7, #12
  406a8c:	46bd      	mov	sp, r7
  406a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
  406a92:	4770      	bx	lr
  406a94:	400e0400 	.word	0x400e0400

00406a98 <pmc_is_wakeup_clocks_restored>:
#endif
	}
}

bool pmc_is_wakeup_clocks_restored(void)
{
  406a98:	b480      	push	{r7}
  406a9a:	af00      	add	r7, sp, #0
	return !b_is_sleep_clock_used;
  406a9c:	4b09      	ldr	r3, [pc, #36]	; (406ac4 <pmc_is_wakeup_clocks_restored+0x2c>)
  406a9e:	781b      	ldrb	r3, [r3, #0]
  406aa0:	b2db      	uxtb	r3, r3
  406aa2:	2b00      	cmp	r3, #0
  406aa4:	bf14      	ite	ne
  406aa6:	2301      	movne	r3, #1
  406aa8:	2300      	moveq	r3, #0
  406aaa:	b2db      	uxtb	r3, r3
  406aac:	f083 0301 	eor.w	r3, r3, #1
  406ab0:	b2db      	uxtb	r3, r3
  406ab2:	f003 0301 	and.w	r3, r3, #1
  406ab6:	b2db      	uxtb	r3, r3
}
  406ab8:	4618      	mov	r0, r3
  406aba:	46bd      	mov	sp, r7
  406abc:	f85d 7b04 	ldr.w	r7, [sp], #4
  406ac0:	4770      	bx	lr
  406ac2:	bf00      	nop
  406ac4:	2001a2bc 	.word	0x2001a2bc

00406ac8 <rtc_get_time>:
 * \param pul_minute Current minute.
 * \param pul_second Current second.
 */
void rtc_get_time(Rtc *p_rtc, uint32_t *pul_hour, uint32_t *pul_minute,
		uint32_t *pul_second)
{
  406ac8:	b480      	push	{r7}
  406aca:	b087      	sub	sp, #28
  406acc:	af00      	add	r7, sp, #0
  406ace:	60f8      	str	r0, [r7, #12]
  406ad0:	60b9      	str	r1, [r7, #8]
  406ad2:	607a      	str	r2, [r7, #4]
  406ad4:	603b      	str	r3, [r7, #0]
	uint32_t ul_time;
	uint32_t ul_temp;

	/* Get the current RTC time (multiple reads are necessary to insure a stable value). */
	ul_time = p_rtc->RTC_TIMR;
  406ad6:	68fb      	ldr	r3, [r7, #12]
  406ad8:	689b      	ldr	r3, [r3, #8]
  406ada:	617b      	str	r3, [r7, #20]
	while (ul_time != p_rtc->RTC_TIMR) {
  406adc:	e002      	b.n	406ae4 <rtc_get_time+0x1c>
		ul_time = p_rtc->RTC_TIMR;
  406ade:	68fb      	ldr	r3, [r7, #12]
  406ae0:	689b      	ldr	r3, [r3, #8]
  406ae2:	617b      	str	r3, [r7, #20]
	while (ul_time != p_rtc->RTC_TIMR) {
  406ae4:	68fb      	ldr	r3, [r7, #12]
  406ae6:	689a      	ldr	r2, [r3, #8]
  406ae8:	697b      	ldr	r3, [r7, #20]
  406aea:	429a      	cmp	r2, r3
  406aec:	d1f7      	bne.n	406ade <rtc_get_time+0x16>
	}

	/* Hour */
	if (pul_hour) {
  406aee:	68bb      	ldr	r3, [r7, #8]
  406af0:	2b00      	cmp	r3, #0
  406af2:	d01c      	beq.n	406b2e <rtc_get_time+0x66>
		ul_temp = (ul_time & RTC_TIMR_HOUR_Msk) >> RTC_TIMR_HOUR_Pos;
  406af4:	697b      	ldr	r3, [r7, #20]
  406af6:	0c1b      	lsrs	r3, r3, #16
  406af8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  406afc:	613b      	str	r3, [r7, #16]
		*pul_hour = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  406afe:	693b      	ldr	r3, [r7, #16]
  406b00:	091a      	lsrs	r2, r3, #4
  406b02:	4613      	mov	r3, r2
  406b04:	009b      	lsls	r3, r3, #2
  406b06:	4413      	add	r3, r2
  406b08:	005b      	lsls	r3, r3, #1
  406b0a:	461a      	mov	r2, r3
  406b0c:	693b      	ldr	r3, [r7, #16]
  406b0e:	f003 030f 	and.w	r3, r3, #15
  406b12:	441a      	add	r2, r3
  406b14:	68bb      	ldr	r3, [r7, #8]
  406b16:	601a      	str	r2, [r3, #0]

		if ((ul_time & RTC_TIMR_AMPM) == RTC_TIMR_AMPM) {
  406b18:	697b      	ldr	r3, [r7, #20]
  406b1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
  406b1e:	2b00      	cmp	r3, #0
  406b20:	d005      	beq.n	406b2e <rtc_get_time+0x66>
			*pul_hour += 12;
  406b22:	68bb      	ldr	r3, [r7, #8]
  406b24:	681b      	ldr	r3, [r3, #0]
  406b26:	f103 020c 	add.w	r2, r3, #12
  406b2a:	68bb      	ldr	r3, [r7, #8]
  406b2c:	601a      	str	r2, [r3, #0]
		}
	}

	/* Minute */
	if (pul_minute) {
  406b2e:	687b      	ldr	r3, [r7, #4]
  406b30:	2b00      	cmp	r3, #0
  406b32:	d011      	beq.n	406b58 <rtc_get_time+0x90>
		ul_temp = (ul_time & RTC_TIMR_MIN_Msk) >> RTC_TIMR_MIN_Pos;
  406b34:	697b      	ldr	r3, [r7, #20]
  406b36:	0a1b      	lsrs	r3, r3, #8
  406b38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  406b3c:	613b      	str	r3, [r7, #16]
		*pul_minute = (ul_temp >> BCD_SHIFT) * BCD_FACTOR +  (ul_temp & BCD_MASK);
  406b3e:	693b      	ldr	r3, [r7, #16]
  406b40:	091a      	lsrs	r2, r3, #4
  406b42:	4613      	mov	r3, r2
  406b44:	009b      	lsls	r3, r3, #2
  406b46:	4413      	add	r3, r2
  406b48:	005b      	lsls	r3, r3, #1
  406b4a:	461a      	mov	r2, r3
  406b4c:	693b      	ldr	r3, [r7, #16]
  406b4e:	f003 030f 	and.w	r3, r3, #15
  406b52:	441a      	add	r2, r3
  406b54:	687b      	ldr	r3, [r7, #4]
  406b56:	601a      	str	r2, [r3, #0]
	}

	/* Second */
	if (pul_second) {
  406b58:	683b      	ldr	r3, [r7, #0]
  406b5a:	2b00      	cmp	r3, #0
  406b5c:	d010      	beq.n	406b80 <rtc_get_time+0xb8>
		ul_temp = (ul_time & RTC_TIMR_SEC_Msk) >> RTC_TIMR_SEC_Pos;
  406b5e:	697b      	ldr	r3, [r7, #20]
  406b60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  406b64:	613b      	str	r3, [r7, #16]
		*pul_second = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  406b66:	693b      	ldr	r3, [r7, #16]
  406b68:	091a      	lsrs	r2, r3, #4
  406b6a:	4613      	mov	r3, r2
  406b6c:	009b      	lsls	r3, r3, #2
  406b6e:	4413      	add	r3, r2
  406b70:	005b      	lsls	r3, r3, #1
  406b72:	461a      	mov	r2, r3
  406b74:	693b      	ldr	r3, [r7, #16]
  406b76:	f003 030f 	and.w	r3, r3, #15
  406b7a:	441a      	add	r2, r3
  406b7c:	683b      	ldr	r3, [r7, #0]
  406b7e:	601a      	str	r2, [r3, #0]
	}
}
  406b80:	bf00      	nop
  406b82:	371c      	adds	r7, #28
  406b84:	46bd      	mov	sp, r7
  406b86:	f85d 7b04 	ldr.w	r7, [sp], #4
  406b8a:	4770      	bx	lr

00406b8c <rtc_get_date>:
 * \param pul_day Current day.
 * \param pul_week Current day in current week.
 */
void rtc_get_date(Rtc *p_rtc, uint32_t *pul_year, uint32_t *pul_month,
		uint32_t *pul_day, uint32_t *pul_week)
{
  406b8c:	b480      	push	{r7}
  406b8e:	b089      	sub	sp, #36	; 0x24
  406b90:	af00      	add	r7, sp, #0
  406b92:	60f8      	str	r0, [r7, #12]
  406b94:	60b9      	str	r1, [r7, #8]
  406b96:	607a      	str	r2, [r7, #4]
  406b98:	603b      	str	r3, [r7, #0]
	uint32_t ul_date;
	uint32_t ul_cent;
	uint32_t ul_temp;

	/* Get the current date (multiple reads are necessary to insure a stable value). */
	ul_date = p_rtc->RTC_CALR;
  406b9a:	68fb      	ldr	r3, [r7, #12]
  406b9c:	68db      	ldr	r3, [r3, #12]
  406b9e:	61fb      	str	r3, [r7, #28]
	while (ul_date != p_rtc->RTC_CALR) {
  406ba0:	e002      	b.n	406ba8 <rtc_get_date+0x1c>
		ul_date = p_rtc->RTC_CALR;
  406ba2:	68fb      	ldr	r3, [r7, #12]
  406ba4:	68db      	ldr	r3, [r3, #12]
  406ba6:	61fb      	str	r3, [r7, #28]
	while (ul_date != p_rtc->RTC_CALR) {
  406ba8:	68fb      	ldr	r3, [r7, #12]
  406baa:	68da      	ldr	r2, [r3, #12]
  406bac:	69fb      	ldr	r3, [r7, #28]
  406bae:	429a      	cmp	r2, r3
  406bb0:	d1f7      	bne.n	406ba2 <rtc_get_date+0x16>
	}

	/* Retrieve year */
	if (pul_year) {
  406bb2:	68bb      	ldr	r3, [r7, #8]
  406bb4:	2b00      	cmp	r3, #0
  406bb6:	d024      	beq.n	406c02 <rtc_get_date+0x76>
		ul_temp = (ul_date & RTC_CALR_CENT_Msk) >> RTC_CALR_CENT_Pos;
  406bb8:	69fb      	ldr	r3, [r7, #28]
  406bba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  406bbe:	61bb      	str	r3, [r7, #24]
		ul_cent = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  406bc0:	69bb      	ldr	r3, [r7, #24]
  406bc2:	091a      	lsrs	r2, r3, #4
  406bc4:	4613      	mov	r3, r2
  406bc6:	009b      	lsls	r3, r3, #2
  406bc8:	4413      	add	r3, r2
  406bca:	005b      	lsls	r3, r3, #1
  406bcc:	461a      	mov	r2, r3
  406bce:	69bb      	ldr	r3, [r7, #24]
  406bd0:	f003 030f 	and.w	r3, r3, #15
  406bd4:	4413      	add	r3, r2
  406bd6:	617b      	str	r3, [r7, #20]
		ul_temp = (ul_date & RTC_CALR_YEAR_Msk) >> RTC_CALR_YEAR_Pos;
  406bd8:	69fb      	ldr	r3, [r7, #28]
  406bda:	0a1b      	lsrs	r3, r3, #8
  406bdc:	b2db      	uxtb	r3, r3
  406bde:	61bb      	str	r3, [r7, #24]
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
  406be0:	697b      	ldr	r3, [r7, #20]
  406be2:	2264      	movs	r2, #100	; 0x64
  406be4:	fb02 f103 	mul.w	r1, r2, r3
				(ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  406be8:	69bb      	ldr	r3, [r7, #24]
  406bea:	091a      	lsrs	r2, r3, #4
  406bec:	4613      	mov	r3, r2
  406bee:	009b      	lsls	r3, r3, #2
  406bf0:	4413      	add	r3, r2
  406bf2:	005b      	lsls	r3, r3, #1
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
  406bf4:	18ca      	adds	r2, r1, r3
				(ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  406bf6:	69bb      	ldr	r3, [r7, #24]
  406bf8:	f003 030f 	and.w	r3, r3, #15
  406bfc:	441a      	add	r2, r3
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
  406bfe:	68bb      	ldr	r3, [r7, #8]
  406c00:	601a      	str	r2, [r3, #0]
	}

	/* Retrieve month */
	if (pul_month) {
  406c02:	687b      	ldr	r3, [r7, #4]
  406c04:	2b00      	cmp	r3, #0
  406c06:	d011      	beq.n	406c2c <rtc_get_date+0xa0>
		ul_temp = (ul_date & RTC_CALR_MONTH_Msk) >> RTC_CALR_MONTH_Pos;
  406c08:	69fb      	ldr	r3, [r7, #28]
  406c0a:	0c1b      	lsrs	r3, r3, #16
  406c0c:	f003 031f 	and.w	r3, r3, #31
  406c10:	61bb      	str	r3, [r7, #24]
		*pul_month = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  406c12:	69bb      	ldr	r3, [r7, #24]
  406c14:	091a      	lsrs	r2, r3, #4
  406c16:	4613      	mov	r3, r2
  406c18:	009b      	lsls	r3, r3, #2
  406c1a:	4413      	add	r3, r2
  406c1c:	005b      	lsls	r3, r3, #1
  406c1e:	461a      	mov	r2, r3
  406c20:	69bb      	ldr	r3, [r7, #24]
  406c22:	f003 030f 	and.w	r3, r3, #15
  406c26:	441a      	add	r2, r3
  406c28:	687b      	ldr	r3, [r7, #4]
  406c2a:	601a      	str	r2, [r3, #0]
	}

	/* Retrieve day */
	if (pul_day) {
  406c2c:	683b      	ldr	r3, [r7, #0]
  406c2e:	2b00      	cmp	r3, #0
  406c30:	d011      	beq.n	406c56 <rtc_get_date+0xca>
		ul_temp = (ul_date & RTC_CALR_DATE_Msk) >> RTC_CALR_DATE_Pos;
  406c32:	69fb      	ldr	r3, [r7, #28]
  406c34:	0e1b      	lsrs	r3, r3, #24
  406c36:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  406c3a:	61bb      	str	r3, [r7, #24]
		*pul_day = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  406c3c:	69bb      	ldr	r3, [r7, #24]
  406c3e:	091a      	lsrs	r2, r3, #4
  406c40:	4613      	mov	r3, r2
  406c42:	009b      	lsls	r3, r3, #2
  406c44:	4413      	add	r3, r2
  406c46:	005b      	lsls	r3, r3, #1
  406c48:	461a      	mov	r2, r3
  406c4a:	69bb      	ldr	r3, [r7, #24]
  406c4c:	f003 030f 	and.w	r3, r3, #15
  406c50:	441a      	add	r2, r3
  406c52:	683b      	ldr	r3, [r7, #0]
  406c54:	601a      	str	r2, [r3, #0]
	}

	/* Retrieve week */
	if (pul_week) {
  406c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
  406c58:	2b00      	cmp	r3, #0
  406c5a:	d005      	beq.n	406c68 <rtc_get_date+0xdc>
		*pul_week = ((ul_date & RTC_CALR_DAY_Msk) >> RTC_CALR_DAY_Pos);
  406c5c:	69fb      	ldr	r3, [r7, #28]
  406c5e:	0d5b      	lsrs	r3, r3, #21
  406c60:	f003 0207 	and.w	r2, r3, #7
  406c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
  406c66:	601a      	str	r2, [r3, #0]
	}
}
  406c68:	bf00      	nop
  406c6a:	3724      	adds	r7, #36	; 0x24
  406c6c:	46bd      	mov	sp, r7
  406c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
  406c72:	4770      	bx	lr

00406c74 <spi_set_peripheral_chip_select_value>:
 *                 The decode mode can be enabled/disabled by follow functions:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
  406c74:	b480      	push	{r7}
  406c76:	b083      	sub	sp, #12
  406c78:	af00      	add	r7, sp, #0
  406c7a:	6078      	str	r0, [r7, #4]
  406c7c:	6039      	str	r1, [r7, #0]
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  406c7e:	687b      	ldr	r3, [r7, #4]
  406c80:	685b      	ldr	r3, [r3, #4]
  406c82:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
  406c86:	687b      	ldr	r3, [r7, #4]
  406c88:	605a      	str	r2, [r3, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  406c8a:	687b      	ldr	r3, [r7, #4]
  406c8c:	685a      	ldr	r2, [r3, #4]
  406c8e:	683b      	ldr	r3, [r7, #0]
  406c90:	041b      	lsls	r3, r3, #16
  406c92:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
  406c96:	431a      	orrs	r2, r3
  406c98:	687b      	ldr	r3, [r7, #4]
  406c9a:	605a      	str	r2, [r3, #4]
}
  406c9c:	bf00      	nop
  406c9e:	370c      	adds	r7, #12
  406ca0:	46bd      	mov	sp, r7
  406ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
  406ca6:	4770      	bx	lr

00406ca8 <spi_set_delay_between_chip_select>:
 *
 * \param p_spi Pointer to an SPI instance.
 * \param ul_delay Delay between chip selects (in number of MCK clocks).
 */
void spi_set_delay_between_chip_select(Spi *p_spi, uint32_t ul_delay)
{
  406ca8:	b480      	push	{r7}
  406caa:	b083      	sub	sp, #12
  406cac:	af00      	add	r7, sp, #0
  406cae:	6078      	str	r0, [r7, #4]
  406cb0:	6039      	str	r1, [r7, #0]
	p_spi->SPI_MR &= (~SPI_MR_DLYBCS_Msk);
  406cb2:	687b      	ldr	r3, [r7, #4]
  406cb4:	685b      	ldr	r3, [r3, #4]
  406cb6:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
  406cba:	687b      	ldr	r3, [r7, #4]
  406cbc:	605a      	str	r2, [r3, #4]
	p_spi->SPI_MR |= SPI_MR_DLYBCS(ul_delay);
  406cbe:	687b      	ldr	r3, [r7, #4]
  406cc0:	685a      	ldr	r2, [r3, #4]
  406cc2:	683b      	ldr	r3, [r7, #0]
  406cc4:	061b      	lsls	r3, r3, #24
  406cc6:	431a      	orrs	r2, r3
  406cc8:	687b      	ldr	r3, [r7, #4]
  406cca:	605a      	str	r2, [r3, #4]
}
  406ccc:	bf00      	nop
  406cce:	370c      	adds	r7, #12
  406cd0:	46bd      	mov	sp, r7
  406cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
  406cd6:	4770      	bx	lr

00406cd8 <spi_set_clock_polarity>:
 * \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
  406cd8:	b480      	push	{r7}
  406cda:	b085      	sub	sp, #20
  406cdc:	af00      	add	r7, sp, #0
  406cde:	60f8      	str	r0, [r7, #12]
  406ce0:	60b9      	str	r1, [r7, #8]
  406ce2:	607a      	str	r2, [r7, #4]
	if (ul_polarity) {
  406ce4:	687b      	ldr	r3, [r7, #4]
  406ce6:	2b00      	cmp	r3, #0
  406ce8:	d00c      	beq.n	406d04 <spi_set_clock_polarity+0x2c>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  406cea:	68fb      	ldr	r3, [r7, #12]
  406cec:	68ba      	ldr	r2, [r7, #8]
  406cee:	320c      	adds	r2, #12
  406cf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  406cf4:	f043 0101 	orr.w	r1, r3, #1
  406cf8:	68fb      	ldr	r3, [r7, #12]
  406cfa:	68ba      	ldr	r2, [r7, #8]
  406cfc:	320c      	adds	r2, #12
  406cfe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
	}
}
  406d02:	e00b      	b.n	406d1c <spi_set_clock_polarity+0x44>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  406d04:	68fb      	ldr	r3, [r7, #12]
  406d06:	68ba      	ldr	r2, [r7, #8]
  406d08:	320c      	adds	r2, #12
  406d0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  406d0e:	f023 0101 	bic.w	r1, r3, #1
  406d12:	68fb      	ldr	r3, [r7, #12]
  406d14:	68ba      	ldr	r2, [r7, #8]
  406d16:	320c      	adds	r2, #12
  406d18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  406d1c:	bf00      	nop
  406d1e:	3714      	adds	r7, #20
  406d20:	46bd      	mov	sp, r7
  406d22:	f85d 7b04 	ldr.w	r7, [sp], #4
  406d26:	4770      	bx	lr

00406d28 <spi_set_clock_phase>:
 * \param p_spi Pointer to an SPI instance.
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
  406d28:	b480      	push	{r7}
  406d2a:	b085      	sub	sp, #20
  406d2c:	af00      	add	r7, sp, #0
  406d2e:	60f8      	str	r0, [r7, #12]
  406d30:	60b9      	str	r1, [r7, #8]
  406d32:	607a      	str	r2, [r7, #4]
	if (ul_phase) {
  406d34:	687b      	ldr	r3, [r7, #4]
  406d36:	2b00      	cmp	r3, #0
  406d38:	d00c      	beq.n	406d54 <spi_set_clock_phase+0x2c>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  406d3a:	68fb      	ldr	r3, [r7, #12]
  406d3c:	68ba      	ldr	r2, [r7, #8]
  406d3e:	320c      	adds	r2, #12
  406d40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  406d44:	f043 0102 	orr.w	r1, r3, #2
  406d48:	68fb      	ldr	r3, [r7, #12]
  406d4a:	68ba      	ldr	r2, [r7, #8]
  406d4c:	320c      	adds	r2, #12
  406d4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
	}
}
  406d52:	e00b      	b.n	406d6c <spi_set_clock_phase+0x44>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  406d54:	68fb      	ldr	r3, [r7, #12]
  406d56:	68ba      	ldr	r2, [r7, #8]
  406d58:	320c      	adds	r2, #12
  406d5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  406d5e:	f023 0102 	bic.w	r1, r3, #2
  406d62:	68fb      	ldr	r3, [r7, #12]
  406d64:	68ba      	ldr	r2, [r7, #8]
  406d66:	320c      	adds	r2, #12
  406d68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  406d6c:	bf00      	nop
  406d6e:	3714      	adds	r7, #20
  406d70:	46bd      	mov	sp, r7
  406d72:	f85d 7b04 	ldr.w	r7, [sp], #4
  406d76:	4770      	bx	lr

00406d78 <spi_configure_cs_behavior>:
 * \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
  406d78:	b480      	push	{r7}
  406d7a:	b085      	sub	sp, #20
  406d7c:	af00      	add	r7, sp, #0
  406d7e:	60f8      	str	r0, [r7, #12]
  406d80:	60b9      	str	r1, [r7, #8]
  406d82:	607a      	str	r2, [r7, #4]
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
  406d84:	687b      	ldr	r3, [r7, #4]
  406d86:	2b04      	cmp	r3, #4
  406d88:	d118      	bne.n	406dbc <spi_configure_cs_behavior+0x44>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  406d8a:	68fb      	ldr	r3, [r7, #12]
  406d8c:	68ba      	ldr	r2, [r7, #8]
  406d8e:	320c      	adds	r2, #12
  406d90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  406d94:	f023 0108 	bic.w	r1, r3, #8
  406d98:	68fb      	ldr	r3, [r7, #12]
  406d9a:	68ba      	ldr	r2, [r7, #8]
  406d9c:	320c      	adds	r2, #12
  406d9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
  406da2:	68fb      	ldr	r3, [r7, #12]
  406da4:	68ba      	ldr	r2, [r7, #8]
  406da6:	320c      	adds	r2, #12
  406da8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  406dac:	f043 0104 	orr.w	r1, r3, #4
  406db0:	68fb      	ldr	r3, [r7, #12]
  406db2:	68ba      	ldr	r2, [r7, #8]
  406db4:	320c      	adds	r2, #12
  406db6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
	}
}
  406dba:	e02a      	b.n	406e12 <spi_configure_cs_behavior+0x9a>
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
  406dbc:	687b      	ldr	r3, [r7, #4]
  406dbe:	2b00      	cmp	r3, #0
  406dc0:	d118      	bne.n	406df4 <spi_configure_cs_behavior+0x7c>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  406dc2:	68fb      	ldr	r3, [r7, #12]
  406dc4:	68ba      	ldr	r2, [r7, #8]
  406dc6:	320c      	adds	r2, #12
  406dc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  406dcc:	f023 0108 	bic.w	r1, r3, #8
  406dd0:	68fb      	ldr	r3, [r7, #12]
  406dd2:	68ba      	ldr	r2, [r7, #8]
  406dd4:	320c      	adds	r2, #12
  406dd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
  406dda:	68fb      	ldr	r3, [r7, #12]
  406ddc:	68ba      	ldr	r2, [r7, #8]
  406dde:	320c      	adds	r2, #12
  406de0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  406de4:	f023 0104 	bic.w	r1, r3, #4
  406de8:	68fb      	ldr	r3, [r7, #12]
  406dea:	68ba      	ldr	r2, [r7, #8]
  406dec:	320c      	adds	r2, #12
  406dee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  406df2:	e00e      	b.n	406e12 <spi_configure_cs_behavior+0x9a>
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
  406df4:	687b      	ldr	r3, [r7, #4]
  406df6:	2b08      	cmp	r3, #8
  406df8:	d10b      	bne.n	406e12 <spi_configure_cs_behavior+0x9a>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
  406dfa:	68fb      	ldr	r3, [r7, #12]
  406dfc:	68ba      	ldr	r2, [r7, #8]
  406dfe:	320c      	adds	r2, #12
  406e00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  406e04:	f043 0108 	orr.w	r1, r3, #8
  406e08:	68fb      	ldr	r3, [r7, #12]
  406e0a:	68ba      	ldr	r2, [r7, #8]
  406e0c:	320c      	adds	r2, #12
  406e0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  406e12:	bf00      	nop
  406e14:	3714      	adds	r7, #20
  406e16:	46bd      	mov	sp, r7
  406e18:	f85d 7b04 	ldr.w	r7, [sp], #4
  406e1c:	4770      	bx	lr

00406e1e <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  406e1e:	b480      	push	{r7}
  406e20:	b085      	sub	sp, #20
  406e22:	af00      	add	r7, sp, #0
  406e24:	60f8      	str	r0, [r7, #12]
  406e26:	60b9      	str	r1, [r7, #8]
  406e28:	607a      	str	r2, [r7, #4]
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  406e2a:	68fb      	ldr	r3, [r7, #12]
  406e2c:	68ba      	ldr	r2, [r7, #8]
  406e2e:	320c      	adds	r2, #12
  406e30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  406e34:	f023 01f0 	bic.w	r1, r3, #240	; 0xf0
  406e38:	68fb      	ldr	r3, [r7, #12]
  406e3a:	68ba      	ldr	r2, [r7, #8]
  406e3c:	320c      	adds	r2, #12
  406e3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  406e42:	68fb      	ldr	r3, [r7, #12]
  406e44:	68ba      	ldr	r2, [r7, #8]
  406e46:	320c      	adds	r2, #12
  406e48:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
  406e4c:	687b      	ldr	r3, [r7, #4]
  406e4e:	ea42 0103 	orr.w	r1, r2, r3
  406e52:	68fb      	ldr	r3, [r7, #12]
  406e54:	68ba      	ldr	r2, [r7, #8]
  406e56:	320c      	adds	r2, #12
  406e58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  406e5c:	bf00      	nop
  406e5e:	3714      	adds	r7, #20
  406e60:	46bd      	mov	sp, r7
  406e62:	f85d 7b04 	ldr.w	r7, [sp], #4
  406e66:	4770      	bx	lr

00406e68 <spi_calc_baudrate_div>:
 * \return Divider or error code.
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
  406e68:	b480      	push	{r7}
  406e6a:	b085      	sub	sp, #20
  406e6c:	af00      	add	r7, sp, #0
  406e6e:	6078      	str	r0, [r7, #4]
  406e70:	6039      	str	r1, [r7, #0]
	int baud_div = div_ceil(mck, baudrate);
  406e72:	683a      	ldr	r2, [r7, #0]
  406e74:	687b      	ldr	r3, [r7, #4]
  406e76:	4413      	add	r3, r2
  406e78:	1e5a      	subs	r2, r3, #1
  406e7a:	687b      	ldr	r3, [r7, #4]
  406e7c:	fbb2 f3f3 	udiv	r3, r2, r3
  406e80:	60fb      	str	r3, [r7, #12]

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  406e82:	68fb      	ldr	r3, [r7, #12]
  406e84:	2b00      	cmp	r3, #0
  406e86:	dd02      	ble.n	406e8e <spi_calc_baudrate_div+0x26>
  406e88:	68fb      	ldr	r3, [r7, #12]
  406e8a:	2bff      	cmp	r3, #255	; 0xff
  406e8c:	dd02      	ble.n	406e94 <spi_calc_baudrate_div+0x2c>
		return -1;
  406e8e:	f04f 33ff 	mov.w	r3, #4294967295
  406e92:	e001      	b.n	406e98 <spi_calc_baudrate_div+0x30>
	}

	return baud_div;
  406e94:	68fb      	ldr	r3, [r7, #12]
  406e96:	b21b      	sxth	r3, r3
}
  406e98:	4618      	mov	r0, r3
  406e9a:	3714      	adds	r7, #20
  406e9c:	46bd      	mov	sp, r7
  406e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
  406ea2:	4770      	bx	lr

00406ea4 <spi_set_baudrate_div>:
 * \retval is 0 Success.
 * \retval is -1 Error.
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
  406ea4:	b480      	push	{r7}
  406ea6:	b085      	sub	sp, #20
  406ea8:	af00      	add	r7, sp, #0
  406eaa:	60f8      	str	r0, [r7, #12]
  406eac:	60b9      	str	r1, [r7, #8]
  406eae:	4613      	mov	r3, r2
  406eb0:	71fb      	strb	r3, [r7, #7]
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider){
  406eb2:	79fb      	ldrb	r3, [r7, #7]
  406eb4:	2b00      	cmp	r3, #0
  406eb6:	d102      	bne.n	406ebe <spi_set_baudrate_div+0x1a>
        return -1;
  406eb8:	f04f 33ff 	mov.w	r3, #4294967295
  406ebc:	e01b      	b.n	406ef6 <spi_set_baudrate_div+0x52>
	}
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  406ebe:	68fb      	ldr	r3, [r7, #12]
  406ec0:	68ba      	ldr	r2, [r7, #8]
  406ec2:	320c      	adds	r2, #12
  406ec4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  406ec8:	f423 417f 	bic.w	r1, r3, #65280	; 0xff00
  406ecc:	68fb      	ldr	r3, [r7, #12]
  406ece:	68ba      	ldr	r2, [r7, #8]
  406ed0:	320c      	adds	r2, #12
  406ed2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  406ed6:	68fb      	ldr	r3, [r7, #12]
  406ed8:	68ba      	ldr	r2, [r7, #8]
  406eda:	320c      	adds	r2, #12
  406edc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
  406ee0:	79fb      	ldrb	r3, [r7, #7]
  406ee2:	021b      	lsls	r3, r3, #8
  406ee4:	b29b      	uxth	r3, r3
  406ee6:	ea42 0103 	orr.w	r1, r2, r3
  406eea:	68fb      	ldr	r3, [r7, #12]
  406eec:	68ba      	ldr	r2, [r7, #8]
  406eee:	320c      	adds	r2, #12
  406ef0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return 0;
  406ef4:	2300      	movs	r3, #0
}
  406ef6:	4618      	mov	r0, r3
  406ef8:	3714      	adds	r7, #20
  406efa:	46bd      	mov	sp, r7
  406efc:	f85d 7b04 	ldr.w	r7, [sp], #4
  406f00:	4770      	bx	lr

00406f02 <spi_set_transfer_delay>:
 * \param uc_dlybs Delay before SPCK (in number of MCK clocks).
 * \param uc_dlybct Delay between consecutive transfers (in number of MCK clocks).
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
  406f02:	b480      	push	{r7}
  406f04:	b085      	sub	sp, #20
  406f06:	af00      	add	r7, sp, #0
  406f08:	60f8      	str	r0, [r7, #12]
  406f0a:	60b9      	str	r1, [r7, #8]
  406f0c:	4611      	mov	r1, r2
  406f0e:	461a      	mov	r2, r3
  406f10:	460b      	mov	r3, r1
  406f12:	71fb      	strb	r3, [r7, #7]
  406f14:	4613      	mov	r3, r2
  406f16:	71bb      	strb	r3, [r7, #6]
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
  406f18:	68fb      	ldr	r3, [r7, #12]
  406f1a:	68ba      	ldr	r2, [r7, #8]
  406f1c:	320c      	adds	r2, #12
  406f1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  406f22:	b299      	uxth	r1, r3
  406f24:	68fb      	ldr	r3, [r7, #12]
  406f26:	68ba      	ldr	r2, [r7, #8]
  406f28:	320c      	adds	r2, #12
  406f2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
  406f2e:	68fb      	ldr	r3, [r7, #12]
  406f30:	68ba      	ldr	r2, [r7, #8]
  406f32:	320c      	adds	r2, #12
  406f34:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
  406f38:	79fb      	ldrb	r3, [r7, #7]
  406f3a:	041b      	lsls	r3, r3, #16
  406f3c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
			| SPI_CSR_DLYBCT(uc_dlybct);
  406f40:	79b9      	ldrb	r1, [r7, #6]
  406f42:	0609      	lsls	r1, r1, #24
  406f44:	430b      	orrs	r3, r1
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
  406f46:	ea42 0103 	orr.w	r1, r2, r3
  406f4a:	68fb      	ldr	r3, [r7, #12]
  406f4c:	68ba      	ldr	r2, [r7, #8]
  406f4e:	320c      	adds	r2, #12
  406f50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  406f54:	bf00      	nop
  406f56:	3714      	adds	r7, #20
  406f58:	46bd      	mov	sp, r7
  406f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
  406f5e:	4770      	bx	lr

00406f60 <supc_set_regulator_trim_user>:
 * \param value the trim value.
 *
 * \note For the trim value in 96M PLL, please read the value in flash unique identifier area.
 */
void supc_set_regulator_trim_user(Supc *p_supc, uint32_t value)
{
  406f60:	b480      	push	{r7}
  406f62:	b085      	sub	sp, #20
  406f64:	af00      	add	r7, sp, #0
  406f66:	6078      	str	r0, [r7, #4]
  406f68:	6039      	str	r1, [r7, #0]
#if SAMG54
	uint32_t ul_mr = p_supc->SUPC_MR & (~SUPC_MR_VRVDD_Msk);
	p_supc->SUPC_MR = SUPC_MR_KEY_PASSWD | ul_mr | SUPC_MR_VDDSEL_USER_VRVDD
		 | SUPC_MR_VRVDD(value);
#else
	uint32_t ul_pwmr = p_supc->SUPC_PWMR & (~(0xFu << 9));
  406f6a:	687b      	ldr	r3, [r7, #4]
  406f6c:	69db      	ldr	r3, [r3, #28]
  406f6e:	f423 53f0 	bic.w	r3, r3, #7680	; 0x1e00
  406f72:	60fb      	str	r3, [r7, #12]
	p_supc->SUPC_PWMR = SUPC_PWMR_KEY_PASSWD | ul_pwmr | SUPC_PWMR_ECPWRS
		| ((value & 0xFu) << 9);
  406f74:	683b      	ldr	r3, [r7, #0]
  406f76:	025b      	lsls	r3, r3, #9
  406f78:	f403 52f0 	and.w	r2, r3, #7680	; 0x1e00
  406f7c:	68fb      	ldr	r3, [r7, #12]
  406f7e:	4313      	orrs	r3, r2
  406f80:	f043 43b4 	orr.w	r3, r3, #1509949440	; 0x5a000000
  406f84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	p_supc->SUPC_PWMR = SUPC_PWMR_KEY_PASSWD | ul_pwmr | SUPC_PWMR_ECPWRS
  406f88:	687a      	ldr	r2, [r7, #4]
  406f8a:	61d3      	str	r3, [r2, #28]
#endif
}
  406f8c:	bf00      	nop
  406f8e:	3714      	adds	r7, #20
  406f90:	46bd      	mov	sp, r7
  406f92:	f85d 7b04 	ldr.w	r7, [sp], #4
  406f96:	4770      	bx	lr

00406f98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  406f98:	b480      	push	{r7}
  406f9a:	b083      	sub	sp, #12
  406f9c:	af00      	add	r7, sp, #0
  406f9e:	4603      	mov	r3, r0
  406fa0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
  406fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
  406fa6:	2b00      	cmp	r3, #0
  406fa8:	db0b      	blt.n	406fc2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  406faa:	4909      	ldr	r1, [pc, #36]	; (406fd0 <__NVIC_EnableIRQ+0x38>)
  406fac:	f997 3007 	ldrsb.w	r3, [r7, #7]
  406fb0:	095b      	lsrs	r3, r3, #5
  406fb2:	79fa      	ldrb	r2, [r7, #7]
  406fb4:	f002 021f 	and.w	r2, r2, #31
  406fb8:	2001      	movs	r0, #1
  406fba:	fa00 f202 	lsl.w	r2, r0, r2
  406fbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
  406fc2:	bf00      	nop
  406fc4:	370c      	adds	r7, #12
  406fc6:	46bd      	mov	sp, r7
  406fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
  406fcc:	4770      	bx	lr
  406fce:	bf00      	nop
  406fd0:	e000e100 	.word	0xe000e100

00406fd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  406fd4:	b480      	push	{r7}
  406fd6:	b083      	sub	sp, #12
  406fd8:	af00      	add	r7, sp, #0
  406fda:	4603      	mov	r3, r0
  406fdc:	6039      	str	r1, [r7, #0]
  406fde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
  406fe0:	f997 3007 	ldrsb.w	r3, [r7, #7]
  406fe4:	2b00      	cmp	r3, #0
  406fe6:	db0a      	blt.n	406ffe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  406fe8:	490d      	ldr	r1, [pc, #52]	; (407020 <__NVIC_SetPriority+0x4c>)
  406fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
  406fee:	683a      	ldr	r2, [r7, #0]
  406ff0:	b2d2      	uxtb	r2, r2
  406ff2:	0112      	lsls	r2, r2, #4
  406ff4:	b2d2      	uxtb	r2, r2
  406ff6:	440b      	add	r3, r1
  406ff8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
  406ffc:	e00a      	b.n	407014 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  406ffe:	4909      	ldr	r1, [pc, #36]	; (407024 <__NVIC_SetPriority+0x50>)
  407000:	79fb      	ldrb	r3, [r7, #7]
  407002:	f003 030f 	and.w	r3, r3, #15
  407006:	3b04      	subs	r3, #4
  407008:	683a      	ldr	r2, [r7, #0]
  40700a:	b2d2      	uxtb	r2, r2
  40700c:	0112      	lsls	r2, r2, #4
  40700e:	b2d2      	uxtb	r2, r2
  407010:	440b      	add	r3, r1
  407012:	761a      	strb	r2, [r3, #24]
}
  407014:	bf00      	nop
  407016:	370c      	adds	r7, #12
  407018:	46bd      	mov	sp, r7
  40701a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40701e:	4770      	bx	lr
  407020:	e000e100 	.word	0xe000e100
  407024:	e000ed00 	.word	0xe000ed00

00407028 <cpu_irq_save>:
{
  407028:	b480      	push	{r7}
  40702a:	b083      	sub	sp, #12
  40702c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  40702e:	f3ef 8310 	mrs	r3, PRIMASK
  407032:	607b      	str	r3, [r7, #4]
  return(result);
  407034:	687b      	ldr	r3, [r7, #4]
	volatile irqflags_t flags = cpu_irq_is_enabled();
  407036:	2b00      	cmp	r3, #0
  407038:	bf0c      	ite	eq
  40703a:	2301      	moveq	r3, #1
  40703c:	2300      	movne	r3, #0
  40703e:	b2db      	uxtb	r3, r3
  407040:	603b      	str	r3, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  407042:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  407044:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  407048:	4b04      	ldr	r3, [pc, #16]	; (40705c <cpu_irq_save+0x34>)
  40704a:	2200      	movs	r2, #0
  40704c:	701a      	strb	r2, [r3, #0]
	return flags;
  40704e:	683b      	ldr	r3, [r7, #0]
}
  407050:	4618      	mov	r0, r3
  407052:	370c      	adds	r7, #12
  407054:	46bd      	mov	sp, r7
  407056:	f85d 7b04 	ldr.w	r7, [sp], #4
  40705a:	4770      	bx	lr
  40705c:	2000025e 	.word	0x2000025e

00407060 <cpu_irq_is_enabled_flags>:
{
  407060:	b480      	push	{r7}
  407062:	b083      	sub	sp, #12
  407064:	af00      	add	r7, sp, #0
  407066:	6078      	str	r0, [r7, #4]
	return (flags);
  407068:	687b      	ldr	r3, [r7, #4]
  40706a:	2b00      	cmp	r3, #0
  40706c:	bf14      	ite	ne
  40706e:	2301      	movne	r3, #1
  407070:	2300      	moveq	r3, #0
  407072:	b2db      	uxtb	r3, r3
}
  407074:	4618      	mov	r0, r3
  407076:	370c      	adds	r7, #12
  407078:	46bd      	mov	sp, r7
  40707a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40707e:	4770      	bx	lr

00407080 <cpu_irq_restore>:
{
  407080:	b580      	push	{r7, lr}
  407082:	b082      	sub	sp, #8
  407084:	af00      	add	r7, sp, #0
  407086:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
  407088:	6878      	ldr	r0, [r7, #4]
  40708a:	4b07      	ldr	r3, [pc, #28]	; (4070a8 <cpu_irq_restore+0x28>)
  40708c:	4798      	blx	r3
  40708e:	4603      	mov	r3, r0
  407090:	2b00      	cmp	r3, #0
  407092:	d005      	beq.n	4070a0 <cpu_irq_restore+0x20>
		cpu_irq_enable();
  407094:	4b05      	ldr	r3, [pc, #20]	; (4070ac <cpu_irq_restore+0x2c>)
  407096:	2201      	movs	r2, #1
  407098:	701a      	strb	r2, [r3, #0]
  40709a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40709e:	b662      	cpsie	i
}
  4070a0:	bf00      	nop
  4070a2:	3708      	adds	r7, #8
  4070a4:	46bd      	mov	sp, r7
  4070a6:	bd80      	pop	{r7, pc}
  4070a8:	00407061 	.word	0x00407061
  4070ac:	2000025e 	.word	0x2000025e

004070b0 <sleepmgr_lock_mode>:
{
  4070b0:	b580      	push	{r7, lr}
  4070b2:	b084      	sub	sp, #16
  4070b4:	af00      	add	r7, sp, #0
  4070b6:	4603      	mov	r3, r0
  4070b8:	71fb      	strb	r3, [r7, #7]
	if(sleepmgr_locks[mode] >= 0xff) {
  4070ba:	79fb      	ldrb	r3, [r7, #7]
  4070bc:	4a0a      	ldr	r2, [pc, #40]	; (4070e8 <sleepmgr_lock_mode+0x38>)
  4070be:	5cd3      	ldrb	r3, [r2, r3]
  4070c0:	2bff      	cmp	r3, #255	; 0xff
  4070c2:	d100      	bne.n	4070c6 <sleepmgr_lock_mode+0x16>
		while (true) {
  4070c4:	e7fe      	b.n	4070c4 <sleepmgr_lock_mode+0x14>
	flags = cpu_irq_save();
  4070c6:	4b09      	ldr	r3, [pc, #36]	; (4070ec <sleepmgr_lock_mode+0x3c>)
  4070c8:	4798      	blx	r3
  4070ca:	60f8      	str	r0, [r7, #12]
	++sleepmgr_locks[mode];
  4070cc:	79fb      	ldrb	r3, [r7, #7]
  4070ce:	4a06      	ldr	r2, [pc, #24]	; (4070e8 <sleepmgr_lock_mode+0x38>)
  4070d0:	5cd2      	ldrb	r2, [r2, r3]
  4070d2:	3201      	adds	r2, #1
  4070d4:	b2d1      	uxtb	r1, r2
  4070d6:	4a04      	ldr	r2, [pc, #16]	; (4070e8 <sleepmgr_lock_mode+0x38>)
  4070d8:	54d1      	strb	r1, [r2, r3]
	cpu_irq_restore(flags);
  4070da:	68f8      	ldr	r0, [r7, #12]
  4070dc:	4b04      	ldr	r3, [pc, #16]	; (4070f0 <sleepmgr_lock_mode+0x40>)
  4070de:	4798      	blx	r3
}
  4070e0:	bf00      	nop
  4070e2:	3710      	adds	r7, #16
  4070e4:	46bd      	mov	sp, r7
  4070e6:	bd80      	pop	{r7, pc}
  4070e8:	2001ab94 	.word	0x2001ab94
  4070ec:	00407029 	.word	0x00407029
  4070f0:	00407081 	.word	0x00407081

004070f4 <sleepmgr_unlock_mode>:
 * manager can put the device to sleep in the deeper sleep modes.
 *
 * \param mode Sleep mode to unlock.
 */
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
  4070f4:	b580      	push	{r7, lr}
  4070f6:	b084      	sub	sp, #16
  4070f8:	af00      	add	r7, sp, #0
  4070fa:	4603      	mov	r3, r0
  4070fc:	71fb      	strb	r3, [r7, #7]
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
  4070fe:	79fb      	ldrb	r3, [r7, #7]
  407100:	4a0a      	ldr	r2, [pc, #40]	; (40712c <sleepmgr_unlock_mode+0x38>)
  407102:	5cd3      	ldrb	r3, [r2, r3]
  407104:	2b00      	cmp	r3, #0
  407106:	d100      	bne.n	40710a <sleepmgr_unlock_mode+0x16>
		while (true) {
  407108:	e7fe      	b.n	407108 <sleepmgr_unlock_mode+0x14>
			// Check APP.
		}
	}

	// Enter a critical section
	flags = cpu_irq_save();
  40710a:	4b09      	ldr	r3, [pc, #36]	; (407130 <sleepmgr_unlock_mode+0x3c>)
  40710c:	4798      	blx	r3
  40710e:	60f8      	str	r0, [r7, #12]

	--sleepmgr_locks[mode];
  407110:	79fb      	ldrb	r3, [r7, #7]
  407112:	4a06      	ldr	r2, [pc, #24]	; (40712c <sleepmgr_unlock_mode+0x38>)
  407114:	5cd2      	ldrb	r2, [r2, r3]
  407116:	3a01      	subs	r2, #1
  407118:	b2d1      	uxtb	r1, r2
  40711a:	4a04      	ldr	r2, [pc, #16]	; (40712c <sleepmgr_unlock_mode+0x38>)
  40711c:	54d1      	strb	r1, [r2, r3]

	// Leave the critical section
	cpu_irq_restore(flags);
  40711e:	68f8      	ldr	r0, [r7, #12]
  407120:	4b04      	ldr	r3, [pc, #16]	; (407134 <sleepmgr_unlock_mode+0x40>)
  407122:	4798      	blx	r3
#else
	UNUSED(mode);
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
  407124:	bf00      	nop
  407126:	3710      	adds	r7, #16
  407128:	46bd      	mov	sp, r7
  40712a:	bd80      	pop	{r7, pc}
  40712c:	2001ab94 	.word	0x2001ab94
  407130:	00407029 	.word	0x00407029
  407134:	00407081 	.word	0x00407081

00407138 <udd_sleep_mode>:
/*! \brief Authorize or not the CPU powerdown mode
 *
 * \param b_enable   true to authorize idle mode
 */
static void udd_sleep_mode(bool b_idle)
{
  407138:	b580      	push	{r7, lr}
  40713a:	b082      	sub	sp, #8
  40713c:	af00      	add	r7, sp, #0
  40713e:	4603      	mov	r3, r0
  407140:	71fb      	strb	r3, [r7, #7]
	if (!b_idle && udd_b_idle) {
  407142:	79fb      	ldrb	r3, [r7, #7]
  407144:	f083 0301 	eor.w	r3, r3, #1
  407148:	b2db      	uxtb	r3, r3
  40714a:	2b00      	cmp	r3, #0
  40714c:	d006      	beq.n	40715c <udd_sleep_mode+0x24>
  40714e:	4b0d      	ldr	r3, [pc, #52]	; (407184 <udd_sleep_mode+0x4c>)
  407150:	781b      	ldrb	r3, [r3, #0]
  407152:	2b00      	cmp	r3, #0
  407154:	d002      	beq.n	40715c <udd_sleep_mode+0x24>
		sleepmgr_unlock_mode(UDP_SLEEP_MODE_USB_IDLE);
  407156:	2000      	movs	r0, #0
  407158:	4b0b      	ldr	r3, [pc, #44]	; (407188 <udd_sleep_mode+0x50>)
  40715a:	4798      	blx	r3
	}
	if (b_idle && !udd_b_idle) {
  40715c:	79fb      	ldrb	r3, [r7, #7]
  40715e:	2b00      	cmp	r3, #0
  407160:	d009      	beq.n	407176 <udd_sleep_mode+0x3e>
  407162:	4b08      	ldr	r3, [pc, #32]	; (407184 <udd_sleep_mode+0x4c>)
  407164:	781b      	ldrb	r3, [r3, #0]
  407166:	f083 0301 	eor.w	r3, r3, #1
  40716a:	b2db      	uxtb	r3, r3
  40716c:	2b00      	cmp	r3, #0
  40716e:	d002      	beq.n	407176 <udd_sleep_mode+0x3e>
		sleepmgr_lock_mode(UDP_SLEEP_MODE_USB_IDLE);
  407170:	2000      	movs	r0, #0
  407172:	4b06      	ldr	r3, [pc, #24]	; (40718c <udd_sleep_mode+0x54>)
  407174:	4798      	blx	r3
	}
	udd_b_idle = b_idle;
  407176:	4a03      	ldr	r2, [pc, #12]	; (407184 <udd_sleep_mode+0x4c>)
  407178:	79fb      	ldrb	r3, [r7, #7]
  40717a:	7013      	strb	r3, [r2, #0]
}
  40717c:	bf00      	nop
  40717e:	3708      	adds	r7, #8
  407180:	46bd      	mov	sp, r7
  407182:	bd80      	pop	{r7, pc}
  407184:	2001a2bd 	.word	0x2001a2bd
  407188:	004070f5 	.word	0x004070f5
  40718c:	004070b1 	.word	0x004070b1

00407190 <UDP_Handler>:
 * - control endpoint events (setup reception, end of data transfer, underflow, overflow, stall)
 * - bulk/interrupt/isochronous endpoints events (end of data transfer)
 *
 */
ISR(UDD_USB_INT_FUN)
{
  407190:	b580      	push	{r7, lr}
  407192:	af00      	add	r7, sp, #0
	/* For fast wakeup clocks restore
	 * In WAIT mode, clocks are switched to FASTRC.
	 * After wakeup clocks should be restored, before that ISR should not
	 * be served.
	 */
	if (!pmc_is_wakeup_clocks_restored() && !Is_udd_suspend()) {
  407194:	4b66      	ldr	r3, [pc, #408]	; (407330 <UDP_Handler+0x1a0>)
  407196:	4798      	blx	r3
  407198:	4603      	mov	r3, r0
  40719a:	f083 0301 	eor.w	r3, r3, #1
  40719e:	b2db      	uxtb	r3, r3
  4071a0:	2b00      	cmp	r3, #0
  4071a2:	d00c      	beq.n	4071be <UDP_Handler+0x2e>
  4071a4:	4b63      	ldr	r3, [pc, #396]	; (407334 <UDP_Handler+0x1a4>)
  4071a6:	69db      	ldr	r3, [r3, #28]
  4071a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
  4071ac:	2b00      	cmp	r3, #0
  4071ae:	d106      	bne.n	4071be <UDP_Handler+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
  4071b0:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  4071b2:	f3bf 8f5f 	dmb	sy
		cpu_irq_disable();
  4071b6:	4b60      	ldr	r3, [pc, #384]	; (407338 <UDP_Handler+0x1a8>)
  4071b8:	2200      	movs	r2, #0
  4071ba:	701a      	strb	r2, [r3, #0]
		return;
  4071bc:	e0b7      	b.n	40732e <UDP_Handler+0x19e>
	}
#endif
	/* The UDP peripheral clock in the Power Management Controller (PMC)
	   must be enabled before any read/write operations to the UDP registers
	   including the UDP_TXVC register. */
	udd_enable_periph_ck();
  4071be:	2030      	movs	r0, #48	; 0x30
  4071c0:	4b5e      	ldr	r3, [pc, #376]	; (40733c <UDP_Handler+0x1ac>)
  4071c2:	4798      	blx	r3

	if (Is_udd_sof_interrupt_enabled() && Is_udd_sof()) {
  4071c4:	4b5b      	ldr	r3, [pc, #364]	; (407334 <UDP_Handler+0x1a4>)
  4071c6:	699b      	ldr	r3, [r3, #24]
  4071c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  4071cc:	2b00      	cmp	r3, #0
  4071ce:	d00e      	beq.n	4071ee <UDP_Handler+0x5e>
  4071d0:	4b58      	ldr	r3, [pc, #352]	; (407334 <UDP_Handler+0x1a4>)
  4071d2:	69db      	ldr	r3, [r3, #28]
  4071d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  4071d8:	2b00      	cmp	r3, #0
  4071da:	d008      	beq.n	4071ee <UDP_Handler+0x5e>
		udd_ack_sof();
  4071dc:	4b55      	ldr	r3, [pc, #340]	; (407334 <UDP_Handler+0x1a4>)
  4071de:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4071e2:	621a      	str	r2, [r3, #32]
		udc_sof_notify();
  4071e4:	4b56      	ldr	r3, [pc, #344]	; (407340 <UDP_Handler+0x1b0>)
  4071e6:	4798      	blx	r3
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
  4071e8:	4b56      	ldr	r3, [pc, #344]	; (407344 <UDP_Handler+0x1b4>)
  4071ea:	4798      	blx	r3
#endif
		goto udd_interrupt_sof_end;
  4071ec:	e09d      	b.n	40732a <UDP_Handler+0x19a>
	}

	if (udd_ctrl_interrupt()) {
  4071ee:	4b56      	ldr	r3, [pc, #344]	; (407348 <UDP_Handler+0x1b8>)
  4071f0:	4798      	blx	r3
  4071f2:	4603      	mov	r3, r0
  4071f4:	2b00      	cmp	r3, #0
  4071f6:	f040 8095 	bne.w	407324 <UDP_Handler+0x194>
		goto udd_interrupt_end; // Interrupt acked by control endpoint managed
	}

#if (0 != USB_DEVICE_MAX_EP)
	if (udd_ep_interrupt()) {
  4071fa:	4b54      	ldr	r3, [pc, #336]	; (40734c <UDP_Handler+0x1bc>)
  4071fc:	4798      	blx	r3
  4071fe:	4603      	mov	r3, r0
  407200:	2b00      	cmp	r3, #0
  407202:	f040 8091 	bne.w	407328 <UDP_Handler+0x198>
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
	}
#endif

	if ((Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) ||
  407206:	4b4b      	ldr	r3, [pc, #300]	; (407334 <UDP_Handler+0x1a4>)
  407208:	699b      	ldr	r3, [r3, #24]
  40720a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  40720e:	2b00      	cmp	r3, #0
  407210:	d005      	beq.n	40721e <UDP_Handler+0x8e>
  407212:	4b48      	ldr	r3, [pc, #288]	; (407334 <UDP_Handler+0x1a4>)
  407214:	69db      	ldr	r3, [r3, #28]
  407216:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  40721a:	2b00      	cmp	r3, #0
  40721c:	d117      	bne.n	40724e <UDP_Handler+0xbe>
		(Is_udd_resume_interrupt_enabled() && Is_udd_resume()) ||
  40721e:	4b45      	ldr	r3, [pc, #276]	; (407334 <UDP_Handler+0x1a4>)
  407220:	699b      	ldr	r3, [r3, #24]
  407222:	f403 7300 	and.w	r3, r3, #512	; 0x200
	if ((Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) ||
  407226:	2b00      	cmp	r3, #0
  407228:	d005      	beq.n	407236 <UDP_Handler+0xa6>
		(Is_udd_resume_interrupt_enabled() && Is_udd_resume()) ||
  40722a:	4b42      	ldr	r3, [pc, #264]	; (407334 <UDP_Handler+0x1a4>)
  40722c:	69db      	ldr	r3, [r3, #28]
  40722e:	f403 7300 	and.w	r3, r3, #512	; 0x200
  407232:	2b00      	cmp	r3, #0
  407234:	d10b      	bne.n	40724e <UDP_Handler+0xbe>
		(Is_udd_ext_resume_interrupt_enabled() && Is_udd_ext_resume())) {
  407236:	4b3f      	ldr	r3, [pc, #252]	; (407334 <UDP_Handler+0x1a4>)
  407238:	699b      	ldr	r3, [r3, #24]
  40723a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
		(Is_udd_resume_interrupt_enabled() && Is_udd_resume()) ||
  40723e:	2b00      	cmp	r3, #0
  407240:	d01f      	beq.n	407282 <UDP_Handler+0xf2>
		(Is_udd_ext_resume_interrupt_enabled() && Is_udd_ext_resume())) {
  407242:	4b3c      	ldr	r3, [pc, #240]	; (407334 <UDP_Handler+0x1a4>)
  407244:	69db      	ldr	r3, [r3, #28]
  407246:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  40724a:	2b00      	cmp	r3, #0
  40724c:	d019      	beq.n	407282 <UDP_Handler+0xf2>
		// Ack wakeup interrupt and enable suspend interrupt
		udd_ack_wakeups();
  40724e:	4b39      	ldr	r3, [pc, #228]	; (407334 <UDP_Handler+0x1a4>)
  407250:	f44f 5218 	mov.w	r2, #9728	; 0x2600
  407254:	621a      	str	r2, [r3, #32]
		// Do resume operations
		udd_disable_wakeups();
  407256:	4b37      	ldr	r3, [pc, #220]	; (407334 <UDP_Handler+0x1a4>)
  407258:	f44f 5218 	mov.w	r2, #9728	; 0x2600
  40725c:	615a      	str	r2, [r3, #20]

		udd_sleep_mode(true); // Enter in IDLE mode
  40725e:	2001      	movs	r0, #1
  407260:	4b3b      	ldr	r3, [pc, #236]	; (407350 <UDP_Handler+0x1c0>)
  407262:	4798      	blx	r3
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
  407264:	4b3b      	ldr	r3, [pc, #236]	; (407354 <UDP_Handler+0x1c4>)
  407266:	4798      	blx	r3
#endif
		udd_ack_suspend();
  407268:	4b32      	ldr	r3, [pc, #200]	; (407334 <UDP_Handler+0x1a4>)
  40726a:	f44f 7280 	mov.w	r2, #256	; 0x100
  40726e:	621a      	str	r2, [r3, #32]
		udd_enable_suspend_interrupt();
  407270:	4b30      	ldr	r3, [pc, #192]	; (407334 <UDP_Handler+0x1a4>)
  407272:	f44f 7280 	mov.w	r2, #256	; 0x100
  407276:	611a      	str	r2, [r3, #16]
		udd_enable_sof_interrupt();
  407278:	4b2e      	ldr	r3, [pc, #184]	; (407334 <UDP_Handler+0x1a4>)
  40727a:	f44f 6200 	mov.w	r2, #2048	; 0x800
  40727e:	611a      	str	r2, [r3, #16]
		goto udd_interrupt_end;
  407280:	e053      	b.n	40732a <UDP_Handler+0x19a>
	}

	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
  407282:	4b2c      	ldr	r3, [pc, #176]	; (407334 <UDP_Handler+0x1a4>)
  407284:	699b      	ldr	r3, [r3, #24]
  407286:	f403 7380 	and.w	r3, r3, #256	; 0x100
  40728a:	2b00      	cmp	r3, #0
  40728c:	d022      	beq.n	4072d4 <UDP_Handler+0x144>
  40728e:	4b29      	ldr	r3, [pc, #164]	; (407334 <UDP_Handler+0x1a4>)
  407290:	69db      	ldr	r3, [r3, #28]
  407292:	f403 7380 	and.w	r3, r3, #256	; 0x100
  407296:	2b00      	cmp	r3, #0
  407298:	d01c      	beq.n	4072d4 <UDP_Handler+0x144>
		// Ack suspend interrupt and enable resume interrupt
		udd_ack_suspend();
  40729a:	4b26      	ldr	r3, [pc, #152]	; (407334 <UDP_Handler+0x1a4>)
  40729c:	f44f 7280 	mov.w	r2, #256	; 0x100
  4072a0:	621a      	str	r2, [r3, #32]
		udd_disable_suspend_interrupt();
  4072a2:	4b24      	ldr	r3, [pc, #144]	; (407334 <UDP_Handler+0x1a4>)
  4072a4:	f44f 7280 	mov.w	r2, #256	; 0x100
  4072a8:	615a      	str	r2, [r3, #20]
		udd_enable_wake_up_interrupt();
  4072aa:	4b22      	ldr	r3, [pc, #136]	; (407334 <UDP_Handler+0x1a4>)
  4072ac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  4072b0:	611a      	str	r2, [r3, #16]
		udd_enable_resume_interrupt();
  4072b2:	4b20      	ldr	r3, [pc, #128]	; (407334 <UDP_Handler+0x1a4>)
  4072b4:	f44f 7200 	mov.w	r2, #512	; 0x200
  4072b8:	611a      	str	r2, [r3, #16]
		udd_enable_ext_resume_interrupt();
  4072ba:	4b1e      	ldr	r3, [pc, #120]	; (407334 <UDP_Handler+0x1a4>)
  4072bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
  4072c0:	611a      	str	r2, [r3, #16]
		udd_disable_periph_ck();
  4072c2:	2030      	movs	r0, #48	; 0x30
  4072c4:	4b24      	ldr	r3, [pc, #144]	; (407358 <UDP_Handler+0x1c8>)
  4072c6:	4798      	blx	r3

		udd_sleep_mode(false); // Enter in SUSPEND mode
  4072c8:	2000      	movs	r0, #0
  4072ca:	4b21      	ldr	r3, [pc, #132]	; (407350 <UDP_Handler+0x1c0>)
  4072cc:	4798      	blx	r3
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
  4072ce:	4b23      	ldr	r3, [pc, #140]	; (40735c <UDP_Handler+0x1cc>)
  4072d0:	4798      	blx	r3
#endif
		goto udd_interrupt_end;
  4072d2:	e02a      	b.n	40732a <UDP_Handler+0x19a>
	}
	if (Is_udd_reset()) {
  4072d4:	4b17      	ldr	r3, [pc, #92]	; (407334 <UDP_Handler+0x1a4>)
  4072d6:	69db      	ldr	r3, [r3, #28]
  4072d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
  4072dc:	2b00      	cmp	r3, #0
  4072de:	d025      	beq.n	40732c <UDP_Handler+0x19c>
		// USB bus reset detection
		udd_ack_reset();
  4072e0:	4b14      	ldr	r3, [pc, #80]	; (407334 <UDP_Handler+0x1a4>)
  4072e2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  4072e6:	621a      	str	r2, [r3, #32]

		// Abort all jobs on-going
#if (0 != USB_DEVICE_MAX_EP)
		udd_ep_job_table_kill();
  4072e8:	4b1d      	ldr	r3, [pc, #116]	; (407360 <UDP_Handler+0x1d0>)
  4072ea:	4798      	blx	r3
#endif
		// Reset USB Device Stack Core
		udc_reset();
  4072ec:	4b1d      	ldr	r3, [pc, #116]	; (407364 <UDP_Handler+0x1d4>)
  4072ee:	4798      	blx	r3
		// Reset device state
		udd_disable_address_state();
  4072f0:	4a10      	ldr	r2, [pc, #64]	; (407334 <UDP_Handler+0x1a4>)
  4072f2:	4b10      	ldr	r3, [pc, #64]	; (407334 <UDP_Handler+0x1a4>)
  4072f4:	685b      	ldr	r3, [r3, #4]
  4072f6:	f023 0301 	bic.w	r3, r3, #1
  4072fa:	6053      	str	r3, [r2, #4]
		udd_disable_configured_state();
  4072fc:	4a0d      	ldr	r2, [pc, #52]	; (407334 <UDP_Handler+0x1a4>)
  4072fe:	4b0d      	ldr	r3, [pc, #52]	; (407334 <UDP_Handler+0x1a4>)
  407300:	685b      	ldr	r3, [r3, #4]
  407302:	f023 0302 	bic.w	r3, r3, #2
  407306:	6053      	str	r3, [r2, #4]
		// Reset endpoint control
		udd_reset_ep_ctrl();
  407308:	4b17      	ldr	r3, [pc, #92]	; (407368 <UDP_Handler+0x1d8>)
  40730a:	4798      	blx	r3
		// Reset endpoint control management
		udd_ctrl_init();
  40730c:	4b17      	ldr	r3, [pc, #92]	; (40736c <UDP_Handler+0x1dc>)
  40730e:	4798      	blx	r3
		// After a USB reset, the suspend and SOF interrupt masks has been reseted
		// Thus, re-enable these
		udd_enable_suspend_interrupt();
  407310:	4b08      	ldr	r3, [pc, #32]	; (407334 <UDP_Handler+0x1a4>)
  407312:	f44f 7280 	mov.w	r2, #256	; 0x100
  407316:	611a      	str	r2, [r3, #16]
		udd_enable_sof_interrupt();
  407318:	4b06      	ldr	r3, [pc, #24]	; (407334 <UDP_Handler+0x1a4>)
  40731a:	f44f 6200 	mov.w	r2, #2048	; 0x800
  40731e:	611a      	str	r2, [r3, #16]
		goto udd_interrupt_end;
  407320:	bf00      	nop
  407322:	e002      	b.n	40732a <UDP_Handler+0x19a>
		goto udd_interrupt_end; // Interrupt acked by control endpoint managed
  407324:	bf00      	nop
  407326:	e000      	b.n	40732a <UDP_Handler+0x19a>
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
  407328:	bf00      	nop
	}

udd_interrupt_end:
udd_interrupt_sof_end:
	//printf("\r\nExit ISR(UDD_USB_INT_FUN)!\r\n");
	return;
  40732a:	bf00      	nop
  40732c:	bf00      	nop
}
  40732e:	bd80      	pop	{r7, pc}
  407330:	00406a99 	.word	0x00406a99
  407334:	40044000 	.word	0x40044000
  407338:	2000025e 	.word	0x2000025e
  40733c:	0040681d 	.word	0x0040681d
  407340:	00405041 	.word	0x00405041
  407344:	0040dbe9 	.word	0x0040dbe9
  407348:	004089cd 	.word	0x004089cd
  40734c:	00409125 	.word	0x00409125
  407350:	00407139 	.word	0x00407139
  407354:	0040dbd9 	.word	0x0040dbd9
  407358:	004068a1 	.word	0x004068a1
  40735c:	0040dbc9 	.word	0x0040dbc9
  407360:	00408b35 	.word	0x00408b35
  407364:	00404fed 	.word	0x00404fed
  407368:	00408061 	.word	0x00408061
  40736c:	00408135 	.word	0x00408135

00407370 <udd_enable>:
#endif
}


void udd_enable(void)
{
  407370:	b580      	push	{r7, lr}
  407372:	b082      	sub	sp, #8
  407374:	af00      	add	r7, sp, #0
	irqflags_t flags;

	flags = cpu_irq_save();
  407376:	4b13      	ldr	r3, [pc, #76]	; (4073c4 <udd_enable+0x54>)
  407378:	4798      	blx	r3
  40737a:	6078      	str	r0, [r7, #4]

#if SAMG55
	matrix_set_usb_device();
  40737c:	4b12      	ldr	r3, [pc, #72]	; (4073c8 <udd_enable+0x58>)
  40737e:	4798      	blx	r3
#endif

	// Enable USB hardware
	udd_enable_periph_ck();
  407380:	2030      	movs	r0, #48	; 0x30
  407382:	4b12      	ldr	r3, [pc, #72]	; (4073cc <udd_enable+0x5c>)
  407384:	4798      	blx	r3
	sysclk_enable_usb();
  407386:	4b12      	ldr	r3, [pc, #72]	; (4073d0 <udd_enable+0x60>)
  407388:	4798      	blx	r3
	// Cortex, uses NVIC, no need to register IRQ handler
	NVIC_SetPriority((IRQn_Type) ID_UDP, UDD_USB_INT_LEVEL);
  40738a:	2105      	movs	r1, #5
  40738c:	2030      	movs	r0, #48	; 0x30
  40738e:	4b11      	ldr	r3, [pc, #68]	; (4073d4 <udd_enable+0x64>)
  407390:	4798      	blx	r3
	#ifdef SUPPORT_TEAM_MODIFY_UDP_DEVICE
	#else
		NVIC_EnableIRQ((IRQn_Type) ID_UDP);
  407392:	2030      	movs	r0, #48	; 0x30
  407394:	4b10      	ldr	r3, [pc, #64]	; (4073d8 <udd_enable+0x68>)
  407396:	4798      	blx	r3
	#endif

	// Reset internal variables
#if (0!=USB_DEVICE_MAX_EP)
	udd_ep_job_table_reset();
  407398:	4b10      	ldr	r3, [pc, #64]	; (4073dc <udd_enable+0x6c>)
  40739a:	4798      	blx	r3
#endif

	// Always authorize asynchronous USB interrupts to exit of sleep mode
	pmc_set_fast_startup_input(PMC_FSMR_USBAL);
  40739c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
  4073a0:	4b0f      	ldr	r3, [pc, #60]	; (4073e0 <udd_enable+0x70>)
  4073a2:	4798      	blx	r3

#ifndef UDD_NO_SLEEP_MGR
	// Initialize the sleep mode authorized for the USB suspend mode
	udd_b_idle = false;
  4073a4:	4b0f      	ldr	r3, [pc, #60]	; (4073e4 <udd_enable+0x74>)
  4073a6:	2200      	movs	r2, #0
  4073a8:	701a      	strb	r2, [r3, #0]
	sleepmgr_lock_mode(UDP_SLEEP_MODE_USB_SUSPEND);
  4073aa:	2000      	movs	r0, #0
  4073ac:	4b0e      	ldr	r3, [pc, #56]	; (4073e8 <udd_enable+0x78>)
  4073ae:	4798      	blx	r3
	if (Is_udd_vbus_high()) {
		udd_vbus_handler(USB_VBUS_PIO_ID, USB_VBUS_PIO_MASK);
	}
#else
#  ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
	udd_attach();
  4073b0:	4b0e      	ldr	r3, [pc, #56]	; (4073ec <udd_enable+0x7c>)
  4073b2:	4798      	blx	r3
#  endif
#endif

	cpu_irq_restore(flags);
  4073b4:	6878      	ldr	r0, [r7, #4]
  4073b6:	4b0e      	ldr	r3, [pc, #56]	; (4073f0 <udd_enable+0x80>)
  4073b8:	4798      	blx	r3
}
  4073ba:	bf00      	nop
  4073bc:	3708      	adds	r7, #8
  4073be:	46bd      	mov	sp, r7
  4073c0:	bd80      	pop	{r7, pc}
  4073c2:	bf00      	nop
  4073c4:	00407029 	.word	0x00407029
  4073c8:	00406135 	.word	0x00406135
  4073cc:	0040681d 	.word	0x0040681d
  4073d0:	00403149 	.word	0x00403149
  4073d4:	00406fd5 	.word	0x00406fd5
  4073d8:	00406f99 	.word	0x00406f99
  4073dc:	00408a89 	.word	0x00408a89
  4073e0:	00406a6d 	.word	0x00406a6d
  4073e4:	2001a2bd 	.word	0x2001a2bd
  4073e8:	004070b1 	.word	0x004070b1
  4073ec:	004073f5 	.word	0x004073f5
  4073f0:	00407081 	.word	0x00407081

004073f4 <udd_attach>:
	cpu_irq_restore(flags);
}


void udd_attach(void)
{
  4073f4:	b580      	push	{r7, lr}
  4073f6:	b082      	sub	sp, #8
  4073f8:	af00      	add	r7, sp, #0
	irqflags_t flags;
	flags = cpu_irq_save();
  4073fa:	4b18      	ldr	r3, [pc, #96]	; (40745c <udd_attach+0x68>)
  4073fc:	4798      	blx	r3
  4073fe:	6078      	str	r0, [r7, #4]

	// At startup the USB bus state is unknown,
	// therefore the state is considered IDLE to not miss any USB event
	udd_sleep_mode(true);
  407400:	2001      	movs	r0, #1
  407402:	4b17      	ldr	r3, [pc, #92]	; (407460 <udd_attach+0x6c>)
  407404:	4798      	blx	r3

	// Enable peripheral clock and USB clock
	udd_enable_periph_ck();
  407406:	2030      	movs	r0, #48	; 0x30
  407408:	4b16      	ldr	r3, [pc, #88]	; (407464 <udd_attach+0x70>)
  40740a:	4798      	blx	r3

	// Authorize attach if VBus is present
	udd_enable_transceiver();
  40740c:	4a16      	ldr	r2, [pc, #88]	; (407468 <udd_attach+0x74>)
  40740e:	4b16      	ldr	r3, [pc, #88]	; (407468 <udd_attach+0x74>)
  407410:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  407412:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  407416:	6753      	str	r3, [r2, #116]	; 0x74
	udd_attach_device();
  407418:	4a13      	ldr	r2, [pc, #76]	; (407468 <udd_attach+0x74>)
  40741a:	4b13      	ldr	r3, [pc, #76]	; (407468 <udd_attach+0x74>)
  40741c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  40741e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  407422:	6753      	str	r3, [r2, #116]	; 0x74

	// Enable USB line events
	udd_enable_suspend_interrupt();
  407424:	4b10      	ldr	r3, [pc, #64]	; (407468 <udd_attach+0x74>)
  407426:	f44f 7280 	mov.w	r2, #256	; 0x100
  40742a:	611a      	str	r2, [r3, #16]
	udd_enable_wake_up_interrupt();
  40742c:	4b0e      	ldr	r3, [pc, #56]	; (407468 <udd_attach+0x74>)
  40742e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  407432:	611a      	str	r2, [r3, #16]
	udd_enable_resume_interrupt();
  407434:	4b0c      	ldr	r3, [pc, #48]	; (407468 <udd_attach+0x74>)
  407436:	f44f 7200 	mov.w	r2, #512	; 0x200
  40743a:	611a      	str	r2, [r3, #16]
	udd_enable_ext_resume_interrupt();
  40743c:	4b0a      	ldr	r3, [pc, #40]	; (407468 <udd_attach+0x74>)
  40743e:	f44f 6280 	mov.w	r2, #1024	; 0x400
  407442:	611a      	str	r2, [r3, #16]
	udd_enable_sof_interrupt();
  407444:	4b08      	ldr	r3, [pc, #32]	; (407468 <udd_attach+0x74>)
  407446:	f44f 6200 	mov.w	r2, #2048	; 0x800
  40744a:	611a      	str	r2, [r3, #16]

	cpu_irq_restore(flags);
  40744c:	6878      	ldr	r0, [r7, #4]
  40744e:	4b07      	ldr	r3, [pc, #28]	; (40746c <udd_attach+0x78>)
  407450:	4798      	blx	r3
	
	#ifdef SUPPORT_TEAM_MODIFY_UDP_DEVICE
		NVIC_EnableIRQ((IRQn_Type) ID_UDP);
	#endif
}
  407452:	bf00      	nop
  407454:	3708      	adds	r7, #8
  407456:	46bd      	mov	sp, r7
  407458:	bd80      	pop	{r7, pc}
  40745a:	bf00      	nop
  40745c:	00407029 	.word	0x00407029
  407460:	00407139 	.word	0x00407139
  407464:	0040681d 	.word	0x0040681d
  407468:	40044000 	.word	0x40044000
  40746c:	00407081 	.word	0x00407081

00407470 <udd_is_high_speed>:
	udd_sleep_mode(false);
}


bool udd_is_high_speed(void)
{
  407470:	b480      	push	{r7}
  407472:	af00      	add	r7, sp, #0
	return false;
  407474:	2300      	movs	r3, #0
}
  407476:	4618      	mov	r0, r3
  407478:	46bd      	mov	sp, r7
  40747a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40747e:	4770      	bx	lr

00407480 <udd_set_address>:


void udd_set_address(uint8_t address)
{
  407480:	b480      	push	{r7}
  407482:	b083      	sub	sp, #12
  407484:	af00      	add	r7, sp, #0
  407486:	4603      	mov	r3, r0
  407488:	71fb      	strb	r3, [r7, #7]
	udd_disable_address_state();
  40748a:	4a15      	ldr	r2, [pc, #84]	; (4074e0 <udd_set_address+0x60>)
  40748c:	4b14      	ldr	r3, [pc, #80]	; (4074e0 <udd_set_address+0x60>)
  40748e:	685b      	ldr	r3, [r3, #4]
  407490:	f023 0301 	bic.w	r3, r3, #1
  407494:	6053      	str	r3, [r2, #4]
	udd_disable_address();
  407496:	4a12      	ldr	r2, [pc, #72]	; (4074e0 <udd_set_address+0x60>)
  407498:	4b11      	ldr	r3, [pc, #68]	; (4074e0 <udd_set_address+0x60>)
  40749a:	689b      	ldr	r3, [r3, #8]
  40749c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  4074a0:	6093      	str	r3, [r2, #8]
	if (address) {
  4074a2:	79fb      	ldrb	r3, [r7, #7]
  4074a4:	2b00      	cmp	r3, #0
  4074a6:	d015      	beq.n	4074d4 <udd_set_address+0x54>
		udd_configure_address(address);
  4074a8:	490d      	ldr	r1, [pc, #52]	; (4074e0 <udd_set_address+0x60>)
  4074aa:	4b0d      	ldr	r3, [pc, #52]	; (4074e0 <udd_set_address+0x60>)
  4074ac:	689b      	ldr	r3, [r3, #8]
  4074ae:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
  4074b2:	79fb      	ldrb	r3, [r7, #7]
  4074b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  4074b8:	4313      	orrs	r3, r2
  4074ba:	608b      	str	r3, [r1, #8]
		udd_enable_address();
  4074bc:	4a08      	ldr	r2, [pc, #32]	; (4074e0 <udd_set_address+0x60>)
  4074be:	4b08      	ldr	r3, [pc, #32]	; (4074e0 <udd_set_address+0x60>)
  4074c0:	689b      	ldr	r3, [r3, #8]
  4074c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  4074c6:	6093      	str	r3, [r2, #8]
		udd_enable_address_state();
  4074c8:	4a05      	ldr	r2, [pc, #20]	; (4074e0 <udd_set_address+0x60>)
  4074ca:	4b05      	ldr	r3, [pc, #20]	; (4074e0 <udd_set_address+0x60>)
  4074cc:	685b      	ldr	r3, [r3, #4]
  4074ce:	f043 0301 	orr.w	r3, r3, #1
  4074d2:	6053      	str	r3, [r2, #4]
	}
}
  4074d4:	bf00      	nop
  4074d6:	370c      	adds	r7, #12
  4074d8:	46bd      	mov	sp, r7
  4074da:	f85d 7b04 	ldr.w	r7, [sp], #4
  4074de:	4770      	bx	lr
  4074e0:	40044000 	.word	0x40044000

004074e4 <udd_getaddress>:


uint8_t udd_getaddress(void)
{
  4074e4:	b480      	push	{r7}
  4074e6:	af00      	add	r7, sp, #0
	if (Is_udd_address_state_enabled())
  4074e8:	4b09      	ldr	r3, [pc, #36]	; (407510 <udd_getaddress+0x2c>)
  4074ea:	685b      	ldr	r3, [r3, #4]
  4074ec:	f003 0301 	and.w	r3, r3, #1
  4074f0:	2b00      	cmp	r3, #0
  4074f2:	d006      	beq.n	407502 <udd_getaddress+0x1e>
		return udd_get_configured_address();
  4074f4:	4b06      	ldr	r3, [pc, #24]	; (407510 <udd_getaddress+0x2c>)
  4074f6:	689b      	ldr	r3, [r3, #8]
  4074f8:	b2db      	uxtb	r3, r3
  4074fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  4074fe:	b2db      	uxtb	r3, r3
  407500:	e000      	b.n	407504 <udd_getaddress+0x20>
	return 0;
  407502:	2300      	movs	r3, #0
}
  407504:	4618      	mov	r0, r3
  407506:	46bd      	mov	sp, r7
  407508:	f85d 7b04 	ldr.w	r7, [sp], #4
  40750c:	4770      	bx	lr
  40750e:	bf00      	nop
  407510:	40044000 	.word	0x40044000

00407514 <udd_get_frame_number>:


uint16_t udd_get_frame_number(void)
{
  407514:	b480      	push	{r7}
  407516:	af00      	add	r7, sp, #0
	return udd_frame_number();
  407518:	4b05      	ldr	r3, [pc, #20]	; (407530 <udd_get_frame_number+0x1c>)
  40751a:	681b      	ldr	r3, [r3, #0]
  40751c:	b29b      	uxth	r3, r3
  40751e:	f3c3 030a 	ubfx	r3, r3, #0, #11
  407522:	b29b      	uxth	r3, r3
}
  407524:	4618      	mov	r0, r3
  407526:	46bd      	mov	sp, r7
  407528:	f85d 7b04 	ldr.w	r7, [sp], #4
  40752c:	4770      	bx	lr
  40752e:	bf00      	nop
  407530:	40044000 	.word	0x40044000

00407534 <udd_get_micro_frame_number>:


uint16_t udd_get_micro_frame_number(void)
{
  407534:	b480      	push	{r7}
  407536:	af00      	add	r7, sp, #0
	return 0;
  407538:	2300      	movs	r3, #0
}
  40753a:	4618      	mov	r0, r3
  40753c:	46bd      	mov	sp, r7
  40753e:	f85d 7b04 	ldr.w	r7, [sp], #4
  407542:	4770      	bx	lr

00407544 <udd_set_setup_payload>:
	}
}


void udd_set_setup_payload( uint8_t *payload, uint16_t payload_size )
{
  407544:	b480      	push	{r7}
  407546:	b083      	sub	sp, #12
  407548:	af00      	add	r7, sp, #0
  40754a:	6078      	str	r0, [r7, #4]
  40754c:	460b      	mov	r3, r1
  40754e:	807b      	strh	r3, [r7, #2]
	udd_g_ctrlreq.payload = payload;
  407550:	4a05      	ldr	r2, [pc, #20]	; (407568 <udd_set_setup_payload+0x24>)
  407552:	687b      	ldr	r3, [r7, #4]
  407554:	6093      	str	r3, [r2, #8]
	udd_g_ctrlreq.payload_size = payload_size;
  407556:	4a04      	ldr	r2, [pc, #16]	; (407568 <udd_set_setup_payload+0x24>)
  407558:	887b      	ldrh	r3, [r7, #2]
  40755a:	8193      	strh	r3, [r2, #12]
}
  40755c:	bf00      	nop
  40755e:	370c      	adds	r7, #12
  407560:	46bd      	mov	sp, r7
  407562:	f85d 7b04 	ldr.w	r7, [sp], #4
  407566:	4770      	bx	lr
  407568:	2001aba8 	.word	0x2001aba8

0040756c <udd_ep_alloc>:


#if (0!=USB_DEVICE_MAX_EP)
bool udd_ep_alloc(udd_ep_id_t ep, uint8_t bmAttributes,
		uint16_t MaxEndpointSize)
{
  40756c:	b480      	push	{r7}
  40756e:	b087      	sub	sp, #28
  407570:	af00      	add	r7, sp, #0
  407572:	4603      	mov	r3, r0
  407574:	71fb      	strb	r3, [r7, #7]
  407576:	460b      	mov	r3, r1
  407578:	71bb      	strb	r3, [r7, #6]
  40757a:	4613      	mov	r3, r2
  40757c:	80bb      	strh	r3, [r7, #4]
	udd_ep_job_t *ptr_job;
	bool b_dir_in;
	bool b_iso;
	b_dir_in = ep & USB_EP_DIR_IN;
  40757e:	79fb      	ldrb	r3, [r7, #7]
  407580:	f003 0380 	and.w	r3, r3, #128	; 0x80
  407584:	2b00      	cmp	r3, #0
  407586:	bf14      	ite	ne
  407588:	2301      	movne	r3, #1
  40758a:	2300      	moveq	r3, #0
  40758c:	75fb      	strb	r3, [r7, #23]
	b_iso = (bmAttributes&USB_EP_TYPE_MASK) == USB_EP_TYPE_ISOCHRONOUS;
  40758e:	79bb      	ldrb	r3, [r7, #6]
  407590:	f003 0303 	and.w	r3, r3, #3
  407594:	2b01      	cmp	r3, #1
  407596:	bf0c      	ite	eq
  407598:	2301      	moveq	r3, #1
  40759a:	2300      	movne	r3, #0
  40759c:	75bb      	strb	r3, [r7, #22]
	ep = ep & USB_EP_ADDR_MASK;
  40759e:	79fb      	ldrb	r3, [r7, #7]
  4075a0:	f003 030f 	and.w	r3, r3, #15
  4075a4:	71fb      	strb	r3, [r7, #7]

	if (ep > USB_DEVICE_MAX_EP) {
  4075a6:	79fb      	ldrb	r3, [r7, #7]
  4075a8:	2b05      	cmp	r3, #5
  4075aa:	d901      	bls.n	4075b0 <udd_ep_alloc+0x44>
		return false;
  4075ac:	2300      	movs	r3, #0
  4075ae:	e0d3      	b.n	407758 <udd_ep_alloc+0x1ec>
	}
	if (Is_udd_endpoint_enabled(ep)) {
  4075b0:	4a6c      	ldr	r2, [pc, #432]	; (407764 <udd_ep_alloc+0x1f8>)
  4075b2:	79fb      	ldrb	r3, [r7, #7]
  4075b4:	330c      	adds	r3, #12
  4075b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  4075ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  4075be:	2b00      	cmp	r3, #0
  4075c0:	d001      	beq.n	4075c6 <udd_ep_alloc+0x5a>
		return false;
  4075c2:	2300      	movs	r3, #0
  4075c4:	e0c8      	b.n	407758 <udd_ep_alloc+0x1ec>
	}

	// Check parameters
	if (b_iso && (!udd_is_endpoint_support_iso(ep))) {
  4075c6:	7dbb      	ldrb	r3, [r7, #22]
  4075c8:	2b00      	cmp	r3, #0
  4075ca:	d007      	beq.n	4075dc <udd_ep_alloc+0x70>
  4075cc:	79fb      	ldrb	r3, [r7, #7]
  4075ce:	2b00      	cmp	r3, #0
  4075d0:	d002      	beq.n	4075d8 <udd_ep_alloc+0x6c>
  4075d2:	79fb      	ldrb	r3, [r7, #7]
  4075d4:	2b03      	cmp	r3, #3
  4075d6:	d101      	bne.n	4075dc <udd_ep_alloc+0x70>
		return false;
  4075d8:	2300      	movs	r3, #0
  4075da:	e0bd      	b.n	407758 <udd_ep_alloc+0x1ec>
	}
	if (MaxEndpointSize > udd_get_endpoint_size_max(ep)) {
  4075dc:	88ba      	ldrh	r2, [r7, #4]
  4075de:	79fb      	ldrb	r3, [r7, #7]
  4075e0:	2b04      	cmp	r3, #4
  4075e2:	d002      	beq.n	4075ea <udd_ep_alloc+0x7e>
  4075e4:	79fb      	ldrb	r3, [r7, #7]
  4075e6:	2b05      	cmp	r3, #5
  4075e8:	d102      	bne.n	4075f0 <udd_ep_alloc+0x84>
  4075ea:	f44f 7300 	mov.w	r3, #512	; 0x200
  4075ee:	e000      	b.n	4075f2 <udd_ep_alloc+0x86>
  4075f0:	2340      	movs	r3, #64	; 0x40
  4075f2:	429a      	cmp	r2, r3
  4075f4:	dd01      	ble.n	4075fa <udd_ep_alloc+0x8e>
		return false;
  4075f6:	2300      	movs	r3, #0
  4075f8:	e0ae      	b.n	407758 <udd_ep_alloc+0x1ec>
	}
	ptr_job = &udd_ep_job[ep - 1];
  4075fa:	79fb      	ldrb	r3, [r7, #7]
  4075fc:	1e5a      	subs	r2, r3, #1
  4075fe:	4613      	mov	r3, r2
  407600:	009b      	lsls	r3, r3, #2
  407602:	4413      	add	r3, r2
  407604:	009b      	lsls	r3, r3, #2
  407606:	4a58      	ldr	r2, [pc, #352]	; (407768 <udd_ep_alloc+0x1fc>)
  407608:	4413      	add	r3, r2
  40760a:	613b      	str	r3, [r7, #16]

	// Set endpoint size
	ptr_job->size = MaxEndpointSize;
  40760c:	88bb      	ldrh	r3, [r7, #4]
  40760e:	f3c3 0309 	ubfx	r3, r3, #0, #10
  407612:	b299      	uxth	r1, r3
  407614:	693a      	ldr	r2, [r7, #16]
  407616:	8a13      	ldrh	r3, [r2, #16]
  407618:	f361 0309 	bfi	r3, r1, #0, #10
  40761c:	8213      	strh	r3, [r2, #16]
	ptr_job->b_buf_end = false;
  40761e:	693a      	ldr	r2, [r7, #16]
  407620:	7c53      	ldrb	r3, [r2, #17]
  407622:	f36f 13c7 	bfc	r3, #7, #1
  407626:	7453      	strb	r3, [r2, #17]
	ptr_job->b_stall_requested = false;
  407628:	693a      	ldr	r2, [r7, #16]
  40762a:	7c53      	ldrb	r3, [r2, #17]
  40762c:	f36f 1345 	bfc	r3, #5, #1
  407630:	7453      	strb	r3, [r2, #17]
	if (b_dir_in) {
  407632:	7dfb      	ldrb	r3, [r7, #23]
  407634:	2b00      	cmp	r3, #0
  407636:	d004      	beq.n	407642 <udd_ep_alloc+0xd6>
		// No data buffered in FIFO
		ptr_job->bank = 0;
  407638:	693a      	ldr	r2, [r7, #16]
  40763a:	7c53      	ldrb	r3, [r2, #17]
  40763c:	f36f 0383 	bfc	r3, #2, #2
  407640:	7453      	strb	r3, [r2, #17]
	}

	// Reset FIFOs
	udd_reset_endpoint(ep);
  407642:	4948      	ldr	r1, [pc, #288]	; (407764 <udd_ep_alloc+0x1f8>)
  407644:	4b47      	ldr	r3, [pc, #284]	; (407764 <udd_ep_alloc+0x1f8>)
  407646:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  407648:	79fb      	ldrb	r3, [r7, #7]
  40764a:	2001      	movs	r0, #1
  40764c:	fa00 f303 	lsl.w	r3, r0, r3
  407650:	4313      	orrs	r3, r2
  407652:	628b      	str	r3, [r1, #40]	; 0x28
  407654:	bf00      	nop
  407656:	4b43      	ldr	r3, [pc, #268]	; (407764 <udd_ep_alloc+0x1f8>)
  407658:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  40765a:	79fb      	ldrb	r3, [r7, #7]
  40765c:	2101      	movs	r1, #1
  40765e:	fa01 f303 	lsl.w	r3, r1, r3
  407662:	4013      	ands	r3, r2
  407664:	2b00      	cmp	r3, #0
  407666:	d0f6      	beq.n	407656 <udd_ep_alloc+0xea>
  407668:	493e      	ldr	r1, [pc, #248]	; (407764 <udd_ep_alloc+0x1f8>)
  40766a:	4b3e      	ldr	r3, [pc, #248]	; (407764 <udd_ep_alloc+0x1f8>)
  40766c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  40766e:	79fb      	ldrb	r3, [r7, #7]
  407670:	2001      	movs	r0, #1
  407672:	fa00 f303 	lsl.w	r3, r0, r3
  407676:	43db      	mvns	r3, r3
  407678:	4013      	ands	r3, r2
  40767a:	628b      	str	r3, [r1, #40]	; 0x28
	// Set configuration of new endpoint
	udd_configure_endpoint(ep,
  40767c:	4a39      	ldr	r2, [pc, #228]	; (407764 <udd_ep_alloc+0x1f8>)
  40767e:	79fb      	ldrb	r3, [r7, #7]
  407680:	330c      	adds	r3, #12
  407682:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  407686:	60fb      	str	r3, [r7, #12]
  407688:	68fb      	ldr	r3, [r7, #12]
  40768a:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40768e:	60fb      	str	r3, [r7, #12]
  407690:	68fb      	ldr	r3, [r7, #12]
  407692:	f423 4307 	bic.w	r3, r3, #34560	; 0x8700
  407696:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  40769a:	60fb      	str	r3, [r7, #12]
  40769c:	7dfb      	ldrb	r3, [r7, #23]
  40769e:	2b00      	cmp	r3, #0
  4076a0:	d00d      	beq.n	4076be <udd_ep_alloc+0x152>
  4076a2:	79bb      	ldrb	r3, [r7, #6]
  4076a4:	021b      	lsls	r3, r3, #8
  4076a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
  4076aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  4076ae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  4076b2:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
  4076b6:	f248 7380 	movw	r3, #34688	; 0x8780
  4076ba:	4013      	ands	r3, r2
  4076bc:	e008      	b.n	4076d0 <udd_ep_alloc+0x164>
  4076be:	79bb      	ldrb	r3, [r7, #6]
  4076c0:	021b      	lsls	r3, r3, #8
  4076c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
  4076c6:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
  4076ca:	f248 7380 	movw	r3, #34688	; 0x8780
  4076ce:	4013      	ands	r3, r2
  4076d0:	68fa      	ldr	r2, [r7, #12]
  4076d2:	4313      	orrs	r3, r2
  4076d4:	60fb      	str	r3, [r7, #12]
  4076d6:	4923      	ldr	r1, [pc, #140]	; (407764 <udd_ep_alloc+0x1f8>)
  4076d8:	79fb      	ldrb	r3, [r7, #7]
  4076da:	68fa      	ldr	r2, [r7, #12]
  4076dc:	330c      	adds	r3, #12
  4076de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  4076e2:	e006      	b.n	4076f2 <udd_ep_alloc+0x186>
  4076e4:	bf00      	nop
  4076e6:	68bb      	ldr	r3, [r7, #8]
  4076e8:	3301      	adds	r3, #1
  4076ea:	60bb      	str	r3, [r7, #8]
  4076ec:	4a1f      	ldr	r2, [pc, #124]	; (40776c <udd_ep_alloc+0x200>)
  4076ee:	4293      	cmp	r3, r2
  4076f0:	d830      	bhi.n	407754 <udd_ep_alloc+0x1e8>
  4076f2:	4a1c      	ldr	r2, [pc, #112]	; (407764 <udd_ep_alloc+0x1f8>)
  4076f4:	79fb      	ldrb	r3, [r7, #7]
  4076f6:	330c      	adds	r3, #12
  4076f8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
  4076fc:	7dfb      	ldrb	r3, [r7, #23]
  4076fe:	2b00      	cmp	r3, #0
  407700:	d00a      	beq.n	407718 <udd_ep_alloc+0x1ac>
  407702:	79bb      	ldrb	r3, [r7, #6]
  407704:	021b      	lsls	r3, r3, #8
  407706:	f403 7340 	and.w	r3, r3, #768	; 0x300
  40770a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  40770e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  407712:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  407716:	e005      	b.n	407724 <udd_ep_alloc+0x1b8>
  407718:	79bb      	ldrb	r3, [r7, #6]
  40771a:	021b      	lsls	r3, r3, #8
  40771c:	f403 7340 	and.w	r3, r3, #768	; 0x300
  407720:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  407724:	401a      	ands	r2, r3
  407726:	7dfb      	ldrb	r3, [r7, #23]
  407728:	2b00      	cmp	r3, #0
  40772a:	d00a      	beq.n	407742 <udd_ep_alloc+0x1d6>
  40772c:	79bb      	ldrb	r3, [r7, #6]
  40772e:	021b      	lsls	r3, r3, #8
  407730:	f403 7340 	and.w	r3, r3, #768	; 0x300
  407734:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  407738:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  40773c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  407740:	e005      	b.n	40774e <udd_ep_alloc+0x1e2>
  407742:	79bb      	ldrb	r3, [r7, #6]
  407744:	021b      	lsls	r3, r3, #8
  407746:	f403 7340 	and.w	r3, r3, #768	; 0x300
  40774a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  40774e:	429a      	cmp	r2, r3
  407750:	d1c8      	bne.n	4076e4 <udd_ep_alloc+0x178>
  407752:	e000      	b.n	407756 <udd_ep_alloc+0x1ea>
  407754:	bf00      	nop
		(b_dir_in ? ((bmAttributes&USB_EP_TYPE_MASK) | 0x4) : (bmAttributes&USB_EP_TYPE_MASK)),
		0);
	return true;
  407756:	2301      	movs	r3, #1
}
  407758:	4618      	mov	r0, r3
  40775a:	371c      	adds	r7, #28
  40775c:	46bd      	mov	sp, r7
  40775e:	f85d 7b04 	ldr.w	r7, [sp], #4
  407762:	4770      	bx	lr
  407764:	40044000 	.word	0x40044000
  407768:	2001a2c4 	.word	0x2001a2c4
  40776c:	0001869f 	.word	0x0001869f

00407770 <udd_ep_free>:


void udd_ep_free(udd_ep_id_t ep)
{
  407770:	b580      	push	{r7, lr}
  407772:	b086      	sub	sp, #24
  407774:	af00      	add	r7, sp, #0
  407776:	4603      	mov	r3, r0
  407778:	71fb      	strb	r3, [r7, #7]
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
  40777a:	79fb      	ldrb	r3, [r7, #7]
  40777c:	f003 030f 	and.w	r3, r3, #15
  407780:	75fb      	strb	r3, [r7, #23]
	if (USB_DEVICE_MAX_EP < ep_index) {
  407782:	7dfb      	ldrb	r3, [r7, #23]
  407784:	2b05      	cmp	r3, #5
  407786:	d82b      	bhi.n	4077e0 <udd_ep_free+0x70>
		return;
	}
	udd_disable_endpoint(ep_index);
  407788:	4a17      	ldr	r2, [pc, #92]	; (4077e8 <udd_ep_free+0x78>)
  40778a:	7dfb      	ldrb	r3, [r7, #23]
  40778c:	330c      	adds	r3, #12
  40778e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  407792:	613b      	str	r3, [r7, #16]
  407794:	693b      	ldr	r3, [r7, #16]
  407796:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40779a:	613b      	str	r3, [r7, #16]
  40779c:	693b      	ldr	r3, [r7, #16]
  40779e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
  4077a2:	613b      	str	r3, [r7, #16]
  4077a4:	4910      	ldr	r1, [pc, #64]	; (4077e8 <udd_ep_free+0x78>)
  4077a6:	7dfb      	ldrb	r3, [r7, #23]
  4077a8:	693a      	ldr	r2, [r7, #16]
  4077aa:	330c      	adds	r3, #12
  4077ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  4077b0:	e006      	b.n	4077c0 <udd_ep_free+0x50>
  4077b2:	bf00      	nop
  4077b4:	68fb      	ldr	r3, [r7, #12]
  4077b6:	3301      	adds	r3, #1
  4077b8:	60fb      	str	r3, [r7, #12]
  4077ba:	4a0c      	ldr	r2, [pc, #48]	; (4077ec <udd_ep_free+0x7c>)
  4077bc:	4293      	cmp	r3, r2
  4077be:	d809      	bhi.n	4077d4 <udd_ep_free+0x64>
  4077c0:	4a09      	ldr	r2, [pc, #36]	; (4077e8 <udd_ep_free+0x78>)
  4077c2:	7dfb      	ldrb	r3, [r7, #23]
  4077c4:	330c      	adds	r3, #12
  4077c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  4077ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  4077ce:	2b00      	cmp	r3, #0
  4077d0:	d1ef      	bne.n	4077b2 <udd_ep_free+0x42>
  4077d2:	e000      	b.n	4077d6 <udd_ep_free+0x66>
  4077d4:	bf00      	nop
	udd_ep_abort_job(ep);
  4077d6:	79fb      	ldrb	r3, [r7, #7]
  4077d8:	4618      	mov	r0, r3
  4077da:	4b05      	ldr	r3, [pc, #20]	; (4077f0 <udd_ep_free+0x80>)
  4077dc:	4798      	blx	r3
  4077de:	e000      	b.n	4077e2 <udd_ep_free+0x72>
		return;
  4077e0:	bf00      	nop
}
  4077e2:	3718      	adds	r7, #24
  4077e4:	46bd      	mov	sp, r7
  4077e6:	bd80      	pop	{r7, pc}
  4077e8:	40044000 	.word	0x40044000
  4077ec:	0001869f 	.word	0x0001869f
  4077f0:	00408b79 	.word	0x00408b79

004077f4 <udd_ep_is_halted>:


bool udd_ep_is_halted(udd_ep_id_t ep)
{
  4077f4:	b480      	push	{r7}
  4077f6:	b085      	sub	sp, #20
  4077f8:	af00      	add	r7, sp, #0
  4077fa:	4603      	mov	r3, r0
  4077fc:	71fb      	strb	r3, [r7, #7]
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
  4077fe:	79fb      	ldrb	r3, [r7, #7]
  407800:	f003 030f 	and.w	r3, r3, #15
  407804:	73fb      	strb	r3, [r7, #15]
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
  407806:	7bfb      	ldrb	r3, [r7, #15]
  407808:	1e5a      	subs	r2, r3, #1
  40780a:	4613      	mov	r3, r2
  40780c:	009b      	lsls	r3, r3, #2
  40780e:	4413      	add	r3, r2
  407810:	009b      	lsls	r3, r3, #2
  407812:	4a13      	ldr	r2, [pc, #76]	; (407860 <udd_ep_is_halted+0x6c>)
  407814:	4413      	add	r3, r2
  407816:	60bb      	str	r3, [r7, #8]
	if (USB_DEVICE_MAX_EP < ep_index) {
  407818:	7bfb      	ldrb	r3, [r7, #15]
  40781a:	2b05      	cmp	r3, #5
  40781c:	d901      	bls.n	407822 <udd_ep_is_halted+0x2e>
		return false;
  40781e:	2300      	movs	r3, #0
  407820:	e017      	b.n	407852 <udd_ep_is_halted+0x5e>
	}
	return ptr_job->b_stall_requested ||
  407822:	68bb      	ldr	r3, [r7, #8]
  407824:	7c5b      	ldrb	r3, [r3, #17]
  407826:	f003 0320 	and.w	r3, r3, #32
  40782a:	b2db      	uxtb	r3, r3
  40782c:	2b00      	cmp	r3, #0
  40782e:	d10a      	bne.n	407846 <udd_ep_is_halted+0x52>
			Is_udd_endpoint_stall_pending(ep & USB_EP_ADDR_MASK);
  407830:	4a0c      	ldr	r2, [pc, #48]	; (407864 <udd_ep_is_halted+0x70>)
  407832:	79fb      	ldrb	r3, [r7, #7]
  407834:	f003 030f 	and.w	r3, r3, #15
  407838:	330c      	adds	r3, #12
  40783a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  40783e:	f003 0328 	and.w	r3, r3, #40	; 0x28
	return ptr_job->b_stall_requested ||
  407842:	2b00      	cmp	r3, #0
  407844:	d001      	beq.n	40784a <udd_ep_is_halted+0x56>
  407846:	2301      	movs	r3, #1
  407848:	e000      	b.n	40784c <udd_ep_is_halted+0x58>
  40784a:	2300      	movs	r3, #0
  40784c:	f003 0301 	and.w	r3, r3, #1
  407850:	b2db      	uxtb	r3, r3
}
  407852:	4618      	mov	r0, r3
  407854:	3714      	adds	r7, #20
  407856:	46bd      	mov	sp, r7
  407858:	f85d 7b04 	ldr.w	r7, [sp], #4
  40785c:	4770      	bx	lr
  40785e:	bf00      	nop
  407860:	2001a2c4 	.word	0x2001a2c4
  407864:	40044000 	.word	0x40044000

00407868 <udd_ep_set_halt>:


bool udd_ep_set_halt(udd_ep_id_t ep)
{
  407868:	b580      	push	{r7, lr}
  40786a:	b088      	sub	sp, #32
  40786c:	af00      	add	r7, sp, #0
  40786e:	4603      	mov	r3, r0
  407870:	71fb      	strb	r3, [r7, #7]
	bool b_dir_in = ep & USB_EP_DIR_IN;
  407872:	79fb      	ldrb	r3, [r7, #7]
  407874:	f003 0380 	and.w	r3, r3, #128	; 0x80
  407878:	2b00      	cmp	r3, #0
  40787a:	bf14      	ite	ne
  40787c:	2301      	movne	r3, #1
  40787e:	2300      	moveq	r3, #0
  407880:	77fb      	strb	r3, [r7, #31]
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
  407882:	79fb      	ldrb	r3, [r7, #7]
  407884:	f003 030f 	and.w	r3, r3, #15
  407888:	77bb      	strb	r3, [r7, #30]
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
  40788a:	7fbb      	ldrb	r3, [r7, #30]
  40788c:	1e5a      	subs	r2, r3, #1
  40788e:	4613      	mov	r3, r2
  407890:	009b      	lsls	r3, r3, #2
  407892:	4413      	add	r3, r2
  407894:	009b      	lsls	r3, r3, #2
  407896:	4a44      	ldr	r2, [pc, #272]	; (4079a8 <udd_ep_set_halt+0x140>)
  407898:	4413      	add	r3, r2
  40789a:	61bb      	str	r3, [r7, #24]
	irqflags_t flags;
	if (USB_DEVICE_MAX_EP < ep_index) {
  40789c:	7fbb      	ldrb	r3, [r7, #30]
  40789e:	2b05      	cmp	r3, #5
  4078a0:	d901      	bls.n	4078a6 <udd_ep_set_halt+0x3e>
		return false;
  4078a2:	2300      	movs	r3, #0
  4078a4:	e07b      	b.n	40799e <udd_ep_set_halt+0x136>
	}
	flags = cpu_irq_save();
  4078a6:	4b41      	ldr	r3, [pc, #260]	; (4079ac <udd_ep_set_halt+0x144>)
  4078a8:	4798      	blx	r3
  4078aa:	6178      	str	r0, [r7, #20]
	if (b_dir_in && (Is_udd_transmit_ready(ep_index)
  4078ac:	7ffb      	ldrb	r3, [r7, #31]
  4078ae:	2b00      	cmp	r3, #0
  4078b0:	d01f      	beq.n	4078f2 <udd_ep_set_halt+0x8a>
  4078b2:	4a3f      	ldr	r2, [pc, #252]	; (4079b0 <udd_ep_set_halt+0x148>)
  4078b4:	7fbb      	ldrb	r3, [r7, #30]
  4078b6:	330c      	adds	r3, #12
  4078b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  4078bc:	f003 0310 	and.w	r3, r3, #16
  4078c0:	2b00      	cmp	r3, #0
  4078c2:	d106      	bne.n	4078d2 <udd_ep_set_halt+0x6a>
				|| ptr_job->bank > 1)) {
  4078c4:	69bb      	ldr	r3, [r7, #24]
  4078c6:	7c5b      	ldrb	r3, [r3, #17]
  4078c8:	f3c3 0381 	ubfx	r3, r3, #2, #2
  4078cc:	b2db      	uxtb	r3, r3
  4078ce:	2b01      	cmp	r3, #1
  4078d0:	dd0f      	ble.n	4078f2 <udd_ep_set_halt+0x8a>
		// Halt until banks sent
		ptr_job->b_stall_requested = true;
  4078d2:	69ba      	ldr	r2, [r7, #24]
  4078d4:	7c53      	ldrb	r3, [r2, #17]
  4078d6:	f043 0320 	orr.w	r3, r3, #32
  4078da:	7453      	strb	r3, [r2, #17]
		udd_enable_endpoint_interrupt(ep_index);
  4078dc:	4a34      	ldr	r2, [pc, #208]	; (4079b0 <udd_ep_set_halt+0x148>)
  4078de:	7fbb      	ldrb	r3, [r7, #30]
  4078e0:	2101      	movs	r1, #1
  4078e2:	fa01 f303 	lsl.w	r3, r1, r3
  4078e6:	6113      	str	r3, [r2, #16]
		cpu_irq_restore(flags);
  4078e8:	6978      	ldr	r0, [r7, #20]
  4078ea:	4b32      	ldr	r3, [pc, #200]	; (4079b4 <udd_ep_set_halt+0x14c>)
  4078ec:	4798      	blx	r3
		return true;
  4078ee:	2301      	movs	r3, #1
  4078f0:	e055      	b.n	40799e <udd_ep_set_halt+0x136>
	} else {
		// Stall endpoint
		#if 1
		printf("\r\n****if (b_dir_in && (Is_udd_transmit_ready(ep_index) || ptr_job->bank > 1)) else****---ep_index:%d\r\n", ep_index);
  4078f2:	7fbb      	ldrb	r3, [r7, #30]
  4078f4:	4619      	mov	r1, r3
  4078f6:	4830      	ldr	r0, [pc, #192]	; (4079b8 <udd_ep_set_halt+0x150>)
  4078f8:	4b30      	ldr	r3, [pc, #192]	; (4079bc <udd_ep_set_halt+0x154>)
  4078fa:	4798      	blx	r3
		printf("\r\n---udd_enable_stall_handshake(ep_index);---ep_index:%d\r\n", ep_index);
  4078fc:	7fbb      	ldrb	r3, [r7, #30]
  4078fe:	4619      	mov	r1, r3
  407900:	482f      	ldr	r0, [pc, #188]	; (4079c0 <udd_ep_set_halt+0x158>)
  407902:	4b2e      	ldr	r3, [pc, #184]	; (4079bc <udd_ep_set_halt+0x154>)
  407904:	4798      	blx	r3
		printf("Before processing---UDP->UDP_CSR[%d]:0x%08X\r\n", ep_index, UDP->UDP_CSR[ep_index]);
  407906:	7fb9      	ldrb	r1, [r7, #30]
  407908:	4a29      	ldr	r2, [pc, #164]	; (4079b0 <udd_ep_set_halt+0x148>)
  40790a:	7fbb      	ldrb	r3, [r7, #30]
  40790c:	330c      	adds	r3, #12
  40790e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  407912:	461a      	mov	r2, r3
  407914:	482b      	ldr	r0, [pc, #172]	; (4079c4 <udd_ep_set_halt+0x15c>)
  407916:	4b29      	ldr	r3, [pc, #164]	; (4079bc <udd_ep_set_halt+0x154>)
  407918:	4798      	blx	r3
		udd_enable_stall_handshake(ep_index);
  40791a:	4a25      	ldr	r2, [pc, #148]	; (4079b0 <udd_ep_set_halt+0x148>)
  40791c:	7fbb      	ldrb	r3, [r7, #30]
  40791e:	330c      	adds	r3, #12
  407920:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  407924:	613b      	str	r3, [r7, #16]
  407926:	693b      	ldr	r3, [r7, #16]
  407928:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40792c:	613b      	str	r3, [r7, #16]
  40792e:	693b      	ldr	r3, [r7, #16]
  407930:	f043 0320 	orr.w	r3, r3, #32
  407934:	613b      	str	r3, [r7, #16]
  407936:	491e      	ldr	r1, [pc, #120]	; (4079b0 <udd_ep_set_halt+0x148>)
  407938:	7fbb      	ldrb	r3, [r7, #30]
  40793a:	693a      	ldr	r2, [r7, #16]
  40793c:	330c      	adds	r3, #12
  40793e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  407942:	2300      	movs	r3, #0
  407944:	60fb      	str	r3, [r7, #12]
  407946:	e006      	b.n	407956 <udd_ep_set_halt+0xee>
  407948:	bf00      	nop
  40794a:	68fb      	ldr	r3, [r7, #12]
  40794c:	3301      	adds	r3, #1
  40794e:	60fb      	str	r3, [r7, #12]
  407950:	4a1d      	ldr	r2, [pc, #116]	; (4079c8 <udd_ep_set_halt+0x160>)
  407952:	4293      	cmp	r3, r2
  407954:	d809      	bhi.n	40796a <udd_ep_set_halt+0x102>
  407956:	4a16      	ldr	r2, [pc, #88]	; (4079b0 <udd_ep_set_halt+0x148>)
  407958:	7fbb      	ldrb	r3, [r7, #30]
  40795a:	330c      	adds	r3, #12
  40795c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  407960:	f003 0320 	and.w	r3, r3, #32
  407964:	2b20      	cmp	r3, #32
  407966:	d1ef      	bne.n	407948 <udd_ep_set_halt+0xe0>
  407968:	e000      	b.n	40796c <udd_ep_set_halt+0x104>
  40796a:	bf00      	nop
		printf("After processing---UDP->UDP_CSR[%d]:0x%08X\r\n", ep_index, UDP->UDP_CSR[ep_index]);
  40796c:	7fb9      	ldrb	r1, [r7, #30]
  40796e:	4a10      	ldr	r2, [pc, #64]	; (4079b0 <udd_ep_set_halt+0x148>)
  407970:	7fbb      	ldrb	r3, [r7, #30]
  407972:	330c      	adds	r3, #12
  407974:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  407978:	461a      	mov	r2, r3
  40797a:	4814      	ldr	r0, [pc, #80]	; (4079cc <udd_ep_set_halt+0x164>)
  40797c:	4b0f      	ldr	r3, [pc, #60]	; (4079bc <udd_ep_set_halt+0x154>)
  40797e:	4798      	blx	r3
			/*for (nop_count = 0; nop_count < 100; nop_count ++) {
				__NOP();
			}*/
		} while (0);
		#endif
		udd_enable_endpoint_interrupt(ep_index);
  407980:	4a0b      	ldr	r2, [pc, #44]	; (4079b0 <udd_ep_set_halt+0x148>)
  407982:	7fbb      	ldrb	r3, [r7, #30]
  407984:	2101      	movs	r1, #1
  407986:	fa01 f303 	lsl.w	r3, r1, r3
  40798a:	6113      	str	r3, [r2, #16]
		cpu_irq_restore(flags);
  40798c:	6978      	ldr	r0, [r7, #20]
  40798e:	4b09      	ldr	r3, [pc, #36]	; (4079b4 <udd_ep_set_halt+0x14c>)
  407990:	4798      	blx	r3
		printf("\r\n****Exit -- if (b_dir_in && (Is_udd_transmit_ready(ep_index) || ptr_job->bank > 1)) else****---ep_index:%d\r\n", ep_index);
  407992:	7fbb      	ldrb	r3, [r7, #30]
  407994:	4619      	mov	r1, r3
  407996:	480e      	ldr	r0, [pc, #56]	; (4079d0 <udd_ep_set_halt+0x168>)
  407998:	4b08      	ldr	r3, [pc, #32]	; (4079bc <udd_ep_set_halt+0x154>)
  40799a:	4798      	blx	r3
	}
	return true;
  40799c:	2301      	movs	r3, #1
}
  40799e:	4618      	mov	r0, r3
  4079a0:	3720      	adds	r7, #32
  4079a2:	46bd      	mov	sp, r7
  4079a4:	bd80      	pop	{r7, pc}
  4079a6:	bf00      	nop
  4079a8:	2001a2c4 	.word	0x2001a2c4
  4079ac:	00407029 	.word	0x00407029
  4079b0:	40044000 	.word	0x40044000
  4079b4:	00407081 	.word	0x00407081
  4079b8:	00410e68 	.word	0x00410e68
  4079bc:	0040e105 	.word	0x0040e105
  4079c0:	00410ed0 	.word	0x00410ed0
  4079c4:	00410f0c 	.word	0x00410f0c
  4079c8:	0001869f 	.word	0x0001869f
  4079cc:	00410f3c 	.word	0x00410f3c
  4079d0:	00410f6c 	.word	0x00410f6c

004079d4 <udd_ep_clear_halt>:


bool udd_ep_clear_halt(udd_ep_id_t ep)
{
  4079d4:	b580      	push	{r7, lr}
  4079d6:	b088      	sub	sp, #32
  4079d8:	af00      	add	r7, sp, #0
  4079da:	4603      	mov	r3, r0
  4079dc:	71fb      	strb	r3, [r7, #7]
	udd_ep_job_t *ptr_job;
	
	ep &= USB_EP_ADDR_MASK;
  4079de:	79fb      	ldrb	r3, [r7, #7]
  4079e0:	f003 030f 	and.w	r3, r3, #15
  4079e4:	71fb      	strb	r3, [r7, #7]
	if (USB_DEVICE_MAX_EP < ep)
  4079e6:	79fb      	ldrb	r3, [r7, #7]
  4079e8:	2b05      	cmp	r3, #5
  4079ea:	d901      	bls.n	4079f0 <udd_ep_clear_halt+0x1c>
		return false;
  4079ec:	2300      	movs	r3, #0
  4079ee:	e0e7      	b.n	407bc0 <udd_ep_clear_halt+0x1ec>
	ptr_job = &udd_ep_job[ep - 1];
  4079f0:	79fb      	ldrb	r3, [r7, #7]
  4079f2:	1e5a      	subs	r2, r3, #1
  4079f4:	4613      	mov	r3, r2
  4079f6:	009b      	lsls	r3, r3, #2
  4079f8:	4413      	add	r3, r2
  4079fa:	009b      	lsls	r3, r3, #2
  4079fc:	4a72      	ldr	r2, [pc, #456]	; (407bc8 <udd_ep_clear_halt+0x1f4>)
  4079fe:	4413      	add	r3, r2
  407a00:	61fb      	str	r3, [r7, #28]
	
	ptr_job->b_stall_requested = false;
  407a02:	69fa      	ldr	r2, [r7, #28]
  407a04:	7c53      	ldrb	r3, [r2, #17]
  407a06:	f36f 1345 	bfc	r3, #5, #1
  407a0a:	7453      	strb	r3, [r2, #17]
	if (Is_udd_endpoint_stall_requested(ep)) {
  407a0c:	4a6f      	ldr	r2, [pc, #444]	; (407bcc <udd_ep_clear_halt+0x1f8>)
  407a0e:	79fb      	ldrb	r3, [r7, #7]
  407a10:	330c      	adds	r3, #12
  407a12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  407a16:	f003 0320 	and.w	r3, r3, #32
  407a1a:	2b00      	cmp	r3, #0
  407a1c:	f000 80cf 	beq.w	407bbe <udd_ep_clear_halt+0x1ea>
		printf("\r\n****if (Is_udd_endpoint_stall_requested(ep)****---ep:%d\r\n", ep);
  407a20:	79fb      	ldrb	r3, [r7, #7]
  407a22:	4619      	mov	r1, r3
  407a24:	486a      	ldr	r0, [pc, #424]	; (407bd0 <udd_ep_clear_halt+0x1fc>)
  407a26:	4b6b      	ldr	r3, [pc, #428]	; (407bd4 <udd_ep_clear_halt+0x200>)
  407a28:	4798      	blx	r3
		// Remove stall
		printf("\r\n---udd_disable_stall_handshake(ep);---ep:%d\r\n", ep);
  407a2a:	79fb      	ldrb	r3, [r7, #7]
  407a2c:	4619      	mov	r1, r3
  407a2e:	486a      	ldr	r0, [pc, #424]	; (407bd8 <udd_ep_clear_halt+0x204>)
  407a30:	4b68      	ldr	r3, [pc, #416]	; (407bd4 <udd_ep_clear_halt+0x200>)
  407a32:	4798      	blx	r3
		printf("Before processing---UDP->UDP_CSR[%d]:0x%08X\r\n", ep, UDP->UDP_CSR[ep]);
  407a34:	79f9      	ldrb	r1, [r7, #7]
  407a36:	4a65      	ldr	r2, [pc, #404]	; (407bcc <udd_ep_clear_halt+0x1f8>)
  407a38:	79fb      	ldrb	r3, [r7, #7]
  407a3a:	330c      	adds	r3, #12
  407a3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  407a40:	461a      	mov	r2, r3
  407a42:	4866      	ldr	r0, [pc, #408]	; (407bdc <udd_ep_clear_halt+0x208>)
  407a44:	4b63      	ldr	r3, [pc, #396]	; (407bd4 <udd_ep_clear_halt+0x200>)
  407a46:	4798      	blx	r3
		udd_disable_stall_handshake(ep);
  407a48:	4a60      	ldr	r2, [pc, #384]	; (407bcc <udd_ep_clear_halt+0x1f8>)
  407a4a:	79fb      	ldrb	r3, [r7, #7]
  407a4c:	330c      	adds	r3, #12
  407a4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  407a52:	61bb      	str	r3, [r7, #24]
  407a54:	69bb      	ldr	r3, [r7, #24]
  407a56:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  407a5a:	61bb      	str	r3, [r7, #24]
  407a5c:	69bb      	ldr	r3, [r7, #24]
  407a5e:	f023 0320 	bic.w	r3, r3, #32
  407a62:	61bb      	str	r3, [r7, #24]
  407a64:	4959      	ldr	r1, [pc, #356]	; (407bcc <udd_ep_clear_halt+0x1f8>)
  407a66:	79fb      	ldrb	r3, [r7, #7]
  407a68:	69ba      	ldr	r2, [r7, #24]
  407a6a:	330c      	adds	r3, #12
  407a6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  407a70:	e006      	b.n	407a80 <udd_ep_clear_halt+0xac>
  407a72:	bf00      	nop
  407a74:	697b      	ldr	r3, [r7, #20]
  407a76:	3301      	adds	r3, #1
  407a78:	617b      	str	r3, [r7, #20]
  407a7a:	4a59      	ldr	r2, [pc, #356]	; (407be0 <udd_ep_clear_halt+0x20c>)
  407a7c:	4293      	cmp	r3, r2
  407a7e:	d809      	bhi.n	407a94 <udd_ep_clear_halt+0xc0>
  407a80:	4a52      	ldr	r2, [pc, #328]	; (407bcc <udd_ep_clear_halt+0x1f8>)
  407a82:	79fb      	ldrb	r3, [r7, #7]
  407a84:	330c      	adds	r3, #12
  407a86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  407a8a:	f003 0320 	and.w	r3, r3, #32
  407a8e:	2b00      	cmp	r3, #0
  407a90:	d1ef      	bne.n	407a72 <udd_ep_clear_halt+0x9e>
  407a92:	e000      	b.n	407a96 <udd_ep_clear_halt+0xc2>
  407a94:	bf00      	nop
		printf("After processing---UDP->UDP_CSR[%d]:0x%08X\r\n", ep, UDP->UDP_CSR[ep]);
  407a96:	79f9      	ldrb	r1, [r7, #7]
  407a98:	4a4c      	ldr	r2, [pc, #304]	; (407bcc <udd_ep_clear_halt+0x1f8>)
  407a9a:	79fb      	ldrb	r3, [r7, #7]
  407a9c:	330c      	adds	r3, #12
  407a9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  407aa2:	461a      	mov	r2, r3
  407aa4:	484f      	ldr	r0, [pc, #316]	; (407be4 <udd_ep_clear_halt+0x210>)
  407aa6:	4b4b      	ldr	r3, [pc, #300]	; (407bd4 <udd_ep_clear_halt+0x200>)
  407aa8:	4798      	blx	r3
		// Reset FIFO and data toggle (after stall cleared)
		printf("\r\n---udd_reset_endpoint(ep);---ep:%d\r\n", ep);
  407aaa:	79fb      	ldrb	r3, [r7, #7]
  407aac:	4619      	mov	r1, r3
  407aae:	484e      	ldr	r0, [pc, #312]	; (407be8 <udd_ep_clear_halt+0x214>)
  407ab0:	4b48      	ldr	r3, [pc, #288]	; (407bd4 <udd_ep_clear_halt+0x200>)
  407ab2:	4798      	blx	r3
		printf("Before processing---UDP->UDP_CSR[%d]:0x%08X\r\n", ep, UDP->UDP_CSR[ep]);
  407ab4:	79f9      	ldrb	r1, [r7, #7]
  407ab6:	4a45      	ldr	r2, [pc, #276]	; (407bcc <udd_ep_clear_halt+0x1f8>)
  407ab8:	79fb      	ldrb	r3, [r7, #7]
  407aba:	330c      	adds	r3, #12
  407abc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  407ac0:	461a      	mov	r2, r3
  407ac2:	4846      	ldr	r0, [pc, #280]	; (407bdc <udd_ep_clear_halt+0x208>)
  407ac4:	4b43      	ldr	r3, [pc, #268]	; (407bd4 <udd_ep_clear_halt+0x200>)
  407ac6:	4798      	blx	r3
		udd_reset_endpoint(ep);
  407ac8:	4940      	ldr	r1, [pc, #256]	; (407bcc <udd_ep_clear_halt+0x1f8>)
  407aca:	4b40      	ldr	r3, [pc, #256]	; (407bcc <udd_ep_clear_halt+0x1f8>)
  407acc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  407ace:	79fb      	ldrb	r3, [r7, #7]
  407ad0:	2001      	movs	r0, #1
  407ad2:	fa00 f303 	lsl.w	r3, r0, r3
  407ad6:	4313      	orrs	r3, r2
  407ad8:	628b      	str	r3, [r1, #40]	; 0x28
  407ada:	bf00      	nop
  407adc:	4b3b      	ldr	r3, [pc, #236]	; (407bcc <udd_ep_clear_halt+0x1f8>)
  407ade:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  407ae0:	79fb      	ldrb	r3, [r7, #7]
  407ae2:	2101      	movs	r1, #1
  407ae4:	fa01 f303 	lsl.w	r3, r1, r3
  407ae8:	4013      	ands	r3, r2
  407aea:	2b00      	cmp	r3, #0
  407aec:	d0f6      	beq.n	407adc <udd_ep_clear_halt+0x108>
  407aee:	4937      	ldr	r1, [pc, #220]	; (407bcc <udd_ep_clear_halt+0x1f8>)
  407af0:	4b36      	ldr	r3, [pc, #216]	; (407bcc <udd_ep_clear_halt+0x1f8>)
  407af2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  407af4:	79fb      	ldrb	r3, [r7, #7]
  407af6:	2001      	movs	r0, #1
  407af8:	fa00 f303 	lsl.w	r3, r0, r3
  407afc:	43db      	mvns	r3, r3
  407afe:	4013      	ands	r3, r2
  407b00:	628b      	str	r3, [r1, #40]	; 0x28
		printf("After processing---UDP->UDP_CSR[%d]:0x%08X\r\n", ep, UDP->UDP_CSR[ep]);
  407b02:	79f9      	ldrb	r1, [r7, #7]
  407b04:	4a31      	ldr	r2, [pc, #196]	; (407bcc <udd_ep_clear_halt+0x1f8>)
  407b06:	79fb      	ldrb	r3, [r7, #7]
  407b08:	330c      	adds	r3, #12
  407b0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  407b0e:	461a      	mov	r2, r3
  407b10:	4834      	ldr	r0, [pc, #208]	; (407be4 <udd_ep_clear_halt+0x210>)
  407b12:	4b30      	ldr	r3, [pc, #192]	; (407bd4 <udd_ep_clear_halt+0x200>)
  407b14:	4798      	blx	r3
		// Clear stall status
		printf("\r\n---udd_ack_stall(ep);---ep:%d\r\n", ep);
  407b16:	79fb      	ldrb	r3, [r7, #7]
  407b18:	4619      	mov	r1, r3
  407b1a:	4834      	ldr	r0, [pc, #208]	; (407bec <udd_ep_clear_halt+0x218>)
  407b1c:	4b2d      	ldr	r3, [pc, #180]	; (407bd4 <udd_ep_clear_halt+0x200>)
  407b1e:	4798      	blx	r3
		printf("Before processing---UDP->UDP_CSR[%d]:0x%08X\r\n", ep, UDP->UDP_CSR[ep]);
  407b20:	79f9      	ldrb	r1, [r7, #7]
  407b22:	4a2a      	ldr	r2, [pc, #168]	; (407bcc <udd_ep_clear_halt+0x1f8>)
  407b24:	79fb      	ldrb	r3, [r7, #7]
  407b26:	330c      	adds	r3, #12
  407b28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  407b2c:	461a      	mov	r2, r3
  407b2e:	482b      	ldr	r0, [pc, #172]	; (407bdc <udd_ep_clear_halt+0x208>)
  407b30:	4b28      	ldr	r3, [pc, #160]	; (407bd4 <udd_ep_clear_halt+0x200>)
  407b32:	4798      	blx	r3
		udd_ack_stall(ep);
  407b34:	4a25      	ldr	r2, [pc, #148]	; (407bcc <udd_ep_clear_halt+0x1f8>)
  407b36:	79fb      	ldrb	r3, [r7, #7]
  407b38:	330c      	adds	r3, #12
  407b3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  407b3e:	613b      	str	r3, [r7, #16]
  407b40:	693b      	ldr	r3, [r7, #16]
  407b42:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  407b46:	613b      	str	r3, [r7, #16]
  407b48:	693b      	ldr	r3, [r7, #16]
  407b4a:	f023 0308 	bic.w	r3, r3, #8
  407b4e:	613b      	str	r3, [r7, #16]
  407b50:	491e      	ldr	r1, [pc, #120]	; (407bcc <udd_ep_clear_halt+0x1f8>)
  407b52:	79fb      	ldrb	r3, [r7, #7]
  407b54:	693a      	ldr	r2, [r7, #16]
  407b56:	330c      	adds	r3, #12
  407b58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  407b5c:	e006      	b.n	407b6c <udd_ep_clear_halt+0x198>
  407b5e:	bf00      	nop
  407b60:	68fb      	ldr	r3, [r7, #12]
  407b62:	3301      	adds	r3, #1
  407b64:	60fb      	str	r3, [r7, #12]
  407b66:	4a1e      	ldr	r2, [pc, #120]	; (407be0 <udd_ep_clear_halt+0x20c>)
  407b68:	4293      	cmp	r3, r2
  407b6a:	d809      	bhi.n	407b80 <udd_ep_clear_halt+0x1ac>
  407b6c:	4a17      	ldr	r2, [pc, #92]	; (407bcc <udd_ep_clear_halt+0x1f8>)
  407b6e:	79fb      	ldrb	r3, [r7, #7]
  407b70:	330c      	adds	r3, #12
  407b72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  407b76:	f003 0308 	and.w	r3, r3, #8
  407b7a:	2b00      	cmp	r3, #0
  407b7c:	d1ef      	bne.n	407b5e <udd_ep_clear_halt+0x18a>
  407b7e:	e000      	b.n	407b82 <udd_ep_clear_halt+0x1ae>
  407b80:	bf00      	nop
		printf("After processing---UDP->UDP_CSR[%d]:0x%08X\r\n", ep, UDP->UDP_CSR[ep]);
  407b82:	79f9      	ldrb	r1, [r7, #7]
  407b84:	4a11      	ldr	r2, [pc, #68]	; (407bcc <udd_ep_clear_halt+0x1f8>)
  407b86:	79fb      	ldrb	r3, [r7, #7]
  407b88:	330c      	adds	r3, #12
  407b8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  407b8e:	461a      	mov	r2, r3
  407b90:	4814      	ldr	r0, [pc, #80]	; (407be4 <udd_ep_clear_halt+0x210>)
  407b92:	4b10      	ldr	r3, [pc, #64]	; (407bd4 <udd_ep_clear_halt+0x200>)
  407b94:	4798      	blx	r3
		// If a job is register on clear halt action
		// then execute callback
		if (ptr_job->busy == true) {
  407b96:	69fb      	ldr	r3, [r7, #28]
  407b98:	7c5b      	ldrb	r3, [r3, #17]
  407b9a:	f003 0310 	and.w	r3, r3, #16
  407b9e:	b2db      	uxtb	r3, r3
  407ba0:	2b00      	cmp	r3, #0
  407ba2:	d007      	beq.n	407bb4 <udd_ep_clear_halt+0x1e0>
			ptr_job->busy = false;
  407ba4:	69fa      	ldr	r2, [r7, #28]
  407ba6:	7c53      	ldrb	r3, [r2, #17]
  407ba8:	f36f 1304 	bfc	r3, #4, #1
  407bac:	7453      	strb	r3, [r2, #17]
			ptr_job->call_nohalt();
  407bae:	69fb      	ldr	r3, [r7, #28]
  407bb0:	681b      	ldr	r3, [r3, #0]
  407bb2:	4798      	blx	r3
		}
		printf("\r\n****Exit --- if (Is_udd_endpoint_stall_requested(ep)****---ep:%d\r\n", ep);
  407bb4:	79fb      	ldrb	r3, [r7, #7]
  407bb6:	4619      	mov	r1, r3
  407bb8:	480d      	ldr	r0, [pc, #52]	; (407bf0 <udd_ep_clear_halt+0x21c>)
  407bba:	4b06      	ldr	r3, [pc, #24]	; (407bd4 <udd_ep_clear_halt+0x200>)
  407bbc:	4798      	blx	r3
	}
	return true;
  407bbe:	2301      	movs	r3, #1
}
  407bc0:	4618      	mov	r0, r3
  407bc2:	3720      	adds	r7, #32
  407bc4:	46bd      	mov	sp, r7
  407bc6:	bd80      	pop	{r7, pc}
  407bc8:	2001a2c4 	.word	0x2001a2c4
  407bcc:	40044000 	.word	0x40044000
  407bd0:	00410fdc 	.word	0x00410fdc
  407bd4:	0040e105 	.word	0x0040e105
  407bd8:	00411018 	.word	0x00411018
  407bdc:	00410f0c 	.word	0x00410f0c
  407be0:	0001869f 	.word	0x0001869f
  407be4:	00410f3c 	.word	0x00410f3c
  407be8:	00411048 	.word	0x00411048
  407bec:	00411070 	.word	0x00411070
  407bf0:	00411094 	.word	0x00411094

00407bf4 <udd_ep_run>:


bool udd_ep_run(udd_ep_id_t ep, bool b_shortpacket,
		uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
  407bf4:	b580      	push	{r7, lr}
  407bf6:	b088      	sub	sp, #32
  407bf8:	af00      	add	r7, sp, #0
  407bfa:	60ba      	str	r2, [r7, #8]
  407bfc:	607b      	str	r3, [r7, #4]
  407bfe:	4603      	mov	r3, r0
  407c00:	73fb      	strb	r3, [r7, #15]
  407c02:	460b      	mov	r3, r1
  407c04:	73bb      	strb	r3, [r7, #14]
	udd_ep_job_t *ptr_job;
	irqflags_t flags;
	bool b_dir_in = ep & USB_EP_DIR_IN;
  407c06:	7bfb      	ldrb	r3, [r7, #15]
  407c08:	f003 0380 	and.w	r3, r3, #128	; 0x80
  407c0c:	2b00      	cmp	r3, #0
  407c0e:	bf14      	ite	ne
  407c10:	2301      	movne	r3, #1
  407c12:	2300      	moveq	r3, #0
  407c14:	77fb      	strb	r3, [r7, #31]

	ep &= USB_EP_ADDR_MASK;
  407c16:	7bfb      	ldrb	r3, [r7, #15]
  407c18:	f003 030f 	and.w	r3, r3, #15
  407c1c:	73fb      	strb	r3, [r7, #15]
	if (USB_DEVICE_MAX_EP < ep) {
  407c1e:	7bfb      	ldrb	r3, [r7, #15]
  407c20:	2b05      	cmp	r3, #5
  407c22:	d901      	bls.n	407c28 <udd_ep_run+0x34>
		return false;
  407c24:	2300      	movs	r3, #0
  407c26:	e083      	b.n	407d30 <udd_ep_run+0x13c>
	}
	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];
  407c28:	7bfb      	ldrb	r3, [r7, #15]
  407c2a:	1e5a      	subs	r2, r3, #1
  407c2c:	4613      	mov	r3, r2
  407c2e:	009b      	lsls	r3, r3, #2
  407c30:	4413      	add	r3, r2
  407c32:	009b      	lsls	r3, r3, #2
  407c34:	4a40      	ldr	r2, [pc, #256]	; (407d38 <udd_ep_run+0x144>)
  407c36:	4413      	add	r3, r2
  407c38:	61bb      	str	r3, [r7, #24]

	if ((!Is_udd_endpoint_enabled(ep))
  407c3a:	4a40      	ldr	r2, [pc, #256]	; (407d3c <udd_ep_run+0x148>)
  407c3c:	7bfb      	ldrb	r3, [r7, #15]
  407c3e:	330c      	adds	r3, #12
  407c40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  407c44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  407c48:	2b00      	cmp	r3, #0
  407c4a:	d00f      	beq.n	407c6c <udd_ep_run+0x78>
			|| ptr_job->b_stall_requested
  407c4c:	69bb      	ldr	r3, [r7, #24]
  407c4e:	7c5b      	ldrb	r3, [r3, #17]
  407c50:	f003 0320 	and.w	r3, r3, #32
  407c54:	b2db      	uxtb	r3, r3
  407c56:	2b00      	cmp	r3, #0
  407c58:	d108      	bne.n	407c6c <udd_ep_run+0x78>
			|| Is_udd_endpoint_stall_requested(ep)) {
  407c5a:	4a38      	ldr	r2, [pc, #224]	; (407d3c <udd_ep_run+0x148>)
  407c5c:	7bfb      	ldrb	r3, [r7, #15]
  407c5e:	330c      	adds	r3, #12
  407c60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  407c64:	f003 0320 	and.w	r3, r3, #32
  407c68:	2b00      	cmp	r3, #0
  407c6a:	d001      	beq.n	407c70 <udd_ep_run+0x7c>
		return false; // Endpoint is halted
  407c6c:	2300      	movs	r3, #0
  407c6e:	e05f      	b.n	407d30 <udd_ep_run+0x13c>
	}

	flags = cpu_irq_save();
  407c70:	4b33      	ldr	r3, [pc, #204]	; (407d40 <udd_ep_run+0x14c>)
  407c72:	4798      	blx	r3
  407c74:	6178      	str	r0, [r7, #20]
	if (ptr_job->busy == true) {
  407c76:	69bb      	ldr	r3, [r7, #24]
  407c78:	7c5b      	ldrb	r3, [r3, #17]
  407c7a:	f003 0310 	and.w	r3, r3, #16
  407c7e:	b2db      	uxtb	r3, r3
  407c80:	2b00      	cmp	r3, #0
  407c82:	d004      	beq.n	407c8e <udd_ep_run+0x9a>
		cpu_irq_restore(flags);
  407c84:	6978      	ldr	r0, [r7, #20]
  407c86:	4b2f      	ldr	r3, [pc, #188]	; (407d44 <udd_ep_run+0x150>)
  407c88:	4798      	blx	r3
		return false; // Job already on going
  407c8a:	2300      	movs	r3, #0
  407c8c:	e050      	b.n	407d30 <udd_ep_run+0x13c>
	}
	ptr_job->busy = true;
  407c8e:	69ba      	ldr	r2, [r7, #24]
  407c90:	7c53      	ldrb	r3, [r2, #17]
  407c92:	f043 0310 	orr.w	r3, r3, #16
  407c96:	7453      	strb	r3, [r2, #17]
	cpu_irq_restore(flags);
  407c98:	6978      	ldr	r0, [r7, #20]
  407c9a:	4b2a      	ldr	r3, [pc, #168]	; (407d44 <udd_ep_run+0x150>)
  407c9c:	4798      	blx	r3

	// No job running. Let's setup a new one.
	ptr_job->buf = buf;
  407c9e:	69bb      	ldr	r3, [r7, #24]
  407ca0:	68ba      	ldr	r2, [r7, #8]
  407ca2:	605a      	str	r2, [r3, #4]
	ptr_job->buf_size = buf_size;
  407ca4:	69bb      	ldr	r3, [r7, #24]
  407ca6:	687a      	ldr	r2, [r7, #4]
  407ca8:	609a      	str	r2, [r3, #8]
	ptr_job->buf_cnt = 0;
  407caa:	69bb      	ldr	r3, [r7, #24]
  407cac:	2200      	movs	r2, #0
  407cae:	60da      	str	r2, [r3, #12]
	ptr_job->call_trans = callback;
  407cb0:	69bb      	ldr	r3, [r7, #24]
  407cb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
  407cb4:	601a      	str	r2, [r3, #0]
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
  407cb6:	7bbb      	ldrb	r3, [r7, #14]
  407cb8:	2b00      	cmp	r3, #0
  407cba:	d102      	bne.n	407cc2 <udd_ep_run+0xce>
  407cbc:	687b      	ldr	r3, [r7, #4]
  407cbe:	2b00      	cmp	r3, #0
  407cc0:	d101      	bne.n	407cc6 <udd_ep_run+0xd2>
  407cc2:	2301      	movs	r3, #1
  407cc4:	e000      	b.n	407cc8 <udd_ep_run+0xd4>
  407cc6:	2300      	movs	r3, #0
  407cc8:	b2db      	uxtb	r3, r3
  407cca:	f003 0301 	and.w	r3, r3, #1
  407cce:	b2d9      	uxtb	r1, r3
  407cd0:	69ba      	ldr	r2, [r7, #24]
  407cd2:	7c53      	ldrb	r3, [r2, #17]
  407cd4:	f361 1386 	bfi	r3, r1, #6, #1
  407cd8:	7453      	strb	r3, [r2, #17]
	ptr_job->b_buf_end = false;
  407cda:	69ba      	ldr	r2, [r7, #24]
  407cdc:	7c53      	ldrb	r3, [r2, #17]
  407cde:	f36f 13c7 	bfc	r3, #7, #1
  407ce2:	7453      	strb	r3, [r2, #17]

	flags = cpu_irq_save();
  407ce4:	4b16      	ldr	r3, [pc, #88]	; (407d40 <udd_ep_run+0x14c>)
  407ce6:	4798      	blx	r3
  407ce8:	6178      	str	r0, [r7, #20]
	udd_enable_endpoint_interrupt(ep);
  407cea:	4a14      	ldr	r2, [pc, #80]	; (407d3c <udd_ep_run+0x148>)
  407cec:	7bfb      	ldrb	r3, [r7, #15]
  407cee:	2101      	movs	r1, #1
  407cf0:	fa01 f303 	lsl.w	r3, r1, r3
  407cf4:	6113      	str	r3, [r2, #16]
	// Request first transfer
	if (b_dir_in) {
  407cf6:	7ffb      	ldrb	r3, [r7, #31]
  407cf8:	2b00      	cmp	r3, #0
  407cfa:	d015      	beq.n	407d28 <udd_ep_run+0x134>
		if (Is_udd_in_pending(ep)) {
  407cfc:	4a0f      	ldr	r2, [pc, #60]	; (407d3c <udd_ep_run+0x148>)
  407cfe:	7bfb      	ldrb	r3, [r7, #15]
  407d00:	330c      	adds	r3, #12
  407d02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  407d06:	f003 0311 	and.w	r3, r3, #17
  407d0a:	2b00      	cmp	r3, #0
  407d0c:	d10c      	bne.n	407d28 <udd_ep_run+0x134>
			// Append more data (handled in interrupt service)
		} else {
			// Start new, try to fill 1~2 banks before handling status
			if (udd_ep_in_sent(ep, true)) {
  407d0e:	7bfb      	ldrb	r3, [r7, #15]
  407d10:	2101      	movs	r1, #1
  407d12:	4618      	mov	r0, r3
  407d14:	4b0c      	ldr	r3, [pc, #48]	; (407d48 <udd_ep_run+0x154>)
  407d16:	4798      	blx	r3
  407d18:	4603      	mov	r3, r0
  407d1a:	2b00      	cmp	r3, #0
  407d1c:	d004      	beq.n	407d28 <udd_ep_run+0x134>
				// Over one bank
				udd_ep_in_sent(ep, false);
  407d1e:	7bfb      	ldrb	r3, [r7, #15]
  407d20:	2100      	movs	r1, #0
  407d22:	4618      	mov	r0, r3
  407d24:	4b08      	ldr	r3, [pc, #32]	; (407d48 <udd_ep_run+0x154>)
  407d26:	4798      	blx	r3
			}
		}
	} else {
		// Waiting for OUT received interrupt
	}
	cpu_irq_restore(flags);
  407d28:	6978      	ldr	r0, [r7, #20]
  407d2a:	4b06      	ldr	r3, [pc, #24]	; (407d44 <udd_ep_run+0x150>)
  407d2c:	4798      	blx	r3

	return true;
  407d2e:	2301      	movs	r3, #1
}
  407d30:	4618      	mov	r0, r3
  407d32:	3720      	adds	r7, #32
  407d34:	46bd      	mov	sp, r7
  407d36:	bd80      	pop	{r7, pc}
  407d38:	2001a2c4 	.word	0x2001a2c4
  407d3c:	40044000 	.word	0x40044000
  407d40:	00407029 	.word	0x00407029
  407d44:	00407081 	.word	0x00407081
  407d48:	00408ef9 	.word	0x00408ef9

00407d4c <udd_ep_abort>:


void udd_ep_abort(udd_ep_id_t ep)
{
  407d4c:	b580      	push	{r7, lr}
  407d4e:	b08c      	sub	sp, #48	; 0x30
  407d50:	af00      	add	r7, sp, #0
  407d52:	4603      	mov	r3, r0
  407d54:	71fb      	strb	r3, [r7, #7]
	bool b_dir_in = ep & USB_EP_DIR_IN;
  407d56:	79fb      	ldrb	r3, [r7, #7]
  407d58:	f003 0380 	and.w	r3, r3, #128	; 0x80
  407d5c:	2b00      	cmp	r3, #0
  407d5e:	bf14      	ite	ne
  407d60:	2301      	movne	r3, #1
  407d62:	2300      	moveq	r3, #0
  407d64:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	irqflags_t flags;

	ep &= USB_EP_ADDR_MASK;
  407d68:	79fb      	ldrb	r3, [r7, #7]
  407d6a:	f003 030f 	and.w	r3, r3, #15
  407d6e:	71fb      	strb	r3, [r7, #7]
	if (USB_DEVICE_MAX_EP < ep)
  407d70:	79fb      	ldrb	r3, [r7, #7]
  407d72:	2b05      	cmp	r3, #5
  407d74:	f200 8111 	bhi.w	407f9a <udd_ep_abort+0x24e>
		return;

	// Disable interrupts
	flags = cpu_irq_save();
  407d78:	4b8a      	ldr	r3, [pc, #552]	; (407fa4 <udd_ep_abort+0x258>)
  407d7a:	4798      	blx	r3
  407d7c:	62b8      	str	r0, [r7, #40]	; 0x28
	udd_disable_endpoint_interrupt(ep);
  407d7e:	4a8a      	ldr	r2, [pc, #552]	; (407fa8 <udd_ep_abort+0x25c>)
  407d80:	79fb      	ldrb	r3, [r7, #7]
  407d82:	2101      	movs	r1, #1
  407d84:	fa01 f303 	lsl.w	r3, r1, r3
  407d88:	6153      	str	r3, [r2, #20]
	cpu_irq_restore(flags);
  407d8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
  407d8c:	4b87      	ldr	r3, [pc, #540]	; (407fac <udd_ep_abort+0x260>)
  407d8e:	4798      	blx	r3
	// Clear pending statuses
	if (b_dir_in) {
  407d90:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  407d94:	2b00      	cmp	r3, #0
  407d96:	f000 80d5 	beq.w	407f44 <udd_ep_abort+0x1f8>
		// Kill banks
		if (Is_udd_transmit_ready(ep)) {
  407d9a:	4a83      	ldr	r2, [pc, #524]	; (407fa8 <udd_ep_abort+0x25c>)
  407d9c:	79fb      	ldrb	r3, [r7, #7]
  407d9e:	330c      	adds	r3, #12
  407da0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  407da4:	f003 0310 	and.w	r3, r3, #16
  407da8:	2b00      	cmp	r3, #0
  407daa:	f000 8091 	beq.w	407ed0 <udd_ep_abort+0x184>
			udd_kill_data_in_fifo(ep,
  407dae:	79fb      	ldrb	r3, [r7, #7]
  407db0:	2b00      	cmp	r3, #0
  407db2:	d066      	beq.n	407e82 <udd_ep_abort+0x136>
  407db4:	79fb      	ldrb	r3, [r7, #7]
  407db6:	2b03      	cmp	r3, #3
  407db8:	d063      	beq.n	407e82 <udd_ep_abort+0x136>
  407dba:	4a7b      	ldr	r2, [pc, #492]	; (407fa8 <udd_ep_abort+0x25c>)
  407dbc:	79fb      	ldrb	r3, [r7, #7]
  407dbe:	330c      	adds	r3, #12
  407dc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  407dc4:	627b      	str	r3, [r7, #36]	; 0x24
  407dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  407dc8:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  407dcc:	627b      	str	r3, [r7, #36]	; 0x24
  407dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  407dd0:	f023 0310 	bic.w	r3, r3, #16
  407dd4:	627b      	str	r3, [r7, #36]	; 0x24
  407dd6:	4974      	ldr	r1, [pc, #464]	; (407fa8 <udd_ep_abort+0x25c>)
  407dd8:	79fb      	ldrb	r3, [r7, #7]
  407dda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
  407ddc:	330c      	adds	r3, #12
  407dde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  407de2:	e006      	b.n	407df2 <udd_ep_abort+0xa6>
  407de4:	bf00      	nop
  407de6:	6a3b      	ldr	r3, [r7, #32]
  407de8:	3301      	adds	r3, #1
  407dea:	623b      	str	r3, [r7, #32]
  407dec:	4a70      	ldr	r2, [pc, #448]	; (407fb0 <udd_ep_abort+0x264>)
  407dee:	4293      	cmp	r3, r2
  407df0:	d809      	bhi.n	407e06 <udd_ep_abort+0xba>
  407df2:	4a6d      	ldr	r2, [pc, #436]	; (407fa8 <udd_ep_abort+0x25c>)
  407df4:	79fb      	ldrb	r3, [r7, #7]
  407df6:	330c      	adds	r3, #12
  407df8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  407dfc:	f003 0310 	and.w	r3, r3, #16
  407e00:	2b00      	cmp	r3, #0
  407e02:	d1ef      	bne.n	407de4 <udd_ep_abort+0x98>
  407e04:	e000      	b.n	407e08 <udd_ep_abort+0xbc>
  407e06:	bf00      	nop
  407e08:	bf00      	nop
  407e0a:	4a67      	ldr	r2, [pc, #412]	; (407fa8 <udd_ep_abort+0x25c>)
  407e0c:	79fb      	ldrb	r3, [r7, #7]
  407e0e:	330c      	adds	r3, #12
  407e10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  407e14:	f003 0310 	and.w	r3, r3, #16
  407e18:	2b00      	cmp	r3, #0
  407e1a:	d1f6      	bne.n	407e0a <udd_ep_abort+0xbe>
  407e1c:	4a62      	ldr	r2, [pc, #392]	; (407fa8 <udd_ep_abort+0x25c>)
  407e1e:	79fb      	ldrb	r3, [r7, #7]
  407e20:	330c      	adds	r3, #12
  407e22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  407e26:	61fb      	str	r3, [r7, #28]
  407e28:	69fb      	ldr	r3, [r7, #28]
  407e2a:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  407e2e:	61fb      	str	r3, [r7, #28]
  407e30:	69fb      	ldr	r3, [r7, #28]
  407e32:	f043 0310 	orr.w	r3, r3, #16
  407e36:	61fb      	str	r3, [r7, #28]
  407e38:	495b      	ldr	r1, [pc, #364]	; (407fa8 <udd_ep_abort+0x25c>)
  407e3a:	79fb      	ldrb	r3, [r7, #7]
  407e3c:	69fa      	ldr	r2, [r7, #28]
  407e3e:	330c      	adds	r3, #12
  407e40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  407e44:	2300      	movs	r3, #0
  407e46:	61bb      	str	r3, [r7, #24]
  407e48:	e006      	b.n	407e58 <udd_ep_abort+0x10c>
  407e4a:	bf00      	nop
  407e4c:	69bb      	ldr	r3, [r7, #24]
  407e4e:	3301      	adds	r3, #1
  407e50:	61bb      	str	r3, [r7, #24]
  407e52:	4a57      	ldr	r2, [pc, #348]	; (407fb0 <udd_ep_abort+0x264>)
  407e54:	4293      	cmp	r3, r2
  407e56:	d809      	bhi.n	407e6c <udd_ep_abort+0x120>
  407e58:	4a53      	ldr	r2, [pc, #332]	; (407fa8 <udd_ep_abort+0x25c>)
  407e5a:	79fb      	ldrb	r3, [r7, #7]
  407e5c:	330c      	adds	r3, #12
  407e5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  407e62:	f003 0310 	and.w	r3, r3, #16
  407e66:	2b10      	cmp	r3, #16
  407e68:	d1ef      	bne.n	407e4a <udd_ep_abort+0xfe>
  407e6a:	e000      	b.n	407e6e <udd_ep_abort+0x122>
  407e6c:	bf00      	nop
  407e6e:	bf00      	nop
  407e70:	4a4d      	ldr	r2, [pc, #308]	; (407fa8 <udd_ep_abort+0x25c>)
  407e72:	79fb      	ldrb	r3, [r7, #7]
  407e74:	330c      	adds	r3, #12
  407e76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  407e7a:	f003 0310 	and.w	r3, r3, #16
  407e7e:	2b00      	cmp	r3, #0
  407e80:	d0f6      	beq.n	407e70 <udd_ep_abort+0x124>
  407e82:	4a49      	ldr	r2, [pc, #292]	; (407fa8 <udd_ep_abort+0x25c>)
  407e84:	79fb      	ldrb	r3, [r7, #7]
  407e86:	330c      	adds	r3, #12
  407e88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  407e8c:	617b      	str	r3, [r7, #20]
  407e8e:	697b      	ldr	r3, [r7, #20]
  407e90:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  407e94:	617b      	str	r3, [r7, #20]
  407e96:	697b      	ldr	r3, [r7, #20]
  407e98:	f023 0310 	bic.w	r3, r3, #16
  407e9c:	617b      	str	r3, [r7, #20]
  407e9e:	4942      	ldr	r1, [pc, #264]	; (407fa8 <udd_ep_abort+0x25c>)
  407ea0:	79fb      	ldrb	r3, [r7, #7]
  407ea2:	697a      	ldr	r2, [r7, #20]
  407ea4:	330c      	adds	r3, #12
  407ea6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  407eaa:	e006      	b.n	407eba <udd_ep_abort+0x16e>
  407eac:	bf00      	nop
  407eae:	693b      	ldr	r3, [r7, #16]
  407eb0:	3301      	adds	r3, #1
  407eb2:	613b      	str	r3, [r7, #16]
  407eb4:	4a3e      	ldr	r2, [pc, #248]	; (407fb0 <udd_ep_abort+0x264>)
  407eb6:	4293      	cmp	r3, r2
  407eb8:	d809      	bhi.n	407ece <udd_ep_abort+0x182>
  407eba:	4a3b      	ldr	r2, [pc, #236]	; (407fa8 <udd_ep_abort+0x25c>)
  407ebc:	79fb      	ldrb	r3, [r7, #7]
  407ebe:	330c      	adds	r3, #12
  407ec0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  407ec4:	f003 0310 	and.w	r3, r3, #16
  407ec8:	2b00      	cmp	r3, #0
  407eca:	d1ef      	bne.n	407eac <udd_ep_abort+0x160>
  407ecc:	e000      	b.n	407ed0 <udd_ep_abort+0x184>
  407ece:	bf00      	nop
					udd_get_endpoint_bank_max_nbr(ep)>1);
		}
		udd_ack_in_sent(ep);
  407ed0:	4a35      	ldr	r2, [pc, #212]	; (407fa8 <udd_ep_abort+0x25c>)
  407ed2:	79fb      	ldrb	r3, [r7, #7]
  407ed4:	330c      	adds	r3, #12
  407ed6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  407eda:	60fb      	str	r3, [r7, #12]
  407edc:	68fb      	ldr	r3, [r7, #12]
  407ede:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  407ee2:	60fb      	str	r3, [r7, #12]
  407ee4:	68fb      	ldr	r3, [r7, #12]
  407ee6:	f023 0301 	bic.w	r3, r3, #1
  407eea:	60fb      	str	r3, [r7, #12]
  407eec:	492e      	ldr	r1, [pc, #184]	; (407fa8 <udd_ep_abort+0x25c>)
  407eee:	79fb      	ldrb	r3, [r7, #7]
  407ef0:	68fa      	ldr	r2, [r7, #12]
  407ef2:	330c      	adds	r3, #12
  407ef4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  407ef8:	e006      	b.n	407f08 <udd_ep_abort+0x1bc>
  407efa:	bf00      	nop
  407efc:	68bb      	ldr	r3, [r7, #8]
  407efe:	3301      	adds	r3, #1
  407f00:	60bb      	str	r3, [r7, #8]
  407f02:	4a2b      	ldr	r2, [pc, #172]	; (407fb0 <udd_ep_abort+0x264>)
  407f04:	4293      	cmp	r3, r2
  407f06:	d809      	bhi.n	407f1c <udd_ep_abort+0x1d0>
  407f08:	4a27      	ldr	r2, [pc, #156]	; (407fa8 <udd_ep_abort+0x25c>)
  407f0a:	79fb      	ldrb	r3, [r7, #7]
  407f0c:	330c      	adds	r3, #12
  407f0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  407f12:	f003 0301 	and.w	r3, r3, #1
  407f16:	2b00      	cmp	r3, #0
  407f18:	d1ef      	bne.n	407efa <udd_ep_abort+0x1ae>
  407f1a:	e000      	b.n	407f1e <udd_ep_abort+0x1d2>
  407f1c:	bf00      	nop
		// Reset number of buffered banks
		udd_ep_job[ep - 1].bank = 0;
  407f1e:	79fb      	ldrb	r3, [r7, #7]
  407f20:	1e5a      	subs	r2, r3, #1
  407f22:	4924      	ldr	r1, [pc, #144]	; (407fb4 <udd_ep_abort+0x268>)
  407f24:	4613      	mov	r3, r2
  407f26:	009b      	lsls	r3, r3, #2
  407f28:	4413      	add	r3, r2
  407f2a:	009b      	lsls	r3, r3, #2
  407f2c:	440b      	add	r3, r1
  407f2e:	f103 0210 	add.w	r2, r3, #16
  407f32:	7853      	ldrb	r3, [r2, #1]
  407f34:	f36f 0383 	bfc	r3, #2, #2
  407f38:	7053      	strb	r3, [r2, #1]
  407f3a:	e00c      	b.n	407f56 <udd_ep_abort+0x20a>
	} else {
		// Clear all pending banks statuses
		while(Is_udd_any_bank_received(ep)) {
			udd_ep_ack_out_received(ep);
  407f3c:	79fb      	ldrb	r3, [r7, #7]
  407f3e:	4618      	mov	r0, r3
  407f40:	4b1d      	ldr	r3, [pc, #116]	; (407fb8 <udd_ep_abort+0x26c>)
  407f42:	4798      	blx	r3
		while(Is_udd_any_bank_received(ep)) {
  407f44:	4a18      	ldr	r2, [pc, #96]	; (407fa8 <udd_ep_abort+0x25c>)
  407f46:	79fb      	ldrb	r3, [r7, #7]
  407f48:	330c      	adds	r3, #12
  407f4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  407f4e:	f003 0342 	and.w	r3, r3, #66	; 0x42
  407f52:	2b00      	cmp	r3, #0
  407f54:	d1f2      	bne.n	407f3c <udd_ep_abort+0x1f0>
		}
	}
	// Reset FIFO and data toggle
	udd_reset_endpoint(ep);
  407f56:	4914      	ldr	r1, [pc, #80]	; (407fa8 <udd_ep_abort+0x25c>)
  407f58:	4b13      	ldr	r3, [pc, #76]	; (407fa8 <udd_ep_abort+0x25c>)
  407f5a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  407f5c:	79fb      	ldrb	r3, [r7, #7]
  407f5e:	2001      	movs	r0, #1
  407f60:	fa00 f303 	lsl.w	r3, r0, r3
  407f64:	4313      	orrs	r3, r2
  407f66:	628b      	str	r3, [r1, #40]	; 0x28
  407f68:	bf00      	nop
  407f6a:	4b0f      	ldr	r3, [pc, #60]	; (407fa8 <udd_ep_abort+0x25c>)
  407f6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  407f6e:	79fb      	ldrb	r3, [r7, #7]
  407f70:	2101      	movs	r1, #1
  407f72:	fa01 f303 	lsl.w	r3, r1, r3
  407f76:	4013      	ands	r3, r2
  407f78:	2b00      	cmp	r3, #0
  407f7a:	d0f6      	beq.n	407f6a <udd_ep_abort+0x21e>
  407f7c:	490a      	ldr	r1, [pc, #40]	; (407fa8 <udd_ep_abort+0x25c>)
  407f7e:	4b0a      	ldr	r3, [pc, #40]	; (407fa8 <udd_ep_abort+0x25c>)
  407f80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  407f82:	79fb      	ldrb	r3, [r7, #7]
  407f84:	2001      	movs	r0, #1
  407f86:	fa00 f303 	lsl.w	r3, r0, r3
  407f8a:	43db      	mvns	r3, r3
  407f8c:	4013      	ands	r3, r2
  407f8e:	628b      	str	r3, [r1, #40]	; 0x28
	// Abort job
	udd_ep_abort_job(ep);
  407f90:	79fb      	ldrb	r3, [r7, #7]
  407f92:	4618      	mov	r0, r3
  407f94:	4b09      	ldr	r3, [pc, #36]	; (407fbc <udd_ep_abort+0x270>)
  407f96:	4798      	blx	r3
  407f98:	e000      	b.n	407f9c <udd_ep_abort+0x250>
		return;
  407f9a:	bf00      	nop
}
  407f9c:	3730      	adds	r7, #48	; 0x30
  407f9e:	46bd      	mov	sp, r7
  407fa0:	bd80      	pop	{r7, pc}
  407fa2:	bf00      	nop
  407fa4:	00407029 	.word	0x00407029
  407fa8:	40044000 	.word	0x40044000
  407fac:	00407081 	.word	0x00407081
  407fb0:	0001869f 	.word	0x0001869f
  407fb4:	2001a2c4 	.word	0x2001a2c4
  407fb8:	00408c29 	.word	0x00408c29
  407fbc:	00408b79 	.word	0x00408b79

00407fc0 <udd_ep_wait_stall_clear>:


bool udd_ep_wait_stall_clear(udd_ep_id_t ep,
		udd_callback_halt_cleared_t callback)
{
  407fc0:	b580      	push	{r7, lr}
  407fc2:	b084      	sub	sp, #16
  407fc4:	af00      	add	r7, sp, #0
  407fc6:	4603      	mov	r3, r0
  407fc8:	6039      	str	r1, [r7, #0]
  407fca:	71fb      	strb	r3, [r7, #7]
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
  407fcc:	79fb      	ldrb	r3, [r7, #7]
  407fce:	f003 030f 	and.w	r3, r3, #15
  407fd2:	71fb      	strb	r3, [r7, #7]
	if (USB_DEVICE_MAX_EP < ep) {
  407fd4:	79fb      	ldrb	r3, [r7, #7]
  407fd6:	2b05      	cmp	r3, #5
  407fd8:	d901      	bls.n	407fde <udd_ep_wait_stall_clear+0x1e>
		return false;
  407fda:	2300      	movs	r3, #0
  407fdc:	e038      	b.n	408050 <udd_ep_wait_stall_clear+0x90>
	}

	ptr_job = &udd_ep_job[ep - 1];
  407fde:	79fb      	ldrb	r3, [r7, #7]
  407fe0:	1e5a      	subs	r2, r3, #1
  407fe2:	4613      	mov	r3, r2
  407fe4:	009b      	lsls	r3, r3, #2
  407fe6:	4413      	add	r3, r2
  407fe8:	009b      	lsls	r3, r3, #2
  407fea:	4a1b      	ldr	r2, [pc, #108]	; (408058 <udd_ep_wait_stall_clear+0x98>)
  407fec:	4413      	add	r3, r2
  407fee:	60fb      	str	r3, [r7, #12]

	if (!Is_udd_endpoint_enabled(ep)) {
  407ff0:	4a1a      	ldr	r2, [pc, #104]	; (40805c <udd_ep_wait_stall_clear+0x9c>)
  407ff2:	79fb      	ldrb	r3, [r7, #7]
  407ff4:	330c      	adds	r3, #12
  407ff6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  407ffa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  407ffe:	2b00      	cmp	r3, #0
  408000:	d101      	bne.n	408006 <udd_ep_wait_stall_clear+0x46>
		return false; // Endpoint not enabled
  408002:	2300      	movs	r3, #0
  408004:	e024      	b.n	408050 <udd_ep_wait_stall_clear+0x90>
	}

	// Wait clear halt endpoint
	if (ptr_job->busy == true) {
  408006:	68fb      	ldr	r3, [r7, #12]
  408008:	7c5b      	ldrb	r3, [r3, #17]
  40800a:	f003 0310 	and.w	r3, r3, #16
  40800e:	b2db      	uxtb	r3, r3
  408010:	2b00      	cmp	r3, #0
  408012:	d001      	beq.n	408018 <udd_ep_wait_stall_clear+0x58>
		return false; // Job already on going
  408014:	2300      	movs	r3, #0
  408016:	e01b      	b.n	408050 <udd_ep_wait_stall_clear+0x90>
	}

	if (Is_udd_endpoint_stall_requested(ep)
  408018:	4a10      	ldr	r2, [pc, #64]	; (40805c <udd_ep_wait_stall_clear+0x9c>)
  40801a:	79fb      	ldrb	r3, [r7, #7]
  40801c:	330c      	adds	r3, #12
  40801e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  408022:	f003 0320 	and.w	r3, r3, #32
  408026:	2b00      	cmp	r3, #0
  408028:	d106      	bne.n	408038 <udd_ep_wait_stall_clear+0x78>
			|| ptr_job->b_stall_requested) {
  40802a:	68fb      	ldr	r3, [r7, #12]
  40802c:	7c5b      	ldrb	r3, [r3, #17]
  40802e:	f003 0320 	and.w	r3, r3, #32
  408032:	b2db      	uxtb	r3, r3
  408034:	2b00      	cmp	r3, #0
  408036:	d008      	beq.n	40804a <udd_ep_wait_stall_clear+0x8a>
		// Endpoint halted then registers the callback
		ptr_job->busy = true;
  408038:	68fa      	ldr	r2, [r7, #12]
  40803a:	7c53      	ldrb	r3, [r2, #17]
  40803c:	f043 0310 	orr.w	r3, r3, #16
  408040:	7453      	strb	r3, [r2, #17]
		ptr_job->call_nohalt = callback;
  408042:	68fb      	ldr	r3, [r7, #12]
  408044:	683a      	ldr	r2, [r7, #0]
  408046:	601a      	str	r2, [r3, #0]
  408048:	e001      	b.n	40804e <udd_ep_wait_stall_clear+0x8e>
	} else {
		// endpoint not halted then call directly callback
		callback();
  40804a:	683b      	ldr	r3, [r7, #0]
  40804c:	4798      	blx	r3
	}
	return true;
  40804e:	2301      	movs	r3, #1
}
  408050:	4618      	mov	r0, r3
  408052:	3710      	adds	r7, #16
  408054:	46bd      	mov	sp, r7
  408056:	bd80      	pop	{r7, pc}
  408058:	2001a2c4 	.word	0x2001a2c4
  40805c:	40044000 	.word	0x40044000

00408060 <udd_reset_ep_ctrl>:

//--------------------------------------------------------
//--- INTERNAL ROUTINES TO MANAGED THE CONTROL ENDPOINT

static void udd_reset_ep_ctrl(void)
{
  408060:	b580      	push	{r7, lr}
  408062:	b086      	sub	sp, #24
  408064:	af00      	add	r7, sp, #0
	irqflags_t flags;

	// Reset USB address to 0
	udd_enable_address();
  408066:	4a2f      	ldr	r2, [pc, #188]	; (408124 <udd_reset_ep_ctrl+0xc4>)
  408068:	4b2e      	ldr	r3, [pc, #184]	; (408124 <udd_reset_ep_ctrl+0xc4>)
  40806a:	689b      	ldr	r3, [r3, #8]
  40806c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  408070:	6093      	str	r3, [r2, #8]
	udd_configure_address(0);
  408072:	4a2c      	ldr	r2, [pc, #176]	; (408124 <udd_reset_ep_ctrl+0xc4>)
  408074:	4b2b      	ldr	r3, [pc, #172]	; (408124 <udd_reset_ep_ctrl+0xc4>)
  408076:	689b      	ldr	r3, [r3, #8]
  408078:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  40807c:	6093      	str	r3, [r2, #8]
	// Alloc and configure control endpoint in OUT direction
	udd_configure_endpoint(0, USB_EP_TYPE_CONTROL, 0);
  40807e:	4b29      	ldr	r3, [pc, #164]	; (408124 <udd_reset_ep_ctrl+0xc4>)
  408080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  408082:	613b      	str	r3, [r7, #16]
  408084:	693b      	ldr	r3, [r7, #16]
  408086:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40808a:	613b      	str	r3, [r7, #16]
  40808c:	693b      	ldr	r3, [r7, #16]
  40808e:	f423 4307 	bic.w	r3, r3, #34560	; 0x8700
  408092:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  408096:	613b      	str	r3, [r7, #16]
  408098:	693b      	ldr	r3, [r7, #16]
  40809a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  40809e:	613b      	str	r3, [r7, #16]
  4080a0:	4a20      	ldr	r2, [pc, #128]	; (408124 <udd_reset_ep_ctrl+0xc4>)
  4080a2:	693b      	ldr	r3, [r7, #16]
  4080a4:	6313      	str	r3, [r2, #48]	; 0x30
  4080a6:	e006      	b.n	4080b6 <udd_reset_ep_ctrl+0x56>
  4080a8:	bf00      	nop
  4080aa:	68fb      	ldr	r3, [r7, #12]
  4080ac:	3301      	adds	r3, #1
  4080ae:	60fb      	str	r3, [r7, #12]
  4080b0:	4a1d      	ldr	r2, [pc, #116]	; (408128 <udd_reset_ep_ctrl+0xc8>)
  4080b2:	4293      	cmp	r3, r2
  4080b4:	d807      	bhi.n	4080c6 <udd_reset_ep_ctrl+0x66>
  4080b6:	4b1b      	ldr	r3, [pc, #108]	; (408124 <udd_reset_ep_ctrl+0xc4>)
  4080b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4080ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  4080be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  4080c2:	d1f1      	bne.n	4080a8 <udd_reset_ep_ctrl+0x48>
  4080c4:	e000      	b.n	4080c8 <udd_reset_ep_ctrl+0x68>
  4080c6:	bf00      	nop
	udd_enable_endpoint(0);
  4080c8:	4b16      	ldr	r3, [pc, #88]	; (408124 <udd_reset_ep_ctrl+0xc4>)
  4080ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4080cc:	60bb      	str	r3, [r7, #8]
  4080ce:	68bb      	ldr	r3, [r7, #8]
  4080d0:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4080d4:	60bb      	str	r3, [r7, #8]
  4080d6:	68bb      	ldr	r3, [r7, #8]
  4080d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  4080dc:	60bb      	str	r3, [r7, #8]
  4080de:	4a11      	ldr	r2, [pc, #68]	; (408124 <udd_reset_ep_ctrl+0xc4>)
  4080e0:	68bb      	ldr	r3, [r7, #8]
  4080e2:	6313      	str	r3, [r2, #48]	; 0x30
  4080e4:	2300      	movs	r3, #0
  4080e6:	607b      	str	r3, [r7, #4]
  4080e8:	e006      	b.n	4080f8 <udd_reset_ep_ctrl+0x98>
  4080ea:	bf00      	nop
  4080ec:	687b      	ldr	r3, [r7, #4]
  4080ee:	3301      	adds	r3, #1
  4080f0:	607b      	str	r3, [r7, #4]
  4080f2:	4a0d      	ldr	r2, [pc, #52]	; (408128 <udd_reset_ep_ctrl+0xc8>)
  4080f4:	4293      	cmp	r3, r2
  4080f6:	d807      	bhi.n	408108 <udd_reset_ep_ctrl+0xa8>
  4080f8:	4b0a      	ldr	r3, [pc, #40]	; (408124 <udd_reset_ep_ctrl+0xc4>)
  4080fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4080fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  408100:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  408104:	d1f1      	bne.n	4080ea <udd_reset_ep_ctrl+0x8a>
  408106:	e000      	b.n	40810a <udd_reset_ep_ctrl+0xaa>
  408108:	bf00      	nop

	flags = cpu_irq_save();
  40810a:	4b08      	ldr	r3, [pc, #32]	; (40812c <udd_reset_ep_ctrl+0xcc>)
  40810c:	4798      	blx	r3
  40810e:	6178      	str	r0, [r7, #20]
	udd_enable_endpoint_interrupt(0);
  408110:	4b04      	ldr	r3, [pc, #16]	; (408124 <udd_reset_ep_ctrl+0xc4>)
  408112:	2201      	movs	r2, #1
  408114:	611a      	str	r2, [r3, #16]
	cpu_irq_restore(flags);
  408116:	6978      	ldr	r0, [r7, #20]
  408118:	4b05      	ldr	r3, [pc, #20]	; (408130 <udd_reset_ep_ctrl+0xd0>)
  40811a:	4798      	blx	r3
}
  40811c:	bf00      	nop
  40811e:	3718      	adds	r7, #24
  408120:	46bd      	mov	sp, r7
  408122:	bd80      	pop	{r7, pc}
  408124:	40044000 	.word	0x40044000
  408128:	0001869f 	.word	0x0001869f
  40812c:	00407029 	.word	0x00407029
  408130:	00407081 	.word	0x00407081

00408134 <udd_ctrl_init>:

static void udd_ctrl_init(void)
{
  408134:	b480      	push	{r7}
  408136:	af00      	add	r7, sp, #0
	udd_g_ctrlreq.callback = NULL;
  408138:	4b08      	ldr	r3, [pc, #32]	; (40815c <udd_ctrl_init+0x28>)
  40813a:	2200      	movs	r2, #0
  40813c:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
  40813e:	4b07      	ldr	r3, [pc, #28]	; (40815c <udd_ctrl_init+0x28>)
  408140:	2200      	movs	r2, #0
  408142:	615a      	str	r2, [r3, #20]
	udd_g_ctrlreq.payload_size = 0;
  408144:	4b05      	ldr	r3, [pc, #20]	; (40815c <udd_ctrl_init+0x28>)
  408146:	2200      	movs	r2, #0
  408148:	819a      	strh	r2, [r3, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
  40814a:	4b05      	ldr	r3, [pc, #20]	; (408160 <udd_ctrl_init+0x2c>)
  40814c:	2200      	movs	r2, #0
  40814e:	701a      	strb	r2, [r3, #0]
}
  408150:	bf00      	nop
  408152:	46bd      	mov	sp, r7
  408154:	f85d 7b04 	ldr.w	r7, [sp], #4
  408158:	4770      	bx	lr
  40815a:	bf00      	nop
  40815c:	2001aba8 	.word	0x2001aba8
  408160:	2001a2be 	.word	0x2001a2be

00408164 <udd_ctrl_setup_received>:


static void udd_ctrl_setup_received(void)
{
  408164:	b580      	push	{r7, lr}
  408166:	b08c      	sub	sp, #48	; 0x30
  408168:	af00      	add	r7, sp, #0
	uint8_t i;

	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
  40816a:	4b7d      	ldr	r3, [pc, #500]	; (408360 <udd_ctrl_setup_received+0x1fc>)
  40816c:	781b      	ldrb	r3, [r3, #0]
  40816e:	2b00      	cmp	r3, #0
  408170:	d003      	beq.n	40817a <udd_ctrl_setup_received+0x16>
		// May be a hidden DATA or ZLP phase
		// or protocol abort
		udd_ctrl_endofrequest();
  408172:	4b7c      	ldr	r3, [pc, #496]	; (408364 <udd_ctrl_setup_received+0x200>)
  408174:	4798      	blx	r3

		// Reinitializes control endpoint management
		udd_ctrl_init();
  408176:	4b7c      	ldr	r3, [pc, #496]	; (408368 <udd_ctrl_setup_received+0x204>)
  408178:	4798      	blx	r3
	}
	// Fill setup request structure
	if (8 != udd_byte_count(0)) {
  40817a:	4b7c      	ldr	r3, [pc, #496]	; (40836c <udd_ctrl_setup_received+0x208>)
  40817c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40817e:	0c1b      	lsrs	r3, r3, #16
  408180:	f3c3 030a 	ubfx	r3, r3, #0, #11
  408184:	2b08      	cmp	r3, #8
  408186:	d020      	beq.n	4081ca <udd_ctrl_setup_received+0x66>
		udd_ack_setup_received(0);
  408188:	4b78      	ldr	r3, [pc, #480]	; (40836c <udd_ctrl_setup_received+0x208>)
  40818a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40818c:	62bb      	str	r3, [r7, #40]	; 0x28
  40818e:	6abb      	ldr	r3, [r7, #40]	; 0x28
  408190:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  408194:	62bb      	str	r3, [r7, #40]	; 0x28
  408196:	6abb      	ldr	r3, [r7, #40]	; 0x28
  408198:	f023 0304 	bic.w	r3, r3, #4
  40819c:	62bb      	str	r3, [r7, #40]	; 0x28
  40819e:	4a73      	ldr	r2, [pc, #460]	; (40836c <udd_ctrl_setup_received+0x208>)
  4081a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4081a2:	6313      	str	r3, [r2, #48]	; 0x30
  4081a4:	e006      	b.n	4081b4 <udd_ctrl_setup_received+0x50>
  4081a6:	bf00      	nop
  4081a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4081aa:	3301      	adds	r3, #1
  4081ac:	627b      	str	r3, [r7, #36]	; 0x24
  4081ae:	4a70      	ldr	r2, [pc, #448]	; (408370 <udd_ctrl_setup_received+0x20c>)
  4081b0:	4293      	cmp	r3, r2
  4081b2:	d806      	bhi.n	4081c2 <udd_ctrl_setup_received+0x5e>
  4081b4:	4b6d      	ldr	r3, [pc, #436]	; (40836c <udd_ctrl_setup_received+0x208>)
  4081b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4081b8:	f003 0304 	and.w	r3, r3, #4
  4081bc:	2b00      	cmp	r3, #0
  4081be:	d1f2      	bne.n	4081a6 <udd_ctrl_setup_received+0x42>
  4081c0:	e000      	b.n	4081c4 <udd_ctrl_setup_received+0x60>
  4081c2:	bf00      	nop
		udd_ctrl_stall_data();
  4081c4:	4b6b      	ldr	r3, [pc, #428]	; (408374 <udd_ctrl_setup_received+0x210>)
  4081c6:	4798      	blx	r3
		return; // Error data number doesn't correspond to SETUP packet
  4081c8:	e0c6      	b.n	408358 <udd_ctrl_setup_received+0x1f4>
	}
	for (i = 0; i < 8; i++) {
  4081ca:	2300      	movs	r3, #0
  4081cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  4081d0:	e00c      	b.n	4081ec <udd_ctrl_setup_received+0x88>
		((uint8_t *) & udd_g_ctrlreq.req)[i] =
  4081d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  4081d6:	4a68      	ldr	r2, [pc, #416]	; (408378 <udd_ctrl_setup_received+0x214>)
  4081d8:	4413      	add	r3, r2
			udd_endpoint_fifo_read(0);
  4081da:	4a64      	ldr	r2, [pc, #400]	; (40836c <udd_ctrl_setup_received+0x208>)
  4081dc:	6d12      	ldr	r2, [r2, #80]	; 0x50
		((uint8_t *) & udd_g_ctrlreq.req)[i] =
  4081de:	b2d2      	uxtb	r2, r2
  4081e0:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 8; i++) {
  4081e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  4081e6:	3301      	adds	r3, #1
  4081e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  4081ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  4081f0:	2b07      	cmp	r3, #7
  4081f2:	d9ee      	bls.n	4081d2 <udd_ctrl_setup_received+0x6e>
	}
	// Manage LSB/MSB to fit with CPU usage
	udd_g_ctrlreq.req.wValue = le16_to_cpu(udd_g_ctrlreq.req.wValue);
  4081f4:	4b60      	ldr	r3, [pc, #384]	; (408378 <udd_ctrl_setup_received+0x214>)
  4081f6:	885a      	ldrh	r2, [r3, #2]
  4081f8:	4b5f      	ldr	r3, [pc, #380]	; (408378 <udd_ctrl_setup_received+0x214>)
  4081fa:	805a      	strh	r2, [r3, #2]
	udd_g_ctrlreq.req.wIndex = le16_to_cpu(udd_g_ctrlreq.req.wIndex);
  4081fc:	4b5e      	ldr	r3, [pc, #376]	; (408378 <udd_ctrl_setup_received+0x214>)
  4081fe:	889a      	ldrh	r2, [r3, #4]
  408200:	4b5d      	ldr	r3, [pc, #372]	; (408378 <udd_ctrl_setup_received+0x214>)
  408202:	809a      	strh	r2, [r3, #4]
	udd_g_ctrlreq.req.wLength = le16_to_cpu(udd_g_ctrlreq.req.wLength);
  408204:	4b5c      	ldr	r3, [pc, #368]	; (408378 <udd_ctrl_setup_received+0x214>)
  408206:	88da      	ldrh	r2, [r3, #6]
  408208:	4b5b      	ldr	r3, [pc, #364]	; (408378 <udd_ctrl_setup_received+0x214>)
  40820a:	80da      	strh	r2, [r3, #6]

	// Decode setup request
	if (udc_process_setup() == false) {
  40820c:	4b5b      	ldr	r3, [pc, #364]	; (40837c <udd_ctrl_setup_received+0x218>)
  40820e:	4798      	blx	r3
  408210:	4603      	mov	r3, r0
  408212:	f083 0301 	eor.w	r3, r3, #1
  408216:	b2db      	uxtb	r3, r3
  408218:	2b00      	cmp	r3, #0
  40821a:	d020      	beq.n	40825e <udd_ctrl_setup_received+0xfa>
		// Setup request unknown then stall it
		udd_ack_setup_received(0);
  40821c:	4b53      	ldr	r3, [pc, #332]	; (40836c <udd_ctrl_setup_received+0x208>)
  40821e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  408220:	623b      	str	r3, [r7, #32]
  408222:	6a3b      	ldr	r3, [r7, #32]
  408224:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  408228:	623b      	str	r3, [r7, #32]
  40822a:	6a3b      	ldr	r3, [r7, #32]
  40822c:	f023 0304 	bic.w	r3, r3, #4
  408230:	623b      	str	r3, [r7, #32]
  408232:	4a4e      	ldr	r2, [pc, #312]	; (40836c <udd_ctrl_setup_received+0x208>)
  408234:	6a3b      	ldr	r3, [r7, #32]
  408236:	6313      	str	r3, [r2, #48]	; 0x30
  408238:	e006      	b.n	408248 <udd_ctrl_setup_received+0xe4>
  40823a:	bf00      	nop
  40823c:	69fb      	ldr	r3, [r7, #28]
  40823e:	3301      	adds	r3, #1
  408240:	61fb      	str	r3, [r7, #28]
  408242:	4a4b      	ldr	r2, [pc, #300]	; (408370 <udd_ctrl_setup_received+0x20c>)
  408244:	4293      	cmp	r3, r2
  408246:	d806      	bhi.n	408256 <udd_ctrl_setup_received+0xf2>
  408248:	4b48      	ldr	r3, [pc, #288]	; (40836c <udd_ctrl_setup_received+0x208>)
  40824a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40824c:	f003 0304 	and.w	r3, r3, #4
  408250:	2b00      	cmp	r3, #0
  408252:	d1f2      	bne.n	40823a <udd_ctrl_setup_received+0xd6>
  408254:	e000      	b.n	408258 <udd_ctrl_setup_received+0xf4>
  408256:	bf00      	nop
		udd_ctrl_stall_data();
  408258:	4b46      	ldr	r3, [pc, #280]	; (408374 <udd_ctrl_setup_received+0x210>)
  40825a:	4798      	blx	r3
		return;
  40825c:	e07c      	b.n	408358 <udd_ctrl_setup_received+0x1f4>
	}

	if (Udd_setup_is_in()) {
  40825e:	4b46      	ldr	r3, [pc, #280]	; (408378 <udd_ctrl_setup_received+0x214>)
  408260:	781b      	ldrb	r3, [r3, #0]
  408262:	b25b      	sxtb	r3, r3
  408264:	2b00      	cmp	r3, #0
  408266:	da49      	bge.n	4082fc <udd_ctrl_setup_received+0x198>
		// Set DIR
		udd_set_endpoint_direction_in(0);
  408268:	4b40      	ldr	r3, [pc, #256]	; (40836c <udd_ctrl_setup_received+0x208>)
  40826a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40826c:	61bb      	str	r3, [r7, #24]
  40826e:	69bb      	ldr	r3, [r7, #24]
  408270:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  408274:	61bb      	str	r3, [r7, #24]
  408276:	69bb      	ldr	r3, [r7, #24]
  408278:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40827c:	61bb      	str	r3, [r7, #24]
  40827e:	4a3b      	ldr	r2, [pc, #236]	; (40836c <udd_ctrl_setup_received+0x208>)
  408280:	69bb      	ldr	r3, [r7, #24]
  408282:	6313      	str	r3, [r2, #48]	; 0x30
  408284:	2300      	movs	r3, #0
  408286:	617b      	str	r3, [r7, #20]
  408288:	e006      	b.n	408298 <udd_ctrl_setup_received+0x134>
  40828a:	bf00      	nop
  40828c:	697b      	ldr	r3, [r7, #20]
  40828e:	3301      	adds	r3, #1
  408290:	617b      	str	r3, [r7, #20]
  408292:	4a37      	ldr	r2, [pc, #220]	; (408370 <udd_ctrl_setup_received+0x20c>)
  408294:	4293      	cmp	r3, r2
  408296:	d806      	bhi.n	4082a6 <udd_ctrl_setup_received+0x142>
  408298:	4b34      	ldr	r3, [pc, #208]	; (40836c <udd_ctrl_setup_received+0x208>)
  40829a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40829c:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4082a0:	2b80      	cmp	r3, #128	; 0x80
  4082a2:	d1f2      	bne.n	40828a <udd_ctrl_setup_received+0x126>
  4082a4:	e000      	b.n	4082a8 <udd_ctrl_setup_received+0x144>
  4082a6:	bf00      	nop
		udd_ack_setup_received(0);
  4082a8:	4b30      	ldr	r3, [pc, #192]	; (40836c <udd_ctrl_setup_received+0x208>)
  4082aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4082ac:	613b      	str	r3, [r7, #16]
  4082ae:	693b      	ldr	r3, [r7, #16]
  4082b0:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4082b4:	613b      	str	r3, [r7, #16]
  4082b6:	693b      	ldr	r3, [r7, #16]
  4082b8:	f023 0304 	bic.w	r3, r3, #4
  4082bc:	613b      	str	r3, [r7, #16]
  4082be:	4a2b      	ldr	r2, [pc, #172]	; (40836c <udd_ctrl_setup_received+0x208>)
  4082c0:	693b      	ldr	r3, [r7, #16]
  4082c2:	6313      	str	r3, [r2, #48]	; 0x30
  4082c4:	e006      	b.n	4082d4 <udd_ctrl_setup_received+0x170>
  4082c6:	bf00      	nop
  4082c8:	68fb      	ldr	r3, [r7, #12]
  4082ca:	3301      	adds	r3, #1
  4082cc:	60fb      	str	r3, [r7, #12]
  4082ce:	4a28      	ldr	r2, [pc, #160]	; (408370 <udd_ctrl_setup_received+0x20c>)
  4082d0:	4293      	cmp	r3, r2
  4082d2:	d806      	bhi.n	4082e2 <udd_ctrl_setup_received+0x17e>
  4082d4:	4b25      	ldr	r3, [pc, #148]	; (40836c <udd_ctrl_setup_received+0x208>)
  4082d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4082d8:	f003 0304 	and.w	r3, r3, #4
  4082dc:	2b00      	cmp	r3, #0
  4082de:	d1f2      	bne.n	4082c6 <udd_ctrl_setup_received+0x162>
  4082e0:	e000      	b.n	4082e4 <udd_ctrl_setup_received+0x180>
  4082e2:	bf00      	nop
		// IN data phase requested
		udd_ctrl_prev_payload_nb_trans = 0;
  4082e4:	4b26      	ldr	r3, [pc, #152]	; (408380 <udd_ctrl_setup_received+0x21c>)
  4082e6:	2200      	movs	r2, #0
  4082e8:	801a      	strh	r2, [r3, #0]
		udd_ctrl_payload_nb_trans = 0;
  4082ea:	4b26      	ldr	r3, [pc, #152]	; (408384 <udd_ctrl_setup_received+0x220>)
  4082ec:	2200      	movs	r2, #0
  4082ee:	801a      	strh	r2, [r3, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
  4082f0:	4b1b      	ldr	r3, [pc, #108]	; (408360 <udd_ctrl_setup_received+0x1fc>)
  4082f2:	2202      	movs	r2, #2
  4082f4:	701a      	strb	r2, [r3, #0]
		udd_ctrl_in_sent(); // Send first data transfer
  4082f6:	4b24      	ldr	r3, [pc, #144]	; (408388 <udd_ctrl_setup_received+0x224>)
  4082f8:	4798      	blx	r3
  4082fa:	e02d      	b.n	408358 <udd_ctrl_setup_received+0x1f4>
	} else {
		udd_ack_setup_received(0);
  4082fc:	4b1b      	ldr	r3, [pc, #108]	; (40836c <udd_ctrl_setup_received+0x208>)
  4082fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  408300:	60bb      	str	r3, [r7, #8]
  408302:	68bb      	ldr	r3, [r7, #8]
  408304:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  408308:	60bb      	str	r3, [r7, #8]
  40830a:	68bb      	ldr	r3, [r7, #8]
  40830c:	f023 0304 	bic.w	r3, r3, #4
  408310:	60bb      	str	r3, [r7, #8]
  408312:	4a16      	ldr	r2, [pc, #88]	; (40836c <udd_ctrl_setup_received+0x208>)
  408314:	68bb      	ldr	r3, [r7, #8]
  408316:	6313      	str	r3, [r2, #48]	; 0x30
  408318:	e006      	b.n	408328 <udd_ctrl_setup_received+0x1c4>
  40831a:	bf00      	nop
  40831c:	687b      	ldr	r3, [r7, #4]
  40831e:	3301      	adds	r3, #1
  408320:	607b      	str	r3, [r7, #4]
  408322:	4a13      	ldr	r2, [pc, #76]	; (408370 <udd_ctrl_setup_received+0x20c>)
  408324:	4293      	cmp	r3, r2
  408326:	d806      	bhi.n	408336 <udd_ctrl_setup_received+0x1d2>
  408328:	4b10      	ldr	r3, [pc, #64]	; (40836c <udd_ctrl_setup_received+0x208>)
  40832a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40832c:	f003 0304 	and.w	r3, r3, #4
  408330:	2b00      	cmp	r3, #0
  408332:	d1f2      	bne.n	40831a <udd_ctrl_setup_received+0x1b6>
  408334:	e000      	b.n	408338 <udd_ctrl_setup_received+0x1d4>
  408336:	bf00      	nop
		if (0 == udd_g_ctrlreq.req.wLength) {
  408338:	4b0f      	ldr	r3, [pc, #60]	; (408378 <udd_ctrl_setup_received+0x214>)
  40833a:	88db      	ldrh	r3, [r3, #6]
  40833c:	2b00      	cmp	r3, #0
  40833e:	d102      	bne.n	408346 <udd_ctrl_setup_received+0x1e2>
			// No data phase requested
			// Send IN ZLP to ACK setup request
			udd_ctrl_send_zlp_in();
  408340:	4b12      	ldr	r3, [pc, #72]	; (40838c <udd_ctrl_setup_received+0x228>)
  408342:	4798      	blx	r3
			return;
  408344:	e008      	b.n	408358 <udd_ctrl_setup_received+0x1f4>
		}
		// OUT data phase requested
		udd_ctrl_prev_payload_nb_trans = 0;
  408346:	4b0e      	ldr	r3, [pc, #56]	; (408380 <udd_ctrl_setup_received+0x21c>)
  408348:	2200      	movs	r2, #0
  40834a:	801a      	strh	r2, [r3, #0]
		udd_ctrl_payload_nb_trans = 0;
  40834c:	4b0d      	ldr	r3, [pc, #52]	; (408384 <udd_ctrl_setup_received+0x220>)
  40834e:	2200      	movs	r2, #0
  408350:	801a      	strh	r2, [r3, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
  408352:	4b03      	ldr	r3, [pc, #12]	; (408360 <udd_ctrl_setup_received+0x1fc>)
  408354:	2201      	movs	r2, #1
  408356:	701a      	strb	r2, [r3, #0]
	}
}
  408358:	3730      	adds	r7, #48	; 0x30
  40835a:	46bd      	mov	sp, r7
  40835c:	bd80      	pop	{r7, pc}
  40835e:	bf00      	nop
  408360:	2001a2be 	.word	0x2001a2be
  408364:	004089b1 	.word	0x004089b1
  408368:	00408135 	.word	0x00408135
  40836c:	40044000 	.word	0x40044000
  408370:	0001869f 	.word	0x0001869f
  408374:	004088d1 	.word	0x004088d1
  408378:	2001aba8 	.word	0x2001aba8
  40837c:	004058cd 	.word	0x004058cd
  408380:	2001a2c0 	.word	0x2001a2c0
  408384:	2001a2c2 	.word	0x2001a2c2
  408388:	00408391 	.word	0x00408391
  40838c:	00408935 	.word	0x00408935

00408390 <udd_ctrl_in_sent>:


static void udd_ctrl_in_sent(void)
{
  408390:	b580      	push	{r7, lr}
  408392:	b08e      	sub	sp, #56	; 0x38
  408394:	af00      	add	r7, sp, #0
	uint16_t nb_remain;
	uint8_t i;
	uint8_t *ptr_src;
	irqflags_t flags;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
  408396:	4b8b      	ldr	r3, [pc, #556]	; (4085c4 <udd_ctrl_in_sent+0x234>)
  408398:	781b      	ldrb	r3, [r3, #0]
  40839a:	2b03      	cmp	r3, #3
  40839c:	d122      	bne.n	4083e4 <udd_ctrl_in_sent+0x54>
		// Ack
		udd_ack_in_sent(0);
  40839e:	4b8a      	ldr	r3, [pc, #552]	; (4085c8 <udd_ctrl_in_sent+0x238>)
  4083a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4083a2:	62bb      	str	r3, [r7, #40]	; 0x28
  4083a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4083a6:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4083aa:	62bb      	str	r3, [r7, #40]	; 0x28
  4083ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4083ae:	f023 0301 	bic.w	r3, r3, #1
  4083b2:	62bb      	str	r3, [r7, #40]	; 0x28
  4083b4:	4a84      	ldr	r2, [pc, #528]	; (4085c8 <udd_ctrl_in_sent+0x238>)
  4083b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4083b8:	6313      	str	r3, [r2, #48]	; 0x30
  4083ba:	e006      	b.n	4083ca <udd_ctrl_in_sent+0x3a>
  4083bc:	bf00      	nop
  4083be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4083c0:	3301      	adds	r3, #1
  4083c2:	627b      	str	r3, [r7, #36]	; 0x24
  4083c4:	4a81      	ldr	r2, [pc, #516]	; (4085cc <udd_ctrl_in_sent+0x23c>)
  4083c6:	4293      	cmp	r3, r2
  4083c8:	d806      	bhi.n	4083d8 <udd_ctrl_in_sent+0x48>
  4083ca:	4b7f      	ldr	r3, [pc, #508]	; (4085c8 <udd_ctrl_in_sent+0x238>)
  4083cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4083ce:	f003 0301 	and.w	r3, r3, #1
  4083d2:	2b00      	cmp	r3, #0
  4083d4:	d1f2      	bne.n	4083bc <udd_ctrl_in_sent+0x2c>
  4083d6:	e000      	b.n	4083da <udd_ctrl_in_sent+0x4a>
  4083d8:	bf00      	nop
		// ZLP on IN is sent, then valid end of setup request
		udd_ctrl_endofrequest();
  4083da:	4b7d      	ldr	r3, [pc, #500]	; (4085d0 <udd_ctrl_in_sent+0x240>)
  4083dc:	4798      	blx	r3
		// Reinitializes control endpoint management
		udd_ctrl_init();
  4083de:	4b7d      	ldr	r3, [pc, #500]	; (4085d4 <udd_ctrl_in_sent+0x244>)
  4083e0:	4798      	blx	r3
		return;
  4083e2:	e0eb      	b.n	4085bc <udd_ctrl_in_sent+0x22c>
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_IN);

	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
  4083e4:	4b7c      	ldr	r3, [pc, #496]	; (4085d8 <udd_ctrl_in_sent+0x248>)
  4083e6:	899a      	ldrh	r2, [r3, #12]
  4083e8:	4b7c      	ldr	r3, [pc, #496]	; (4085dc <udd_ctrl_in_sent+0x24c>)
  4083ea:	881b      	ldrh	r3, [r3, #0]
  4083ec:	1ad3      	subs	r3, r2, r3
  4083ee:	86fb      	strh	r3, [r7, #54]	; 0x36
	if (0 == nb_remain) {
  4083f0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
  4083f2:	2b00      	cmp	r3, #0
  4083f4:	d145      	bne.n	408482 <udd_ctrl_in_sent+0xf2>
		// All content of current buffer payload are sent
		// Update number of total data sending by previous payload buffer
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
  4083f6:	4b7a      	ldr	r3, [pc, #488]	; (4085e0 <udd_ctrl_in_sent+0x250>)
  4083f8:	881a      	ldrh	r2, [r3, #0]
  4083fa:	4b78      	ldr	r3, [pc, #480]	; (4085dc <udd_ctrl_in_sent+0x24c>)
  4083fc:	881b      	ldrh	r3, [r3, #0]
  4083fe:	4413      	add	r3, r2
  408400:	b29a      	uxth	r2, r3
  408402:	4b77      	ldr	r3, [pc, #476]	; (4085e0 <udd_ctrl_in_sent+0x250>)
  408404:	801a      	strh	r2, [r3, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans)
  408406:	4b74      	ldr	r3, [pc, #464]	; (4085d8 <udd_ctrl_in_sent+0x248>)
  408408:	88da      	ldrh	r2, [r3, #6]
  40840a:	4b75      	ldr	r3, [pc, #468]	; (4085e0 <udd_ctrl_in_sent+0x250>)
  40840c:	881b      	ldrh	r3, [r3, #0]
  40840e:	429a      	cmp	r2, r3
  408410:	d003      	beq.n	40841a <udd_ctrl_in_sent+0x8a>
				|| b_shortpacket) {
  408412:	4b74      	ldr	r3, [pc, #464]	; (4085e4 <udd_ctrl_in_sent+0x254>)
  408414:	781b      	ldrb	r3, [r3, #0]
  408416:	2b00      	cmp	r3, #0
  408418:	d020      	beq.n	40845c <udd_ctrl_in_sent+0xcc>
			// All data requested are transfered or a short packet has been sent
			// then it is the end of data phase.
			// Generate an OUT ZLP for handshake phase.
			udd_ctrl_send_zlp_out();
  40841a:	4b73      	ldr	r3, [pc, #460]	; (4085e8 <udd_ctrl_in_sent+0x258>)
  40841c:	4798      	blx	r3
			udd_ack_in_sent(0);
  40841e:	4b6a      	ldr	r3, [pc, #424]	; (4085c8 <udd_ctrl_in_sent+0x238>)
  408420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  408422:	623b      	str	r3, [r7, #32]
  408424:	6a3b      	ldr	r3, [r7, #32]
  408426:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40842a:	623b      	str	r3, [r7, #32]
  40842c:	6a3b      	ldr	r3, [r7, #32]
  40842e:	f023 0301 	bic.w	r3, r3, #1
  408432:	623b      	str	r3, [r7, #32]
  408434:	4a64      	ldr	r2, [pc, #400]	; (4085c8 <udd_ctrl_in_sent+0x238>)
  408436:	6a3b      	ldr	r3, [r7, #32]
  408438:	6313      	str	r3, [r2, #48]	; 0x30
  40843a:	e006      	b.n	40844a <udd_ctrl_in_sent+0xba>
  40843c:	bf00      	nop
  40843e:	69fb      	ldr	r3, [r7, #28]
  408440:	3301      	adds	r3, #1
  408442:	61fb      	str	r3, [r7, #28]
  408444:	4a61      	ldr	r2, [pc, #388]	; (4085cc <udd_ctrl_in_sent+0x23c>)
  408446:	4293      	cmp	r3, r2
  408448:	d806      	bhi.n	408458 <udd_ctrl_in_sent+0xc8>
  40844a:	4b5f      	ldr	r3, [pc, #380]	; (4085c8 <udd_ctrl_in_sent+0x238>)
  40844c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40844e:	f003 0301 	and.w	r3, r3, #1
  408452:	2b00      	cmp	r3, #0
  408454:	d1f2      	bne.n	40843c <udd_ctrl_in_sent+0xac>
			return;
  408456:	e0b1      	b.n	4085bc <udd_ctrl_in_sent+0x22c>
			udd_ack_in_sent(0);
  408458:	bf00      	nop
			return;
  40845a:	e0af      	b.n	4085bc <udd_ctrl_in_sent+0x22c>
		}
		// Need of new buffer because the data phase is not complete
		if ((!udd_g_ctrlreq.over_under_run)
  40845c:	4b5e      	ldr	r3, [pc, #376]	; (4085d8 <udd_ctrl_in_sent+0x248>)
  40845e:	695b      	ldr	r3, [r3, #20]
  408460:	2b00      	cmp	r3, #0
  408462:	d00e      	beq.n	408482 <udd_ctrl_in_sent+0xf2>
				|| (!udd_g_ctrlreq.over_under_run())) {
  408464:	4b5c      	ldr	r3, [pc, #368]	; (4085d8 <udd_ctrl_in_sent+0x248>)
  408466:	695b      	ldr	r3, [r3, #20]
  408468:	4798      	blx	r3
  40846a:	4603      	mov	r3, r0
  40846c:	f083 0301 	eor.w	r3, r3, #1
  408470:	b2db      	uxtb	r3, r3
  408472:	2b00      	cmp	r3, #0
  408474:	d105      	bne.n	408482 <udd_ctrl_in_sent+0xf2>
			// Underrun then send zlp on IN
			// Here nb_remain=0 and allows to send a IN ZLP
		} else {
			// A new payload buffer is given
			udd_ctrl_payload_nb_trans = 0;
  408476:	4b59      	ldr	r3, [pc, #356]	; (4085dc <udd_ctrl_in_sent+0x24c>)
  408478:	2200      	movs	r2, #0
  40847a:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
  40847c:	4b56      	ldr	r3, [pc, #344]	; (4085d8 <udd_ctrl_in_sent+0x248>)
  40847e:	899b      	ldrh	r3, [r3, #12]
  408480:	86fb      	strh	r3, [r7, #54]	; 0x36
		}
	}
	// Continue transfer and send next data
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
  408482:	8efb      	ldrh	r3, [r7, #54]	; 0x36
  408484:	2b3f      	cmp	r3, #63	; 0x3f
  408486:	d905      	bls.n	408494 <udd_ctrl_in_sent+0x104>
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
  408488:	2340      	movs	r3, #64	; 0x40
  40848a:	86fb      	strh	r3, [r7, #54]	; 0x36
		b_shortpacket = false;
  40848c:	4b55      	ldr	r3, [pc, #340]	; (4085e4 <udd_ctrl_in_sent+0x254>)
  40848e:	2200      	movs	r2, #0
  408490:	701a      	strb	r2, [r3, #0]
  408492:	e002      	b.n	40849a <udd_ctrl_in_sent+0x10a>
	} else {
		b_shortpacket = true;
  408494:	4b53      	ldr	r3, [pc, #332]	; (4085e4 <udd_ctrl_in_sent+0x254>)
  408496:	2201      	movs	r2, #1
  408498:	701a      	strb	r2, [r3, #0]
	}
	// Fill buffer of endpoint control
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
  40849a:	4b4f      	ldr	r3, [pc, #316]	; (4085d8 <udd_ctrl_in_sent+0x248>)
  40849c:	689b      	ldr	r3, [r3, #8]
  40849e:	4a4f      	ldr	r2, [pc, #316]	; (4085dc <udd_ctrl_in_sent+0x24c>)
  4084a0:	8812      	ldrh	r2, [r2, #0]
  4084a2:	4413      	add	r3, r2
  4084a4:	633b      	str	r3, [r7, #48]	; 0x30
	// The IN data don't must be written in endpoint 0 DPRAM during
	// a next setup reception in same endpoint 0 DPRAM.
	// Thereby, an OUT ZLP reception must check before IN data write
	// and if no OUT ZLP is received the data must be written quickly (800us)
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
  4084a6:	4b51      	ldr	r3, [pc, #324]	; (4085ec <udd_ctrl_in_sent+0x25c>)
  4084a8:	4798      	blx	r3
  4084aa:	62f8      	str	r0, [r7, #44]	; 0x2c
	if (Is_udd_bank0_received(0)) {
  4084ac:	4b46      	ldr	r3, [pc, #280]	; (4085c8 <udd_ctrl_in_sent+0x238>)
  4084ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4084b0:	f003 0302 	and.w	r3, r3, #2
  4084b4:	2b00      	cmp	r3, #0
  4084b6:	d024      	beq.n	408502 <udd_ctrl_in_sent+0x172>
		// IN DATA phase aborted by OUT ZLP
		cpu_irq_restore(flags);
  4084b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
  4084ba:	4b4d      	ldr	r3, [pc, #308]	; (4085f0 <udd_ctrl_in_sent+0x260>)
  4084bc:	4798      	blx	r3
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
  4084be:	4b41      	ldr	r3, [pc, #260]	; (4085c4 <udd_ctrl_in_sent+0x234>)
  4084c0:	2204      	movs	r2, #4
  4084c2:	701a      	strb	r2, [r3, #0]
		udd_ack_in_sent(0);
  4084c4:	4b40      	ldr	r3, [pc, #256]	; (4085c8 <udd_ctrl_in_sent+0x238>)
  4084c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4084c8:	61bb      	str	r3, [r7, #24]
  4084ca:	69bb      	ldr	r3, [r7, #24]
  4084cc:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4084d0:	61bb      	str	r3, [r7, #24]
  4084d2:	69bb      	ldr	r3, [r7, #24]
  4084d4:	f023 0301 	bic.w	r3, r3, #1
  4084d8:	61bb      	str	r3, [r7, #24]
  4084da:	4a3b      	ldr	r2, [pc, #236]	; (4085c8 <udd_ctrl_in_sent+0x238>)
  4084dc:	69bb      	ldr	r3, [r7, #24]
  4084de:	6313      	str	r3, [r2, #48]	; 0x30
  4084e0:	e006      	b.n	4084f0 <udd_ctrl_in_sent+0x160>
  4084e2:	bf00      	nop
  4084e4:	697b      	ldr	r3, [r7, #20]
  4084e6:	3301      	adds	r3, #1
  4084e8:	617b      	str	r3, [r7, #20]
  4084ea:	4a38      	ldr	r2, [pc, #224]	; (4085cc <udd_ctrl_in_sent+0x23c>)
  4084ec:	4293      	cmp	r3, r2
  4084ee:	d806      	bhi.n	4084fe <udd_ctrl_in_sent+0x16e>
  4084f0:	4b35      	ldr	r3, [pc, #212]	; (4085c8 <udd_ctrl_in_sent+0x238>)
  4084f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4084f4:	f003 0301 	and.w	r3, r3, #1
  4084f8:	2b00      	cmp	r3, #0
  4084fa:	d1f2      	bne.n	4084e2 <udd_ctrl_in_sent+0x152>
		return; // Exit of IN DATA phase
  4084fc:	e05e      	b.n	4085bc <udd_ctrl_in_sent+0x22c>
		udd_ack_in_sent(0);
  4084fe:	bf00      	nop
		return; // Exit of IN DATA phase
  408500:	e05c      	b.n	4085bc <udd_ctrl_in_sent+0x22c>
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
  408502:	2300      	movs	r3, #0
  408504:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  408508:	e00a      	b.n	408520 <udd_ctrl_in_sent+0x190>
		udd_endpoint_fifo_write(0, *ptr_src++);
  40850a:	492f      	ldr	r1, [pc, #188]	; (4085c8 <udd_ctrl_in_sent+0x238>)
  40850c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  40850e:	1c5a      	adds	r2, r3, #1
  408510:	633a      	str	r2, [r7, #48]	; 0x30
  408512:	781b      	ldrb	r3, [r3, #0]
  408514:	650b      	str	r3, [r1, #80]	; 0x50
	for (i = 0; i < nb_remain; i++) {
  408516:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
  40851a:	3301      	adds	r3, #1
  40851c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  408520:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
  408524:	b29b      	uxth	r3, r3
  408526:	8efa      	ldrh	r2, [r7, #54]	; 0x36
  408528:	429a      	cmp	r2, r3
  40852a:	d8ee      	bhi.n	40850a <udd_ctrl_in_sent+0x17a>
	}
	udd_ctrl_payload_nb_trans += nb_remain;
  40852c:	4b2b      	ldr	r3, [pc, #172]	; (4085dc <udd_ctrl_in_sent+0x24c>)
  40852e:	881a      	ldrh	r2, [r3, #0]
  408530:	8efb      	ldrh	r3, [r7, #54]	; 0x36
  408532:	4413      	add	r3, r2
  408534:	b29a      	uxth	r2, r3
  408536:	4b29      	ldr	r3, [pc, #164]	; (4085dc <udd_ctrl_in_sent+0x24c>)
  408538:	801a      	strh	r2, [r3, #0]
	// Validate and send the data available in the control endpoint buffer
	udd_set_transmit_ready(0);
  40853a:	4b23      	ldr	r3, [pc, #140]	; (4085c8 <udd_ctrl_in_sent+0x238>)
  40853c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40853e:	613b      	str	r3, [r7, #16]
  408540:	693b      	ldr	r3, [r7, #16]
  408542:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  408546:	613b      	str	r3, [r7, #16]
  408548:	693b      	ldr	r3, [r7, #16]
  40854a:	f043 0310 	orr.w	r3, r3, #16
  40854e:	613b      	str	r3, [r7, #16]
  408550:	4a1d      	ldr	r2, [pc, #116]	; (4085c8 <udd_ctrl_in_sent+0x238>)
  408552:	693b      	ldr	r3, [r7, #16]
  408554:	6313      	str	r3, [r2, #48]	; 0x30
  408556:	2300      	movs	r3, #0
  408558:	60fb      	str	r3, [r7, #12]
  40855a:	e006      	b.n	40856a <udd_ctrl_in_sent+0x1da>
  40855c:	bf00      	nop
  40855e:	68fb      	ldr	r3, [r7, #12]
  408560:	3301      	adds	r3, #1
  408562:	60fb      	str	r3, [r7, #12]
  408564:	4a19      	ldr	r2, [pc, #100]	; (4085cc <udd_ctrl_in_sent+0x23c>)
  408566:	4293      	cmp	r3, r2
  408568:	d806      	bhi.n	408578 <udd_ctrl_in_sent+0x1e8>
  40856a:	4b17      	ldr	r3, [pc, #92]	; (4085c8 <udd_ctrl_in_sent+0x238>)
  40856c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40856e:	f003 0310 	and.w	r3, r3, #16
  408572:	2b10      	cmp	r3, #16
  408574:	d1f2      	bne.n	40855c <udd_ctrl_in_sent+0x1cc>
  408576:	e000      	b.n	40857a <udd_ctrl_in_sent+0x1ea>
  408578:	bf00      	nop
	udd_ack_in_sent(0);
  40857a:	4b13      	ldr	r3, [pc, #76]	; (4085c8 <udd_ctrl_in_sent+0x238>)
  40857c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40857e:	60bb      	str	r3, [r7, #8]
  408580:	68bb      	ldr	r3, [r7, #8]
  408582:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  408586:	60bb      	str	r3, [r7, #8]
  408588:	68bb      	ldr	r3, [r7, #8]
  40858a:	f023 0301 	bic.w	r3, r3, #1
  40858e:	60bb      	str	r3, [r7, #8]
  408590:	4a0d      	ldr	r2, [pc, #52]	; (4085c8 <udd_ctrl_in_sent+0x238>)
  408592:	68bb      	ldr	r3, [r7, #8]
  408594:	6313      	str	r3, [r2, #48]	; 0x30
  408596:	e006      	b.n	4085a6 <udd_ctrl_in_sent+0x216>
  408598:	bf00      	nop
  40859a:	687b      	ldr	r3, [r7, #4]
  40859c:	3301      	adds	r3, #1
  40859e:	607b      	str	r3, [r7, #4]
  4085a0:	4a0a      	ldr	r2, [pc, #40]	; (4085cc <udd_ctrl_in_sent+0x23c>)
  4085a2:	4293      	cmp	r3, r2
  4085a4:	d806      	bhi.n	4085b4 <udd_ctrl_in_sent+0x224>
  4085a6:	4b08      	ldr	r3, [pc, #32]	; (4085c8 <udd_ctrl_in_sent+0x238>)
  4085a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4085aa:	f003 0301 	and.w	r3, r3, #1
  4085ae:	2b00      	cmp	r3, #0
  4085b0:	d1f2      	bne.n	408598 <udd_ctrl_in_sent+0x208>
  4085b2:	e000      	b.n	4085b6 <udd_ctrl_in_sent+0x226>
  4085b4:	bf00      	nop

	// In case of abort of DATA IN phase, no need to enable nak OUT interrupt
	// because OUT endpoint is already free and ZLP OUT accepted.
	cpu_irq_restore(flags);
  4085b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
  4085b8:	4b0d      	ldr	r3, [pc, #52]	; (4085f0 <udd_ctrl_in_sent+0x260>)
  4085ba:	4798      	blx	r3
}
  4085bc:	3738      	adds	r7, #56	; 0x38
  4085be:	46bd      	mov	sp, r7
  4085c0:	bd80      	pop	{r7, pc}
  4085c2:	bf00      	nop
  4085c4:	2001a2be 	.word	0x2001a2be
  4085c8:	40044000 	.word	0x40044000
  4085cc:	0001869f 	.word	0x0001869f
  4085d0:	004089b1 	.word	0x004089b1
  4085d4:	00408135 	.word	0x00408135
  4085d8:	2001aba8 	.word	0x2001aba8
  4085dc:	2001a2c2 	.word	0x2001a2c2
  4085e0:	2001a2c0 	.word	0x2001a2c0
  4085e4:	2001a328 	.word	0x2001a328
  4085e8:	00408999 	.word	0x00408999
  4085ec:	00407029 	.word	0x00407029
  4085f0:	00407081 	.word	0x00407081

004085f4 <udd_ctrl_out_received>:


static void udd_ctrl_out_received(void)
{
  4085f4:	b580      	push	{r7, lr}
  4085f6:	b08e      	sub	sp, #56	; 0x38
  4085f8:	af00      	add	r7, sp, #0
	uint8_t i;
	uint16_t nb_data;

	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
  4085fa:	4b91      	ldr	r3, [pc, #580]	; (408840 <udd_ctrl_out_received+0x24c>)
  4085fc:	781b      	ldrb	r3, [r3, #0]
  4085fe:	2b01      	cmp	r3, #1
  408600:	d02d      	beq.n	40865e <udd_ctrl_out_received+0x6a>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
  408602:	4b8f      	ldr	r3, [pc, #572]	; (408840 <udd_ctrl_out_received+0x24c>)
  408604:	781b      	ldrb	r3, [r3, #0]
  408606:	2b02      	cmp	r3, #2
  408608:	d003      	beq.n	408612 <udd_ctrl_out_received+0x1e>
				|| (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP ==
  40860a:	4b8d      	ldr	r3, [pc, #564]	; (408840 <udd_ctrl_out_received+0x24c>)
  40860c:	781b      	ldrb	r3, [r3, #0]
  40860e:	2b04      	cmp	r3, #4
  408610:	d102      	bne.n	408618 <udd_ctrl_out_received+0x24>
				udd_ep_control_state)) {
			// End of SETUP request:
			// - Data IN Phase aborted,
			// - or last Data IN Phase hidden by ZLP OUT sending quickly,
			// - or ZLP OUT received normally.
			udd_ctrl_endofrequest();
  408612:	4b8c      	ldr	r3, [pc, #560]	; (408844 <udd_ctrl_out_received+0x250>)
  408614:	4798      	blx	r3
  408616:	e001      	b.n	40861c <udd_ctrl_out_received+0x28>
		} else {
			// Protocol error during SETUP request
			udd_ctrl_stall_data();
  408618:	4b8b      	ldr	r3, [pc, #556]	; (408848 <udd_ctrl_out_received+0x254>)
  40861a:	4798      	blx	r3
		}
		udd_ack_bank0_received(0);
  40861c:	4b8b      	ldr	r3, [pc, #556]	; (40884c <udd_ctrl_out_received+0x258>)
  40861e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  408620:	62fb      	str	r3, [r7, #44]	; 0x2c
  408622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  408624:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  408628:	62fb      	str	r3, [r7, #44]	; 0x2c
  40862a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40862c:	f023 0302 	bic.w	r3, r3, #2
  408630:	62fb      	str	r3, [r7, #44]	; 0x2c
  408632:	4a86      	ldr	r2, [pc, #536]	; (40884c <udd_ctrl_out_received+0x258>)
  408634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  408636:	6313      	str	r3, [r2, #48]	; 0x30
  408638:	e006      	b.n	408648 <udd_ctrl_out_received+0x54>
  40863a:	bf00      	nop
  40863c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40863e:	3301      	adds	r3, #1
  408640:	62bb      	str	r3, [r7, #40]	; 0x28
  408642:	4a83      	ldr	r2, [pc, #524]	; (408850 <udd_ctrl_out_received+0x25c>)
  408644:	4293      	cmp	r3, r2
  408646:	d806      	bhi.n	408656 <udd_ctrl_out_received+0x62>
  408648:	4b80      	ldr	r3, [pc, #512]	; (40884c <udd_ctrl_out_received+0x258>)
  40864a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40864c:	f003 0302 	and.w	r3, r3, #2
  408650:	2b00      	cmp	r3, #0
  408652:	d1f2      	bne.n	40863a <udd_ctrl_out_received+0x46>
  408654:	e000      	b.n	408658 <udd_ctrl_out_received+0x64>
  408656:	bf00      	nop
		// Reinitializes control endpoint management
		udd_ctrl_init();
  408658:	4b7e      	ldr	r3, [pc, #504]	; (408854 <udd_ctrl_out_received+0x260>)
  40865a:	4798      	blx	r3
		return;
  40865c:	e12d      	b.n	4088ba <udd_ctrl_out_received+0x2c6>
	}
	// Read data received during OUT phase
	nb_data = udd_byte_count(0);
  40865e:	4b7b      	ldr	r3, [pc, #492]	; (40884c <udd_ctrl_out_received+0x258>)
  408660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  408662:	0c1b      	lsrs	r3, r3, #16
  408664:	b29b      	uxth	r3, r3
  408666:	f3c3 030a 	ubfx	r3, r3, #0, #11
  40866a:	86bb      	strh	r3, [r7, #52]	; 0x34
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
  40866c:	4b7a      	ldr	r3, [pc, #488]	; (408858 <udd_ctrl_out_received+0x264>)
  40866e:	899b      	ldrh	r3, [r3, #12]
  408670:	461a      	mov	r2, r3
  408672:	4b7a      	ldr	r3, [pc, #488]	; (40885c <udd_ctrl_out_received+0x268>)
  408674:	881b      	ldrh	r3, [r3, #0]
  408676:	4619      	mov	r1, r3
  408678:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
  40867a:	440b      	add	r3, r1
  40867c:	429a      	cmp	r2, r3
  40867e:	da05      	bge.n	40868c <udd_ctrl_out_received+0x98>
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size -
  408680:	4b75      	ldr	r3, [pc, #468]	; (408858 <udd_ctrl_out_received+0x264>)
  408682:	899a      	ldrh	r2, [r3, #12]
  408684:	4b75      	ldr	r3, [pc, #468]	; (40885c <udd_ctrl_out_received+0x268>)
  408686:	881b      	ldrh	r3, [r3, #0]
  408688:	1ad3      	subs	r3, r2, r3
  40868a:	86bb      	strh	r3, [r7, #52]	; 0x34
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
  40868c:	4b72      	ldr	r3, [pc, #456]	; (408858 <udd_ctrl_out_received+0x264>)
  40868e:	689b      	ldr	r3, [r3, #8]
  408690:	4a72      	ldr	r2, [pc, #456]	; (40885c <udd_ctrl_out_received+0x268>)
  408692:	8812      	ldrh	r2, [r2, #0]
  408694:	4413      	add	r3, r2
  408696:	633b      	str	r3, [r7, #48]	; 0x30
	for (i = 0; i < nb_data; i++) {
  408698:	2300      	movs	r3, #0
  40869a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  40869e:	e00b      	b.n	4086b8 <udd_ctrl_out_received+0xc4>
		*ptr_dest++ = udd_endpoint_fifo_read(0);
  4086a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  4086a2:	1c5a      	adds	r2, r3, #1
  4086a4:	633a      	str	r2, [r7, #48]	; 0x30
  4086a6:	4a69      	ldr	r2, [pc, #420]	; (40884c <udd_ctrl_out_received+0x258>)
  4086a8:	6d12      	ldr	r2, [r2, #80]	; 0x50
  4086aa:	b2d2      	uxtb	r2, r2
  4086ac:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < nb_data; i++) {
  4086ae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  4086b2:	3301      	adds	r3, #1
  4086b4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  4086b8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  4086bc:	b29b      	uxth	r3, r3
  4086be:	8eba      	ldrh	r2, [r7, #52]	; 0x34
  4086c0:	429a      	cmp	r2, r3
  4086c2:	d8ed      	bhi.n	4086a0 <udd_ctrl_out_received+0xac>
	}
	udd_ctrl_payload_nb_trans += nb_data;
  4086c4:	4b65      	ldr	r3, [pc, #404]	; (40885c <udd_ctrl_out_received+0x268>)
  4086c6:	881a      	ldrh	r2, [r3, #0]
  4086c8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
  4086ca:	4413      	add	r3, r2
  4086cc:	b29a      	uxth	r2, r3
  4086ce:	4b63      	ldr	r3, [pc, #396]	; (40885c <udd_ctrl_out_received+0x268>)
  4086d0:	801a      	strh	r2, [r3, #0]

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
  4086d2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
  4086d4:	2b40      	cmp	r3, #64	; 0x40
  4086d6:	d10a      	bne.n	4086ee <udd_ctrl_out_received+0xfa>
			|| (udd_g_ctrlreq.req.wLength <=
  4086d8:	4b5f      	ldr	r3, [pc, #380]	; (408858 <udd_ctrl_out_received+0x264>)
  4086da:	88db      	ldrh	r3, [r3, #6]
  4086dc:	461a      	mov	r2, r3
			(udd_ctrl_prev_payload_nb_trans +
  4086de:	4b60      	ldr	r3, [pc, #384]	; (408860 <udd_ctrl_out_received+0x26c>)
  4086e0:	881b      	ldrh	r3, [r3, #0]
  4086e2:	4619      	mov	r1, r3
  4086e4:	4b5d      	ldr	r3, [pc, #372]	; (40885c <udd_ctrl_out_received+0x268>)
  4086e6:	881b      	ldrh	r3, [r3, #0]
  4086e8:	440b      	add	r3, r1
			|| (udd_g_ctrlreq.req.wLength <=
  4086ea:	429a      	cmp	r2, r3
  4086ec:	dc52      	bgt.n	408794 <udd_ctrl_out_received+0x1a0>
			udd_ctrl_payload_nb_trans))) {
		// End of reception because it is a short packet
		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
  4086ee:	4b5b      	ldr	r3, [pc, #364]	; (40885c <udd_ctrl_out_received+0x268>)
  4086f0:	881a      	ldrh	r2, [r3, #0]
  4086f2:	4b59      	ldr	r3, [pc, #356]	; (408858 <udd_ctrl_out_received+0x264>)
  4086f4:	819a      	strh	r2, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
  4086f6:	4b58      	ldr	r3, [pc, #352]	; (408858 <udd_ctrl_out_received+0x264>)
  4086f8:	695b      	ldr	r3, [r3, #20]
  4086fa:	2b00      	cmp	r3, #0
  4086fc:	d029      	beq.n	408752 <udd_ctrl_out_received+0x15e>
			if (!udd_g_ctrlreq.over_under_run()) {
  4086fe:	4b56      	ldr	r3, [pc, #344]	; (408858 <udd_ctrl_out_received+0x264>)
  408700:	695b      	ldr	r3, [r3, #20]
  408702:	4798      	blx	r3
  408704:	4603      	mov	r3, r0
  408706:	f083 0301 	eor.w	r3, r3, #1
  40870a:	b2db      	uxtb	r3, r3
  40870c:	2b00      	cmp	r3, #0
  40870e:	d020      	beq.n	408752 <udd_ctrl_out_received+0x15e>
				// Stall ZLP
				udd_ctrl_stall_data();
  408710:	4b4d      	ldr	r3, [pc, #308]	; (408848 <udd_ctrl_out_received+0x254>)
  408712:	4798      	blx	r3
				// Ack reception of OUT to replace NAK by a STALL
				udd_ack_bank0_received(0);
  408714:	4b4d      	ldr	r3, [pc, #308]	; (40884c <udd_ctrl_out_received+0x258>)
  408716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  408718:	627b      	str	r3, [r7, #36]	; 0x24
  40871a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40871c:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  408720:	627b      	str	r3, [r7, #36]	; 0x24
  408722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  408724:	f023 0302 	bic.w	r3, r3, #2
  408728:	627b      	str	r3, [r7, #36]	; 0x24
  40872a:	4a48      	ldr	r2, [pc, #288]	; (40884c <udd_ctrl_out_received+0x258>)
  40872c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40872e:	6313      	str	r3, [r2, #48]	; 0x30
  408730:	e006      	b.n	408740 <udd_ctrl_out_received+0x14c>
  408732:	bf00      	nop
  408734:	6a3b      	ldr	r3, [r7, #32]
  408736:	3301      	adds	r3, #1
  408738:	623b      	str	r3, [r7, #32]
  40873a:	4a45      	ldr	r2, [pc, #276]	; (408850 <udd_ctrl_out_received+0x25c>)
  40873c:	4293      	cmp	r3, r2
  40873e:	d806      	bhi.n	40874e <udd_ctrl_out_received+0x15a>
  408740:	4b42      	ldr	r3, [pc, #264]	; (40884c <udd_ctrl_out_received+0x258>)
  408742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  408744:	f003 0302 	and.w	r3, r3, #2
  408748:	2b00      	cmp	r3, #0
  40874a:	d1f2      	bne.n	408732 <udd_ctrl_out_received+0x13e>
				return;
  40874c:	e0b5      	b.n	4088ba <udd_ctrl_out_received+0x2c6>
				udd_ack_bank0_received(0);
  40874e:	bf00      	nop
				return;
  408750:	e0b3      	b.n	4088ba <udd_ctrl_out_received+0x2c6>
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ack_bank0_received(0);
  408752:	4b3e      	ldr	r3, [pc, #248]	; (40884c <udd_ctrl_out_received+0x258>)
  408754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  408756:	61fb      	str	r3, [r7, #28]
  408758:	69fb      	ldr	r3, [r7, #28]
  40875a:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40875e:	61fb      	str	r3, [r7, #28]
  408760:	69fb      	ldr	r3, [r7, #28]
  408762:	f023 0302 	bic.w	r3, r3, #2
  408766:	61fb      	str	r3, [r7, #28]
  408768:	4a38      	ldr	r2, [pc, #224]	; (40884c <udd_ctrl_out_received+0x258>)
  40876a:	69fb      	ldr	r3, [r7, #28]
  40876c:	6313      	str	r3, [r2, #48]	; 0x30
  40876e:	e006      	b.n	40877e <udd_ctrl_out_received+0x18a>
  408770:	bf00      	nop
  408772:	69bb      	ldr	r3, [r7, #24]
  408774:	3301      	adds	r3, #1
  408776:	61bb      	str	r3, [r7, #24]
  408778:	4a35      	ldr	r2, [pc, #212]	; (408850 <udd_ctrl_out_received+0x25c>)
  40877a:	4293      	cmp	r3, r2
  40877c:	d806      	bhi.n	40878c <udd_ctrl_out_received+0x198>
  40877e:	4b33      	ldr	r3, [pc, #204]	; (40884c <udd_ctrl_out_received+0x258>)
  408780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  408782:	f003 0302 	and.w	r3, r3, #2
  408786:	2b00      	cmp	r3, #0
  408788:	d1f2      	bne.n	408770 <udd_ctrl_out_received+0x17c>
  40878a:	e000      	b.n	40878e <udd_ctrl_out_received+0x19a>
  40878c:	bf00      	nop
		udd_ctrl_send_zlp_in();
  40878e:	4b35      	ldr	r3, [pc, #212]	; (408864 <udd_ctrl_out_received+0x270>)
  408790:	4798      	blx	r3
		return;
  408792:	e092      	b.n	4088ba <udd_ctrl_out_received+0x2c6>
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
  408794:	4b30      	ldr	r3, [pc, #192]	; (408858 <udd_ctrl_out_received+0x264>)
  408796:	899a      	ldrh	r2, [r3, #12]
  408798:	4b30      	ldr	r3, [pc, #192]	; (40885c <udd_ctrl_out_received+0x268>)
  40879a:	881b      	ldrh	r3, [r3, #0]
  40879c:	429a      	cmp	r2, r3
  40879e:	d16e      	bne.n	40887e <udd_ctrl_out_received+0x28a>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
  4087a0:	4b2d      	ldr	r3, [pc, #180]	; (408858 <udd_ctrl_out_received+0x264>)
  4087a2:	695b      	ldr	r3, [r3, #20]
  4087a4:	2b00      	cmp	r3, #0
  4087a6:	d120      	bne.n	4087ea <udd_ctrl_out_received+0x1f6>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
  4087a8:	4b27      	ldr	r3, [pc, #156]	; (408848 <udd_ctrl_out_received+0x254>)
  4087aa:	4798      	blx	r3
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_bank0_received(0);
  4087ac:	4b27      	ldr	r3, [pc, #156]	; (40884c <udd_ctrl_out_received+0x258>)
  4087ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4087b0:	617b      	str	r3, [r7, #20]
  4087b2:	697b      	ldr	r3, [r7, #20]
  4087b4:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4087b8:	617b      	str	r3, [r7, #20]
  4087ba:	697b      	ldr	r3, [r7, #20]
  4087bc:	f023 0302 	bic.w	r3, r3, #2
  4087c0:	617b      	str	r3, [r7, #20]
  4087c2:	4a22      	ldr	r2, [pc, #136]	; (40884c <udd_ctrl_out_received+0x258>)
  4087c4:	697b      	ldr	r3, [r7, #20]
  4087c6:	6313      	str	r3, [r2, #48]	; 0x30
  4087c8:	e006      	b.n	4087d8 <udd_ctrl_out_received+0x1e4>
  4087ca:	bf00      	nop
  4087cc:	693b      	ldr	r3, [r7, #16]
  4087ce:	3301      	adds	r3, #1
  4087d0:	613b      	str	r3, [r7, #16]
  4087d2:	4a1f      	ldr	r2, [pc, #124]	; (408850 <udd_ctrl_out_received+0x25c>)
  4087d4:	4293      	cmp	r3, r2
  4087d6:	d806      	bhi.n	4087e6 <udd_ctrl_out_received+0x1f2>
  4087d8:	4b1c      	ldr	r3, [pc, #112]	; (40884c <udd_ctrl_out_received+0x258>)
  4087da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4087dc:	f003 0302 	and.w	r3, r3, #2
  4087e0:	2b00      	cmp	r3, #0
  4087e2:	d1f2      	bne.n	4087ca <udd_ctrl_out_received+0x1d6>
			return;
  4087e4:	e069      	b.n	4088ba <udd_ctrl_out_received+0x2c6>
			udd_ack_bank0_received(0);
  4087e6:	bf00      	nop
			return;
  4087e8:	e067      	b.n	4088ba <udd_ctrl_out_received+0x2c6>
		}
		if (!udd_g_ctrlreq.over_under_run()) {
  4087ea:	4b1b      	ldr	r3, [pc, #108]	; (408858 <udd_ctrl_out_received+0x264>)
  4087ec:	695b      	ldr	r3, [r3, #20]
  4087ee:	4798      	blx	r3
  4087f0:	4603      	mov	r3, r0
  4087f2:	f083 0301 	eor.w	r3, r3, #1
  4087f6:	b2db      	uxtb	r3, r3
  4087f8:	2b00      	cmp	r3, #0
  4087fa:	d035      	beq.n	408868 <udd_ctrl_out_received+0x274>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
  4087fc:	4b12      	ldr	r3, [pc, #72]	; (408848 <udd_ctrl_out_received+0x254>)
  4087fe:	4798      	blx	r3
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_bank0_received(0);
  408800:	4b12      	ldr	r3, [pc, #72]	; (40884c <udd_ctrl_out_received+0x258>)
  408802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  408804:	60fb      	str	r3, [r7, #12]
  408806:	68fb      	ldr	r3, [r7, #12]
  408808:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40880c:	60fb      	str	r3, [r7, #12]
  40880e:	68fb      	ldr	r3, [r7, #12]
  408810:	f023 0302 	bic.w	r3, r3, #2
  408814:	60fb      	str	r3, [r7, #12]
  408816:	4a0d      	ldr	r2, [pc, #52]	; (40884c <udd_ctrl_out_received+0x258>)
  408818:	68fb      	ldr	r3, [r7, #12]
  40881a:	6313      	str	r3, [r2, #48]	; 0x30
  40881c:	e006      	b.n	40882c <udd_ctrl_out_received+0x238>
  40881e:	bf00      	nop
  408820:	68bb      	ldr	r3, [r7, #8]
  408822:	3301      	adds	r3, #1
  408824:	60bb      	str	r3, [r7, #8]
  408826:	4a0a      	ldr	r2, [pc, #40]	; (408850 <udd_ctrl_out_received+0x25c>)
  408828:	4293      	cmp	r3, r2
  40882a:	d806      	bhi.n	40883a <udd_ctrl_out_received+0x246>
  40882c:	4b07      	ldr	r3, [pc, #28]	; (40884c <udd_ctrl_out_received+0x258>)
  40882e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  408830:	f003 0302 	and.w	r3, r3, #2
  408834:	2b00      	cmp	r3, #0
  408836:	d1f2      	bne.n	40881e <udd_ctrl_out_received+0x22a>
			return;
  408838:	e03f      	b.n	4088ba <udd_ctrl_out_received+0x2c6>
			udd_ack_bank0_received(0);
  40883a:	bf00      	nop
			return;
  40883c:	e03d      	b.n	4088ba <udd_ctrl_out_received+0x2c6>
  40883e:	bf00      	nop
  408840:	2001a2be 	.word	0x2001a2be
  408844:	004089b1 	.word	0x004089b1
  408848:	004088d1 	.word	0x004088d1
  40884c:	40044000 	.word	0x40044000
  408850:	0001869f 	.word	0x0001869f
  408854:	00408135 	.word	0x00408135
  408858:	2001aba8 	.word	0x2001aba8
  40885c:	2001a2c2 	.word	0x2001a2c2
  408860:	2001a2c0 	.word	0x2001a2c0
  408864:	00408935 	.word	0x00408935
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
  408868:	4b15      	ldr	r3, [pc, #84]	; (4088c0 <udd_ctrl_out_received+0x2cc>)
  40886a:	881a      	ldrh	r2, [r3, #0]
  40886c:	4b15      	ldr	r3, [pc, #84]	; (4088c4 <udd_ctrl_out_received+0x2d0>)
  40886e:	881b      	ldrh	r3, [r3, #0]
  408870:	4413      	add	r3, r2
  408872:	b29a      	uxth	r2, r3
  408874:	4b12      	ldr	r3, [pc, #72]	; (4088c0 <udd_ctrl_out_received+0x2cc>)
  408876:	801a      	strh	r2, [r3, #0]
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
  408878:	4b12      	ldr	r3, [pc, #72]	; (4088c4 <udd_ctrl_out_received+0x2d0>)
  40887a:	2200      	movs	r2, #0
  40887c:	801a      	strh	r2, [r3, #0]
	}
	// Free buffer of control endpoint to authorize next reception
	udd_ack_bank0_received(0);
  40887e:	4b12      	ldr	r3, [pc, #72]	; (4088c8 <udd_ctrl_out_received+0x2d4>)
  408880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  408882:	607b      	str	r3, [r7, #4]
  408884:	687b      	ldr	r3, [r7, #4]
  408886:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40888a:	607b      	str	r3, [r7, #4]
  40888c:	687b      	ldr	r3, [r7, #4]
  40888e:	f023 0302 	bic.w	r3, r3, #2
  408892:	607b      	str	r3, [r7, #4]
  408894:	4a0c      	ldr	r2, [pc, #48]	; (4088c8 <udd_ctrl_out_received+0x2d4>)
  408896:	687b      	ldr	r3, [r7, #4]
  408898:	6313      	str	r3, [r2, #48]	; 0x30
  40889a:	e006      	b.n	4088aa <udd_ctrl_out_received+0x2b6>
  40889c:	bf00      	nop
  40889e:	683b      	ldr	r3, [r7, #0]
  4088a0:	3301      	adds	r3, #1
  4088a2:	603b      	str	r3, [r7, #0]
  4088a4:	4a09      	ldr	r2, [pc, #36]	; (4088cc <udd_ctrl_out_received+0x2d8>)
  4088a6:	4293      	cmp	r3, r2
  4088a8:	d806      	bhi.n	4088b8 <udd_ctrl_out_received+0x2c4>
  4088aa:	4b07      	ldr	r3, [pc, #28]	; (4088c8 <udd_ctrl_out_received+0x2d4>)
  4088ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4088ae:	f003 0302 	and.w	r3, r3, #2
  4088b2:	2b00      	cmp	r3, #0
  4088b4:	d1f2      	bne.n	40889c <udd_ctrl_out_received+0x2a8>
  4088b6:	e000      	b.n	4088ba <udd_ctrl_out_received+0x2c6>
  4088b8:	bf00      	nop
}
  4088ba:	3738      	adds	r7, #56	; 0x38
  4088bc:	46bd      	mov	sp, r7
  4088be:	bd80      	pop	{r7, pc}
  4088c0:	2001a2c0 	.word	0x2001a2c0
  4088c4:	2001a2c2 	.word	0x2001a2c2
  4088c8:	40044000 	.word	0x40044000
  4088cc:	0001869f 	.word	0x0001869f

004088d0 <udd_ctrl_stall_data>:


static void udd_ctrl_stall_data(void)
{
  4088d0:	b480      	push	{r7}
  4088d2:	b083      	sub	sp, #12
  4088d4:	af00      	add	r7, sp, #0
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
  4088d6:	4b14      	ldr	r3, [pc, #80]	; (408928 <udd_ctrl_stall_data+0x58>)
  4088d8:	2205      	movs	r2, #5
  4088da:	701a      	strb	r2, [r3, #0]
	udd_enable_stall_handshake(0);
  4088dc:	4b13      	ldr	r3, [pc, #76]	; (40892c <udd_ctrl_stall_data+0x5c>)
  4088de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4088e0:	607b      	str	r3, [r7, #4]
  4088e2:	687b      	ldr	r3, [r7, #4]
  4088e4:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4088e8:	607b      	str	r3, [r7, #4]
  4088ea:	687b      	ldr	r3, [r7, #4]
  4088ec:	f043 0320 	orr.w	r3, r3, #32
  4088f0:	607b      	str	r3, [r7, #4]
  4088f2:	4a0e      	ldr	r2, [pc, #56]	; (40892c <udd_ctrl_stall_data+0x5c>)
  4088f4:	687b      	ldr	r3, [r7, #4]
  4088f6:	6313      	str	r3, [r2, #48]	; 0x30
  4088f8:	2300      	movs	r3, #0
  4088fa:	603b      	str	r3, [r7, #0]
  4088fc:	e006      	b.n	40890c <udd_ctrl_stall_data+0x3c>
  4088fe:	bf00      	nop
  408900:	683b      	ldr	r3, [r7, #0]
  408902:	3301      	adds	r3, #1
  408904:	603b      	str	r3, [r7, #0]
  408906:	4a0a      	ldr	r2, [pc, #40]	; (408930 <udd_ctrl_stall_data+0x60>)
  408908:	4293      	cmp	r3, r2
  40890a:	d806      	bhi.n	40891a <udd_ctrl_stall_data+0x4a>
  40890c:	4b07      	ldr	r3, [pc, #28]	; (40892c <udd_ctrl_stall_data+0x5c>)
  40890e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  408910:	f003 0320 	and.w	r3, r3, #32
  408914:	2b20      	cmp	r3, #32
  408916:	d1f2      	bne.n	4088fe <udd_ctrl_stall_data+0x2e>
}
  408918:	e000      	b.n	40891c <udd_ctrl_stall_data+0x4c>
	udd_enable_stall_handshake(0);
  40891a:	bf00      	nop
}
  40891c:	bf00      	nop
  40891e:	370c      	adds	r7, #12
  408920:	46bd      	mov	sp, r7
  408922:	f85d 7b04 	ldr.w	r7, [sp], #4
  408926:	4770      	bx	lr
  408928:	2001a2be 	.word	0x2001a2be
  40892c:	40044000 	.word	0x40044000
  408930:	0001869f 	.word	0x0001869f

00408934 <udd_ctrl_send_zlp_in>:


static void udd_ctrl_send_zlp_in(void)
{
  408934:	b480      	push	{r7}
  408936:	b083      	sub	sp, #12
  408938:	af00      	add	r7, sp, #0
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
  40893a:	4b14      	ldr	r3, [pc, #80]	; (40898c <udd_ctrl_send_zlp_in+0x58>)
  40893c:	2203      	movs	r2, #3
  40893e:	701a      	strb	r2, [r3, #0]
	// Validate and send empty IN packet on control endpoint
	// Send ZLP on IN endpoint
	udd_set_transmit_ready(0);
  408940:	4b13      	ldr	r3, [pc, #76]	; (408990 <udd_ctrl_send_zlp_in+0x5c>)
  408942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  408944:	607b      	str	r3, [r7, #4]
  408946:	687b      	ldr	r3, [r7, #4]
  408948:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40894c:	607b      	str	r3, [r7, #4]
  40894e:	687b      	ldr	r3, [r7, #4]
  408950:	f043 0310 	orr.w	r3, r3, #16
  408954:	607b      	str	r3, [r7, #4]
  408956:	4a0e      	ldr	r2, [pc, #56]	; (408990 <udd_ctrl_send_zlp_in+0x5c>)
  408958:	687b      	ldr	r3, [r7, #4]
  40895a:	6313      	str	r3, [r2, #48]	; 0x30
  40895c:	2300      	movs	r3, #0
  40895e:	603b      	str	r3, [r7, #0]
  408960:	e006      	b.n	408970 <udd_ctrl_send_zlp_in+0x3c>
  408962:	bf00      	nop
  408964:	683b      	ldr	r3, [r7, #0]
  408966:	3301      	adds	r3, #1
  408968:	603b      	str	r3, [r7, #0]
  40896a:	4a0a      	ldr	r2, [pc, #40]	; (408994 <udd_ctrl_send_zlp_in+0x60>)
  40896c:	4293      	cmp	r3, r2
  40896e:	d806      	bhi.n	40897e <udd_ctrl_send_zlp_in+0x4a>
  408970:	4b07      	ldr	r3, [pc, #28]	; (408990 <udd_ctrl_send_zlp_in+0x5c>)
  408972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  408974:	f003 0310 	and.w	r3, r3, #16
  408978:	2b10      	cmp	r3, #16
  40897a:	d1f2      	bne.n	408962 <udd_ctrl_send_zlp_in+0x2e>
}
  40897c:	e000      	b.n	408980 <udd_ctrl_send_zlp_in+0x4c>
	udd_set_transmit_ready(0);
  40897e:	bf00      	nop
}
  408980:	bf00      	nop
  408982:	370c      	adds	r7, #12
  408984:	46bd      	mov	sp, r7
  408986:	f85d 7b04 	ldr.w	r7, [sp], #4
  40898a:	4770      	bx	lr
  40898c:	2001a2be 	.word	0x2001a2be
  408990:	40044000 	.word	0x40044000
  408994:	0001869f 	.word	0x0001869f

00408998 <udd_ctrl_send_zlp_out>:


static void udd_ctrl_send_zlp_out(void)
{
  408998:	b480      	push	{r7}
  40899a:	af00      	add	r7, sp, #0
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
  40899c:	4b03      	ldr	r3, [pc, #12]	; (4089ac <udd_ctrl_send_zlp_out+0x14>)
  40899e:	2204      	movs	r2, #4
  4089a0:	701a      	strb	r2, [r3, #0]
	// No action is necessary to accept OUT ZLP
	// because the buffer of control endpoint is already free
}
  4089a2:	bf00      	nop
  4089a4:	46bd      	mov	sp, r7
  4089a6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4089aa:	4770      	bx	lr
  4089ac:	2001a2be 	.word	0x2001a2be

004089b0 <udd_ctrl_endofrequest>:


static void udd_ctrl_endofrequest(void)
{
  4089b0:	b580      	push	{r7, lr}
  4089b2:	af00      	add	r7, sp, #0
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
  4089b4:	4b04      	ldr	r3, [pc, #16]	; (4089c8 <udd_ctrl_endofrequest+0x18>)
  4089b6:	691b      	ldr	r3, [r3, #16]
  4089b8:	2b00      	cmp	r3, #0
  4089ba:	d002      	beq.n	4089c2 <udd_ctrl_endofrequest+0x12>
		udd_g_ctrlreq.callback();
  4089bc:	4b02      	ldr	r3, [pc, #8]	; (4089c8 <udd_ctrl_endofrequest+0x18>)
  4089be:	691b      	ldr	r3, [r3, #16]
  4089c0:	4798      	blx	r3
	}
}
  4089c2:	bf00      	nop
  4089c4:	bd80      	pop	{r7, pc}
  4089c6:	bf00      	nop
  4089c8:	2001aba8 	.word	0x2001aba8

004089cc <udd_ctrl_interrupt>:


static bool udd_ctrl_interrupt(void)
{
  4089cc:	b580      	push	{r7, lr}
  4089ce:	b082      	sub	sp, #8
  4089d0:	af00      	add	r7, sp, #0
	//printf("\r\nEnter udd_ctrl_interrupt(void)!\r\n");
	if (!Is_udd_endpoint_interrupt(0))
  4089d2:	4b28      	ldr	r3, [pc, #160]	; (408a74 <udd_ctrl_interrupt+0xa8>)
  4089d4:	69db      	ldr	r3, [r3, #28]
  4089d6:	f003 0301 	and.w	r3, r3, #1
  4089da:	2b00      	cmp	r3, #0
  4089dc:	d101      	bne.n	4089e2 <udd_ctrl_interrupt+0x16>
		return false; // No interrupt events on control endpoint
  4089de:	2300      	movs	r3, #0
  4089e0:	e044      	b.n	408a6c <udd_ctrl_interrupt+0xa0>

	// Search event on control endpoint
	if (Is_udd_setup_received(0)) {
  4089e2:	4b24      	ldr	r3, [pc, #144]	; (408a74 <udd_ctrl_interrupt+0xa8>)
  4089e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4089e6:	f003 0304 	and.w	r3, r3, #4
  4089ea:	2b00      	cmp	r3, #0
  4089ec:	d003      	beq.n	4089f6 <udd_ctrl_interrupt+0x2a>
		// SETUP packet received
		udd_ctrl_setup_received();
  4089ee:	4b22      	ldr	r3, [pc, #136]	; (408a78 <udd_ctrl_interrupt+0xac>)
  4089f0:	4798      	blx	r3
		return true;
  4089f2:	2301      	movs	r3, #1
  4089f4:	e03a      	b.n	408a6c <udd_ctrl_interrupt+0xa0>
	}
	if (Is_udd_in_sent(0)) {
  4089f6:	4b1f      	ldr	r3, [pc, #124]	; (408a74 <udd_ctrl_interrupt+0xa8>)
  4089f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4089fa:	f003 0301 	and.w	r3, r3, #1
  4089fe:	2b00      	cmp	r3, #0
  408a00:	d003      	beq.n	408a0a <udd_ctrl_interrupt+0x3e>
		// IN packet sent
		udd_ctrl_in_sent();
  408a02:	4b1e      	ldr	r3, [pc, #120]	; (408a7c <udd_ctrl_interrupt+0xb0>)
  408a04:	4798      	blx	r3
		return true;
  408a06:	2301      	movs	r3, #1
  408a08:	e030      	b.n	408a6c <udd_ctrl_interrupt+0xa0>
	}
	if (Is_udd_bank0_received(0)) {
  408a0a:	4b1a      	ldr	r3, [pc, #104]	; (408a74 <udd_ctrl_interrupt+0xa8>)
  408a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  408a0e:	f003 0302 	and.w	r3, r3, #2
  408a12:	2b00      	cmp	r3, #0
  408a14:	d003      	beq.n	408a1e <udd_ctrl_interrupt+0x52>
		// OUT packet received
		udd_ctrl_out_received();
  408a16:	4b1a      	ldr	r3, [pc, #104]	; (408a80 <udd_ctrl_interrupt+0xb4>)
  408a18:	4798      	blx	r3
		return true;
  408a1a:	2301      	movs	r3, #1
  408a1c:	e026      	b.n	408a6c <udd_ctrl_interrupt+0xa0>
	}
	if (Is_udd_stall(0)) {
  408a1e:	4b15      	ldr	r3, [pc, #84]	; (408a74 <udd_ctrl_interrupt+0xa8>)
  408a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  408a22:	f003 0308 	and.w	r3, r3, #8
  408a26:	2b00      	cmp	r3, #0
  408a28:	d01f      	beq.n	408a6a <udd_ctrl_interrupt+0x9e>
		// STALLed
		udd_ack_stall(0);
  408a2a:	4b12      	ldr	r3, [pc, #72]	; (408a74 <udd_ctrl_interrupt+0xa8>)
  408a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  408a2e:	607b      	str	r3, [r7, #4]
  408a30:	687b      	ldr	r3, [r7, #4]
  408a32:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  408a36:	607b      	str	r3, [r7, #4]
  408a38:	687b      	ldr	r3, [r7, #4]
  408a3a:	f023 0308 	bic.w	r3, r3, #8
  408a3e:	607b      	str	r3, [r7, #4]
  408a40:	4a0c      	ldr	r2, [pc, #48]	; (408a74 <udd_ctrl_interrupt+0xa8>)
  408a42:	687b      	ldr	r3, [r7, #4]
  408a44:	6313      	str	r3, [r2, #48]	; 0x30
  408a46:	e006      	b.n	408a56 <udd_ctrl_interrupt+0x8a>
  408a48:	bf00      	nop
  408a4a:	683b      	ldr	r3, [r7, #0]
  408a4c:	3301      	adds	r3, #1
  408a4e:	603b      	str	r3, [r7, #0]
  408a50:	4a0c      	ldr	r2, [pc, #48]	; (408a84 <udd_ctrl_interrupt+0xb8>)
  408a52:	4293      	cmp	r3, r2
  408a54:	d806      	bhi.n	408a64 <udd_ctrl_interrupt+0x98>
  408a56:	4b07      	ldr	r3, [pc, #28]	; (408a74 <udd_ctrl_interrupt+0xa8>)
  408a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  408a5a:	f003 0308 	and.w	r3, r3, #8
  408a5e:	2b00      	cmp	r3, #0
  408a60:	d1f2      	bne.n	408a48 <udd_ctrl_interrupt+0x7c>
  408a62:	e000      	b.n	408a66 <udd_ctrl_interrupt+0x9a>
  408a64:	bf00      	nop
		return true;
  408a66:	2301      	movs	r3, #1
  408a68:	e000      	b.n	408a6c <udd_ctrl_interrupt+0xa0>
	}
	return false;
  408a6a:	2300      	movs	r3, #0
}
  408a6c:	4618      	mov	r0, r3
  408a6e:	3708      	adds	r7, #8
  408a70:	46bd      	mov	sp, r7
  408a72:	bd80      	pop	{r7, pc}
  408a74:	40044000 	.word	0x40044000
  408a78:	00408165 	.word	0x00408165
  408a7c:	00408391 	.word	0x00408391
  408a80:	004085f5 	.word	0x004085f5
  408a84:	0001869f 	.word	0x0001869f

00408a88 <udd_ep_job_table_reset>:
//--- INTERNAL ROUTINES TO MANAGED THE BULK/INTERRUPT/ISOCHRONOUS ENDPOINTS

#if (0!=USB_DEVICE_MAX_EP)

static void udd_ep_job_table_reset(void)
{
  408a88:	b480      	push	{r7}
  408a8a:	b083      	sub	sp, #12
  408a8c:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
  408a8e:	2300      	movs	r3, #0
  408a90:	71fb      	strb	r3, [r7, #7]
  408a92:	e043      	b.n	408b1c <udd_ep_job_table_reset+0x94>
		udd_ep_job[i].bank = 0;
  408a94:	79fa      	ldrb	r2, [r7, #7]
  408a96:	4926      	ldr	r1, [pc, #152]	; (408b30 <udd_ep_job_table_reset+0xa8>)
  408a98:	4613      	mov	r3, r2
  408a9a:	009b      	lsls	r3, r3, #2
  408a9c:	4413      	add	r3, r2
  408a9e:	009b      	lsls	r3, r3, #2
  408aa0:	440b      	add	r3, r1
  408aa2:	f103 0210 	add.w	r2, r3, #16
  408aa6:	7853      	ldrb	r3, [r2, #1]
  408aa8:	f36f 0383 	bfc	r3, #2, #2
  408aac:	7053      	strb	r3, [r2, #1]
		udd_ep_job[i].busy = false;
  408aae:	79fa      	ldrb	r2, [r7, #7]
  408ab0:	491f      	ldr	r1, [pc, #124]	; (408b30 <udd_ep_job_table_reset+0xa8>)
  408ab2:	4613      	mov	r3, r2
  408ab4:	009b      	lsls	r3, r3, #2
  408ab6:	4413      	add	r3, r2
  408ab8:	009b      	lsls	r3, r3, #2
  408aba:	440b      	add	r3, r1
  408abc:	f103 0210 	add.w	r2, r3, #16
  408ac0:	7853      	ldrb	r3, [r2, #1]
  408ac2:	f36f 1304 	bfc	r3, #4, #1
  408ac6:	7053      	strb	r3, [r2, #1]
		udd_ep_job[i].b_stall_requested = false;
  408ac8:	79fa      	ldrb	r2, [r7, #7]
  408aca:	4919      	ldr	r1, [pc, #100]	; (408b30 <udd_ep_job_table_reset+0xa8>)
  408acc:	4613      	mov	r3, r2
  408ace:	009b      	lsls	r3, r3, #2
  408ad0:	4413      	add	r3, r2
  408ad2:	009b      	lsls	r3, r3, #2
  408ad4:	440b      	add	r3, r1
  408ad6:	f103 0210 	add.w	r2, r3, #16
  408ada:	7853      	ldrb	r3, [r2, #1]
  408adc:	f36f 1345 	bfc	r3, #5, #1
  408ae0:	7053      	strb	r3, [r2, #1]
		udd_ep_job[i].b_shortpacket = false;
  408ae2:	79fa      	ldrb	r2, [r7, #7]
  408ae4:	4912      	ldr	r1, [pc, #72]	; (408b30 <udd_ep_job_table_reset+0xa8>)
  408ae6:	4613      	mov	r3, r2
  408ae8:	009b      	lsls	r3, r3, #2
  408aea:	4413      	add	r3, r2
  408aec:	009b      	lsls	r3, r3, #2
  408aee:	440b      	add	r3, r1
  408af0:	f103 0210 	add.w	r2, r3, #16
  408af4:	7853      	ldrb	r3, [r2, #1]
  408af6:	f36f 1386 	bfc	r3, #6, #1
  408afa:	7053      	strb	r3, [r2, #1]
		udd_ep_job[i].b_buf_end = false;
  408afc:	79fa      	ldrb	r2, [r7, #7]
  408afe:	490c      	ldr	r1, [pc, #48]	; (408b30 <udd_ep_job_table_reset+0xa8>)
  408b00:	4613      	mov	r3, r2
  408b02:	009b      	lsls	r3, r3, #2
  408b04:	4413      	add	r3, r2
  408b06:	009b      	lsls	r3, r3, #2
  408b08:	440b      	add	r3, r1
  408b0a:	f103 0210 	add.w	r2, r3, #16
  408b0e:	7853      	ldrb	r3, [r2, #1]
  408b10:	f36f 13c7 	bfc	r3, #7, #1
  408b14:	7053      	strb	r3, [r2, #1]
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
  408b16:	79fb      	ldrb	r3, [r7, #7]
  408b18:	3301      	adds	r3, #1
  408b1a:	71fb      	strb	r3, [r7, #7]
  408b1c:	79fb      	ldrb	r3, [r7, #7]
  408b1e:	2b04      	cmp	r3, #4
  408b20:	d9b8      	bls.n	408a94 <udd_ep_job_table_reset+0xc>
	}
}
  408b22:	bf00      	nop
  408b24:	370c      	adds	r7, #12
  408b26:	46bd      	mov	sp, r7
  408b28:	f85d 7b04 	ldr.w	r7, [sp], #4
  408b2c:	4770      	bx	lr
  408b2e:	bf00      	nop
  408b30:	2001a2c4 	.word	0x2001a2c4

00408b34 <udd_ep_job_table_kill>:


static void udd_ep_job_table_kill(void)
{
  408b34:	b580      	push	{r7, lr}
  408b36:	b082      	sub	sp, #8
  408b38:	af00      	add	r7, sp, #0
	uint8_t i;

	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
  408b3a:	2300      	movs	r3, #0
  408b3c:	71fb      	strb	r3, [r7, #7]
  408b3e:	e010      	b.n	408b62 <udd_ep_job_table_kill+0x2e>
		udd_ep_finish_job(&udd_ep_job[i], UDD_EP_TRANSFER_ABORT, i + 1);
  408b40:	79fa      	ldrb	r2, [r7, #7]
  408b42:	4613      	mov	r3, r2
  408b44:	009b      	lsls	r3, r3, #2
  408b46:	4413      	add	r3, r2
  408b48:	009b      	lsls	r3, r3, #2
  408b4a:	4a09      	ldr	r2, [pc, #36]	; (408b70 <udd_ep_job_table_kill+0x3c>)
  408b4c:	1898      	adds	r0, r3, r2
  408b4e:	79fb      	ldrb	r3, [r7, #7]
  408b50:	3301      	adds	r3, #1
  408b52:	b2db      	uxtb	r3, r3
  408b54:	461a      	mov	r2, r3
  408b56:	2101      	movs	r1, #1
  408b58:	4b06      	ldr	r3, [pc, #24]	; (408b74 <udd_ep_job_table_kill+0x40>)
  408b5a:	4798      	blx	r3
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
  408b5c:	79fb      	ldrb	r3, [r7, #7]
  408b5e:	3301      	adds	r3, #1
  408b60:	71fb      	strb	r3, [r7, #7]
  408b62:	79fb      	ldrb	r3, [r7, #7]
  408b64:	2b04      	cmp	r3, #4
  408b66:	d9eb      	bls.n	408b40 <udd_ep_job_table_kill+0xc>
	}
}
  408b68:	bf00      	nop
  408b6a:	3708      	adds	r7, #8
  408b6c:	46bd      	mov	sp, r7
  408b6e:	bd80      	pop	{r7, pc}
  408b70:	2001a2c4 	.word	0x2001a2c4
  408b74:	00408bb5 	.word	0x00408bb5

00408b78 <udd_ep_abort_job>:


static void udd_ep_abort_job(udd_ep_id_t ep)
{
  408b78:	b580      	push	{r7, lr}
  408b7a:	b082      	sub	sp, #8
  408b7c:	af00      	add	r7, sp, #0
  408b7e:	4603      	mov	r3, r0
  408b80:	71fb      	strb	r3, [r7, #7]
	ep &= USB_EP_ADDR_MASK;
  408b82:	79fb      	ldrb	r3, [r7, #7]
  408b84:	f003 030f 	and.w	r3, r3, #15
  408b88:	71fb      	strb	r3, [r7, #7]

	// Abort job on endpoint
	udd_ep_finish_job(&udd_ep_job[ep - 1], UDD_EP_TRANSFER_ABORT, ep);
  408b8a:	79fb      	ldrb	r3, [r7, #7]
  408b8c:	1e5a      	subs	r2, r3, #1
  408b8e:	4613      	mov	r3, r2
  408b90:	009b      	lsls	r3, r3, #2
  408b92:	4413      	add	r3, r2
  408b94:	009b      	lsls	r3, r3, #2
  408b96:	4a05      	ldr	r2, [pc, #20]	; (408bac <udd_ep_abort_job+0x34>)
  408b98:	4413      	add	r3, r2
  408b9a:	79fa      	ldrb	r2, [r7, #7]
  408b9c:	2101      	movs	r1, #1
  408b9e:	4618      	mov	r0, r3
  408ba0:	4b03      	ldr	r3, [pc, #12]	; (408bb0 <udd_ep_abort_job+0x38>)
  408ba2:	4798      	blx	r3
}
  408ba4:	bf00      	nop
  408ba6:	3708      	adds	r7, #8
  408ba8:	46bd      	mov	sp, r7
  408baa:	bd80      	pop	{r7, pc}
  408bac:	2001a2c4 	.word	0x2001a2c4
  408bb0:	00408bb5 	.word	0x00408bb5

00408bb4 <udd_ep_finish_job>:


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, int status,
		uint8_t ep_num)
{
  408bb4:	b580      	push	{r7, lr}
  408bb6:	b084      	sub	sp, #16
  408bb8:	af00      	add	r7, sp, #0
  408bba:	60f8      	str	r0, [r7, #12]
  408bbc:	60b9      	str	r1, [r7, #8]
  408bbe:	4613      	mov	r3, r2
  408bc0:	71fb      	strb	r3, [r7, #7]
	if (ptr_job->busy == false) {
  408bc2:	68fb      	ldr	r3, [r7, #12]
  408bc4:	7c5b      	ldrb	r3, [r3, #17]
  408bc6:	f003 0310 	and.w	r3, r3, #16
  408bca:	b2db      	uxtb	r3, r3
  408bcc:	2b00      	cmp	r3, #0
  408bce:	d023      	beq.n	408c18 <udd_ep_finish_job+0x64>
		return; // No on-going job
	}
	ptr_job->busy = false;
  408bd0:	68fa      	ldr	r2, [r7, #12]
  408bd2:	7c53      	ldrb	r3, [r2, #17]
  408bd4:	f36f 1304 	bfc	r3, #4, #1
  408bd8:	7453      	strb	r3, [r2, #17]
	if (NULL == ptr_job->call_trans) {
  408bda:	68fb      	ldr	r3, [r7, #12]
  408bdc:	681b      	ldr	r3, [r3, #0]
  408bde:	2b00      	cmp	r3, #0
  408be0:	d01c      	beq.n	408c1c <udd_ep_finish_job+0x68>
		return; // No callback linked to job
	}
	if (Is_udd_endpoint_type_in(ep_num)) {
  408be2:	4a10      	ldr	r2, [pc, #64]	; (408c24 <udd_ep_finish_job+0x70>)
  408be4:	79fb      	ldrb	r3, [r7, #7]
  408be6:	330c      	adds	r3, #12
  408be8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  408bec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  408bf0:	2b00      	cmp	r3, #0
  408bf2:	d003      	beq.n	408bfc <udd_ep_finish_job+0x48>
		ep_num |= USB_EP_DIR_IN;
  408bf4:	79fb      	ldrb	r3, [r7, #7]
  408bf6:	f063 037f 	orn	r3, r3, #127	; 0x7f
  408bfa:	71fb      	strb	r3, [r7, #7]
	}
	ptr_job->call_trans((status == UDD_EP_TRANSFER_ABORT) ?
  408bfc:	68fb      	ldr	r3, [r7, #12]
  408bfe:	681b      	ldr	r3, [r3, #0]
  408c00:	68ba      	ldr	r2, [r7, #8]
  408c02:	2a01      	cmp	r2, #1
  408c04:	bf0c      	ite	eq
  408c06:	2201      	moveq	r2, #1
  408c08:	2200      	movne	r2, #0
  408c0a:	b2d2      	uxtb	r2, r2
  408c0c:	4610      	mov	r0, r2
  408c0e:	68fa      	ldr	r2, [r7, #12]
  408c10:	6891      	ldr	r1, [r2, #8]
  408c12:	79fa      	ldrb	r2, [r7, #7]
  408c14:	4798      	blx	r3
  408c16:	e002      	b.n	408c1e <udd_ep_finish_job+0x6a>
		return; // No on-going job
  408c18:	bf00      	nop
  408c1a:	e000      	b.n	408c1e <udd_ep_finish_job+0x6a>
		return; // No callback linked to job
  408c1c:	bf00      	nop
		UDD_EP_TRANSFER_ABORT : UDD_EP_TRANSFER_OK, ptr_job->buf_size, ep_num);
}
  408c1e:	3710      	adds	r7, #16
  408c20:	46bd      	mov	sp, r7
  408c22:	bd80      	pop	{r7, pc}
  408c24:	40044000 	.word	0x40044000

00408c28 <udd_ep_ack_out_received>:


static void udd_ep_ack_out_received(udd_ep_id_t ep)
{
  408c28:	b480      	push	{r7}
  408c2a:	b089      	sub	sp, #36	; 0x24
  408c2c:	af00      	add	r7, sp, #0
  408c2e:	4603      	mov	r3, r0
  408c30:	71fb      	strb	r3, [r7, #7]
	bool bank0_received, bank1_received;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
  408c32:	79fb      	ldrb	r3, [r7, #7]
  408c34:	1e5a      	subs	r2, r3, #1
  408c36:	4613      	mov	r3, r2
  408c38:	009b      	lsls	r3, r3, #2
  408c3a:	4413      	add	r3, r2
  408c3c:	009b      	lsls	r3, r3, #2
  408c3e:	4a4e      	ldr	r2, [pc, #312]	; (408d78 <udd_ep_ack_out_received+0x150>)
  408c40:	4413      	add	r3, r2
  408c42:	61fb      	str	r3, [r7, #28]

	bank0_received = Is_udd_bank0_received(ep);
  408c44:	4a4d      	ldr	r2, [pc, #308]	; (408d7c <udd_ep_ack_out_received+0x154>)
  408c46:	79fb      	ldrb	r3, [r7, #7]
  408c48:	330c      	adds	r3, #12
  408c4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  408c4e:	f003 0302 	and.w	r3, r3, #2
  408c52:	2b00      	cmp	r3, #0
  408c54:	bf14      	ite	ne
  408c56:	2301      	movne	r3, #1
  408c58:	2300      	moveq	r3, #0
  408c5a:	76fb      	strb	r3, [r7, #27]
	bank1_received = Is_udd_bank1_received(ep);
  408c5c:	4a47      	ldr	r2, [pc, #284]	; (408d7c <udd_ep_ack_out_received+0x154>)
  408c5e:	79fb      	ldrb	r3, [r7, #7]
  408c60:	330c      	adds	r3, #12
  408c62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  408c66:	f003 0340 	and.w	r3, r3, #64	; 0x40
  408c6a:	2b00      	cmp	r3, #0
  408c6c:	bf14      	ite	ne
  408c6e:	2301      	movne	r3, #1
  408c70:	2300      	moveq	r3, #0
  408c72:	76bb      	strb	r3, [r7, #26]

	if (bank0_received && bank1_received) {
  408c74:	7efb      	ldrb	r3, [r7, #27]
  408c76:	2b00      	cmp	r3, #0
  408c78:	d002      	beq.n	408c80 <udd_ep_ack_out_received+0x58>
  408c7a:	7ebb      	ldrb	r3, [r7, #26]
  408c7c:	2b00      	cmp	r3, #0
  408c7e:	d10e      	bne.n	408c9e <udd_ep_ack_out_received+0x76>
		// The only way is to use ptr_job->bank
	} else if (bank0_received) {
  408c80:	7efb      	ldrb	r3, [r7, #27]
  408c82:	2b00      	cmp	r3, #0
  408c84:	d005      	beq.n	408c92 <udd_ep_ack_out_received+0x6a>
		// Must be bank0
		ptr_job->bank = 0;
  408c86:	69fa      	ldr	r2, [r7, #28]
  408c88:	7c53      	ldrb	r3, [r2, #17]
  408c8a:	f36f 0383 	bfc	r3, #2, #2
  408c8e:	7453      	strb	r3, [r2, #17]
  408c90:	e005      	b.n	408c9e <udd_ep_ack_out_received+0x76>
	} else {
		// Must be bank1
		ptr_job->bank = 1;
  408c92:	69fa      	ldr	r2, [r7, #28]
  408c94:	7c53      	ldrb	r3, [r2, #17]
  408c96:	2101      	movs	r1, #1
  408c98:	f361 0383 	bfi	r3, r1, #2, #2
  408c9c:	7453      	strb	r3, [r2, #17]
	}
	if (ptr_job->bank == 0) {
  408c9e:	69fb      	ldr	r3, [r7, #28]
  408ca0:	7c5b      	ldrb	r3, [r3, #17]
  408ca2:	f003 030c 	and.w	r3, r3, #12
  408ca6:	b2db      	uxtb	r3, r3
  408ca8:	2b00      	cmp	r3, #0
  408caa:	d133      	bne.n	408d14 <udd_ep_ack_out_received+0xec>
		udd_ack_bank0_received(ep);
  408cac:	4a33      	ldr	r2, [pc, #204]	; (408d7c <udd_ep_ack_out_received+0x154>)
  408cae:	79fb      	ldrb	r3, [r7, #7]
  408cb0:	330c      	adds	r3, #12
  408cb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  408cb6:	617b      	str	r3, [r7, #20]
  408cb8:	697b      	ldr	r3, [r7, #20]
  408cba:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  408cbe:	617b      	str	r3, [r7, #20]
  408cc0:	697b      	ldr	r3, [r7, #20]
  408cc2:	f023 0302 	bic.w	r3, r3, #2
  408cc6:	617b      	str	r3, [r7, #20]
  408cc8:	492c      	ldr	r1, [pc, #176]	; (408d7c <udd_ep_ack_out_received+0x154>)
  408cca:	79fb      	ldrb	r3, [r7, #7]
  408ccc:	697a      	ldr	r2, [r7, #20]
  408cce:	330c      	adds	r3, #12
  408cd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  408cd4:	e006      	b.n	408ce4 <udd_ep_ack_out_received+0xbc>
  408cd6:	bf00      	nop
  408cd8:	693b      	ldr	r3, [r7, #16]
  408cda:	3301      	adds	r3, #1
  408cdc:	613b      	str	r3, [r7, #16]
  408cde:	4a28      	ldr	r2, [pc, #160]	; (408d80 <udd_ep_ack_out_received+0x158>)
  408ce0:	4293      	cmp	r3, r2
  408ce2:	d809      	bhi.n	408cf8 <udd_ep_ack_out_received+0xd0>
  408ce4:	4a25      	ldr	r2, [pc, #148]	; (408d7c <udd_ep_ack_out_received+0x154>)
  408ce6:	79fb      	ldrb	r3, [r7, #7]
  408ce8:	330c      	adds	r3, #12
  408cea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  408cee:	f003 0302 	and.w	r3, r3, #2
  408cf2:	2b00      	cmp	r3, #0
  408cf4:	d1ef      	bne.n	408cd6 <udd_ep_ack_out_received+0xae>
  408cf6:	e000      	b.n	408cfa <udd_ep_ack_out_received+0xd2>
  408cf8:	bf00      	nop
		if (udd_get_endpoint_bank_max_nbr(ep) > 1) {
  408cfa:	79fb      	ldrb	r3, [r7, #7]
  408cfc:	2b00      	cmp	r3, #0
  408cfe:	d035      	beq.n	408d6c <udd_ep_ack_out_received+0x144>
  408d00:	79fb      	ldrb	r3, [r7, #7]
  408d02:	2b03      	cmp	r3, #3
  408d04:	d032      	beq.n	408d6c <udd_ep_ack_out_received+0x144>
			ptr_job->bank = 1;
  408d06:	69fa      	ldr	r2, [r7, #28]
  408d08:	7c53      	ldrb	r3, [r2, #17]
  408d0a:	2101      	movs	r1, #1
  408d0c:	f361 0383 	bfi	r3, r1, #2, #2
  408d10:	7453      	strb	r3, [r2, #17]
		}
	} else {
		udd_ack_bank1_received(ep);
		ptr_job->bank = 0;
	}
}
  408d12:	e02b      	b.n	408d6c <udd_ep_ack_out_received+0x144>
		udd_ack_bank1_received(ep);
  408d14:	4a19      	ldr	r2, [pc, #100]	; (408d7c <udd_ep_ack_out_received+0x154>)
  408d16:	79fb      	ldrb	r3, [r7, #7]
  408d18:	330c      	adds	r3, #12
  408d1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  408d1e:	60fb      	str	r3, [r7, #12]
  408d20:	68fb      	ldr	r3, [r7, #12]
  408d22:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  408d26:	60fb      	str	r3, [r7, #12]
  408d28:	68fb      	ldr	r3, [r7, #12]
  408d2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  408d2e:	60fb      	str	r3, [r7, #12]
  408d30:	4912      	ldr	r1, [pc, #72]	; (408d7c <udd_ep_ack_out_received+0x154>)
  408d32:	79fb      	ldrb	r3, [r7, #7]
  408d34:	68fa      	ldr	r2, [r7, #12]
  408d36:	330c      	adds	r3, #12
  408d38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  408d3c:	e006      	b.n	408d4c <udd_ep_ack_out_received+0x124>
  408d3e:	bf00      	nop
  408d40:	68bb      	ldr	r3, [r7, #8]
  408d42:	3301      	adds	r3, #1
  408d44:	60bb      	str	r3, [r7, #8]
  408d46:	4a0e      	ldr	r2, [pc, #56]	; (408d80 <udd_ep_ack_out_received+0x158>)
  408d48:	4293      	cmp	r3, r2
  408d4a:	d809      	bhi.n	408d60 <udd_ep_ack_out_received+0x138>
  408d4c:	4a0b      	ldr	r2, [pc, #44]	; (408d7c <udd_ep_ack_out_received+0x154>)
  408d4e:	79fb      	ldrb	r3, [r7, #7]
  408d50:	330c      	adds	r3, #12
  408d52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  408d56:	f003 0340 	and.w	r3, r3, #64	; 0x40
  408d5a:	2b00      	cmp	r3, #0
  408d5c:	d1ef      	bne.n	408d3e <udd_ep_ack_out_received+0x116>
  408d5e:	e000      	b.n	408d62 <udd_ep_ack_out_received+0x13a>
  408d60:	bf00      	nop
		ptr_job->bank = 0;
  408d62:	69fa      	ldr	r2, [r7, #28]
  408d64:	7c53      	ldrb	r3, [r2, #17]
  408d66:	f36f 0383 	bfc	r3, #2, #2
  408d6a:	7453      	strb	r3, [r2, #17]
}
  408d6c:	bf00      	nop
  408d6e:	3724      	adds	r7, #36	; 0x24
  408d70:	46bd      	mov	sp, r7
  408d72:	f85d 7b04 	ldr.w	r7, [sp], #4
  408d76:	4770      	bx	lr
  408d78:	2001a2c4 	.word	0x2001a2c4
  408d7c:	40044000 	.word	0x40044000
  408d80:	0001869f 	.word	0x0001869f

00408d84 <udd_ep_write_fifo>:


static bool udd_ep_write_fifo(udd_ep_id_t ep)
{
  408d84:	b480      	push	{r7}
  408d86:	b089      	sub	sp, #36	; 0x24
  408d88:	af00      	add	r7, sp, #0
  408d8a:	4603      	mov	r3, r0
  408d8c:	71fb      	strb	r3, [r7, #7]
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
  408d8e:	79fb      	ldrb	r3, [r7, #7]
  408d90:	1e5a      	subs	r2, r3, #1
  408d92:	4613      	mov	r3, r2
  408d94:	009b      	lsls	r3, r3, #2
  408d96:	4413      	add	r3, r2
  408d98:	009b      	lsls	r3, r3, #2
  408d9a:	4a55      	ldr	r2, [pc, #340]	; (408ef0 <udd_ep_write_fifo+0x16c>)
  408d9c:	4413      	add	r3, r2
  408d9e:	613b      	str	r3, [r7, #16]
	uint8_t *ptr_src = &ptr_job->buf[ptr_job->buf_cnt];
  408da0:	693b      	ldr	r3, [r7, #16]
  408da2:	685a      	ldr	r2, [r3, #4]
  408da4:	693b      	ldr	r3, [r7, #16]
  408da6:	68db      	ldr	r3, [r3, #12]
  408da8:	4413      	add	r3, r2
  408daa:	61fb      	str	r3, [r7, #28]
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
  408dac:	693b      	ldr	r3, [r7, #16]
  408dae:	689a      	ldr	r2, [r3, #8]
  408db0:	693b      	ldr	r3, [r7, #16]
  408db2:	68db      	ldr	r3, [r3, #12]
  408db4:	1ad3      	subs	r3, r2, r3
  408db6:	60fb      	str	r3, [r7, #12]
	uint32_t pkt_size = ptr_job->size;
  408db8:	693b      	ldr	r3, [r7, #16]
  408dba:	8a1b      	ldrh	r3, [r3, #16]
  408dbc:	f3c3 0309 	ubfx	r3, r3, #0, #10
  408dc0:	b29b      	uxth	r3, r3
  408dc2:	61bb      	str	r3, [r7, #24]
	bool is_short_pkt = false;
  408dc4:	2300      	movs	r3, #0
  408dc6:	75fb      	strb	r3, [r7, #23]

	// Packet size
	if (nb_remain < pkt_size) {
  408dc8:	68fa      	ldr	r2, [r7, #12]
  408dca:	69bb      	ldr	r3, [r7, #24]
  408dcc:	429a      	cmp	r2, r3
  408dce:	d203      	bcs.n	408dd8 <udd_ep_write_fifo+0x54>
		pkt_size = nb_remain;
  408dd0:	68fb      	ldr	r3, [r7, #12]
  408dd2:	61bb      	str	r3, [r7, #24]
		is_short_pkt = true;
  408dd4:	2301      	movs	r3, #1
  408dd6:	75fb      	strb	r3, [r7, #23]
	}

	// Modify job information
	ptr_job->buf_cnt += pkt_size;
  408dd8:	693b      	ldr	r3, [r7, #16]
  408dda:	68da      	ldr	r2, [r3, #12]
  408ddc:	69bb      	ldr	r3, [r7, #24]
  408dde:	441a      	add	r2, r3
  408de0:	693b      	ldr	r3, [r7, #16]
  408de2:	60da      	str	r2, [r3, #12]

	// Speed block data transfer to FIFO (DPRAM)
	for (; pkt_size >= 8; pkt_size -= 8) {
  408de4:	e05a      	b.n	408e9c <udd_ep_write_fifo+0x118>
		udd_endpoint_fifo_write(ep, *ptr_src++);
  408de6:	4843      	ldr	r0, [pc, #268]	; (408ef4 <udd_ep_write_fifo+0x170>)
  408de8:	79fa      	ldrb	r2, [r7, #7]
  408dea:	69fb      	ldr	r3, [r7, #28]
  408dec:	1c59      	adds	r1, r3, #1
  408dee:	61f9      	str	r1, [r7, #28]
  408df0:	781b      	ldrb	r3, [r3, #0]
  408df2:	4619      	mov	r1, r3
  408df4:	f102 0314 	add.w	r3, r2, #20
  408df8:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
		udd_endpoint_fifo_write(ep, *ptr_src++);
  408dfc:	483d      	ldr	r0, [pc, #244]	; (408ef4 <udd_ep_write_fifo+0x170>)
  408dfe:	79fa      	ldrb	r2, [r7, #7]
  408e00:	69fb      	ldr	r3, [r7, #28]
  408e02:	1c59      	adds	r1, r3, #1
  408e04:	61f9      	str	r1, [r7, #28]
  408e06:	781b      	ldrb	r3, [r3, #0]
  408e08:	4619      	mov	r1, r3
  408e0a:	f102 0314 	add.w	r3, r2, #20
  408e0e:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
		udd_endpoint_fifo_write(ep, *ptr_src++);
  408e12:	4838      	ldr	r0, [pc, #224]	; (408ef4 <udd_ep_write_fifo+0x170>)
  408e14:	79fa      	ldrb	r2, [r7, #7]
  408e16:	69fb      	ldr	r3, [r7, #28]
  408e18:	1c59      	adds	r1, r3, #1
  408e1a:	61f9      	str	r1, [r7, #28]
  408e1c:	781b      	ldrb	r3, [r3, #0]
  408e1e:	4619      	mov	r1, r3
  408e20:	f102 0314 	add.w	r3, r2, #20
  408e24:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
		udd_endpoint_fifo_write(ep, *ptr_src++);
  408e28:	4832      	ldr	r0, [pc, #200]	; (408ef4 <udd_ep_write_fifo+0x170>)
  408e2a:	79fa      	ldrb	r2, [r7, #7]
  408e2c:	69fb      	ldr	r3, [r7, #28]
  408e2e:	1c59      	adds	r1, r3, #1
  408e30:	61f9      	str	r1, [r7, #28]
  408e32:	781b      	ldrb	r3, [r3, #0]
  408e34:	4619      	mov	r1, r3
  408e36:	f102 0314 	add.w	r3, r2, #20
  408e3a:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
		udd_endpoint_fifo_write(ep, *ptr_src++);
  408e3e:	482d      	ldr	r0, [pc, #180]	; (408ef4 <udd_ep_write_fifo+0x170>)
  408e40:	79fa      	ldrb	r2, [r7, #7]
  408e42:	69fb      	ldr	r3, [r7, #28]
  408e44:	1c59      	adds	r1, r3, #1
  408e46:	61f9      	str	r1, [r7, #28]
  408e48:	781b      	ldrb	r3, [r3, #0]
  408e4a:	4619      	mov	r1, r3
  408e4c:	f102 0314 	add.w	r3, r2, #20
  408e50:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
		udd_endpoint_fifo_write(ep, *ptr_src++);
  408e54:	4827      	ldr	r0, [pc, #156]	; (408ef4 <udd_ep_write_fifo+0x170>)
  408e56:	79fa      	ldrb	r2, [r7, #7]
  408e58:	69fb      	ldr	r3, [r7, #28]
  408e5a:	1c59      	adds	r1, r3, #1
  408e5c:	61f9      	str	r1, [r7, #28]
  408e5e:	781b      	ldrb	r3, [r3, #0]
  408e60:	4619      	mov	r1, r3
  408e62:	f102 0314 	add.w	r3, r2, #20
  408e66:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
		udd_endpoint_fifo_write(ep, *ptr_src++);
  408e6a:	4822      	ldr	r0, [pc, #136]	; (408ef4 <udd_ep_write_fifo+0x170>)
  408e6c:	79fa      	ldrb	r2, [r7, #7]
  408e6e:	69fb      	ldr	r3, [r7, #28]
  408e70:	1c59      	adds	r1, r3, #1
  408e72:	61f9      	str	r1, [r7, #28]
  408e74:	781b      	ldrb	r3, [r3, #0]
  408e76:	4619      	mov	r1, r3
  408e78:	f102 0314 	add.w	r3, r2, #20
  408e7c:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
		udd_endpoint_fifo_write(ep, *ptr_src++);
  408e80:	481c      	ldr	r0, [pc, #112]	; (408ef4 <udd_ep_write_fifo+0x170>)
  408e82:	79fa      	ldrb	r2, [r7, #7]
  408e84:	69fb      	ldr	r3, [r7, #28]
  408e86:	1c59      	adds	r1, r3, #1
  408e88:	61f9      	str	r1, [r7, #28]
  408e8a:	781b      	ldrb	r3, [r3, #0]
  408e8c:	4619      	mov	r1, r3
  408e8e:	f102 0314 	add.w	r3, r2, #20
  408e92:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
	for (; pkt_size >= 8; pkt_size -= 8) {
  408e96:	69bb      	ldr	r3, [r7, #24]
  408e98:	3b08      	subs	r3, #8
  408e9a:	61bb      	str	r3, [r7, #24]
  408e9c:	69bb      	ldr	r3, [r7, #24]
  408e9e:	2b07      	cmp	r3, #7
  408ea0:	d8a1      	bhi.n	408de6 <udd_ep_write_fifo+0x62>
	}
	// Normal speed data transfer to FIFO (DPRAM)
	for (; pkt_size; pkt_size--) {
  408ea2:	e00d      	b.n	408ec0 <udd_ep_write_fifo+0x13c>
		udd_endpoint_fifo_write(ep, *ptr_src++);
  408ea4:	4813      	ldr	r0, [pc, #76]	; (408ef4 <udd_ep_write_fifo+0x170>)
  408ea6:	79fa      	ldrb	r2, [r7, #7]
  408ea8:	69fb      	ldr	r3, [r7, #28]
  408eaa:	1c59      	adds	r1, r3, #1
  408eac:	61f9      	str	r1, [r7, #28]
  408eae:	781b      	ldrb	r3, [r3, #0]
  408eb0:	4619      	mov	r1, r3
  408eb2:	f102 0314 	add.w	r3, r2, #20
  408eb6:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
	for (; pkt_size; pkt_size--) {
  408eba:	69bb      	ldr	r3, [r7, #24]
  408ebc:	3b01      	subs	r3, #1
  408ebe:	61bb      	str	r3, [r7, #24]
  408ec0:	69bb      	ldr	r3, [r7, #24]
  408ec2:	2b00      	cmp	r3, #0
  408ec4:	d1ee      	bne.n	408ea4 <udd_ep_write_fifo+0x120>
	}

	// Add to buffered banks
	ptr_job->bank++;
  408ec6:	693b      	ldr	r3, [r7, #16]
  408ec8:	7c5b      	ldrb	r3, [r3, #17]
  408eca:	f3c3 0381 	ubfx	r3, r3, #2, #2
  408ece:	b2db      	uxtb	r3, r3
  408ed0:	3301      	adds	r3, #1
  408ed2:	f003 0303 	and.w	r3, r3, #3
  408ed6:	b2d9      	uxtb	r1, r3
  408ed8:	693a      	ldr	r2, [r7, #16]
  408eda:	7c53      	ldrb	r3, [r2, #17]
  408edc:	f361 0383 	bfi	r3, r1, #2, #2
  408ee0:	7453      	strb	r3, [r2, #17]
	return is_short_pkt;
  408ee2:	7dfb      	ldrb	r3, [r7, #23]
}
  408ee4:	4618      	mov	r0, r3
  408ee6:	3724      	adds	r7, #36	; 0x24
  408ee8:	46bd      	mov	sp, r7
  408eea:	f85d 7b04 	ldr.w	r7, [sp], #4
  408eee:	4770      	bx	lr
  408ef0:	2001a2c4 	.word	0x2001a2c4
  408ef4:	40044000 	.word	0x40044000

00408ef8 <udd_ep_in_sent>:


static bool udd_ep_in_sent(udd_ep_id_t ep, bool b_tx)
{
  408ef8:	b580      	push	{r7, lr}
  408efa:	b086      	sub	sp, #24
  408efc:	af00      	add	r7, sp, #0
  408efe:	4603      	mov	r3, r0
  408f00:	460a      	mov	r2, r1
  408f02:	71fb      	strb	r3, [r7, #7]
  408f04:	4613      	mov	r3, r2
  408f06:	71bb      	strb	r3, [r7, #6]
	bool b_shortpacket;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
  408f08:	79fb      	ldrb	r3, [r7, #7]
  408f0a:	1e5a      	subs	r2, r3, #1
  408f0c:	4613      	mov	r3, r2
  408f0e:	009b      	lsls	r3, r3, #2
  408f10:	4413      	add	r3, r2
  408f12:	009b      	lsls	r3, r3, #2
  408f14:	4a3b      	ldr	r2, [pc, #236]	; (409004 <udd_ep_in_sent+0x10c>)
  408f16:	4413      	add	r3, r2
  408f18:	617b      	str	r3, [r7, #20]

	// All banks are full
	if (ptr_job->bank >= udd_get_endpoint_bank_max_nbr(ep)) {
  408f1a:	697b      	ldr	r3, [r7, #20]
  408f1c:	7c5b      	ldrb	r3, [r3, #17]
  408f1e:	f3c3 0381 	ubfx	r3, r3, #2, #2
  408f22:	b2db      	uxtb	r3, r3
  408f24:	461a      	mov	r2, r3
  408f26:	79fb      	ldrb	r3, [r7, #7]
  408f28:	2b00      	cmp	r3, #0
  408f2a:	d002      	beq.n	408f32 <udd_ep_in_sent+0x3a>
  408f2c:	79fb      	ldrb	r3, [r7, #7]
  408f2e:	2b03      	cmp	r3, #3
  408f30:	d101      	bne.n	408f36 <udd_ep_in_sent+0x3e>
  408f32:	2301      	movs	r3, #1
  408f34:	e000      	b.n	408f38 <udd_ep_in_sent+0x40>
  408f36:	2302      	movs	r3, #2
  408f38:	429a      	cmp	r2, r3
  408f3a:	db01      	blt.n	408f40 <udd_ep_in_sent+0x48>
		return true; // Data pending
  408f3c:	2301      	movs	r3, #1
  408f3e:	e05d      	b.n	408ffc <udd_ep_in_sent+0x104>
	}

	// No more data in buffer
	if (ptr_job->buf_cnt >= ptr_job->buf_size && !ptr_job->b_shortpacket) {
  408f40:	697b      	ldr	r3, [r7, #20]
  408f42:	68da      	ldr	r2, [r3, #12]
  408f44:	697b      	ldr	r3, [r7, #20]
  408f46:	689b      	ldr	r3, [r3, #8]
  408f48:	429a      	cmp	r2, r3
  408f4a:	d308      	bcc.n	408f5e <udd_ep_in_sent+0x66>
  408f4c:	697b      	ldr	r3, [r7, #20]
  408f4e:	7c5b      	ldrb	r3, [r3, #17]
  408f50:	f003 0340 	and.w	r3, r3, #64	; 0x40
  408f54:	b2db      	uxtb	r3, r3
  408f56:	2b00      	cmp	r3, #0
  408f58:	d101      	bne.n	408f5e <udd_ep_in_sent+0x66>
		return false;
  408f5a:	2300      	movs	r3, #0
  408f5c:	e04e      	b.n	408ffc <udd_ep_in_sent+0x104>
	}

	// Fill FIFO
	b_shortpacket = udd_ep_write_fifo(ep);
  408f5e:	79fb      	ldrb	r3, [r7, #7]
  408f60:	4618      	mov	r0, r3
  408f62:	4b29      	ldr	r3, [pc, #164]	; (409008 <udd_ep_in_sent+0x110>)
  408f64:	4798      	blx	r3
  408f66:	4603      	mov	r3, r0
  408f68:	74fb      	strb	r3, [r7, #19]

	// Data is ready to send
	if (b_tx) {
  408f6a:	79bb      	ldrb	r3, [r7, #6]
  408f6c:	2b00      	cmp	r3, #0
  408f6e:	d028      	beq.n	408fc2 <udd_ep_in_sent+0xca>
		udd_set_transmit_ready(ep);
  408f70:	4a26      	ldr	r2, [pc, #152]	; (40900c <udd_ep_in_sent+0x114>)
  408f72:	79fb      	ldrb	r3, [r7, #7]
  408f74:	330c      	adds	r3, #12
  408f76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  408f7a:	60fb      	str	r3, [r7, #12]
  408f7c:	68fb      	ldr	r3, [r7, #12]
  408f7e:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  408f82:	60fb      	str	r3, [r7, #12]
  408f84:	68fb      	ldr	r3, [r7, #12]
  408f86:	f043 0310 	orr.w	r3, r3, #16
  408f8a:	60fb      	str	r3, [r7, #12]
  408f8c:	491f      	ldr	r1, [pc, #124]	; (40900c <udd_ep_in_sent+0x114>)
  408f8e:	79fb      	ldrb	r3, [r7, #7]
  408f90:	68fa      	ldr	r2, [r7, #12]
  408f92:	330c      	adds	r3, #12
  408f94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  408f98:	2300      	movs	r3, #0
  408f9a:	60bb      	str	r3, [r7, #8]
  408f9c:	e006      	b.n	408fac <udd_ep_in_sent+0xb4>
  408f9e:	bf00      	nop
  408fa0:	68bb      	ldr	r3, [r7, #8]
  408fa2:	3301      	adds	r3, #1
  408fa4:	60bb      	str	r3, [r7, #8]
  408fa6:	4a1a      	ldr	r2, [pc, #104]	; (409010 <udd_ep_in_sent+0x118>)
  408fa8:	4293      	cmp	r3, r2
  408faa:	d809      	bhi.n	408fc0 <udd_ep_in_sent+0xc8>
  408fac:	4a17      	ldr	r2, [pc, #92]	; (40900c <udd_ep_in_sent+0x114>)
  408fae:	79fb      	ldrb	r3, [r7, #7]
  408fb0:	330c      	adds	r3, #12
  408fb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  408fb6:	f003 0310 	and.w	r3, r3, #16
  408fba:	2b10      	cmp	r3, #16
  408fbc:	d1ef      	bne.n	408f9e <udd_ep_in_sent+0xa6>
  408fbe:	e000      	b.n	408fc2 <udd_ep_in_sent+0xca>
  408fc0:	bf00      	nop
	}
	// Short PKT? no need to send it again.
	if (b_shortpacket) {
  408fc2:	7cfb      	ldrb	r3, [r7, #19]
  408fc4:	2b00      	cmp	r3, #0
  408fc6:	d004      	beq.n	408fd2 <udd_ep_in_sent+0xda>
		ptr_job->b_shortpacket = false;
  408fc8:	697a      	ldr	r2, [r7, #20]
  408fca:	7c53      	ldrb	r3, [r2, #17]
  408fcc:	f36f 1386 	bfc	r3, #6, #1
  408fd0:	7453      	strb	r3, [r2, #17]
	}
	// All transfer done, including ZLP, Finish Job
	if ((ptr_job->buf_cnt >= ptr_job->buf_size)
  408fd2:	697b      	ldr	r3, [r7, #20]
  408fd4:	68da      	ldr	r2, [r3, #12]
  408fd6:	697b      	ldr	r3, [r7, #20]
  408fd8:	689b      	ldr	r3, [r3, #8]
  408fda:	429a      	cmp	r2, r3
  408fdc:	d30d      	bcc.n	408ffa <udd_ep_in_sent+0x102>
			&& (!ptr_job->b_shortpacket)) {
  408fde:	697b      	ldr	r3, [r7, #20]
  408fe0:	7c5b      	ldrb	r3, [r3, #17]
  408fe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
  408fe6:	b2db      	uxtb	r3, r3
  408fe8:	2b00      	cmp	r3, #0
  408fea:	d106      	bne.n	408ffa <udd_ep_in_sent+0x102>
		ptr_job->b_buf_end = true;
  408fec:	697a      	ldr	r2, [r7, #20]
  408fee:	7c53      	ldrb	r3, [r2, #17]
  408ff0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  408ff4:	7453      	strb	r3, [r2, #17]
		return false;
  408ff6:	2300      	movs	r3, #0
  408ff8:	e000      	b.n	408ffc <udd_ep_in_sent+0x104>
	}
	return true; // Pending
  408ffa:	2301      	movs	r3, #1
}
  408ffc:	4618      	mov	r0, r3
  408ffe:	3718      	adds	r7, #24
  409000:	46bd      	mov	sp, r7
  409002:	bd80      	pop	{r7, pc}
  409004:	2001a2c4 	.word	0x2001a2c4
  409008:	00408d85 	.word	0x00408d85
  40900c:	40044000 	.word	0x40044000
  409010:	0001869f 	.word	0x0001869f

00409014 <udd_ep_out_received>:


static void udd_ep_out_received(udd_ep_id_t ep)
{
  409014:	b580      	push	{r7, lr}
  409016:	b08a      	sub	sp, #40	; 0x28
  409018:	af00      	add	r7, sp, #0
  40901a:	4603      	mov	r3, r0
  40901c:	71fb      	strb	r3, [r7, #7]
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
  40901e:	79fb      	ldrb	r3, [r7, #7]
  409020:	1e5a      	subs	r2, r3, #1
  409022:	4613      	mov	r3, r2
  409024:	009b      	lsls	r3, r3, #2
  409026:	4413      	add	r3, r2
  409028:	009b      	lsls	r3, r3, #2
  40902a:	4a3a      	ldr	r2, [pc, #232]	; (409114 <udd_ep_out_received+0x100>)
  40902c:	4413      	add	r3, r2
  40902e:	617b      	str	r3, [r7, #20]
	uint32_t nb_data = 0, i;
  409030:	2300      	movs	r3, #0
  409032:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
  409034:	697b      	ldr	r3, [r7, #20]
  409036:	689a      	ldr	r2, [r3, #8]
  409038:	697b      	ldr	r3, [r7, #20]
  40903a:	68db      	ldr	r3, [r3, #12]
  40903c:	1ad3      	subs	r3, r2, r3
  40903e:	613b      	str	r3, [r7, #16]
	uint32_t pkt_size = ptr_job->size;
  409040:	697b      	ldr	r3, [r7, #20]
  409042:	8a1b      	ldrh	r3, [r3, #16]
  409044:	f3c3 0309 	ubfx	r3, r3, #0, #10
  409048:	b29b      	uxth	r3, r3
  40904a:	60fb      	str	r3, [r7, #12]
	uint8_t *ptr_dst = &ptr_job->buf[ptr_job->buf_cnt];
  40904c:	697b      	ldr	r3, [r7, #20]
  40904e:	685a      	ldr	r2, [r3, #4]
  409050:	697b      	ldr	r3, [r7, #20]
  409052:	68db      	ldr	r3, [r3, #12]
  409054:	4413      	add	r3, r2
  409056:	61fb      	str	r3, [r7, #28]
	bool b_full = false, b_short;
  409058:	2300      	movs	r3, #0
  40905a:	76fb      	strb	r3, [r7, #27]

	// Read byte count
	nb_data = udd_byte_count(ep);
  40905c:	4a2e      	ldr	r2, [pc, #184]	; (409118 <udd_ep_out_received+0x104>)
  40905e:	79fb      	ldrb	r3, [r7, #7]
  409060:	330c      	adds	r3, #12
  409062:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  409066:	0c1b      	lsrs	r3, r3, #16
  409068:	f3c3 030a 	ubfx	r3, r3, #0, #11
  40906c:	627b      	str	r3, [r7, #36]	; 0x24
	b_short = (nb_data < pkt_size);
  40906e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
  409070:	68fb      	ldr	r3, [r7, #12]
  409072:	429a      	cmp	r2, r3
  409074:	bf34      	ite	cc
  409076:	2301      	movcc	r3, #1
  409078:	2300      	movcs	r3, #0
  40907a:	72fb      	strb	r3, [r7, #11]

	// Copy data if there is
	if (nb_data > 0) {
  40907c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40907e:	2b00      	cmp	r3, #0
  409080:	d021      	beq.n	4090c6 <udd_ep_out_received+0xb2>
		if (nb_data >= nb_remain) {
  409082:	6a7a      	ldr	r2, [r7, #36]	; 0x24
  409084:	693b      	ldr	r3, [r7, #16]
  409086:	429a      	cmp	r2, r3
  409088:	d303      	bcc.n	409092 <udd_ep_out_received+0x7e>
			nb_data = nb_remain;
  40908a:	693b      	ldr	r3, [r7, #16]
  40908c:	627b      	str	r3, [r7, #36]	; 0x24
			b_full = true;
  40908e:	2301      	movs	r3, #1
  409090:	76fb      	strb	r3, [r7, #27]
		}
		// Modify job information
		ptr_job->buf_cnt += nb_data;
  409092:	697b      	ldr	r3, [r7, #20]
  409094:	68da      	ldr	r2, [r3, #12]
  409096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  409098:	441a      	add	r2, r3
  40909a:	697b      	ldr	r3, [r7, #20]
  40909c:	60da      	str	r2, [r3, #12]

		// Copy FIFO (DPRAM) to buffer
		for (i = 0; i < nb_data; i++) {
  40909e:	2300      	movs	r3, #0
  4090a0:	623b      	str	r3, [r7, #32]
  4090a2:	e00c      	b.n	4090be <udd_ep_out_received+0xaa>
			*ptr_dst++ = udd_endpoint_fifo_read(ep);
  4090a4:	69fb      	ldr	r3, [r7, #28]
  4090a6:	1c5a      	adds	r2, r3, #1
  4090a8:	61fa      	str	r2, [r7, #28]
  4090aa:	491b      	ldr	r1, [pc, #108]	; (409118 <udd_ep_out_received+0x104>)
  4090ac:	79fa      	ldrb	r2, [r7, #7]
  4090ae:	3214      	adds	r2, #20
  4090b0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
  4090b4:	b2d2      	uxtb	r2, r2
  4090b6:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < nb_data; i++) {
  4090b8:	6a3b      	ldr	r3, [r7, #32]
  4090ba:	3301      	adds	r3, #1
  4090bc:	623b      	str	r3, [r7, #32]
  4090be:	6a3a      	ldr	r2, [r7, #32]
  4090c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4090c2:	429a      	cmp	r2, r3
  4090c4:	d3ee      	bcc.n	4090a4 <udd_ep_out_received+0x90>
		}
	}
	// Clear FIFO Status
	udd_ep_ack_out_received(ep);
  4090c6:	79fb      	ldrb	r3, [r7, #7]
  4090c8:	4618      	mov	r0, r3
  4090ca:	4b14      	ldr	r3, [pc, #80]	; (40911c <udd_ep_out_received+0x108>)
  4090cc:	4798      	blx	r3
	// Finish job on error or short packet
	if ((b_full || b_short) &&
  4090ce:	7efb      	ldrb	r3, [r7, #27]
  4090d0:	2b00      	cmp	r3, #0
  4090d2:	d102      	bne.n	4090da <udd_ep_out_received+0xc6>
  4090d4:	7afb      	ldrb	r3, [r7, #11]
  4090d6:	2b00      	cmp	r3, #0
  4090d8:	d018      	beq.n	40910c <udd_ep_out_received+0xf8>
			!Is_udd_endpoint_stall_requested(ep)) {
  4090da:	4a0f      	ldr	r2, [pc, #60]	; (409118 <udd_ep_out_received+0x104>)
  4090dc:	79fb      	ldrb	r3, [r7, #7]
  4090de:	330c      	adds	r3, #12
  4090e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  4090e4:	f003 0320 	and.w	r3, r3, #32
	if ((b_full || b_short) &&
  4090e8:	2b00      	cmp	r3, #0
  4090ea:	d10f      	bne.n	40910c <udd_ep_out_received+0xf8>
		udd_disable_endpoint_interrupt(ep);
  4090ec:	4a0a      	ldr	r2, [pc, #40]	; (409118 <udd_ep_out_received+0x104>)
  4090ee:	79fb      	ldrb	r3, [r7, #7]
  4090f0:	2101      	movs	r1, #1
  4090f2:	fa01 f303 	lsl.w	r3, r1, r3
  4090f6:	6153      	str	r3, [r2, #20]
		ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
  4090f8:	697b      	ldr	r3, [r7, #20]
  4090fa:	68da      	ldr	r2, [r3, #12]
  4090fc:	697b      	ldr	r3, [r7, #20]
  4090fe:	609a      	str	r2, [r3, #8]
		udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
  409100:	79fb      	ldrb	r3, [r7, #7]
  409102:	461a      	mov	r2, r3
  409104:	2100      	movs	r1, #0
  409106:	6978      	ldr	r0, [r7, #20]
  409108:	4b05      	ldr	r3, [pc, #20]	; (409120 <udd_ep_out_received+0x10c>)
  40910a:	4798      	blx	r3
	}
}
  40910c:	bf00      	nop
  40910e:	3728      	adds	r7, #40	; 0x28
  409110:	46bd      	mov	sp, r7
  409112:	bd80      	pop	{r7, pc}
  409114:	2001a2c4 	.word	0x2001a2c4
  409118:	40044000 	.word	0x40044000
  40911c:	00408c29 	.word	0x00408c29
  409120:	00408bb5 	.word	0x00408bb5

00409124 <udd_ep_interrupt>:


static bool udd_ep_interrupt(void)
{
  409124:	b580      	push	{r7, lr}
  409126:	b098      	sub	sp, #96	; 0x60
  409128:	af00      	add	r7, sp, #0
	udd_ep_job_t *ptr_job;
	
	//printf("\r\nEnter udd_ep_interrupt(void)!\r\n");

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
  40912a:	2301      	movs	r3, #1
  40912c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  409130:	e2c2      	b.n	4096b8 <udd_ep_interrupt+0x594>
		// Check RXRDY and TXEMPTY event for none DMA endpoints
		if (!Is_udd_endpoint_interrupt_enabled(ep)) {
  409132:	4bb5      	ldr	r3, [pc, #724]	; (409408 <udd_ep_interrupt+0x2e4>)
  409134:	699a      	ldr	r2, [r3, #24]
  409136:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
  40913a:	2101      	movs	r1, #1
  40913c:	fa01 f303 	lsl.w	r3, r1, r3
  409140:	4013      	ands	r3, r2
  409142:	2b00      	cmp	r3, #0
  409144:	f000 82b2 	beq.w	4096ac <udd_ep_interrupt+0x588>
			continue;
		}

		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
  409148:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
  40914c:	1e5a      	subs	r2, r3, #1
  40914e:	4613      	mov	r3, r2
  409150:	009b      	lsls	r3, r3, #2
  409152:	4413      	add	r3, r2
  409154:	009b      	lsls	r3, r3, #2
  409156:	4aad      	ldr	r2, [pc, #692]	; (40940c <udd_ep_interrupt+0x2e8>)
  409158:	4413      	add	r3, r2
  40915a:	65bb      	str	r3, [r7, #88]	; 0x58

		// RXOUT: Full packet received
		if (Is_udd_any_bank_received(ep)) {
  40915c:	4aaa      	ldr	r2, [pc, #680]	; (409408 <udd_ep_interrupt+0x2e4>)
  40915e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
  409162:	330c      	adds	r3, #12
  409164:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  409168:	f003 0342 	and.w	r3, r3, #66	; 0x42
  40916c:	2b00      	cmp	r3, #0
  40916e:	d006      	beq.n	40917e <udd_ep_interrupt+0x5a>
			udd_ep_out_received(ep);
  409170:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
  409174:	4618      	mov	r0, r3
  409176:	4ba6      	ldr	r3, [pc, #664]	; (409410 <udd_ep_interrupt+0x2ec>)
  409178:	4798      	blx	r3
			return true;
  40917a:	2301      	movs	r3, #1
  40917c:	e2a2      	b.n	4096c4 <udd_ep_interrupt+0x5a0>
		}
		// TXIN: packet sent
		if (Is_udd_in_sent(ep)) {
  40917e:	4aa2      	ldr	r2, [pc, #648]	; (409408 <udd_ep_interrupt+0x2e4>)
  409180:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
  409184:	330c      	adds	r3, #12
  409186:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  40918a:	f003 0301 	and.w	r3, r3, #1
  40918e:	2b00      	cmp	r3, #0
  409190:	f000 8245 	beq.w	40961e <udd_ep_interrupt+0x4fa>

			ptr_job->bank--;
  409194:	6dbb      	ldr	r3, [r7, #88]	; 0x58
  409196:	7c5b      	ldrb	r3, [r3, #17]
  409198:	f3c3 0381 	ubfx	r3, r3, #2, #2
  40919c:	b2db      	uxtb	r3, r3
  40919e:	3303      	adds	r3, #3
  4091a0:	f003 0303 	and.w	r3, r3, #3
  4091a4:	b2d9      	uxtb	r1, r3
  4091a6:	6dba      	ldr	r2, [r7, #88]	; 0x58
  4091a8:	7c53      	ldrb	r3, [r2, #17]
  4091aa:	f361 0383 	bfi	r3, r1, #2, #2
  4091ae:	7453      	strb	r3, [r2, #17]
			// Stall when all banks free
			if (ptr_job->b_stall_requested) {
  4091b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
  4091b2:	7c5b      	ldrb	r3, [r3, #17]
  4091b4:	f003 0320 	and.w	r3, r3, #32
  4091b8:	b2db      	uxtb	r3, r3
  4091ba:	2b00      	cmp	r3, #0
  4091bc:	f000 80bb 	beq.w	409336 <udd_ep_interrupt+0x212>
				if (ptr_job->bank) {
  4091c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
  4091c2:	7c5b      	ldrb	r3, [r3, #17]
  4091c4:	f003 030c 	and.w	r3, r3, #12
  4091c8:	b2db      	uxtb	r3, r3
  4091ca:	2b00      	cmp	r3, #0
  4091cc:	d054      	beq.n	409278 <udd_ep_interrupt+0x154>
					// Send remaining
					udd_set_transmit_ready(ep);
  4091ce:	4a8e      	ldr	r2, [pc, #568]	; (409408 <udd_ep_interrupt+0x2e4>)
  4091d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
  4091d4:	330c      	adds	r3, #12
  4091d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  4091da:	653b      	str	r3, [r7, #80]	; 0x50
  4091dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
  4091de:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4091e2:	653b      	str	r3, [r7, #80]	; 0x50
  4091e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
  4091e6:	f043 0310 	orr.w	r3, r3, #16
  4091ea:	653b      	str	r3, [r7, #80]	; 0x50
  4091ec:	4986      	ldr	r1, [pc, #536]	; (409408 <udd_ep_interrupt+0x2e4>)
  4091ee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
  4091f2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
  4091f4:	330c      	adds	r3, #12
  4091f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  4091fa:	2300      	movs	r3, #0
  4091fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  4091fe:	e006      	b.n	40920e <udd_ep_interrupt+0xea>
  409200:	bf00      	nop
  409202:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  409204:	3301      	adds	r3, #1
  409206:	64fb      	str	r3, [r7, #76]	; 0x4c
  409208:	4a82      	ldr	r2, [pc, #520]	; (409414 <udd_ep_interrupt+0x2f0>)
  40920a:	4293      	cmp	r3, r2
  40920c:	d80a      	bhi.n	409224 <udd_ep_interrupt+0x100>
  40920e:	4a7e      	ldr	r2, [pc, #504]	; (409408 <udd_ep_interrupt+0x2e4>)
  409210:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
  409214:	330c      	adds	r3, #12
  409216:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  40921a:	f003 0310 	and.w	r3, r3, #16
  40921e:	2b10      	cmp	r3, #16
  409220:	d1ee      	bne.n	409200 <udd_ep_interrupt+0xdc>
  409222:	e000      	b.n	409226 <udd_ep_interrupt+0x102>
  409224:	bf00      	nop
					udd_ack_in_sent(ep);
  409226:	4a78      	ldr	r2, [pc, #480]	; (409408 <udd_ep_interrupt+0x2e4>)
  409228:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
  40922c:	330c      	adds	r3, #12
  40922e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  409232:	64bb      	str	r3, [r7, #72]	; 0x48
  409234:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  409236:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40923a:	64bb      	str	r3, [r7, #72]	; 0x48
  40923c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  40923e:	f023 0301 	bic.w	r3, r3, #1
  409242:	64bb      	str	r3, [r7, #72]	; 0x48
  409244:	4970      	ldr	r1, [pc, #448]	; (409408 <udd_ep_interrupt+0x2e4>)
  409246:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
  40924a:	6cba      	ldr	r2, [r7, #72]	; 0x48
  40924c:	330c      	adds	r3, #12
  40924e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  409252:	e006      	b.n	409262 <udd_ep_interrupt+0x13e>
  409254:	bf00      	nop
  409256:	6c7b      	ldr	r3, [r7, #68]	; 0x44
  409258:	3301      	adds	r3, #1
  40925a:	647b      	str	r3, [r7, #68]	; 0x44
  40925c:	4a6d      	ldr	r2, [pc, #436]	; (409414 <udd_ep_interrupt+0x2f0>)
  40925e:	4293      	cmp	r3, r2
  409260:	d866      	bhi.n	409330 <udd_ep_interrupt+0x20c>
  409262:	4a69      	ldr	r2, [pc, #420]	; (409408 <udd_ep_interrupt+0x2e4>)
  409264:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
  409268:	330c      	adds	r3, #12
  40926a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  40926e:	f003 0301 	and.w	r3, r3, #1
  409272:	2b00      	cmp	r3, #0
  409274:	d1ee      	bne.n	409254 <udd_ep_interrupt+0x130>
  409276:	e05c      	b.n	409332 <udd_ep_interrupt+0x20e>
				} else {
					// Ack last packet
					udd_ack_in_sent(ep);
  409278:	4a63      	ldr	r2, [pc, #396]	; (409408 <udd_ep_interrupt+0x2e4>)
  40927a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
  40927e:	330c      	adds	r3, #12
  409280:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  409284:	643b      	str	r3, [r7, #64]	; 0x40
  409286:	6c3b      	ldr	r3, [r7, #64]	; 0x40
  409288:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40928c:	643b      	str	r3, [r7, #64]	; 0x40
  40928e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
  409290:	f023 0301 	bic.w	r3, r3, #1
  409294:	643b      	str	r3, [r7, #64]	; 0x40
  409296:	495c      	ldr	r1, [pc, #368]	; (409408 <udd_ep_interrupt+0x2e4>)
  409298:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
  40929c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
  40929e:	330c      	adds	r3, #12
  4092a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  4092a4:	e006      	b.n	4092b4 <udd_ep_interrupt+0x190>
  4092a6:	bf00      	nop
  4092a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  4092aa:	3301      	adds	r3, #1
  4092ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  4092ae:	4a59      	ldr	r2, [pc, #356]	; (409414 <udd_ep_interrupt+0x2f0>)
  4092b0:	4293      	cmp	r3, r2
  4092b2:	d80a      	bhi.n	4092ca <udd_ep_interrupt+0x1a6>
  4092b4:	4a54      	ldr	r2, [pc, #336]	; (409408 <udd_ep_interrupt+0x2e4>)
  4092b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
  4092ba:	330c      	adds	r3, #12
  4092bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  4092c0:	f003 0301 	and.w	r3, r3, #1
  4092c4:	2b00      	cmp	r3, #0
  4092c6:	d1ee      	bne.n	4092a6 <udd_ep_interrupt+0x182>
  4092c8:	e000      	b.n	4092cc <udd_ep_interrupt+0x1a8>
  4092ca:	bf00      	nop
					// Enable stall
					udd_enable_stall_handshake(ep);
  4092cc:	4a4e      	ldr	r2, [pc, #312]	; (409408 <udd_ep_interrupt+0x2e4>)
  4092ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
  4092d2:	330c      	adds	r3, #12
  4092d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  4092d8:	63bb      	str	r3, [r7, #56]	; 0x38
  4092da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  4092dc:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4092e0:	63bb      	str	r3, [r7, #56]	; 0x38
  4092e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  4092e4:	f043 0320 	orr.w	r3, r3, #32
  4092e8:	63bb      	str	r3, [r7, #56]	; 0x38
  4092ea:	4947      	ldr	r1, [pc, #284]	; (409408 <udd_ep_interrupt+0x2e4>)
  4092ec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
  4092f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
  4092f2:	330c      	adds	r3, #12
  4092f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  4092f8:	2300      	movs	r3, #0
  4092fa:	637b      	str	r3, [r7, #52]	; 0x34
  4092fc:	e006      	b.n	40930c <udd_ep_interrupt+0x1e8>
  4092fe:	bf00      	nop
  409300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  409302:	3301      	adds	r3, #1
  409304:	637b      	str	r3, [r7, #52]	; 0x34
  409306:	4a43      	ldr	r2, [pc, #268]	; (409414 <udd_ep_interrupt+0x2f0>)
  409308:	4293      	cmp	r3, r2
  40930a:	d80a      	bhi.n	409322 <udd_ep_interrupt+0x1fe>
  40930c:	4a3e      	ldr	r2, [pc, #248]	; (409408 <udd_ep_interrupt+0x2e4>)
  40930e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
  409312:	330c      	adds	r3, #12
  409314:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  409318:	f003 0320 	and.w	r3, r3, #32
  40931c:	2b20      	cmp	r3, #32
  40931e:	d1ee      	bne.n	4092fe <udd_ep_interrupt+0x1da>
  409320:	e000      	b.n	409324 <udd_ep_interrupt+0x200>
  409322:	bf00      	nop
					// Halt executed
					ptr_job->b_stall_requested = false;
  409324:	6dba      	ldr	r2, [r7, #88]	; 0x58
  409326:	7c53      	ldrb	r3, [r2, #17]
  409328:	f36f 1345 	bfc	r3, #5, #1
  40932c:	7453      	strb	r3, [r2, #17]
  40932e:	e000      	b.n	409332 <udd_ep_interrupt+0x20e>
					udd_ack_in_sent(ep);
  409330:	bf00      	nop
				}
				return true;
  409332:	2301      	movs	r3, #1
  409334:	e1c6      	b.n	4096c4 <udd_ep_interrupt+0x5a0>
			}
			// Finish Job when buffer end
			if (ptr_job->b_buf_end) {
  409336:	6dbb      	ldr	r3, [r7, #88]	; 0x58
  409338:	7c5b      	ldrb	r3, [r3, #17]
  40933a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  40933e:	b2db      	uxtb	r3, r3
  409340:	2b00      	cmp	r3, #0
  409342:	d016      	beq.n	409372 <udd_ep_interrupt+0x24e>
				ptr_job->b_buf_end = false;
  409344:	6dba      	ldr	r2, [r7, #88]	; 0x58
  409346:	7c53      	ldrb	r3, [r2, #17]
  409348:	f36f 13c7 	bfc	r3, #7, #1
  40934c:	7453      	strb	r3, [r2, #17]
				ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
  40934e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
  409350:	68da      	ldr	r2, [r3, #12]
  409352:	6dbb      	ldr	r3, [r7, #88]	; 0x58
  409354:	609a      	str	r2, [r3, #8]
                udd_disable_endpoint_interrupt(ep);
  409356:	4a2c      	ldr	r2, [pc, #176]	; (409408 <udd_ep_interrupt+0x2e4>)
  409358:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
  40935c:	2101      	movs	r1, #1
  40935e:	fa01 f303 	lsl.w	r3, r1, r3
  409362:	6153      	str	r3, [r2, #20]
                udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
  409364:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
  409368:	461a      	mov	r2, r3
  40936a:	2100      	movs	r1, #0
  40936c:	6db8      	ldr	r0, [r7, #88]	; 0x58
  40936e:	4b2a      	ldr	r3, [pc, #168]	; (409418 <udd_ep_interrupt+0x2f4>)
  409370:	4798      	blx	r3
			}
			if (ptr_job->buf_cnt >= ptr_job->buf_size &&
  409372:	6dbb      	ldr	r3, [r7, #88]	; 0x58
  409374:	68da      	ldr	r2, [r3, #12]
  409376:	6dbb      	ldr	r3, [r7, #88]	; 0x58
  409378:	689b      	ldr	r3, [r3, #8]
  40937a:	429a      	cmp	r2, r3
  40937c:	d355      	bcc.n	40942a <udd_ep_interrupt+0x306>
					!ptr_job->b_shortpacket &&
  40937e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
  409380:	7c5b      	ldrb	r3, [r3, #17]
  409382:	f003 0340 	and.w	r3, r3, #64	; 0x40
  409386:	b2db      	uxtb	r3, r3
			if (ptr_job->buf_cnt >= ptr_job->buf_size &&
  409388:	2b00      	cmp	r3, #0
  40938a:	d14e      	bne.n	40942a <udd_ep_interrupt+0x306>
					ptr_job->bank == 0) {
  40938c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
  40938e:	7c5b      	ldrb	r3, [r3, #17]
  409390:	f003 030c 	and.w	r3, r3, #12
  409394:	b2db      	uxtb	r3, r3
					!ptr_job->b_shortpacket &&
  409396:	2b00      	cmp	r3, #0
  409398:	d147      	bne.n	40942a <udd_ep_interrupt+0x306>
				// All transfer done, including ZLP
				irqflags_t flags = cpu_irq_save();
  40939a:	4b20      	ldr	r3, [pc, #128]	; (40941c <udd_ep_interrupt+0x2f8>)
  40939c:	4798      	blx	r3
  40939e:	6578      	str	r0, [r7, #84]	; 0x54
				udd_disable_endpoint_interrupt(ep);
  4093a0:	4a19      	ldr	r2, [pc, #100]	; (409408 <udd_ep_interrupt+0x2e4>)
  4093a2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
  4093a6:	2101      	movs	r1, #1
  4093a8:	fa01 f303 	lsl.w	r3, r1, r3
  4093ac:	6153      	str	r3, [r2, #20]
				cpu_irq_restore(flags);
  4093ae:	6d78      	ldr	r0, [r7, #84]	; 0x54
  4093b0:	4b1b      	ldr	r3, [pc, #108]	; (409420 <udd_ep_interrupt+0x2fc>)
  4093b2:	4798      	blx	r3
				// Ack last packet
				udd_ack_in_sent(ep);
  4093b4:	4a14      	ldr	r2, [pc, #80]	; (409408 <udd_ep_interrupt+0x2e4>)
  4093b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
  4093ba:	330c      	adds	r3, #12
  4093bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  4093c0:	633b      	str	r3, [r7, #48]	; 0x30
  4093c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  4093c4:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4093c8:	633b      	str	r3, [r7, #48]	; 0x30
  4093ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  4093cc:	f023 0301 	bic.w	r3, r3, #1
  4093d0:	633b      	str	r3, [r7, #48]	; 0x30
  4093d2:	490d      	ldr	r1, [pc, #52]	; (409408 <udd_ep_interrupt+0x2e4>)
  4093d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
  4093d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
  4093da:	330c      	adds	r3, #12
  4093dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  4093e0:	e006      	b.n	4093f0 <udd_ep_interrupt+0x2cc>
  4093e2:	bf00      	nop
  4093e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4093e6:	3301      	adds	r3, #1
  4093e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  4093ea:	4a0a      	ldr	r2, [pc, #40]	; (409414 <udd_ep_interrupt+0x2f0>)
  4093ec:	4293      	cmp	r3, r2
  4093ee:	d819      	bhi.n	409424 <udd_ep_interrupt+0x300>
  4093f0:	4a05      	ldr	r2, [pc, #20]	; (409408 <udd_ep_interrupt+0x2e4>)
  4093f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
  4093f6:	330c      	adds	r3, #12
  4093f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  4093fc:	f003 0301 	and.w	r3, r3, #1
  409400:	2b00      	cmp	r3, #0
  409402:	d1ee      	bne.n	4093e2 <udd_ep_interrupt+0x2be>
  409404:	e00f      	b.n	409426 <udd_ep_interrupt+0x302>
  409406:	bf00      	nop
  409408:	40044000 	.word	0x40044000
  40940c:	2001a2c4 	.word	0x2001a2c4
  409410:	00409015 	.word	0x00409015
  409414:	0001869f 	.word	0x0001869f
  409418:	00408bb5 	.word	0x00408bb5
  40941c:	00407029 	.word	0x00407029
  409420:	00407081 	.word	0x00407081
  409424:	bf00      	nop
				return true;
  409426:	2301      	movs	r3, #1
  409428:	e14c      	b.n	4096c4 <udd_ep_interrupt+0x5a0>
			} else if (udd_get_endpoint_bank_max_nbr(ep) > 1
  40942a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
  40942e:	2b00      	cmp	r3, #0
  409430:	d067      	beq.n	409502 <udd_ep_interrupt+0x3de>
  409432:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
  409436:	2b03      	cmp	r3, #3
  409438:	d063      	beq.n	409502 <udd_ep_interrupt+0x3de>
					&& ptr_job->bank > 0) {
  40943a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
  40943c:	7c5b      	ldrb	r3, [r3, #17]
  40943e:	f3c3 0381 	ubfx	r3, r3, #2, #2
  409442:	b2db      	uxtb	r3, r3
  409444:	2b00      	cmp	r3, #0
  409446:	dd5c      	ble.n	409502 <udd_ep_interrupt+0x3de>
				// Already banks buffered, transmit while loading
				udd_set_transmit_ready(ep);
  409448:	4aa0      	ldr	r2, [pc, #640]	; (4096cc <udd_ep_interrupt+0x5a8>)
  40944a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
  40944e:	330c      	adds	r3, #12
  409450:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  409454:	62bb      	str	r3, [r7, #40]	; 0x28
  409456:	6abb      	ldr	r3, [r7, #40]	; 0x28
  409458:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40945c:	62bb      	str	r3, [r7, #40]	; 0x28
  40945e:	6abb      	ldr	r3, [r7, #40]	; 0x28
  409460:	f043 0310 	orr.w	r3, r3, #16
  409464:	62bb      	str	r3, [r7, #40]	; 0x28
  409466:	4999      	ldr	r1, [pc, #612]	; (4096cc <udd_ep_interrupt+0x5a8>)
  409468:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
  40946c:	6aba      	ldr	r2, [r7, #40]	; 0x28
  40946e:	330c      	adds	r3, #12
  409470:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  409474:	2300      	movs	r3, #0
  409476:	627b      	str	r3, [r7, #36]	; 0x24
  409478:	e006      	b.n	409488 <udd_ep_interrupt+0x364>
  40947a:	bf00      	nop
  40947c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40947e:	3301      	adds	r3, #1
  409480:	627b      	str	r3, [r7, #36]	; 0x24
  409482:	4a93      	ldr	r2, [pc, #588]	; (4096d0 <udd_ep_interrupt+0x5ac>)
  409484:	4293      	cmp	r3, r2
  409486:	d80a      	bhi.n	40949e <udd_ep_interrupt+0x37a>
  409488:	4a90      	ldr	r2, [pc, #576]	; (4096cc <udd_ep_interrupt+0x5a8>)
  40948a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
  40948e:	330c      	adds	r3, #12
  409490:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  409494:	f003 0310 	and.w	r3, r3, #16
  409498:	2b10      	cmp	r3, #16
  40949a:	d1ee      	bne.n	40947a <udd_ep_interrupt+0x356>
  40949c:	e000      	b.n	4094a0 <udd_ep_interrupt+0x37c>
  40949e:	bf00      	nop
				udd_ack_in_sent(ep);
  4094a0:	4a8a      	ldr	r2, [pc, #552]	; (4096cc <udd_ep_interrupt+0x5a8>)
  4094a2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
  4094a6:	330c      	adds	r3, #12
  4094a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  4094ac:	623b      	str	r3, [r7, #32]
  4094ae:	6a3b      	ldr	r3, [r7, #32]
  4094b0:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4094b4:	623b      	str	r3, [r7, #32]
  4094b6:	6a3b      	ldr	r3, [r7, #32]
  4094b8:	f023 0301 	bic.w	r3, r3, #1
  4094bc:	623b      	str	r3, [r7, #32]
  4094be:	4983      	ldr	r1, [pc, #524]	; (4096cc <udd_ep_interrupt+0x5a8>)
  4094c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
  4094c4:	6a3a      	ldr	r2, [r7, #32]
  4094c6:	330c      	adds	r3, #12
  4094c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  4094cc:	e006      	b.n	4094dc <udd_ep_interrupt+0x3b8>
  4094ce:	bf00      	nop
  4094d0:	69fb      	ldr	r3, [r7, #28]
  4094d2:	3301      	adds	r3, #1
  4094d4:	61fb      	str	r3, [r7, #28]
  4094d6:	4a7e      	ldr	r2, [pc, #504]	; (4096d0 <udd_ep_interrupt+0x5ac>)
  4094d8:	4293      	cmp	r3, r2
  4094da:	d80a      	bhi.n	4094f2 <udd_ep_interrupt+0x3ce>
  4094dc:	4a7b      	ldr	r2, [pc, #492]	; (4096cc <udd_ep_interrupt+0x5a8>)
  4094de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
  4094e2:	330c      	adds	r3, #12
  4094e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  4094e8:	f003 0301 	and.w	r3, r3, #1
  4094ec:	2b00      	cmp	r3, #0
  4094ee:	d1ee      	bne.n	4094ce <udd_ep_interrupt+0x3aa>
  4094f0:	e000      	b.n	4094f4 <udd_ep_interrupt+0x3d0>
  4094f2:	bf00      	nop
				udd_ep_in_sent(ep, false);
  4094f4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
  4094f8:	2100      	movs	r1, #0
  4094fa:	4618      	mov	r0, r3
  4094fc:	4b75      	ldr	r3, [pc, #468]	; (4096d4 <udd_ep_interrupt+0x5b0>)
  4094fe:	4798      	blx	r3
  409500:	e08b      	b.n	40961a <udd_ep_interrupt+0x4f6>
			} else if (udd_get_endpoint_bank_max_nbr(ep) > 1) {
  409502:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
  409506:	2b00      	cmp	r3, #0
  409508:	d057      	beq.n	4095ba <udd_ep_interrupt+0x496>
  40950a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
  40950e:	2b03      	cmp	r3, #3
  409510:	d053      	beq.n	4095ba <udd_ep_interrupt+0x496>
				// Still bank free, load and transmit
				if (!udd_ep_in_sent(ep, true)) {
  409512:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
  409516:	2101      	movs	r1, #1
  409518:	4618      	mov	r0, r3
  40951a:	4b6e      	ldr	r3, [pc, #440]	; (4096d4 <udd_ep_interrupt+0x5b0>)
  40951c:	4798      	blx	r3
  40951e:	4603      	mov	r3, r0
  409520:	f083 0301 	eor.w	r3, r3, #1
  409524:	b2db      	uxtb	r3, r3
  409526:	2b00      	cmp	r3, #0
  409528:	d016      	beq.n	409558 <udd_ep_interrupt+0x434>
					ptr_job->b_buf_end = false;
  40952a:	6dba      	ldr	r2, [r7, #88]	; 0x58
  40952c:	7c53      	ldrb	r3, [r2, #17]
  40952e:	f36f 13c7 	bfc	r3, #7, #1
  409532:	7453      	strb	r3, [r2, #17]
					ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
  409534:	6dbb      	ldr	r3, [r7, #88]	; 0x58
  409536:	68da      	ldr	r2, [r3, #12]
  409538:	6dbb      	ldr	r3, [r7, #88]	; 0x58
  40953a:	609a      	str	r2, [r3, #8]
                    udd_disable_endpoint_interrupt(ep);
  40953c:	4a63      	ldr	r2, [pc, #396]	; (4096cc <udd_ep_interrupt+0x5a8>)
  40953e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
  409542:	2101      	movs	r1, #1
  409544:	fa01 f303 	lsl.w	r3, r1, r3
  409548:	6153      	str	r3, [r2, #20]
                    udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
  40954a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
  40954e:	461a      	mov	r2, r3
  409550:	2100      	movs	r1, #0
  409552:	6db8      	ldr	r0, [r7, #88]	; 0x58
  409554:	4b60      	ldr	r3, [pc, #384]	; (4096d8 <udd_ep_interrupt+0x5b4>)
  409556:	4798      	blx	r3
				}
				udd_ack_in_sent(ep);
  409558:	4a5c      	ldr	r2, [pc, #368]	; (4096cc <udd_ep_interrupt+0x5a8>)
  40955a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
  40955e:	330c      	adds	r3, #12
  409560:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  409564:	61bb      	str	r3, [r7, #24]
  409566:	69bb      	ldr	r3, [r7, #24]
  409568:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40956c:	61bb      	str	r3, [r7, #24]
  40956e:	69bb      	ldr	r3, [r7, #24]
  409570:	f023 0301 	bic.w	r3, r3, #1
  409574:	61bb      	str	r3, [r7, #24]
  409576:	4955      	ldr	r1, [pc, #340]	; (4096cc <udd_ep_interrupt+0x5a8>)
  409578:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
  40957c:	69ba      	ldr	r2, [r7, #24]
  40957e:	330c      	adds	r3, #12
  409580:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  409584:	e006      	b.n	409594 <udd_ep_interrupt+0x470>
  409586:	bf00      	nop
  409588:	697b      	ldr	r3, [r7, #20]
  40958a:	3301      	adds	r3, #1
  40958c:	617b      	str	r3, [r7, #20]
  40958e:	4a50      	ldr	r2, [pc, #320]	; (4096d0 <udd_ep_interrupt+0x5ac>)
  409590:	4293      	cmp	r3, r2
  409592:	d80a      	bhi.n	4095aa <udd_ep_interrupt+0x486>
  409594:	4a4d      	ldr	r2, [pc, #308]	; (4096cc <udd_ep_interrupt+0x5a8>)
  409596:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
  40959a:	330c      	adds	r3, #12
  40959c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  4095a0:	f003 0301 	and.w	r3, r3, #1
  4095a4:	2b00      	cmp	r3, #0
  4095a6:	d1ee      	bne.n	409586 <udd_ep_interrupt+0x462>
  4095a8:	e000      	b.n	4095ac <udd_ep_interrupt+0x488>
  4095aa:	bf00      	nop
				udd_ep_in_sent(ep, false);
  4095ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
  4095b0:	2100      	movs	r1, #0
  4095b2:	4618      	mov	r0, r3
  4095b4:	4b47      	ldr	r3, [pc, #284]	; (4096d4 <udd_ep_interrupt+0x5b0>)
  4095b6:	4798      	blx	r3
  4095b8:	e02f      	b.n	40961a <udd_ep_interrupt+0x4f6>
			} else {
				// Single bank transfer, ack when ready
				udd_ep_in_sent(ep, true);
  4095ba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
  4095be:	2101      	movs	r1, #1
  4095c0:	4618      	mov	r0, r3
  4095c2:	4b44      	ldr	r3, [pc, #272]	; (4096d4 <udd_ep_interrupt+0x5b0>)
  4095c4:	4798      	blx	r3
				udd_ack_in_sent(ep);
  4095c6:	4a41      	ldr	r2, [pc, #260]	; (4096cc <udd_ep_interrupt+0x5a8>)
  4095c8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
  4095cc:	330c      	adds	r3, #12
  4095ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  4095d2:	613b      	str	r3, [r7, #16]
  4095d4:	693b      	ldr	r3, [r7, #16]
  4095d6:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4095da:	613b      	str	r3, [r7, #16]
  4095dc:	693b      	ldr	r3, [r7, #16]
  4095de:	f023 0301 	bic.w	r3, r3, #1
  4095e2:	613b      	str	r3, [r7, #16]
  4095e4:	4939      	ldr	r1, [pc, #228]	; (4096cc <udd_ep_interrupt+0x5a8>)
  4095e6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
  4095ea:	693a      	ldr	r2, [r7, #16]
  4095ec:	330c      	adds	r3, #12
  4095ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  4095f2:	e006      	b.n	409602 <udd_ep_interrupt+0x4de>
  4095f4:	bf00      	nop
  4095f6:	68fb      	ldr	r3, [r7, #12]
  4095f8:	3301      	adds	r3, #1
  4095fa:	60fb      	str	r3, [r7, #12]
  4095fc:	4a34      	ldr	r2, [pc, #208]	; (4096d0 <udd_ep_interrupt+0x5ac>)
  4095fe:	4293      	cmp	r3, r2
  409600:	d80a      	bhi.n	409618 <udd_ep_interrupt+0x4f4>
  409602:	4a32      	ldr	r2, [pc, #200]	; (4096cc <udd_ep_interrupt+0x5a8>)
  409604:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
  409608:	330c      	adds	r3, #12
  40960a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  40960e:	f003 0301 	and.w	r3, r3, #1
  409612:	2b00      	cmp	r3, #0
  409614:	d1ee      	bne.n	4095f4 <udd_ep_interrupt+0x4d0>
  409616:	e000      	b.n	40961a <udd_ep_interrupt+0x4f6>
  409618:	bf00      	nop
			}
			return true;
  40961a:	2301      	movs	r3, #1
  40961c:	e052      	b.n	4096c4 <udd_ep_interrupt+0x5a0>
		}
		// Stall sent/CRC error
		if (Is_udd_stall(ep)) {
  40961e:	4a2b      	ldr	r2, [pc, #172]	; (4096cc <udd_ep_interrupt+0x5a8>)
  409620:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
  409624:	330c      	adds	r3, #12
  409626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  40962a:	f003 0308 	and.w	r3, r3, #8
  40962e:	2b00      	cmp	r3, #0
  409630:	d03d      	beq.n	4096ae <udd_ep_interrupt+0x58a>
			udd_ack_stall(ep);
  409632:	4a26      	ldr	r2, [pc, #152]	; (4096cc <udd_ep_interrupt+0x5a8>)
  409634:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
  409638:	330c      	adds	r3, #12
  40963a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  40963e:	60bb      	str	r3, [r7, #8]
  409640:	68bb      	ldr	r3, [r7, #8]
  409642:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  409646:	60bb      	str	r3, [r7, #8]
  409648:	68bb      	ldr	r3, [r7, #8]
  40964a:	f023 0308 	bic.w	r3, r3, #8
  40964e:	60bb      	str	r3, [r7, #8]
  409650:	491e      	ldr	r1, [pc, #120]	; (4096cc <udd_ep_interrupt+0x5a8>)
  409652:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
  409656:	68ba      	ldr	r2, [r7, #8]
  409658:	330c      	adds	r3, #12
  40965a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  40965e:	e006      	b.n	40966e <udd_ep_interrupt+0x54a>
  409660:	bf00      	nop
  409662:	687b      	ldr	r3, [r7, #4]
  409664:	3301      	adds	r3, #1
  409666:	607b      	str	r3, [r7, #4]
  409668:	4a19      	ldr	r2, [pc, #100]	; (4096d0 <udd_ep_interrupt+0x5ac>)
  40966a:	4293      	cmp	r3, r2
  40966c:	d80a      	bhi.n	409684 <udd_ep_interrupt+0x560>
  40966e:	4a17      	ldr	r2, [pc, #92]	; (4096cc <udd_ep_interrupt+0x5a8>)
  409670:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
  409674:	330c      	adds	r3, #12
  409676:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  40967a:	f003 0308 	and.w	r3, r3, #8
  40967e:	2b00      	cmp	r3, #0
  409680:	d1ee      	bne.n	409660 <udd_ep_interrupt+0x53c>
  409682:	e000      	b.n	409686 <udd_ep_interrupt+0x562>
  409684:	bf00      	nop
			if (udd_get_endpoint_type(ep) == UDP_CSR_EPTYPE_ISO_OUT ||
  409686:	4a11      	ldr	r2, [pc, #68]	; (4096cc <udd_ep_interrupt+0x5a8>)
  409688:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
  40968c:	330c      	adds	r3, #12
  40968e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  409692:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  409696:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  40969a:	d005      	beq.n	4096a8 <udd_ep_interrupt+0x584>
				udd_get_endpoint_type(ep) == UDP_CSR_EPTYPE_ISO_IN) {
  40969c:	4a0b      	ldr	r2, [pc, #44]	; (4096cc <udd_ep_interrupt+0x5a8>)
  40969e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
  4096a2:	330c      	adds	r3, #12
  4096a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
			}
			return true;
  4096a8:	2301      	movs	r3, #1
  4096aa:	e00b      	b.n	4096c4 <udd_ep_interrupt+0x5a0>
			continue;
  4096ac:	bf00      	nop
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
  4096ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
  4096b2:	3301      	adds	r3, #1
  4096b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  4096b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
  4096bc:	2b05      	cmp	r3, #5
  4096be:	f67f ad38 	bls.w	409132 <udd_ep_interrupt+0xe>
		}
	}
	return false;
  4096c2:	2300      	movs	r3, #0
}
  4096c4:	4618      	mov	r0, r3
  4096c6:	3760      	adds	r7, #96	; 0x60
  4096c8:	46bd      	mov	sp, r7
  4096ca:	bd80      	pop	{r7, pc}
  4096cc:	40044000 	.word	0x40044000
  4096d0:	0001869f 	.word	0x0001869f
  4096d4:	00408ef9 	.word	0x00408ef9
  4096d8:	00408bb5 	.word	0x00408bb5

004096dc <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  4096dc:	b480      	push	{r7}
  4096de:	b089      	sub	sp, #36	; 0x24
  4096e0:	af00      	add	r7, sp, #0
  4096e2:	60f8      	str	r0, [r7, #12]
  4096e4:	60b9      	str	r1, [r7, #8]
  4096e6:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  4096e8:	68bb      	ldr	r3, [r7, #8]
  4096ea:	011a      	lsls	r2, r3, #4
  4096ec:	687b      	ldr	r3, [r7, #4]
  4096ee:	429a      	cmp	r2, r3
  4096f0:	d802      	bhi.n	4096f8 <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
  4096f2:	2310      	movs	r3, #16
  4096f4:	61fb      	str	r3, [r7, #28]
  4096f6:	e001      	b.n	4096fc <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
  4096f8:	2308      	movs	r3, #8
  4096fa:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  4096fc:	687b      	ldr	r3, [r7, #4]
  4096fe:	00da      	lsls	r2, r3, #3
  409700:	69fb      	ldr	r3, [r7, #28]
  409702:	68b9      	ldr	r1, [r7, #8]
  409704:	fb01 f303 	mul.w	r3, r1, r3
  409708:	085b      	lsrs	r3, r3, #1
  40970a:	441a      	add	r2, r3
  40970c:	69fb      	ldr	r3, [r7, #28]
  40970e:	68b9      	ldr	r1, [r7, #8]
  409710:	fb01 f303 	mul.w	r3, r1, r3
  409714:	fbb2 f3f3 	udiv	r3, r2, r3
  409718:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
  40971a:	69bb      	ldr	r3, [r7, #24]
  40971c:	08db      	lsrs	r3, r3, #3
  40971e:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
  409720:	69bb      	ldr	r3, [r7, #24]
  409722:	f003 0307 	and.w	r3, r3, #7
  409726:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  409728:	697b      	ldr	r3, [r7, #20]
  40972a:	2b00      	cmp	r3, #0
  40972c:	d003      	beq.n	409736 <usart_set_async_baudrate+0x5a>
  40972e:	697b      	ldr	r3, [r7, #20]
  409730:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  409734:	d301      	bcc.n	40973a <usart_set_async_baudrate+0x5e>
		return 1;
  409736:	2301      	movs	r3, #1
  409738:	e00f      	b.n	40975a <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
  40973a:	69fb      	ldr	r3, [r7, #28]
  40973c:	2b08      	cmp	r3, #8
  40973e:	d105      	bne.n	40974c <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
  409740:	68fb      	ldr	r3, [r7, #12]
  409742:	685b      	ldr	r3, [r3, #4]
  409744:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
  409748:	68fb      	ldr	r3, [r7, #12]
  40974a:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  40974c:	693b      	ldr	r3, [r7, #16]
  40974e:	041a      	lsls	r2, r3, #16
  409750:	697b      	ldr	r3, [r7, #20]
  409752:	431a      	orrs	r2, r3
  409754:	68fb      	ldr	r3, [r7, #12]
  409756:	621a      	str	r2, [r3, #32]

	return 0;
  409758:	2300      	movs	r3, #0
}
  40975a:	4618      	mov	r0, r3
  40975c:	3724      	adds	r7, #36	; 0x24
  40975e:	46bd      	mov	sp, r7
  409760:	f85d 7b04 	ldr.w	r7, [sp], #4
  409764:	4770      	bx	lr
	...

00409768 <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
  409768:	b580      	push	{r7, lr}
  40976a:	b082      	sub	sp, #8
  40976c:	af00      	add	r7, sp, #0
  40976e:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
  409770:	6878      	ldr	r0, [r7, #4]
  409772:	4b0d      	ldr	r3, [pc, #52]	; (4097a8 <usart_reset+0x40>)
  409774:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
  409776:	687b      	ldr	r3, [r7, #4]
  409778:	2200      	movs	r2, #0
  40977a:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
  40977c:	687b      	ldr	r3, [r7, #4]
  40977e:	2200      	movs	r2, #0
  409780:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
  409782:	687b      	ldr	r3, [r7, #4]
  409784:	2200      	movs	r2, #0
  409786:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
  409788:	6878      	ldr	r0, [r7, #4]
  40978a:	4b08      	ldr	r3, [pc, #32]	; (4097ac <usart_reset+0x44>)
  40978c:	4798      	blx	r3
	usart_reset_rx(p_usart);
  40978e:	6878      	ldr	r0, [r7, #4]
  409790:	4b07      	ldr	r3, [pc, #28]	; (4097b0 <usart_reset+0x48>)
  409792:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
  409794:	6878      	ldr	r0, [r7, #4]
  409796:	4b07      	ldr	r3, [pc, #28]	; (4097b4 <usart_reset+0x4c>)
  409798:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
  40979a:	6878      	ldr	r0, [r7, #4]
  40979c:	4b06      	ldr	r3, [pc, #24]	; (4097b8 <usart_reset+0x50>)
  40979e:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
#endif
}
  4097a0:	bf00      	nop
  4097a2:	3708      	adds	r7, #8
  4097a4:	46bd      	mov	sp, r7
  4097a6:	bd80      	pop	{r7, pc}
  4097a8:	00409965 	.word	0x00409965
  4097ac:	0040985b 	.word	0x0040985b
  4097b0:	0040988f 	.word	0x0040988f
  4097b4:	004098c5 	.word	0x004098c5
  4097b8:	004098e1 	.word	0x004098e1

004097bc <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  4097bc:	b580      	push	{r7, lr}
  4097be:	b084      	sub	sp, #16
  4097c0:	af00      	add	r7, sp, #0
  4097c2:	60f8      	str	r0, [r7, #12]
  4097c4:	60b9      	str	r1, [r7, #8]
  4097c6:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
  4097c8:	68f8      	ldr	r0, [r7, #12]
  4097ca:	4b1a      	ldr	r3, [pc, #104]	; (409834 <usart_init_rs232+0x78>)
  4097cc:	4798      	blx	r3

	ul_reg_val = 0;
  4097ce:	4b1a      	ldr	r3, [pc, #104]	; (409838 <usart_init_rs232+0x7c>)
  4097d0:	2200      	movs	r2, #0
  4097d2:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  4097d4:	68bb      	ldr	r3, [r7, #8]
  4097d6:	2b00      	cmp	r3, #0
  4097d8:	d009      	beq.n	4097ee <usart_init_rs232+0x32>
  4097da:	68bb      	ldr	r3, [r7, #8]
  4097dc:	681b      	ldr	r3, [r3, #0]
  4097de:	687a      	ldr	r2, [r7, #4]
  4097e0:	4619      	mov	r1, r3
  4097e2:	68f8      	ldr	r0, [r7, #12]
  4097e4:	4b15      	ldr	r3, [pc, #84]	; (40983c <usart_init_rs232+0x80>)
  4097e6:	4798      	blx	r3
  4097e8:	4603      	mov	r3, r0
  4097ea:	2b00      	cmp	r3, #0
  4097ec:	d001      	beq.n	4097f2 <usart_init_rs232+0x36>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
  4097ee:	2301      	movs	r3, #1
  4097f0:	e01b      	b.n	40982a <usart_init_rs232+0x6e>
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4097f2:	68bb      	ldr	r3, [r7, #8]
  4097f4:	685a      	ldr	r2, [r3, #4]
  4097f6:	68bb      	ldr	r3, [r7, #8]
  4097f8:	689b      	ldr	r3, [r3, #8]
  4097fa:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  4097fc:	68bb      	ldr	r3, [r7, #8]
  4097fe:	691b      	ldr	r3, [r3, #16]
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  409800:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  409802:	68bb      	ldr	r3, [r7, #8]
  409804:	68db      	ldr	r3, [r3, #12]
  409806:	431a      	orrs	r2, r3
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  409808:	4b0b      	ldr	r3, [pc, #44]	; (409838 <usart_init_rs232+0x7c>)
  40980a:	681b      	ldr	r3, [r3, #0]
  40980c:	4313      	orrs	r3, r2
  40980e:	4a0a      	ldr	r2, [pc, #40]	; (409838 <usart_init_rs232+0x7c>)
  409810:	6013      	str	r3, [r2, #0]

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
  409812:	4b09      	ldr	r3, [pc, #36]	; (409838 <usart_init_rs232+0x7c>)
  409814:	681b      	ldr	r3, [r3, #0]
  409816:	4a08      	ldr	r2, [pc, #32]	; (409838 <usart_init_rs232+0x7c>)
  409818:	6013      	str	r3, [r2, #0]

	p_usart->US_MR |= ul_reg_val;
  40981a:	68fb      	ldr	r3, [r7, #12]
  40981c:	685a      	ldr	r2, [r3, #4]
  40981e:	4b06      	ldr	r3, [pc, #24]	; (409838 <usart_init_rs232+0x7c>)
  409820:	681b      	ldr	r3, [r3, #0]
  409822:	431a      	orrs	r2, r3
  409824:	68fb      	ldr	r3, [r7, #12]
  409826:	605a      	str	r2, [r3, #4]

	return 0;
  409828:	2300      	movs	r3, #0
}
  40982a:	4618      	mov	r0, r3
  40982c:	3710      	adds	r7, #16
  40982e:	46bd      	mov	sp, r7
  409830:	bd80      	pop	{r7, pc}
  409832:	bf00      	nop
  409834:	00409769 	.word	0x00409769
  409838:	2001a32c 	.word	0x2001a32c
  40983c:	004096dd 	.word	0x004096dd

00409840 <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
  409840:	b480      	push	{r7}
  409842:	b083      	sub	sp, #12
  409844:	af00      	add	r7, sp, #0
  409846:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
  409848:	687b      	ldr	r3, [r7, #4]
  40984a:	2240      	movs	r2, #64	; 0x40
  40984c:	601a      	str	r2, [r3, #0]
}
  40984e:	bf00      	nop
  409850:	370c      	adds	r7, #12
  409852:	46bd      	mov	sp, r7
  409854:	f85d 7b04 	ldr.w	r7, [sp], #4
  409858:	4770      	bx	lr

0040985a <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
  40985a:	b480      	push	{r7}
  40985c:	b083      	sub	sp, #12
  40985e:	af00      	add	r7, sp, #0
  409860:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  409862:	687b      	ldr	r3, [r7, #4]
  409864:	2288      	movs	r2, #136	; 0x88
  409866:	601a      	str	r2, [r3, #0]
}
  409868:	bf00      	nop
  40986a:	370c      	adds	r7, #12
  40986c:	46bd      	mov	sp, r7
  40986e:	f85d 7b04 	ldr.w	r7, [sp], #4
  409872:	4770      	bx	lr

00409874 <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
  409874:	b480      	push	{r7}
  409876:	b083      	sub	sp, #12
  409878:	af00      	add	r7, sp, #0
  40987a:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
  40987c:	687b      	ldr	r3, [r7, #4]
  40987e:	2210      	movs	r2, #16
  409880:	601a      	str	r2, [r3, #0]
}
  409882:	bf00      	nop
  409884:	370c      	adds	r7, #12
  409886:	46bd      	mov	sp, r7
  409888:	f85d 7b04 	ldr.w	r7, [sp], #4
  40988c:	4770      	bx	lr

0040988e <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
  40988e:	b480      	push	{r7}
  409890:	b083      	sub	sp, #12
  409892:	af00      	add	r7, sp, #0
  409894:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  409896:	687b      	ldr	r3, [r7, #4]
  409898:	2224      	movs	r2, #36	; 0x24
  40989a:	601a      	str	r2, [r3, #0]
}
  40989c:	bf00      	nop
  40989e:	370c      	adds	r7, #12
  4098a0:	46bd      	mov	sp, r7
  4098a2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4098a6:	4770      	bx	lr

004098a8 <usart_enable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_enable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
  4098a8:	b480      	push	{r7}
  4098aa:	b083      	sub	sp, #12
  4098ac:	af00      	add	r7, sp, #0
  4098ae:	6078      	str	r0, [r7, #4]
  4098b0:	6039      	str	r1, [r7, #0]
	p_usart->US_IER = ul_sources;
  4098b2:	687b      	ldr	r3, [r7, #4]
  4098b4:	683a      	ldr	r2, [r7, #0]
  4098b6:	609a      	str	r2, [r3, #8]
}
  4098b8:	bf00      	nop
  4098ba:	370c      	adds	r7, #12
  4098bc:	46bd      	mov	sp, r7
  4098be:	f85d 7b04 	ldr.w	r7, [sp], #4
  4098c2:	4770      	bx	lr

004098c4 <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
  4098c4:	b480      	push	{r7}
  4098c6:	b083      	sub	sp, #12
  4098c8:	af00      	add	r7, sp, #0
  4098ca:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
  4098cc:	687b      	ldr	r3, [r7, #4]
  4098ce:	f44f 7280 	mov.w	r2, #256	; 0x100
  4098d2:	601a      	str	r2, [r3, #0]
}
  4098d4:	bf00      	nop
  4098d6:	370c      	adds	r7, #12
  4098d8:	46bd      	mov	sp, r7
  4098da:	f85d 7b04 	ldr.w	r7, [sp], #4
  4098de:	4770      	bx	lr

004098e0 <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
  4098e0:	b480      	push	{r7}
  4098e2:	b083      	sub	sp, #12
  4098e4:	af00      	add	r7, sp, #0
  4098e6:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
  4098e8:	687b      	ldr	r3, [r7, #4]
  4098ea:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4098ee:	601a      	str	r2, [r3, #0]
}
  4098f0:	bf00      	nop
  4098f2:	370c      	adds	r7, #12
  4098f4:	46bd      	mov	sp, r7
  4098f6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4098fa:	4770      	bx	lr

004098fc <usart_write>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
  4098fc:	b480      	push	{r7}
  4098fe:	b083      	sub	sp, #12
  409900:	af00      	add	r7, sp, #0
  409902:	6078      	str	r0, [r7, #4]
  409904:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  409906:	687b      	ldr	r3, [r7, #4]
  409908:	695b      	ldr	r3, [r3, #20]
  40990a:	f003 0302 	and.w	r3, r3, #2
  40990e:	2b00      	cmp	r3, #0
  409910:	d101      	bne.n	409916 <usart_write+0x1a>
		return 1;
  409912:	2301      	movs	r3, #1
  409914:	e005      	b.n	409922 <usart_write+0x26>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  409916:	683b      	ldr	r3, [r7, #0]
  409918:	f3c3 0208 	ubfx	r2, r3, #0, #9
  40991c:	687b      	ldr	r3, [r7, #4]
  40991e:	61da      	str	r2, [r3, #28]
	return 0;
  409920:	2300      	movs	r3, #0
}
  409922:	4618      	mov	r0, r3
  409924:	370c      	adds	r7, #12
  409926:	46bd      	mov	sp, r7
  409928:	f85d 7b04 	ldr.w	r7, [sp], #4
  40992c:	4770      	bx	lr

0040992e <usart_read>:
 *
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
  40992e:	b480      	push	{r7}
  409930:	b083      	sub	sp, #12
  409932:	af00      	add	r7, sp, #0
  409934:	6078      	str	r0, [r7, #4]
  409936:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  409938:	687b      	ldr	r3, [r7, #4]
  40993a:	695b      	ldr	r3, [r3, #20]
  40993c:	f003 0301 	and.w	r3, r3, #1
  409940:	2b00      	cmp	r3, #0
  409942:	d101      	bne.n	409948 <usart_read+0x1a>
		return 1;
  409944:	2301      	movs	r3, #1
  409946:	e006      	b.n	409956 <usart_read+0x28>
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  409948:	687b      	ldr	r3, [r7, #4]
  40994a:	699b      	ldr	r3, [r3, #24]
  40994c:	f3c3 0208 	ubfx	r2, r3, #0, #9
  409950:	683b      	ldr	r3, [r7, #0]
  409952:	601a      	str	r2, [r3, #0]

	return 0;
  409954:	2300      	movs	r3, #0
}
  409956:	4618      	mov	r0, r3
  409958:	370c      	adds	r7, #12
  40995a:	46bd      	mov	sp, r7
  40995c:	f85d 7b04 	ldr.w	r7, [sp], #4
  409960:	4770      	bx	lr
	...

00409964 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
  409964:	b480      	push	{r7}
  409966:	b083      	sub	sp, #12
  409968:	af00      	add	r7, sp, #0
  40996a:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  40996c:	687b      	ldr	r3, [r7, #4]
  40996e:	4a04      	ldr	r2, [pc, #16]	; (409980 <usart_disable_writeprotect+0x1c>)
  409970:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
  409974:	bf00      	nop
  409976:	370c      	adds	r7, #12
  409978:	46bd      	mov	sp, r7
  40997a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40997e:	4770      	bx	lr
  409980:	55534100 	.word	0x55534100

00409984 <cpu_irq_save>:
{
  409984:	b480      	push	{r7}
  409986:	b083      	sub	sp, #12
  409988:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  40998a:	f3ef 8310 	mrs	r3, PRIMASK
  40998e:	607b      	str	r3, [r7, #4]
  return(result);
  409990:	687b      	ldr	r3, [r7, #4]
	volatile irqflags_t flags = cpu_irq_is_enabled();
  409992:	2b00      	cmp	r3, #0
  409994:	bf0c      	ite	eq
  409996:	2301      	moveq	r3, #1
  409998:	2300      	movne	r3, #0
  40999a:	b2db      	uxtb	r3, r3
  40999c:	603b      	str	r3, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  40999e:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  4099a0:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4099a4:	4b04      	ldr	r3, [pc, #16]	; (4099b8 <cpu_irq_save+0x34>)
  4099a6:	2200      	movs	r2, #0
  4099a8:	701a      	strb	r2, [r3, #0]
	return flags;
  4099aa:	683b      	ldr	r3, [r7, #0]
}
  4099ac:	4618      	mov	r0, r3
  4099ae:	370c      	adds	r7, #12
  4099b0:	46bd      	mov	sp, r7
  4099b2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4099b6:	4770      	bx	lr
  4099b8:	2000025e 	.word	0x2000025e

004099bc <cpu_irq_is_enabled_flags>:
{
  4099bc:	b480      	push	{r7}
  4099be:	b083      	sub	sp, #12
  4099c0:	af00      	add	r7, sp, #0
  4099c2:	6078      	str	r0, [r7, #4]
	return (flags);
  4099c4:	687b      	ldr	r3, [r7, #4]
  4099c6:	2b00      	cmp	r3, #0
  4099c8:	bf14      	ite	ne
  4099ca:	2301      	movne	r3, #1
  4099cc:	2300      	moveq	r3, #0
  4099ce:	b2db      	uxtb	r3, r3
}
  4099d0:	4618      	mov	r0, r3
  4099d2:	370c      	adds	r7, #12
  4099d4:	46bd      	mov	sp, r7
  4099d6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4099da:	4770      	bx	lr

004099dc <cpu_irq_restore>:
{
  4099dc:	b580      	push	{r7, lr}
  4099de:	b082      	sub	sp, #8
  4099e0:	af00      	add	r7, sp, #0
  4099e2:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
  4099e4:	6878      	ldr	r0, [r7, #4]
  4099e6:	4b07      	ldr	r3, [pc, #28]	; (409a04 <cpu_irq_restore+0x28>)
  4099e8:	4798      	blx	r3
  4099ea:	4603      	mov	r3, r0
  4099ec:	2b00      	cmp	r3, #0
  4099ee:	d005      	beq.n	4099fc <cpu_irq_restore+0x20>
		cpu_irq_enable();
  4099f0:	4b05      	ldr	r3, [pc, #20]	; (409a08 <cpu_irq_restore+0x2c>)
  4099f2:	2201      	movs	r2, #1
  4099f4:	701a      	strb	r2, [r3, #0]
  4099f6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4099fa:	b662      	cpsie	i
}
  4099fc:	bf00      	nop
  4099fe:	3708      	adds	r7, #8
  409a00:	46bd      	mov	sp, r7
  409a02:	bd80      	pop	{r7, pc}
  409a04:	004099bd 	.word	0x004099bd
  409a08:	2000025e 	.word	0x2000025e

00409a0c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  409a0c:	b580      	push	{r7, lr}
  409a0e:	b084      	sub	sp, #16
  409a10:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
  409a12:	4b25      	ldr	r3, [pc, #148]	; (409aa8 <Reset_Handler+0x9c>)
  409a14:	60fb      	str	r3, [r7, #12]
        pDest = &_srelocate;
  409a16:	4b25      	ldr	r3, [pc, #148]	; (409aac <Reset_Handler+0xa0>)
  409a18:	60bb      	str	r3, [r7, #8]

        if (pSrc != pDest) {
  409a1a:	68fa      	ldr	r2, [r7, #12]
  409a1c:	68bb      	ldr	r3, [r7, #8]
  409a1e:	429a      	cmp	r2, r3
  409a20:	d00c      	beq.n	409a3c <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
  409a22:	e007      	b.n	409a34 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
  409a24:	68bb      	ldr	r3, [r7, #8]
  409a26:	1d1a      	adds	r2, r3, #4
  409a28:	60ba      	str	r2, [r7, #8]
  409a2a:	68fa      	ldr	r2, [r7, #12]
  409a2c:	1d11      	adds	r1, r2, #4
  409a2e:	60f9      	str	r1, [r7, #12]
  409a30:	6812      	ldr	r2, [r2, #0]
  409a32:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
  409a34:	68bb      	ldr	r3, [r7, #8]
  409a36:	4a1e      	ldr	r2, [pc, #120]	; (409ab0 <Reset_Handler+0xa4>)
  409a38:	4293      	cmp	r3, r2
  409a3a:	d3f3      	bcc.n	409a24 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  409a3c:	4b1d      	ldr	r3, [pc, #116]	; (409ab4 <Reset_Handler+0xa8>)
  409a3e:	60bb      	str	r3, [r7, #8]
  409a40:	e004      	b.n	409a4c <Reset_Handler+0x40>
                *pDest++ = 0;
  409a42:	68bb      	ldr	r3, [r7, #8]
  409a44:	1d1a      	adds	r2, r3, #4
  409a46:	60ba      	str	r2, [r7, #8]
  409a48:	2200      	movs	r2, #0
  409a4a:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
  409a4c:	68bb      	ldr	r3, [r7, #8]
  409a4e:	4a1a      	ldr	r2, [pc, #104]	; (409ab8 <Reset_Handler+0xac>)
  409a50:	4293      	cmp	r3, r2
  409a52:	d3f6      	bcc.n	409a42 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
  409a54:	4b19      	ldr	r3, [pc, #100]	; (409abc <Reset_Handler+0xb0>)
  409a56:	60fb      	str	r3, [r7, #12]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  409a58:	4a19      	ldr	r2, [pc, #100]	; (409ac0 <Reset_Handler+0xb4>)
  409a5a:	68fb      	ldr	r3, [r7, #12]
  409a5c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  409a60:	6093      	str	r3, [r2, #8]
 * \brief Enable FPU
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
  409a62:	4b18      	ldr	r3, [pc, #96]	; (409ac4 <Reset_Handler+0xb8>)
  409a64:	4798      	blx	r3
  409a66:	6078      	str	r0, [r7, #4]
	REG_CPACR |=  (0xFu << 20);
  409a68:	4a17      	ldr	r2, [pc, #92]	; (409ac8 <Reset_Handler+0xbc>)
  409a6a:	4b17      	ldr	r3, [pc, #92]	; (409ac8 <Reset_Handler+0xbc>)
  409a6c:	681b      	ldr	r3, [r3, #0]
  409a6e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  409a72:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
  409a74:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  409a78:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
	cpu_irq_restore(flags);
  409a7c:	6878      	ldr	r0, [r7, #4]
  409a7e:	4b13      	ldr	r3, [pc, #76]	; (409acc <Reset_Handler+0xc0>)
  409a80:	4798      	blx	r3

#if __FPU_USED
	fpu_enable();
#endif

	if (((uint32_t) pSrc >= IRAM_ADDR) && ((uint32_t) pSrc < IRAM_ADDR + IRAM_SIZE)) {
  409a82:	68fb      	ldr	r3, [r7, #12]
  409a84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  409a88:	d309      	bcc.n	409a9e <Reset_Handler+0x92>
  409a8a:	68fb      	ldr	r3, [r7, #12]
  409a8c:	4a10      	ldr	r2, [pc, #64]	; (409ad0 <Reset_Handler+0xc4>)
  409a8e:	4293      	cmp	r3, r2
  409a90:	d805      	bhi.n	409a9e <Reset_Handler+0x92>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
  409a92:	4a0b      	ldr	r2, [pc, #44]	; (409ac0 <Reset_Handler+0xb4>)
  409a94:	4b0a      	ldr	r3, [pc, #40]	; (409ac0 <Reset_Handler+0xb4>)
  409a96:	689b      	ldr	r3, [r3, #8]
  409a98:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  409a9c:	6093      	str	r3, [r2, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
  409a9e:	4b0d      	ldr	r3, [pc, #52]	; (409ad4 <Reset_Handler+0xc8>)
  409aa0:	4798      	blx	r3

        /* Branch to main function */
        main();
  409aa2:	4b0d      	ldr	r3, [pc, #52]	; (409ad8 <Reset_Handler+0xcc>)
  409aa4:	4798      	blx	r3

        /* Infinite loop */
        while (1);
  409aa6:	e7fe      	b.n	409aa6 <Reset_Handler+0x9a>
  409aa8:	00411ab8 	.word	0x00411ab8
  409aac:	20000000 	.word	0x20000000
  409ab0:	20000c50 	.word	0x20000c50
  409ab4:	20000c50 	.word	0x20000c50
  409ab8:	2001abe8 	.word	0x2001abe8
  409abc:	00400000 	.word	0x00400000
  409ac0:	e000ed00 	.word	0xe000ed00
  409ac4:	00409985 	.word	0x00409985
  409ac8:	e000ed88 	.word	0xe000ed88
  409acc:	004099dd 	.word	0x004099dd
  409ad0:	20027fff 	.word	0x20027fff
  409ad4:	0040e0b5 	.word	0x0040e0b5
  409ad8:	0040d895 	.word	0x0040d895

00409adc <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  409adc:	b480      	push	{r7}
  409ade:	af00      	add	r7, sp, #0
        while (1) {
  409ae0:	e7fe      	b.n	409ae0 <Dummy_Handler+0x4>
	...

00409ae4 <SystemCoreClockUpdate>:

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate(void)
{
  409ae4:	b480      	push	{r7}
  409ae6:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) {
  409ae8:	4b41      	ldr	r3, [pc, #260]	; (409bf0 <SystemCoreClockUpdate+0x10c>)
  409aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  409aec:	f003 0303 	and.w	r3, r3, #3
  409af0:	2b01      	cmp	r3, #1
  409af2:	d014      	beq.n	409b1e <SystemCoreClockUpdate+0x3a>
  409af4:	2b01      	cmp	r3, #1
  409af6:	d302      	bcc.n	409afe <SystemCoreClockUpdate+0x1a>
  409af8:	2b02      	cmp	r3, #2
  409afa:	d038      	beq.n	409b6e <SystemCoreClockUpdate+0x8a>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
					CKGR_PLLAR_MULA_Pos) + 1U);
		}
		break;
	default:
		break;
  409afc:	e059      	b.n	409bb2 <SystemCoreClockUpdate+0xce>
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
  409afe:	4b3d      	ldr	r3, [pc, #244]	; (409bf4 <SystemCoreClockUpdate+0x110>)
  409b00:	695b      	ldr	r3, [r3, #20]
  409b02:	f003 0380 	and.w	r3, r3, #128	; 0x80
  409b06:	2b00      	cmp	r3, #0
  409b08:	d004      	beq.n	409b14 <SystemCoreClockUpdate+0x30>
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
  409b0a:	4b3b      	ldr	r3, [pc, #236]	; (409bf8 <SystemCoreClockUpdate+0x114>)
  409b0c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  409b10:	601a      	str	r2, [r3, #0]
		break;
  409b12:	e04e      	b.n	409bb2 <SystemCoreClockUpdate+0xce>
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
  409b14:	4b38      	ldr	r3, [pc, #224]	; (409bf8 <SystemCoreClockUpdate+0x114>)
  409b16:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  409b1a:	601a      	str	r2, [r3, #0]
		break;
  409b1c:	e049      	b.n	409bb2 <SystemCoreClockUpdate+0xce>
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
  409b1e:	4b34      	ldr	r3, [pc, #208]	; (409bf0 <SystemCoreClockUpdate+0x10c>)
  409b20:	6a1b      	ldr	r3, [r3, #32]
  409b22:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  409b26:	2b00      	cmp	r3, #0
  409b28:	d003      	beq.n	409b32 <SystemCoreClockUpdate+0x4e>
			SystemCoreClock = CHIP_FREQ_XTAL;
  409b2a:	4b33      	ldr	r3, [pc, #204]	; (409bf8 <SystemCoreClockUpdate+0x114>)
  409b2c:	4a33      	ldr	r2, [pc, #204]	; (409bfc <SystemCoreClockUpdate+0x118>)
  409b2e:	601a      	str	r2, [r3, #0]
		break;
  409b30:	e03f      	b.n	409bb2 <SystemCoreClockUpdate+0xce>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  409b32:	4b31      	ldr	r3, [pc, #196]	; (409bf8 <SystemCoreClockUpdate+0x114>)
  409b34:	4a32      	ldr	r2, [pc, #200]	; (409c00 <SystemCoreClockUpdate+0x11c>)
  409b36:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
  409b38:	4b2d      	ldr	r3, [pc, #180]	; (409bf0 <SystemCoreClockUpdate+0x10c>)
  409b3a:	6a1b      	ldr	r3, [r3, #32]
  409b3c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  409b40:	2b10      	cmp	r3, #16
  409b42:	d004      	beq.n	409b4e <SystemCoreClockUpdate+0x6a>
  409b44:	2b20      	cmp	r3, #32
  409b46:	d008      	beq.n	409b5a <SystemCoreClockUpdate+0x76>
  409b48:	2b00      	cmp	r3, #0
  409b4a:	d00e      	beq.n	409b6a <SystemCoreClockUpdate+0x86>
				break;
  409b4c:	e00e      	b.n	409b6c <SystemCoreClockUpdate+0x88>
				SystemCoreClock *= 2U;
  409b4e:	4b2a      	ldr	r3, [pc, #168]	; (409bf8 <SystemCoreClockUpdate+0x114>)
  409b50:	681b      	ldr	r3, [r3, #0]
  409b52:	005b      	lsls	r3, r3, #1
  409b54:	4a28      	ldr	r2, [pc, #160]	; (409bf8 <SystemCoreClockUpdate+0x114>)
  409b56:	6013      	str	r3, [r2, #0]
				break;
  409b58:	e008      	b.n	409b6c <SystemCoreClockUpdate+0x88>
				SystemCoreClock *= 3U;
  409b5a:	4b27      	ldr	r3, [pc, #156]	; (409bf8 <SystemCoreClockUpdate+0x114>)
  409b5c:	681a      	ldr	r2, [r3, #0]
  409b5e:	4613      	mov	r3, r2
  409b60:	005b      	lsls	r3, r3, #1
  409b62:	4413      	add	r3, r2
  409b64:	4a24      	ldr	r2, [pc, #144]	; (409bf8 <SystemCoreClockUpdate+0x114>)
  409b66:	6013      	str	r3, [r2, #0]
				break;
  409b68:	e000      	b.n	409b6c <SystemCoreClockUpdate+0x88>
				break;
  409b6a:	bf00      	nop
		break;
  409b6c:	e021      	b.n	409bb2 <SystemCoreClockUpdate+0xce>
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
  409b6e:	4b21      	ldr	r3, [pc, #132]	; (409bf4 <SystemCoreClockUpdate+0x110>)
  409b70:	695b      	ldr	r3, [r3, #20]
  409b72:	f003 0380 	and.w	r3, r3, #128	; 0x80
  409b76:	2b00      	cmp	r3, #0
  409b78:	d004      	beq.n	409b84 <SystemCoreClockUpdate+0xa0>
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
  409b7a:	4b1f      	ldr	r3, [pc, #124]	; (409bf8 <SystemCoreClockUpdate+0x114>)
  409b7c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  409b80:	601a      	str	r2, [r3, #0]
  409b82:	e003      	b.n	409b8c <SystemCoreClockUpdate+0xa8>
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
  409b84:	4b1c      	ldr	r3, [pc, #112]	; (409bf8 <SystemCoreClockUpdate+0x114>)
  409b86:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  409b8a:	601a      	str	r2, [r3, #0]
		if ((uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
  409b8c:	4b18      	ldr	r3, [pc, #96]	; (409bf0 <SystemCoreClockUpdate+0x10c>)
  409b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  409b90:	f003 0303 	and.w	r3, r3, #3
  409b94:	2b02      	cmp	r3, #2
  409b96:	d10b      	bne.n	409bb0 <SystemCoreClockUpdate+0xcc>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
  409b98:	4b15      	ldr	r3, [pc, #84]	; (409bf0 <SystemCoreClockUpdate+0x10c>)
  409b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  409b9c:	0c1b      	lsrs	r3, r3, #16
  409b9e:	f3c3 030c 	ubfx	r3, r3, #0, #13
					CKGR_PLLAR_MULA_Pos) + 1U);
  409ba2:	3301      	adds	r3, #1
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
  409ba4:	4a14      	ldr	r2, [pc, #80]	; (409bf8 <SystemCoreClockUpdate+0x114>)
  409ba6:	6812      	ldr	r2, [r2, #0]
  409ba8:	fb02 f303 	mul.w	r3, r2, r3
  409bac:	4a12      	ldr	r2, [pc, #72]	; (409bf8 <SystemCoreClockUpdate+0x114>)
  409bae:	6013      	str	r3, [r2, #0]
		break;
  409bb0:	bf00      	nop
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
  409bb2:	4b0f      	ldr	r3, [pc, #60]	; (409bf0 <SystemCoreClockUpdate+0x10c>)
  409bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  409bb6:	f003 0370 	and.w	r3, r3, #112	; 0x70
  409bba:	2b70      	cmp	r3, #112	; 0x70
  409bbc:	d108      	bne.n	409bd0 <SystemCoreClockUpdate+0xec>
		SystemCoreClock /= 3U;
  409bbe:	4b0e      	ldr	r3, [pc, #56]	; (409bf8 <SystemCoreClockUpdate+0x114>)
  409bc0:	681b      	ldr	r3, [r3, #0]
  409bc2:	4a10      	ldr	r2, [pc, #64]	; (409c04 <SystemCoreClockUpdate+0x120>)
  409bc4:	fba2 2303 	umull	r2, r3, r2, r3
  409bc8:	085b      	lsrs	r3, r3, #1
  409bca:	4a0b      	ldr	r2, [pc, #44]	; (409bf8 <SystemCoreClockUpdate+0x114>)
  409bcc:	6013      	str	r3, [r2, #0]
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
	}
}
  409bce:	e00a      	b.n	409be6 <SystemCoreClockUpdate+0x102>
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  409bd0:	4b07      	ldr	r3, [pc, #28]	; (409bf0 <SystemCoreClockUpdate+0x10c>)
  409bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  409bd4:	091b      	lsrs	r3, r3, #4
  409bd6:	f003 0307 	and.w	r3, r3, #7
  409bda:	4a07      	ldr	r2, [pc, #28]	; (409bf8 <SystemCoreClockUpdate+0x114>)
  409bdc:	6812      	ldr	r2, [r2, #0]
  409bde:	fa22 f303 	lsr.w	r3, r2, r3
  409be2:	4a05      	ldr	r2, [pc, #20]	; (409bf8 <SystemCoreClockUpdate+0x114>)
  409be4:	6013      	str	r3, [r2, #0]
}
  409be6:	bf00      	nop
  409be8:	46bd      	mov	sp, r7
  409bea:	f85d 7b04 	ldr.w	r7, [sp], #4
  409bee:	4770      	bx	lr
  409bf0:	400e0400 	.word	0x400e0400
  409bf4:	400e1410 	.word	0x400e1410
  409bf8:	20000260 	.word	0x20000260
  409bfc:	00b71b00 	.word	0x00b71b00
  409c00:	007a1200 	.word	0x007a1200
  409c04:	aaaaaaab 	.word	0xaaaaaaab

00409c08 <system_init_flash>:

/** 
 * Initialize flash.
 */
void system_init_flash(uint32_t ul_clk)
{
  409c08:	b480      	push	{r7}
  409c0a:	b083      	sub	sp, #12
  409c0c:	af00      	add	r7, sp, #0
  409c0e:	6078      	str	r0, [r7, #4]
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
  409c10:	687b      	ldr	r3, [r7, #4]
  409c12:	4a19      	ldr	r2, [pc, #100]	; (409c78 <system_init_flash+0x70>)
  409c14:	4293      	cmp	r3, r2
  409c16:	d804      	bhi.n	409c22 <system_init_flash+0x1a>
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  409c18:	4b18      	ldr	r3, [pc, #96]	; (409c7c <system_init_flash+0x74>)
  409c1a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  409c1e:	601a      	str	r2, [r3, #0]
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
		EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
	} else {
		EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
	}
}
  409c20:	e023      	b.n	409c6a <system_init_flash+0x62>
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
  409c22:	687b      	ldr	r3, [r7, #4]
  409c24:	4a16      	ldr	r2, [pc, #88]	; (409c80 <system_init_flash+0x78>)
  409c26:	4293      	cmp	r3, r2
  409c28:	d803      	bhi.n	409c32 <system_init_flash+0x2a>
		EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  409c2a:	4b14      	ldr	r3, [pc, #80]	; (409c7c <system_init_flash+0x74>)
  409c2c:	4a15      	ldr	r2, [pc, #84]	; (409c84 <system_init_flash+0x7c>)
  409c2e:	601a      	str	r2, [r3, #0]
}
  409c30:	e01b      	b.n	409c6a <system_init_flash+0x62>
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
  409c32:	687b      	ldr	r3, [r7, #4]
  409c34:	4a14      	ldr	r2, [pc, #80]	; (409c88 <system_init_flash+0x80>)
  409c36:	4293      	cmp	r3, r2
  409c38:	d803      	bhi.n	409c42 <system_init_flash+0x3a>
		EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  409c3a:	4b10      	ldr	r3, [pc, #64]	; (409c7c <system_init_flash+0x74>)
  409c3c:	4a13      	ldr	r2, [pc, #76]	; (409c8c <system_init_flash+0x84>)
  409c3e:	601a      	str	r2, [r3, #0]
}
  409c40:	e013      	b.n	409c6a <system_init_flash+0x62>
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
  409c42:	687b      	ldr	r3, [r7, #4]
  409c44:	4a12      	ldr	r2, [pc, #72]	; (409c90 <system_init_flash+0x88>)
  409c46:	4293      	cmp	r3, r2
  409c48:	d803      	bhi.n	409c52 <system_init_flash+0x4a>
		EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  409c4a:	4b0c      	ldr	r3, [pc, #48]	; (409c7c <system_init_flash+0x74>)
  409c4c:	4a11      	ldr	r2, [pc, #68]	; (409c94 <system_init_flash+0x8c>)
  409c4e:	601a      	str	r2, [r3, #0]
}
  409c50:	e00b      	b.n	409c6a <system_init_flash+0x62>
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
  409c52:	687b      	ldr	r3, [r7, #4]
  409c54:	4a10      	ldr	r2, [pc, #64]	; (409c98 <system_init_flash+0x90>)
  409c56:	4293      	cmp	r3, r2
  409c58:	d804      	bhi.n	409c64 <system_init_flash+0x5c>
		EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  409c5a:	4b08      	ldr	r3, [pc, #32]	; (409c7c <system_init_flash+0x74>)
  409c5c:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  409c60:	601a      	str	r2, [r3, #0]
}
  409c62:	e002      	b.n	409c6a <system_init_flash+0x62>
		EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  409c64:	4b05      	ldr	r3, [pc, #20]	; (409c7c <system_init_flash+0x74>)
  409c66:	4a0d      	ldr	r2, [pc, #52]	; (409c9c <system_init_flash+0x94>)
  409c68:	601a      	str	r2, [r3, #0]
}
  409c6a:	bf00      	nop
  409c6c:	370c      	adds	r7, #12
  409c6e:	46bd      	mov	sp, r7
  409c70:	f85d 7b04 	ldr.w	r7, [sp], #4
  409c74:	4770      	bx	lr
  409c76:	bf00      	nop
  409c78:	01312cff 	.word	0x01312cff
  409c7c:	400e0a00 	.word	0x400e0a00
  409c80:	026259ff 	.word	0x026259ff
  409c84:	04000100 	.word	0x04000100
  409c88:	039386ff 	.word	0x039386ff
  409c8c:	04000200 	.word	0x04000200
  409c90:	04c4b3ff 	.word	0x04c4b3ff
  409c94:	04000300 	.word	0x04000300
  409c98:	05f5e0ff 	.word	0x05f5e0ff
  409c9c:	04000500 	.word	0x04000500

00409ca0 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
  409ca0:	b480      	push	{r7}
  409ca2:	b085      	sub	sp, #20
  409ca4:	af00      	add	r7, sp, #0
  409ca6:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;
  409ca8:	4b10      	ldr	r3, [pc, #64]	; (409cec <_sbrk+0x4c>)
  409caa:	60fb      	str	r3, [r7, #12]

	if (heap == NULL) {
  409cac:	4b10      	ldr	r3, [pc, #64]	; (409cf0 <_sbrk+0x50>)
  409cae:	681b      	ldr	r3, [r3, #0]
  409cb0:	2b00      	cmp	r3, #0
  409cb2:	d102      	bne.n	409cba <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
  409cb4:	4b0e      	ldr	r3, [pc, #56]	; (409cf0 <_sbrk+0x50>)
  409cb6:	4a0f      	ldr	r2, [pc, #60]	; (409cf4 <_sbrk+0x54>)
  409cb8:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  409cba:	4b0d      	ldr	r3, [pc, #52]	; (409cf0 <_sbrk+0x50>)
  409cbc:	681b      	ldr	r3, [r3, #0]
  409cbe:	60bb      	str	r3, [r7, #8]

	if (((int)prev_heap + incr) > ramend) {
  409cc0:	68ba      	ldr	r2, [r7, #8]
  409cc2:	687b      	ldr	r3, [r7, #4]
  409cc4:	441a      	add	r2, r3
  409cc6:	68fb      	ldr	r3, [r7, #12]
  409cc8:	429a      	cmp	r2, r3
  409cca:	dd02      	ble.n	409cd2 <_sbrk+0x32>
		return (caddr_t) -1;	
  409ccc:	f04f 33ff 	mov.w	r3, #4294967295
  409cd0:	e006      	b.n	409ce0 <_sbrk+0x40>
	}

	heap += incr;
  409cd2:	4b07      	ldr	r3, [pc, #28]	; (409cf0 <_sbrk+0x50>)
  409cd4:	681a      	ldr	r2, [r3, #0]
  409cd6:	687b      	ldr	r3, [r7, #4]
  409cd8:	4413      	add	r3, r2
  409cda:	4a05      	ldr	r2, [pc, #20]	; (409cf0 <_sbrk+0x50>)
  409cdc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
  409cde:	68bb      	ldr	r3, [r7, #8]
}
  409ce0:	4618      	mov	r0, r3
  409ce2:	3714      	adds	r7, #20
  409ce4:	46bd      	mov	sp, r7
  409ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
  409cea:	4770      	bx	lr
  409cec:	20027ffc 	.word	0x20027ffc
  409cf0:	2001a330 	.word	0x2001a330
  409cf4:	2001dbe8 	.word	0x2001dbe8

00409cf8 <_close>:
{
	return -1;
}

extern int _close(int file)
{
  409cf8:	b480      	push	{r7}
  409cfa:	b083      	sub	sp, #12
  409cfc:	af00      	add	r7, sp, #0
  409cfe:	6078      	str	r0, [r7, #4]
	return -1;
  409d00:	f04f 33ff 	mov.w	r3, #4294967295
}
  409d04:	4618      	mov	r0, r3
  409d06:	370c      	adds	r7, #12
  409d08:	46bd      	mov	sp, r7
  409d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
  409d0e:	4770      	bx	lr

00409d10 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
  409d10:	b480      	push	{r7}
  409d12:	b083      	sub	sp, #12
  409d14:	af00      	add	r7, sp, #0
  409d16:	6078      	str	r0, [r7, #4]
  409d18:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
  409d1a:	683b      	ldr	r3, [r7, #0]
  409d1c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  409d20:	605a      	str	r2, [r3, #4]

	return 0;
  409d22:	2300      	movs	r3, #0
}
  409d24:	4618      	mov	r0, r3
  409d26:	370c      	adds	r7, #12
  409d28:	46bd      	mov	sp, r7
  409d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
  409d2e:	4770      	bx	lr

00409d30 <_isatty>:

extern int _isatty(int file)
{
  409d30:	b480      	push	{r7}
  409d32:	b083      	sub	sp, #12
  409d34:	af00      	add	r7, sp, #0
  409d36:	6078      	str	r0, [r7, #4]
	return 1;
  409d38:	2301      	movs	r3, #1
}
  409d3a:	4618      	mov	r0, r3
  409d3c:	370c      	adds	r7, #12
  409d3e:	46bd      	mov	sp, r7
  409d40:	f85d 7b04 	ldr.w	r7, [sp], #4
  409d44:	4770      	bx	lr

00409d46 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
  409d46:	b480      	push	{r7}
  409d48:	b085      	sub	sp, #20
  409d4a:	af00      	add	r7, sp, #0
  409d4c:	60f8      	str	r0, [r7, #12]
  409d4e:	60b9      	str	r1, [r7, #8]
  409d50:	607a      	str	r2, [r7, #4]
	return 0;
  409d52:	2300      	movs	r3, #0
}
  409d54:	4618      	mov	r0, r3
  409d56:	3714      	adds	r7, #20
  409d58:	46bd      	mov	sp, r7
  409d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
  409d5e:	4770      	bx	lr

00409d60 <disk_initialize>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
  409d60:	b580      	push	{r7, lr}
  409d62:	b084      	sub	sp, #16
  409d64:	af00      	add	r7, sp, #0
  409d66:	4603      	mov	r3, r0
  409d68:	71fb      	strb	r3, [r7, #7]
	/* USB disk with multiple LUNs */
	if (drv > LUN_ID_USB + Lun_usb_get_lun()) {
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
  409d6a:	79fb      	ldrb	r3, [r7, #7]
  409d6c:	2b02      	cmp	r3, #2
  409d6e:	d901      	bls.n	409d74 <disk_initialize+0x14>
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
  409d70:	2301      	movs	r3, #1
  409d72:	e022      	b.n	409dba <disk_initialize+0x5a>
	}
#endif
	/* Check LUN ready (USB disk report CTRL_BUSY then CTRL_GOOD) */
	for (i = 0; i < 2; i ++) {
  409d74:	2300      	movs	r3, #0
  409d76:	60fb      	str	r3, [r7, #12]
  409d78:	e00b      	b.n	409d92 <disk_initialize+0x32>
		mem_status = mem_test_unit_ready(drv);
  409d7a:	79fb      	ldrb	r3, [r7, #7]
  409d7c:	4618      	mov	r0, r3
  409d7e:	4b11      	ldr	r3, [pc, #68]	; (409dc4 <disk_initialize+0x64>)
  409d80:	4798      	blx	r3
  409d82:	4603      	mov	r3, r0
  409d84:	72fb      	strb	r3, [r7, #11]
		if (CTRL_BUSY != mem_status) {
  409d86:	7afb      	ldrb	r3, [r7, #11]
  409d88:	2b03      	cmp	r3, #3
  409d8a:	d106      	bne.n	409d9a <disk_initialize+0x3a>
	for (i = 0; i < 2; i ++) {
  409d8c:	68fb      	ldr	r3, [r7, #12]
  409d8e:	3301      	adds	r3, #1
  409d90:	60fb      	str	r3, [r7, #12]
  409d92:	68fb      	ldr	r3, [r7, #12]
  409d94:	2b01      	cmp	r3, #1
  409d96:	ddf0      	ble.n	409d7a <disk_initialize+0x1a>
  409d98:	e000      	b.n	409d9c <disk_initialize+0x3c>
			break;
  409d9a:	bf00      	nop
		}
	}
	if (mem_status != CTRL_GOOD) {
  409d9c:	7afb      	ldrb	r3, [r7, #11]
  409d9e:	2b00      	cmp	r3, #0
  409da0:	d001      	beq.n	409da6 <disk_initialize+0x46>
		return STA_NOINIT;
  409da2:	2301      	movs	r3, #1
  409da4:	e009      	b.n	409dba <disk_initialize+0x5a>
	}

	/* Check Write Protection Status */
	if (mem_wr_protect(drv)) {
  409da6:	79fb      	ldrb	r3, [r7, #7]
  409da8:	4618      	mov	r0, r3
  409daa:	4b07      	ldr	r3, [pc, #28]	; (409dc8 <disk_initialize+0x68>)
  409dac:	4798      	blx	r3
  409dae:	4603      	mov	r3, r0
  409db0:	2b00      	cmp	r3, #0
  409db2:	d001      	beq.n	409db8 <disk_initialize+0x58>
		return STA_PROTECT;
  409db4:	2304      	movs	r3, #4
  409db6:	e000      	b.n	409dba <disk_initialize+0x5a>
	}

	/* The memory should already be initialized */
	return 0;
  409db8:	2300      	movs	r3, #0
}
  409dba:	4618      	mov	r0, r3
  409dbc:	3710      	adds	r7, #16
  409dbe:	46bd      	mov	sp, r7
  409dc0:	bd80      	pop	{r7, pc}
  409dc2:	bf00      	nop
  409dc4:	00403279 	.word	0x00403279
  409dc8:	00403399 	.word	0x00403399

00409dcc <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
  409dcc:	b580      	push	{r7, lr}
  409dce:	b082      	sub	sp, #8
  409dd0:	af00      	add	r7, sp, #0
  409dd2:	4603      	mov	r3, r0
  409dd4:	71fb      	strb	r3, [r7, #7]
	switch (mem_test_unit_ready(drv)) {
  409dd6:	79fb      	ldrb	r3, [r7, #7]
  409dd8:	4618      	mov	r0, r3
  409dda:	4b08      	ldr	r3, [pc, #32]	; (409dfc <disk_status+0x30>)
  409ddc:	4798      	blx	r3
  409dde:	4603      	mov	r3, r0
  409de0:	2b00      	cmp	r3, #0
  409de2:	d002      	beq.n	409dea <disk_status+0x1e>
  409de4:	2b02      	cmp	r3, #2
  409de6:	d002      	beq.n	409dee <disk_status+0x22>
  409de8:	e003      	b.n	409df2 <disk_status+0x26>
	case CTRL_GOOD:
		return 0;
  409dea:	2300      	movs	r3, #0
  409dec:	e002      	b.n	409df4 <disk_status+0x28>
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
  409dee:	2303      	movs	r3, #3
  409df0:	e000      	b.n	409df4 <disk_status+0x28>
	default:
		return STA_NOINIT;
  409df2:	2301      	movs	r3, #1
	}
}
  409df4:	4618      	mov	r0, r3
  409df6:	3708      	adds	r7, #8
  409df8:	46bd      	mov	sp, r7
  409dfa:	bd80      	pop	{r7, pc}
  409dfc:	00403279 	.word	0x00403279

00409e00 <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
  409e00:	b580      	push	{r7, lr}
  409e02:	b088      	sub	sp, #32
  409e04:	af00      	add	r7, sp, #0
  409e06:	60b9      	str	r1, [r7, #8]
  409e08:	607a      	str	r2, [r7, #4]
  409e0a:	461a      	mov	r2, r3
  409e0c:	4603      	mov	r3, r0
  409e0e:	73fb      	strb	r3, [r7, #15]
  409e10:	4613      	mov	r3, r2
  409e12:	73bb      	strb	r3, [r7, #14]
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
  409e14:	7bfb      	ldrb	r3, [r7, #15]
  409e16:	4618      	mov	r0, r3
  409e18:	4b22      	ldr	r3, [pc, #136]	; (409ea4 <disk_read+0xa4>)
  409e1a:	4798      	blx	r3
  409e1c:	4603      	mov	r3, r0
  409e1e:	76fb      	strb	r3, [r7, #27]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
  409e20:	7efb      	ldrb	r3, [r7, #27]
  409e22:	2b00      	cmp	r3, #0
  409e24:	d101      	bne.n	409e2a <disk_read+0x2a>
		return RES_ERROR;
  409e26:	2301      	movs	r3, #1
  409e28:	e037      	b.n	409e9a <disk_read+0x9a>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
  409e2a:	f107 0214 	add.w	r2, r7, #20
  409e2e:	7bfb      	ldrb	r3, [r7, #15]
  409e30:	4611      	mov	r1, r2
  409e32:	4618      	mov	r0, r3
  409e34:	4b1c      	ldr	r3, [pc, #112]	; (409ea8 <disk_read+0xa8>)
  409e36:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
  409e38:	7bbb      	ldrb	r3, [r7, #14]
  409e3a:	7efa      	ldrb	r2, [r7, #27]
  409e3c:	fb02 f303 	mul.w	r3, r2, r3
  409e40:	461a      	mov	r2, r3
  409e42:	687b      	ldr	r3, [r7, #4]
  409e44:	441a      	add	r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
  409e46:	697b      	ldr	r3, [r7, #20]
  409e48:	3301      	adds	r3, #1
  409e4a:	7ef9      	ldrb	r1, [r7, #27]
  409e4c:	fb01 f303 	mul.w	r3, r1, r3
	if ((sector + count * uc_sector_size) >
  409e50:	429a      	cmp	r2, r3
  409e52:	d901      	bls.n	409e58 <disk_read+0x58>
		return RES_PARERR;
  409e54:	2304      	movs	r3, #4
  409e56:	e020      	b.n	409e9a <disk_read+0x9a>
	}

	/* Read the data */
	for (i = 0; i < count; i++) {
  409e58:	2300      	movs	r3, #0
  409e5a:	61fb      	str	r3, [r7, #28]
  409e5c:	e018      	b.n	409e90 <disk_read+0x90>
		if (memory_2_ram(drv, sector + uc_sector_size * i,
  409e5e:	7efb      	ldrb	r3, [r7, #27]
  409e60:	69fa      	ldr	r2, [r7, #28]
  409e62:	fb02 f203 	mul.w	r2, r2, r3
  409e66:	687b      	ldr	r3, [r7, #4]
  409e68:	18d1      	adds	r1, r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
  409e6a:	7efb      	ldrb	r3, [r7, #27]
  409e6c:	69fa      	ldr	r2, [r7, #28]
  409e6e:	fb02 f303 	mul.w	r3, r2, r3
  409e72:	025b      	lsls	r3, r3, #9
  409e74:	68ba      	ldr	r2, [r7, #8]
  409e76:	441a      	add	r2, r3
		if (memory_2_ram(drv, sector + uc_sector_size * i,
  409e78:	7bfb      	ldrb	r3, [r7, #15]
  409e7a:	4618      	mov	r0, r3
  409e7c:	4b0b      	ldr	r3, [pc, #44]	; (409eac <disk_read+0xac>)
  409e7e:	4798      	blx	r3
  409e80:	4603      	mov	r3, r0
  409e82:	2b00      	cmp	r3, #0
  409e84:	d001      	beq.n	409e8a <disk_read+0x8a>
				CTRL_GOOD) {
			return RES_ERROR;
  409e86:	2301      	movs	r3, #1
  409e88:	e007      	b.n	409e9a <disk_read+0x9a>
	for (i = 0; i < count; i++) {
  409e8a:	69fb      	ldr	r3, [r7, #28]
  409e8c:	3301      	adds	r3, #1
  409e8e:	61fb      	str	r3, [r7, #28]
  409e90:	7bba      	ldrb	r2, [r7, #14]
  409e92:	69fb      	ldr	r3, [r7, #28]
  409e94:	429a      	cmp	r2, r3
  409e96:	d8e2      	bhi.n	409e5e <disk_read+0x5e>
		}
	}

	return RES_OK;
  409e98:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
  409e9a:	4618      	mov	r0, r3
  409e9c:	3720      	adds	r7, #32
  409e9e:	46bd      	mov	sp, r7
  409ea0:	bd80      	pop	{r7, pc}
  409ea2:	bf00      	nop
  409ea4:	004032f1 	.word	0x004032f1
  409ea8:	004032b1 	.word	0x004032b1
  409eac:	00403501 	.word	0x00403501

00409eb0 <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
  409eb0:	b580      	push	{r7, lr}
  409eb2:	b088      	sub	sp, #32
  409eb4:	af00      	add	r7, sp, #0
  409eb6:	60b9      	str	r1, [r7, #8]
  409eb8:	607a      	str	r2, [r7, #4]
  409eba:	461a      	mov	r2, r3
  409ebc:	4603      	mov	r3, r0
  409ebe:	73fb      	strb	r3, [r7, #15]
  409ec0:	4613      	mov	r3, r2
  409ec2:	73bb      	strb	r3, [r7, #14]
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
  409ec4:	7bfb      	ldrb	r3, [r7, #15]
  409ec6:	4618      	mov	r0, r3
  409ec8:	4b22      	ldr	r3, [pc, #136]	; (409f54 <disk_write+0xa4>)
  409eca:	4798      	blx	r3
  409ecc:	4603      	mov	r3, r0
  409ece:	76fb      	strb	r3, [r7, #27]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
  409ed0:	7efb      	ldrb	r3, [r7, #27]
  409ed2:	2b00      	cmp	r3, #0
  409ed4:	d101      	bne.n	409eda <disk_write+0x2a>
		return RES_ERROR;
  409ed6:	2301      	movs	r3, #1
  409ed8:	e037      	b.n	409f4a <disk_write+0x9a>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
  409eda:	f107 0214 	add.w	r2, r7, #20
  409ede:	7bfb      	ldrb	r3, [r7, #15]
  409ee0:	4611      	mov	r1, r2
  409ee2:	4618      	mov	r0, r3
  409ee4:	4b1c      	ldr	r3, [pc, #112]	; (409f58 <disk_write+0xa8>)
  409ee6:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
  409ee8:	7bbb      	ldrb	r3, [r7, #14]
  409eea:	7efa      	ldrb	r2, [r7, #27]
  409eec:	fb02 f303 	mul.w	r3, r2, r3
  409ef0:	461a      	mov	r2, r3
  409ef2:	687b      	ldr	r3, [r7, #4]
  409ef4:	441a      	add	r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
  409ef6:	697b      	ldr	r3, [r7, #20]
  409ef8:	3301      	adds	r3, #1
  409efa:	7ef9      	ldrb	r1, [r7, #27]
  409efc:	fb01 f303 	mul.w	r3, r1, r3
	if ((sector + count * uc_sector_size) >
  409f00:	429a      	cmp	r2, r3
  409f02:	d901      	bls.n	409f08 <disk_write+0x58>
		return RES_PARERR;
  409f04:	2304      	movs	r3, #4
  409f06:	e020      	b.n	409f4a <disk_write+0x9a>
	}

	/* Write the data */
	for (i = 0; i < count; i++) {
  409f08:	2300      	movs	r3, #0
  409f0a:	61fb      	str	r3, [r7, #28]
  409f0c:	e018      	b.n	409f40 <disk_write+0x90>
		if (ram_2_memory(drv, sector + uc_sector_size * i,
  409f0e:	7efb      	ldrb	r3, [r7, #27]
  409f10:	69fa      	ldr	r2, [r7, #28]
  409f12:	fb02 f203 	mul.w	r2, r2, r3
  409f16:	687b      	ldr	r3, [r7, #4]
  409f18:	18d1      	adds	r1, r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
  409f1a:	7efb      	ldrb	r3, [r7, #27]
  409f1c:	69fa      	ldr	r2, [r7, #28]
  409f1e:	fb02 f303 	mul.w	r3, r2, r3
  409f22:	025b      	lsls	r3, r3, #9
  409f24:	68ba      	ldr	r2, [r7, #8]
  409f26:	441a      	add	r2, r3
		if (ram_2_memory(drv, sector + uc_sector_size * i,
  409f28:	7bfb      	ldrb	r3, [r7, #15]
  409f2a:	4618      	mov	r0, r3
  409f2c:	4b0b      	ldr	r3, [pc, #44]	; (409f5c <disk_write+0xac>)
  409f2e:	4798      	blx	r3
  409f30:	4603      	mov	r3, r0
  409f32:	2b00      	cmp	r3, #0
  409f34:	d001      	beq.n	409f3a <disk_write+0x8a>
				CTRL_GOOD) {
			return RES_ERROR;
  409f36:	2301      	movs	r3, #1
  409f38:	e007      	b.n	409f4a <disk_write+0x9a>
	for (i = 0; i < count; i++) {
  409f3a:	69fb      	ldr	r3, [r7, #28]
  409f3c:	3301      	adds	r3, #1
  409f3e:	61fb      	str	r3, [r7, #28]
  409f40:	7bba      	ldrb	r2, [r7, #14]
  409f42:	69fb      	ldr	r3, [r7, #28]
  409f44:	429a      	cmp	r2, r3
  409f46:	d8e2      	bhi.n	409f0e <disk_write+0x5e>
		}
	}

	return RES_OK;
  409f48:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
  409f4a:	4618      	mov	r0, r3
  409f4c:	3720      	adds	r7, #32
  409f4e:	46bd      	mov	sp, r7
  409f50:	bd80      	pop	{r7, pc}
  409f52:	bf00      	nop
  409f54:	004032f1 	.word	0x004032f1
  409f58:	004032b1 	.word	0x004032b1
  409f5c:	00403555 	.word	0x00403555

00409f60 <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
  409f60:	b580      	push	{r7, lr}
  409f62:	b084      	sub	sp, #16
  409f64:	af00      	add	r7, sp, #0
  409f66:	4603      	mov	r3, r0
  409f68:	603a      	str	r2, [r7, #0]
  409f6a:	71fb      	strb	r3, [r7, #7]
  409f6c:	460b      	mov	r3, r1
  409f6e:	71bb      	strb	r3, [r7, #6]
	DRESULT res = RES_PARERR;
  409f70:	2304      	movs	r3, #4
  409f72:	73fb      	strb	r3, [r7, #15]

	switch (ctrl) {
  409f74:	79bb      	ldrb	r3, [r7, #6]
  409f76:	2b03      	cmp	r3, #3
  409f78:	d845      	bhi.n	40a006 <disk_ioctl+0xa6>
  409f7a:	a201      	add	r2, pc, #4	; (adr r2, 409f80 <disk_ioctl+0x20>)
  409f7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  409f80:	00409fed 	.word	0x00409fed
  409f84:	00409f9d 	.word	0x00409f9d
  409f88:	00409fb9 	.word	0x00409fb9
  409f8c:	00409f91 	.word	0x00409f91
	case GET_BLOCK_SIZE:
		*(DWORD *)buff = 1;
  409f90:	683b      	ldr	r3, [r7, #0]
  409f92:	2201      	movs	r2, #1
  409f94:	601a      	str	r2, [r3, #0]
		res = RES_OK;
  409f96:	2300      	movs	r3, #0
  409f98:	73fb      	strb	r3, [r7, #15]
		break;
  409f9a:	e036      	b.n	40a00a <disk_ioctl+0xaa>
	case GET_SECTOR_COUNT:
	{
		uint32_t ul_last_sector_num;

		/* Check valid address */
		mem_read_capacity(drv, &ul_last_sector_num);
  409f9c:	f107 0208 	add.w	r2, r7, #8
  409fa0:	79fb      	ldrb	r3, [r7, #7]
  409fa2:	4611      	mov	r1, r2
  409fa4:	4618      	mov	r0, r3
  409fa6:	4b1b      	ldr	r3, [pc, #108]	; (40a014 <disk_ioctl+0xb4>)
  409fa8:	4798      	blx	r3

		*(DWORD *)buff = ul_last_sector_num + 1;
  409faa:	68bb      	ldr	r3, [r7, #8]
  409fac:	1c5a      	adds	r2, r3, #1
  409fae:	683b      	ldr	r3, [r7, #0]
  409fb0:	601a      	str	r2, [r3, #0]

		res = RES_OK;
  409fb2:	2300      	movs	r3, #0
  409fb4:	73fb      	strb	r3, [r7, #15]
	}
	break;
  409fb6:	e028      	b.n	40a00a <disk_ioctl+0xaa>

	/* Get sectors on the disk (WORD) */
	case GET_SECTOR_SIZE:
	{
		uint8_t uc_sector_size = mem_sector_size(drv);
  409fb8:	79fb      	ldrb	r3, [r7, #7]
  409fba:	4618      	mov	r0, r3
  409fbc:	4b16      	ldr	r3, [pc, #88]	; (40a018 <disk_ioctl+0xb8>)
  409fbe:	4798      	blx	r3
  409fc0:	4603      	mov	r3, r0
  409fc2:	73bb      	strb	r3, [r7, #14]

		if ((uc_sector_size != SECTOR_SIZE_512) &&
  409fc4:	7bbb      	ldrb	r3, [r7, #14]
  409fc6:	2b01      	cmp	r3, #1
  409fc8:	d00a      	beq.n	409fe0 <disk_ioctl+0x80>
  409fca:	7bbb      	ldrb	r3, [r7, #14]
  409fcc:	2b02      	cmp	r3, #2
  409fce:	d007      	beq.n	409fe0 <disk_ioctl+0x80>
				(uc_sector_size != SECTOR_SIZE_1024) &&
  409fd0:	7bbb      	ldrb	r3, [r7, #14]
  409fd2:	2b04      	cmp	r3, #4
  409fd4:	d004      	beq.n	409fe0 <disk_ioctl+0x80>
				(uc_sector_size != SECTOR_SIZE_2048) &&
  409fd6:	7bbb      	ldrb	r3, [r7, #14]
  409fd8:	2b08      	cmp	r3, #8
  409fda:	d001      	beq.n	409fe0 <disk_ioctl+0x80>
				(uc_sector_size != SECTOR_SIZE_4096)) {
			/* The sector size is not supported by the FatFS */
			return RES_ERROR;
  409fdc:	2301      	movs	r3, #1
  409fde:	e015      	b.n	40a00c <disk_ioctl+0xac>
		}

		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
  409fe0:	683b      	ldr	r3, [r7, #0]
  409fe2:	2200      	movs	r2, #0
  409fe4:	701a      	strb	r2, [r3, #0]

		res = RES_OK;
  409fe6:	2300      	movs	r3, #0
  409fe8:	73fb      	strb	r3, [r7, #15]
	}
	break;
  409fea:	e00e      	b.n	40a00a <disk_ioctl+0xaa>

	/* Make sure that data has been written */
	case CTRL_SYNC:
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
  409fec:	79fb      	ldrb	r3, [r7, #7]
  409fee:	4618      	mov	r0, r3
  409ff0:	4b0a      	ldr	r3, [pc, #40]	; (40a01c <disk_ioctl+0xbc>)
  409ff2:	4798      	blx	r3
  409ff4:	4603      	mov	r3, r0
  409ff6:	2b00      	cmp	r3, #0
  409ff8:	d102      	bne.n	40a000 <disk_ioctl+0xa0>
			res = RES_OK;
  409ffa:	2300      	movs	r3, #0
  409ffc:	73fb      	strb	r3, [r7, #15]
		} else {
			res = RES_NOTRDY;
		}
		break;
  409ffe:	e004      	b.n	40a00a <disk_ioctl+0xaa>
			res = RES_NOTRDY;
  40a000:	2303      	movs	r3, #3
  40a002:	73fb      	strb	r3, [r7, #15]
		break;
  40a004:	e001      	b.n	40a00a <disk_ioctl+0xaa>

	default:
		res = RES_PARERR;
  40a006:	2304      	movs	r3, #4
  40a008:	73fb      	strb	r3, [r7, #15]
	}

	return res;
  40a00a:	7bfb      	ldrb	r3, [r7, #15]
}
  40a00c:	4618      	mov	r0, r3
  40a00e:	3710      	adds	r7, #16
  40a010:	46bd      	mov	sp, r7
  40a012:	bd80      	pop	{r7, pc}
  40a014:	004032b1 	.word	0x004032b1
  40a018:	004032f1 	.word	0x004032f1
  40a01c:	00403279 	.word	0x00403279

0040a020 <get_fattime>:
 * bit4:0    Second (0..29)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
  40a020:	b590      	push	{r4, r7, lr}
  40a022:	b08b      	sub	sp, #44	; 0x2c
  40a024:	af02      	add	r7, sp, #8
	uint32_t ul_time;
	uint32_t ul_hour, ul_minute, ul_second;
	uint32_t ul_year, ul_month, ul_day, ul_week;

	/* Retrieve date and time */
	rtc_get_time(RTC, &ul_hour, &ul_minute, &ul_second);
  40a026:	f107 0310 	add.w	r3, r7, #16
  40a02a:	f107 0214 	add.w	r2, r7, #20
  40a02e:	f107 0118 	add.w	r1, r7, #24
  40a032:	4813      	ldr	r0, [pc, #76]	; (40a080 <get_fattime+0x60>)
  40a034:	4c13      	ldr	r4, [pc, #76]	; (40a084 <get_fattime+0x64>)
  40a036:	47a0      	blx	r4
	rtc_get_date(RTC, &ul_year, &ul_month, &ul_day, &ul_week);
  40a038:	1d38      	adds	r0, r7, #4
  40a03a:	f107 0208 	add.w	r2, r7, #8
  40a03e:	f107 010c 	add.w	r1, r7, #12
  40a042:	463b      	mov	r3, r7
  40a044:	9300      	str	r3, [sp, #0]
  40a046:	4603      	mov	r3, r0
  40a048:	480d      	ldr	r0, [pc, #52]	; (40a080 <get_fattime+0x60>)
  40a04a:	4c0f      	ldr	r4, [pc, #60]	; (40a088 <get_fattime+0x68>)
  40a04c:	47a0      	blx	r4

	ul_time = ((ul_year - 1980) << 25)
  40a04e:	68fb      	ldr	r3, [r7, #12]
  40a050:	f2a3 73bc 	subw	r3, r3, #1980	; 0x7bc
  40a054:	065a      	lsls	r2, r3, #25
			| (ul_month << 21)
  40a056:	68bb      	ldr	r3, [r7, #8]
  40a058:	055b      	lsls	r3, r3, #21
  40a05a:	431a      	orrs	r2, r3
			| (ul_day << 16)
  40a05c:	687b      	ldr	r3, [r7, #4]
  40a05e:	041b      	lsls	r3, r3, #16
  40a060:	431a      	orrs	r2, r3
			| (ul_hour << 11)
  40a062:	69bb      	ldr	r3, [r7, #24]
  40a064:	02db      	lsls	r3, r3, #11
  40a066:	431a      	orrs	r2, r3
			| (ul_minute << 5)
  40a068:	697b      	ldr	r3, [r7, #20]
  40a06a:	015b      	lsls	r3, r3, #5
  40a06c:	431a      	orrs	r2, r3
			| ((ul_second >> 1) << 0);
  40a06e:	693b      	ldr	r3, [r7, #16]
  40a070:	085b      	lsrs	r3, r3, #1
	ul_time = ((ul_year - 1980) << 25)
  40a072:	4313      	orrs	r3, r2
  40a074:	61fb      	str	r3, [r7, #28]

	return ul_time;
  40a076:	69fb      	ldr	r3, [r7, #28]
}
  40a078:	4618      	mov	r0, r3
  40a07a:	3724      	adds	r7, #36	; 0x24
  40a07c:	46bd      	mov	sp, r7
  40a07e:	bd90      	pop	{r4, r7, pc}
  40a080:	400e1460 	.word	0x400e1460
  40a084:	00406ac9 	.word	0x00406ac9
  40a088:	00406b8d 	.word	0x00406b8d

0040a08c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
  40a08c:	b480      	push	{r7}
  40a08e:	b087      	sub	sp, #28
  40a090:	af00      	add	r7, sp, #0
  40a092:	60f8      	str	r0, [r7, #12]
  40a094:	60b9      	str	r1, [r7, #8]
  40a096:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
  40a098:	68fb      	ldr	r3, [r7, #12]
  40a09a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
  40a09c:	68bb      	ldr	r3, [r7, #8]
  40a09e:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
  40a0a0:	e007      	b.n	40a0b2 <mem_cpy+0x26>
		*d++ = *s++;
  40a0a2:	697b      	ldr	r3, [r7, #20]
  40a0a4:	1c5a      	adds	r2, r3, #1
  40a0a6:	617a      	str	r2, [r7, #20]
  40a0a8:	693a      	ldr	r2, [r7, #16]
  40a0aa:	1c51      	adds	r1, r2, #1
  40a0ac:	6139      	str	r1, [r7, #16]
  40a0ae:	7812      	ldrb	r2, [r2, #0]
  40a0b0:	701a      	strb	r2, [r3, #0]
	while (cnt--)
  40a0b2:	687b      	ldr	r3, [r7, #4]
  40a0b4:	1e5a      	subs	r2, r3, #1
  40a0b6:	607a      	str	r2, [r7, #4]
  40a0b8:	2b00      	cmp	r3, #0
  40a0ba:	d1f2      	bne.n	40a0a2 <mem_cpy+0x16>
}
  40a0bc:	bf00      	nop
  40a0be:	371c      	adds	r7, #28
  40a0c0:	46bd      	mov	sp, r7
  40a0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
  40a0c6:	4770      	bx	lr

0040a0c8 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
  40a0c8:	b480      	push	{r7}
  40a0ca:	b087      	sub	sp, #28
  40a0cc:	af00      	add	r7, sp, #0
  40a0ce:	60f8      	str	r0, [r7, #12]
  40a0d0:	60b9      	str	r1, [r7, #8]
  40a0d2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
  40a0d4:	68fb      	ldr	r3, [r7, #12]
  40a0d6:	617b      	str	r3, [r7, #20]

	while (cnt--)
  40a0d8:	e005      	b.n	40a0e6 <mem_set+0x1e>
		*d++ = (BYTE)val;
  40a0da:	697b      	ldr	r3, [r7, #20]
  40a0dc:	1c5a      	adds	r2, r3, #1
  40a0de:	617a      	str	r2, [r7, #20]
  40a0e0:	68ba      	ldr	r2, [r7, #8]
  40a0e2:	b2d2      	uxtb	r2, r2
  40a0e4:	701a      	strb	r2, [r3, #0]
	while (cnt--)
  40a0e6:	687b      	ldr	r3, [r7, #4]
  40a0e8:	1e5a      	subs	r2, r3, #1
  40a0ea:	607a      	str	r2, [r7, #4]
  40a0ec:	2b00      	cmp	r3, #0
  40a0ee:	d1f4      	bne.n	40a0da <mem_set+0x12>
}
  40a0f0:	bf00      	nop
  40a0f2:	371c      	adds	r7, #28
  40a0f4:	46bd      	mov	sp, r7
  40a0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
  40a0fa:	4770      	bx	lr

0040a0fc <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
  40a0fc:	b480      	push	{r7}
  40a0fe:	b089      	sub	sp, #36	; 0x24
  40a100:	af00      	add	r7, sp, #0
  40a102:	60f8      	str	r0, [r7, #12]
  40a104:	60b9      	str	r1, [r7, #8]
  40a106:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
  40a108:	68fb      	ldr	r3, [r7, #12]
  40a10a:	61fb      	str	r3, [r7, #28]
  40a10c:	68bb      	ldr	r3, [r7, #8]
  40a10e:	61bb      	str	r3, [r7, #24]
	int r = 0;
  40a110:	2300      	movs	r3, #0
  40a112:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
  40a114:	bf00      	nop
  40a116:	687b      	ldr	r3, [r7, #4]
  40a118:	1e5a      	subs	r2, r3, #1
  40a11a:	607a      	str	r2, [r7, #4]
  40a11c:	2b00      	cmp	r3, #0
  40a11e:	d00d      	beq.n	40a13c <mem_cmp+0x40>
  40a120:	69fb      	ldr	r3, [r7, #28]
  40a122:	1c5a      	adds	r2, r3, #1
  40a124:	61fa      	str	r2, [r7, #28]
  40a126:	781b      	ldrb	r3, [r3, #0]
  40a128:	4619      	mov	r1, r3
  40a12a:	69bb      	ldr	r3, [r7, #24]
  40a12c:	1c5a      	adds	r2, r3, #1
  40a12e:	61ba      	str	r2, [r7, #24]
  40a130:	781b      	ldrb	r3, [r3, #0]
  40a132:	1acb      	subs	r3, r1, r3
  40a134:	617b      	str	r3, [r7, #20]
  40a136:	697b      	ldr	r3, [r7, #20]
  40a138:	2b00      	cmp	r3, #0
  40a13a:	d0ec      	beq.n	40a116 <mem_cmp+0x1a>
	return r;
  40a13c:	697b      	ldr	r3, [r7, #20]
}
  40a13e:	4618      	mov	r0, r3
  40a140:	3724      	adds	r7, #36	; 0x24
  40a142:	46bd      	mov	sp, r7
  40a144:	f85d 7b04 	ldr.w	r7, [sp], #4
  40a148:	4770      	bx	lr

0040a14a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
  40a14a:	b480      	push	{r7}
  40a14c:	b083      	sub	sp, #12
  40a14e:	af00      	add	r7, sp, #0
  40a150:	6078      	str	r0, [r7, #4]
  40a152:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
  40a154:	e002      	b.n	40a15c <chk_chr+0x12>
  40a156:	687b      	ldr	r3, [r7, #4]
  40a158:	3301      	adds	r3, #1
  40a15a:	607b      	str	r3, [r7, #4]
  40a15c:	687b      	ldr	r3, [r7, #4]
  40a15e:	781b      	ldrb	r3, [r3, #0]
  40a160:	2b00      	cmp	r3, #0
  40a162:	d005      	beq.n	40a170 <chk_chr+0x26>
  40a164:	687b      	ldr	r3, [r7, #4]
  40a166:	781b      	ldrb	r3, [r3, #0]
  40a168:	461a      	mov	r2, r3
  40a16a:	683b      	ldr	r3, [r7, #0]
  40a16c:	429a      	cmp	r2, r3
  40a16e:	d1f2      	bne.n	40a156 <chk_chr+0xc>
	return *str;
  40a170:	687b      	ldr	r3, [r7, #4]
  40a172:	781b      	ldrb	r3, [r3, #0]
}
  40a174:	4618      	mov	r0, r3
  40a176:	370c      	adds	r7, #12
  40a178:	46bd      	mov	sp, r7
  40a17a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40a17e:	4770      	bx	lr

0040a180 <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
  40a180:	b590      	push	{r4, r7, lr}
  40a182:	b085      	sub	sp, #20
  40a184:	af00      	add	r7, sp, #0
  40a186:	6078      	str	r0, [r7, #4]
  40a188:	6039      	str	r1, [r7, #0]
	DWORD wsect;


	wsect = fs->winsect;
  40a18a:	687b      	ldr	r3, [r7, #4]
  40a18c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40a18e:	60fb      	str	r3, [r7, #12]
	if (wsect != sector) {	/* Changed current window */
  40a190:	68fa      	ldr	r2, [r7, #12]
  40a192:	683b      	ldr	r3, [r7, #0]
  40a194:	429a      	cmp	r2, r3
  40a196:	d048      	beq.n	40a22a <move_window+0xaa>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
  40a198:	687b      	ldr	r3, [r7, #4]
  40a19a:	791b      	ldrb	r3, [r3, #4]
  40a19c:	2b00      	cmp	r3, #0
  40a19e:	d030      	beq.n	40a202 <move_window+0x82>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
  40a1a0:	687b      	ldr	r3, [r7, #4]
  40a1a2:	7858      	ldrb	r0, [r3, #1]
  40a1a4:	687b      	ldr	r3, [r7, #4]
  40a1a6:	f103 0130 	add.w	r1, r3, #48	; 0x30
  40a1aa:	2301      	movs	r3, #1
  40a1ac:	68fa      	ldr	r2, [r7, #12]
  40a1ae:	4c21      	ldr	r4, [pc, #132]	; (40a234 <move_window+0xb4>)
  40a1b0:	47a0      	blx	r4
  40a1b2:	4603      	mov	r3, r0
  40a1b4:	2b00      	cmp	r3, #0
  40a1b6:	d001      	beq.n	40a1bc <move_window+0x3c>
				return FR_DISK_ERR;
  40a1b8:	2301      	movs	r3, #1
  40a1ba:	e037      	b.n	40a22c <move_window+0xac>
			fs->wflag = 0;
  40a1bc:	687b      	ldr	r3, [r7, #4]
  40a1be:	2200      	movs	r2, #0
  40a1c0:	711a      	strb	r2, [r3, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
  40a1c2:	687b      	ldr	r3, [r7, #4]
  40a1c4:	6a1a      	ldr	r2, [r3, #32]
  40a1c6:	687b      	ldr	r3, [r7, #4]
  40a1c8:	69db      	ldr	r3, [r3, #28]
  40a1ca:	441a      	add	r2, r3
  40a1cc:	68fb      	ldr	r3, [r7, #12]
  40a1ce:	429a      	cmp	r2, r3
  40a1d0:	d917      	bls.n	40a202 <move_window+0x82>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
  40a1d2:	687b      	ldr	r3, [r7, #4]
  40a1d4:	78db      	ldrb	r3, [r3, #3]
  40a1d6:	72fb      	strb	r3, [r7, #11]
  40a1d8:	e010      	b.n	40a1fc <move_window+0x7c>
					wsect += fs->fsize;
  40a1da:	687b      	ldr	r3, [r7, #4]
  40a1dc:	69db      	ldr	r3, [r3, #28]
  40a1de:	68fa      	ldr	r2, [r7, #12]
  40a1e0:	4413      	add	r3, r2
  40a1e2:	60fb      	str	r3, [r7, #12]
					disk_write(fs->drv, fs->win, wsect, 1);
  40a1e4:	687b      	ldr	r3, [r7, #4]
  40a1e6:	7858      	ldrb	r0, [r3, #1]
  40a1e8:	687b      	ldr	r3, [r7, #4]
  40a1ea:	f103 0130 	add.w	r1, r3, #48	; 0x30
  40a1ee:	2301      	movs	r3, #1
  40a1f0:	68fa      	ldr	r2, [r7, #12]
  40a1f2:	4c10      	ldr	r4, [pc, #64]	; (40a234 <move_window+0xb4>)
  40a1f4:	47a0      	blx	r4
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
  40a1f6:	7afb      	ldrb	r3, [r7, #11]
  40a1f8:	3b01      	subs	r3, #1
  40a1fa:	72fb      	strb	r3, [r7, #11]
  40a1fc:	7afb      	ldrb	r3, [r7, #11]
  40a1fe:	2b01      	cmp	r3, #1
  40a200:	d8eb      	bhi.n	40a1da <move_window+0x5a>
				}
			}
		}
#endif
		if (sector) {
  40a202:	683b      	ldr	r3, [r7, #0]
  40a204:	2b00      	cmp	r3, #0
  40a206:	d010      	beq.n	40a22a <move_window+0xaa>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
  40a208:	687b      	ldr	r3, [r7, #4]
  40a20a:	7858      	ldrb	r0, [r3, #1]
  40a20c:	687b      	ldr	r3, [r7, #4]
  40a20e:	f103 0130 	add.w	r1, r3, #48	; 0x30
  40a212:	2301      	movs	r3, #1
  40a214:	683a      	ldr	r2, [r7, #0]
  40a216:	4c08      	ldr	r4, [pc, #32]	; (40a238 <move_window+0xb8>)
  40a218:	47a0      	blx	r4
  40a21a:	4603      	mov	r3, r0
  40a21c:	2b00      	cmp	r3, #0
  40a21e:	d001      	beq.n	40a224 <move_window+0xa4>
				return FR_DISK_ERR;
  40a220:	2301      	movs	r3, #1
  40a222:	e003      	b.n	40a22c <move_window+0xac>
			fs->winsect = sector;
  40a224:	687b      	ldr	r3, [r7, #4]
  40a226:	683a      	ldr	r2, [r7, #0]
  40a228:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}

	return FR_OK;
  40a22a:	2300      	movs	r3, #0
}
  40a22c:	4618      	mov	r0, r3
  40a22e:	3714      	adds	r7, #20
  40a230:	46bd      	mov	sp, r7
  40a232:	bd90      	pop	{r4, r7, pc}
  40a234:	00409eb1 	.word	0x00409eb1
  40a238:	00409e01 	.word	0x00409e01

0040a23c <sync>:
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs	/* File system object */
)
{
  40a23c:	b590      	push	{r4, r7, lr}
  40a23e:	b085      	sub	sp, #20
  40a240:	af00      	add	r7, sp, #0
  40a242:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = move_window(fs, 0);
  40a244:	2100      	movs	r1, #0
  40a246:	6878      	ldr	r0, [r7, #4]
  40a248:	4b4d      	ldr	r3, [pc, #308]	; (40a380 <sync+0x144>)
  40a24a:	4798      	blx	r3
  40a24c:	4603      	mov	r3, r0
  40a24e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
  40a250:	7bfb      	ldrb	r3, [r7, #15]
  40a252:	2b00      	cmp	r3, #0
  40a254:	f040 808e 	bne.w	40a374 <sync+0x138>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
  40a258:	687b      	ldr	r3, [r7, #4]
  40a25a:	781b      	ldrb	r3, [r3, #0]
  40a25c:	2b03      	cmp	r3, #3
  40a25e:	d17d      	bne.n	40a35c <sync+0x120>
  40a260:	687b      	ldr	r3, [r7, #4]
  40a262:	795b      	ldrb	r3, [r3, #5]
  40a264:	2b00      	cmp	r3, #0
  40a266:	d079      	beq.n	40a35c <sync+0x120>
			fs->winsect = 0;
  40a268:	687b      	ldr	r3, [r7, #4]
  40a26a:	2200      	movs	r2, #0
  40a26c:	62da      	str	r2, [r3, #44]	; 0x2c
			/* Create FSInfo structure */
			mem_set(fs->win, 0, 512);
  40a26e:	687b      	ldr	r3, [r7, #4]
  40a270:	3330      	adds	r3, #48	; 0x30
  40a272:	f44f 7200 	mov.w	r2, #512	; 0x200
  40a276:	2100      	movs	r1, #0
  40a278:	4618      	mov	r0, r3
  40a27a:	4b42      	ldr	r3, [pc, #264]	; (40a384 <sync+0x148>)
  40a27c:	4798      	blx	r3
			ST_WORD(fs->win+BS_55AA, 0xAA55);
  40a27e:	687b      	ldr	r3, [r7, #4]
  40a280:	2255      	movs	r2, #85	; 0x55
  40a282:	f883 222e 	strb.w	r2, [r3, #558]	; 0x22e
  40a286:	687b      	ldr	r3, [r7, #4]
  40a288:	22aa      	movs	r2, #170	; 0xaa
  40a28a:	f883 222f 	strb.w	r2, [r3, #559]	; 0x22f
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
  40a28e:	687b      	ldr	r3, [r7, #4]
  40a290:	2252      	movs	r2, #82	; 0x52
  40a292:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  40a296:	687b      	ldr	r3, [r7, #4]
  40a298:	2252      	movs	r2, #82	; 0x52
  40a29a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  40a29e:	687b      	ldr	r3, [r7, #4]
  40a2a0:	2261      	movs	r2, #97	; 0x61
  40a2a2:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  40a2a6:	687b      	ldr	r3, [r7, #4]
  40a2a8:	2241      	movs	r2, #65	; 0x41
  40a2aa:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
  40a2ae:	687b      	ldr	r3, [r7, #4]
  40a2b0:	2272      	movs	r2, #114	; 0x72
  40a2b2:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
  40a2b6:	687b      	ldr	r3, [r7, #4]
  40a2b8:	2272      	movs	r2, #114	; 0x72
  40a2ba:	f883 2215 	strb.w	r2, [r3, #533]	; 0x215
  40a2be:	687b      	ldr	r3, [r7, #4]
  40a2c0:	2241      	movs	r2, #65	; 0x41
  40a2c2:	f883 2216 	strb.w	r2, [r3, #534]	; 0x216
  40a2c6:	687b      	ldr	r3, [r7, #4]
  40a2c8:	2261      	movs	r2, #97	; 0x61
  40a2ca:	f883 2217 	strb.w	r2, [r3, #535]	; 0x217
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
  40a2ce:	687b      	ldr	r3, [r7, #4]
  40a2d0:	691b      	ldr	r3, [r3, #16]
  40a2d2:	b2da      	uxtb	r2, r3
  40a2d4:	687b      	ldr	r3, [r7, #4]
  40a2d6:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
  40a2da:	687b      	ldr	r3, [r7, #4]
  40a2dc:	691b      	ldr	r3, [r3, #16]
  40a2de:	b29b      	uxth	r3, r3
  40a2e0:	0a1b      	lsrs	r3, r3, #8
  40a2e2:	b29b      	uxth	r3, r3
  40a2e4:	b2da      	uxtb	r2, r3
  40a2e6:	687b      	ldr	r3, [r7, #4]
  40a2e8:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
  40a2ec:	687b      	ldr	r3, [r7, #4]
  40a2ee:	691b      	ldr	r3, [r3, #16]
  40a2f0:	0c1b      	lsrs	r3, r3, #16
  40a2f2:	b2da      	uxtb	r2, r3
  40a2f4:	687b      	ldr	r3, [r7, #4]
  40a2f6:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
  40a2fa:	687b      	ldr	r3, [r7, #4]
  40a2fc:	691b      	ldr	r3, [r3, #16]
  40a2fe:	0e1b      	lsrs	r3, r3, #24
  40a300:	b2da      	uxtb	r2, r3
  40a302:	687b      	ldr	r3, [r7, #4]
  40a304:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
  40a308:	687b      	ldr	r3, [r7, #4]
  40a30a:	68db      	ldr	r3, [r3, #12]
  40a30c:	b2da      	uxtb	r2, r3
  40a30e:	687b      	ldr	r3, [r7, #4]
  40a310:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
  40a314:	687b      	ldr	r3, [r7, #4]
  40a316:	68db      	ldr	r3, [r3, #12]
  40a318:	b29b      	uxth	r3, r3
  40a31a:	0a1b      	lsrs	r3, r3, #8
  40a31c:	b29b      	uxth	r3, r3
  40a31e:	b2da      	uxtb	r2, r3
  40a320:	687b      	ldr	r3, [r7, #4]
  40a322:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
  40a326:	687b      	ldr	r3, [r7, #4]
  40a328:	68db      	ldr	r3, [r3, #12]
  40a32a:	0c1b      	lsrs	r3, r3, #16
  40a32c:	b2da      	uxtb	r2, r3
  40a32e:	687b      	ldr	r3, [r7, #4]
  40a330:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
  40a334:	687b      	ldr	r3, [r7, #4]
  40a336:	68db      	ldr	r3, [r3, #12]
  40a338:	0e1b      	lsrs	r3, r3, #24
  40a33a:	b2da      	uxtb	r2, r3
  40a33c:	687b      	ldr	r3, [r7, #4]
  40a33e:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
			/* Write it into the FSInfo sector */
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
  40a342:	687b      	ldr	r3, [r7, #4]
  40a344:	7858      	ldrb	r0, [r3, #1]
  40a346:	687b      	ldr	r3, [r7, #4]
  40a348:	f103 0130 	add.w	r1, r3, #48	; 0x30
  40a34c:	687b      	ldr	r3, [r7, #4]
  40a34e:	695a      	ldr	r2, [r3, #20]
  40a350:	2301      	movs	r3, #1
  40a352:	4c0d      	ldr	r4, [pc, #52]	; (40a388 <sync+0x14c>)
  40a354:	47a0      	blx	r4
			fs->fsi_flag = 0;
  40a356:	687b      	ldr	r3, [r7, #4]
  40a358:	2200      	movs	r2, #0
  40a35a:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
  40a35c:	687b      	ldr	r3, [r7, #4]
  40a35e:	785b      	ldrb	r3, [r3, #1]
  40a360:	2200      	movs	r2, #0
  40a362:	2100      	movs	r1, #0
  40a364:	4618      	mov	r0, r3
  40a366:	4b09      	ldr	r3, [pc, #36]	; (40a38c <sync+0x150>)
  40a368:	4798      	blx	r3
  40a36a:	4603      	mov	r3, r0
  40a36c:	2b00      	cmp	r3, #0
  40a36e:	d001      	beq.n	40a374 <sync+0x138>
			res = FR_DISK_ERR;
  40a370:	2301      	movs	r3, #1
  40a372:	73fb      	strb	r3, [r7, #15]
	}

	return res;
  40a374:	7bfb      	ldrb	r3, [r7, #15]
}
  40a376:	4618      	mov	r0, r3
  40a378:	3714      	adds	r7, #20
  40a37a:	46bd      	mov	sp, r7
  40a37c:	bd90      	pop	{r4, r7, pc}
  40a37e:	bf00      	nop
  40a380:	0040a181 	.word	0x0040a181
  40a384:	0040a0c9 	.word	0x0040a0c9
  40a388:	00409eb1 	.word	0x00409eb1
  40a38c:	00409f61 	.word	0x00409f61

0040a390 <clust2sect>:

static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
  40a390:	b480      	push	{r7}
  40a392:	b083      	sub	sp, #12
  40a394:	af00      	add	r7, sp, #0
  40a396:	6078      	str	r0, [r7, #4]
  40a398:	6039      	str	r1, [r7, #0]
	clst -= 2;
  40a39a:	683b      	ldr	r3, [r7, #0]
  40a39c:	3b02      	subs	r3, #2
  40a39e:	603b      	str	r3, [r7, #0]
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
  40a3a0:	687b      	ldr	r3, [r7, #4]
  40a3a2:	699b      	ldr	r3, [r3, #24]
  40a3a4:	1e9a      	subs	r2, r3, #2
  40a3a6:	683b      	ldr	r3, [r7, #0]
  40a3a8:	429a      	cmp	r2, r3
  40a3aa:	d801      	bhi.n	40a3b0 <clust2sect+0x20>
  40a3ac:	2300      	movs	r3, #0
  40a3ae:	e008      	b.n	40a3c2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
  40a3b0:	687b      	ldr	r3, [r7, #4]
  40a3b2:	789b      	ldrb	r3, [r3, #2]
  40a3b4:	461a      	mov	r2, r3
  40a3b6:	683b      	ldr	r3, [r7, #0]
  40a3b8:	fb03 f202 	mul.w	r2, r3, r2
  40a3bc:	687b      	ldr	r3, [r7, #4]
  40a3be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  40a3c0:	4413      	add	r3, r2
}
  40a3c2:	4618      	mov	r0, r3
  40a3c4:	370c      	adds	r7, #12
  40a3c6:	46bd      	mov	sp, r7
  40a3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
  40a3cc:	4770      	bx	lr
	...

0040a3d0 <get_fat>:

static DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
  40a3d0:	b580      	push	{r7, lr}
  40a3d2:	b086      	sub	sp, #24
  40a3d4:	af00      	add	r7, sp, #0
  40a3d6:	6078      	str	r0, [r7, #4]
  40a3d8:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
  40a3da:	683b      	ldr	r3, [r7, #0]
  40a3dc:	2b01      	cmp	r3, #1
  40a3de:	d904      	bls.n	40a3ea <get_fat+0x1a>
  40a3e0:	687b      	ldr	r3, [r7, #4]
  40a3e2:	699a      	ldr	r2, [r3, #24]
  40a3e4:	683b      	ldr	r3, [r7, #0]
  40a3e6:	429a      	cmp	r2, r3
  40a3e8:	d801      	bhi.n	40a3ee <get_fat+0x1e>
		return 1;
  40a3ea:	2301      	movs	r3, #1
  40a3ec:	e09b      	b.n	40a526 <get_fat+0x156>

	switch (fs->fs_type) {
  40a3ee:	687b      	ldr	r3, [r7, #4]
  40a3f0:	781b      	ldrb	r3, [r3, #0]
  40a3f2:	2b02      	cmp	r3, #2
  40a3f4:	d046      	beq.n	40a484 <get_fat+0xb4>
  40a3f6:	2b03      	cmp	r3, #3
  40a3f8:	d064      	beq.n	40a4c4 <get_fat+0xf4>
  40a3fa:	2b01      	cmp	r3, #1
  40a3fc:	f040 8091 	bne.w	40a522 <get_fat+0x152>
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
  40a400:	683b      	ldr	r3, [r7, #0]
  40a402:	617b      	str	r3, [r7, #20]
  40a404:	697b      	ldr	r3, [r7, #20]
  40a406:	085b      	lsrs	r3, r3, #1
  40a408:	697a      	ldr	r2, [r7, #20]
  40a40a:	4413      	add	r3, r2
  40a40c:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
  40a40e:	687b      	ldr	r3, [r7, #4]
  40a410:	6a1a      	ldr	r2, [r3, #32]
  40a412:	697b      	ldr	r3, [r7, #20]
  40a414:	0a5b      	lsrs	r3, r3, #9
  40a416:	4413      	add	r3, r2
  40a418:	4619      	mov	r1, r3
  40a41a:	6878      	ldr	r0, [r7, #4]
  40a41c:	4b44      	ldr	r3, [pc, #272]	; (40a530 <get_fat+0x160>)
  40a41e:	4798      	blx	r3
  40a420:	4603      	mov	r3, r0
  40a422:	2b00      	cmp	r3, #0
  40a424:	d176      	bne.n	40a514 <get_fat+0x144>
		wc = fs->win[bc % SS(fs)]; bc++;
  40a426:	697b      	ldr	r3, [r7, #20]
  40a428:	f3c3 0308 	ubfx	r3, r3, #0, #9
  40a42c:	687a      	ldr	r2, [r7, #4]
  40a42e:	4413      	add	r3, r2
  40a430:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
  40a434:	613b      	str	r3, [r7, #16]
  40a436:	697b      	ldr	r3, [r7, #20]
  40a438:	3301      	adds	r3, #1
  40a43a:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
  40a43c:	687b      	ldr	r3, [r7, #4]
  40a43e:	6a1a      	ldr	r2, [r3, #32]
  40a440:	697b      	ldr	r3, [r7, #20]
  40a442:	0a5b      	lsrs	r3, r3, #9
  40a444:	4413      	add	r3, r2
  40a446:	4619      	mov	r1, r3
  40a448:	6878      	ldr	r0, [r7, #4]
  40a44a:	4b39      	ldr	r3, [pc, #228]	; (40a530 <get_fat+0x160>)
  40a44c:	4798      	blx	r3
  40a44e:	4603      	mov	r3, r0
  40a450:	2b00      	cmp	r3, #0
  40a452:	d161      	bne.n	40a518 <get_fat+0x148>
		wc |= fs->win[bc % SS(fs)] << 8;
  40a454:	697b      	ldr	r3, [r7, #20]
  40a456:	f3c3 0308 	ubfx	r3, r3, #0, #9
  40a45a:	687a      	ldr	r2, [r7, #4]
  40a45c:	4413      	add	r3, r2
  40a45e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
  40a462:	021b      	lsls	r3, r3, #8
  40a464:	461a      	mov	r2, r3
  40a466:	693b      	ldr	r3, [r7, #16]
  40a468:	4313      	orrs	r3, r2
  40a46a:	613b      	str	r3, [r7, #16]
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
  40a46c:	683b      	ldr	r3, [r7, #0]
  40a46e:	f003 0301 	and.w	r3, r3, #1
  40a472:	2b00      	cmp	r3, #0
  40a474:	d002      	beq.n	40a47c <get_fat+0xac>
  40a476:	693b      	ldr	r3, [r7, #16]
  40a478:	091b      	lsrs	r3, r3, #4
  40a47a:	e054      	b.n	40a526 <get_fat+0x156>
  40a47c:	693b      	ldr	r3, [r7, #16]
  40a47e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  40a482:	e050      	b.n	40a526 <get_fat+0x156>

	case FS_FAT16 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
  40a484:	687b      	ldr	r3, [r7, #4]
  40a486:	6a1a      	ldr	r2, [r3, #32]
  40a488:	683b      	ldr	r3, [r7, #0]
  40a48a:	0a1b      	lsrs	r3, r3, #8
  40a48c:	4413      	add	r3, r2
  40a48e:	4619      	mov	r1, r3
  40a490:	6878      	ldr	r0, [r7, #4]
  40a492:	4b27      	ldr	r3, [pc, #156]	; (40a530 <get_fat+0x160>)
  40a494:	4798      	blx	r3
  40a496:	4603      	mov	r3, r0
  40a498:	2b00      	cmp	r3, #0
  40a49a:	d13f      	bne.n	40a51c <get_fat+0x14c>
		p = &fs->win[clst * 2 % SS(fs)];
  40a49c:	683b      	ldr	r3, [r7, #0]
  40a49e:	005b      	lsls	r3, r3, #1
  40a4a0:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
  40a4a4:	3330      	adds	r3, #48	; 0x30
  40a4a6:	687a      	ldr	r2, [r7, #4]
  40a4a8:	4413      	add	r3, r2
  40a4aa:	60fb      	str	r3, [r7, #12]
		return LD_WORD(p);
  40a4ac:	68fb      	ldr	r3, [r7, #12]
  40a4ae:	3301      	adds	r3, #1
  40a4b0:	781b      	ldrb	r3, [r3, #0]
  40a4b2:	021b      	lsls	r3, r3, #8
  40a4b4:	b21a      	sxth	r2, r3
  40a4b6:	68fb      	ldr	r3, [r7, #12]
  40a4b8:	781b      	ldrb	r3, [r3, #0]
  40a4ba:	b21b      	sxth	r3, r3
  40a4bc:	4313      	orrs	r3, r2
  40a4be:	b21b      	sxth	r3, r3
  40a4c0:	b29b      	uxth	r3, r3
  40a4c2:	e030      	b.n	40a526 <get_fat+0x156>

	case FS_FAT32 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
  40a4c4:	687b      	ldr	r3, [r7, #4]
  40a4c6:	6a1a      	ldr	r2, [r3, #32]
  40a4c8:	683b      	ldr	r3, [r7, #0]
  40a4ca:	09db      	lsrs	r3, r3, #7
  40a4cc:	4413      	add	r3, r2
  40a4ce:	4619      	mov	r1, r3
  40a4d0:	6878      	ldr	r0, [r7, #4]
  40a4d2:	4b17      	ldr	r3, [pc, #92]	; (40a530 <get_fat+0x160>)
  40a4d4:	4798      	blx	r3
  40a4d6:	4603      	mov	r3, r0
  40a4d8:	2b00      	cmp	r3, #0
  40a4da:	d121      	bne.n	40a520 <get_fat+0x150>
		p = &fs->win[clst * 4 % SS(fs)];
  40a4dc:	683b      	ldr	r3, [r7, #0]
  40a4de:	009b      	lsls	r3, r3, #2
  40a4e0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
  40a4e4:	3330      	adds	r3, #48	; 0x30
  40a4e6:	687a      	ldr	r2, [r7, #4]
  40a4e8:	4413      	add	r3, r2
  40a4ea:	60fb      	str	r3, [r7, #12]
		return LD_DWORD(p) & 0x0FFFFFFF;
  40a4ec:	68fb      	ldr	r3, [r7, #12]
  40a4ee:	3303      	adds	r3, #3
  40a4f0:	781b      	ldrb	r3, [r3, #0]
  40a4f2:	061a      	lsls	r2, r3, #24
  40a4f4:	68fb      	ldr	r3, [r7, #12]
  40a4f6:	3302      	adds	r3, #2
  40a4f8:	781b      	ldrb	r3, [r3, #0]
  40a4fa:	041b      	lsls	r3, r3, #16
  40a4fc:	4313      	orrs	r3, r2
  40a4fe:	68fa      	ldr	r2, [r7, #12]
  40a500:	3201      	adds	r2, #1
  40a502:	7812      	ldrb	r2, [r2, #0]
  40a504:	0212      	lsls	r2, r2, #8
  40a506:	4313      	orrs	r3, r2
  40a508:	68fa      	ldr	r2, [r7, #12]
  40a50a:	7812      	ldrb	r2, [r2, #0]
  40a50c:	4313      	orrs	r3, r2
  40a50e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
  40a512:	e008      	b.n	40a526 <get_fat+0x156>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
  40a514:	bf00      	nop
  40a516:	e004      	b.n	40a522 <get_fat+0x152>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
  40a518:	bf00      	nop
  40a51a:	e002      	b.n	40a522 <get_fat+0x152>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
  40a51c:	bf00      	nop
  40a51e:	e000      	b.n	40a522 <get_fat+0x152>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
  40a520:	bf00      	nop
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
  40a522:	f04f 33ff 	mov.w	r3, #4294967295
}
  40a526:	4618      	mov	r0, r3
  40a528:	3718      	adds	r7, #24
  40a52a:	46bd      	mov	sp, r7
  40a52c:	bd80      	pop	{r7, pc}
  40a52e:	bf00      	nop
  40a530:	0040a181 	.word	0x0040a181

0040a534 <put_fat>:
static FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
  40a534:	b580      	push	{r7, lr}
  40a536:	b088      	sub	sp, #32
  40a538:	af00      	add	r7, sp, #0
  40a53a:	60f8      	str	r0, [r7, #12]
  40a53c:	60b9      	str	r1, [r7, #8]
  40a53e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
  40a540:	68bb      	ldr	r3, [r7, #8]
  40a542:	2b01      	cmp	r3, #1
  40a544:	d904      	bls.n	40a550 <put_fat+0x1c>
  40a546:	68fb      	ldr	r3, [r7, #12]
  40a548:	699a      	ldr	r2, [r3, #24]
  40a54a:	68bb      	ldr	r3, [r7, #8]
  40a54c:	429a      	cmp	r2, r3
  40a54e:	d802      	bhi.n	40a556 <put_fat+0x22>
		res = FR_INT_ERR;
  40a550:	2302      	movs	r3, #2
  40a552:	77fb      	strb	r3, [r7, #31]
  40a554:	e0e9      	b.n	40a72a <put_fat+0x1f6>

	} else {
		switch (fs->fs_type) {
  40a556:	68fb      	ldr	r3, [r7, #12]
  40a558:	781b      	ldrb	r3, [r3, #0]
  40a55a:	2b02      	cmp	r3, #2
  40a55c:	d070      	beq.n	40a640 <put_fat+0x10c>
  40a55e:	2b03      	cmp	r3, #3
  40a560:	f000 8091 	beq.w	40a686 <put_fat+0x152>
  40a564:	2b01      	cmp	r3, #1
  40a566:	f040 80d3 	bne.w	40a710 <put_fat+0x1dc>
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
  40a56a:	68bb      	ldr	r3, [r7, #8]
  40a56c:	61bb      	str	r3, [r7, #24]
  40a56e:	69bb      	ldr	r3, [r7, #24]
  40a570:	085b      	lsrs	r3, r3, #1
  40a572:	69ba      	ldr	r2, [r7, #24]
  40a574:	4413      	add	r3, r2
  40a576:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
  40a578:	68fb      	ldr	r3, [r7, #12]
  40a57a:	6a1a      	ldr	r2, [r3, #32]
  40a57c:	69bb      	ldr	r3, [r7, #24]
  40a57e:	0a5b      	lsrs	r3, r3, #9
  40a580:	4413      	add	r3, r2
  40a582:	4619      	mov	r1, r3
  40a584:	68f8      	ldr	r0, [r7, #12]
  40a586:	4b6b      	ldr	r3, [pc, #428]	; (40a734 <put_fat+0x200>)
  40a588:	4798      	blx	r3
  40a58a:	4603      	mov	r3, r0
  40a58c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
  40a58e:	7ffb      	ldrb	r3, [r7, #31]
  40a590:	2b00      	cmp	r3, #0
  40a592:	f040 80c0 	bne.w	40a716 <put_fat+0x1e2>
			p = &fs->win[bc % SS(fs)];
  40a596:	69bb      	ldr	r3, [r7, #24]
  40a598:	f3c3 0308 	ubfx	r3, r3, #0, #9
  40a59c:	3330      	adds	r3, #48	; 0x30
  40a59e:	68fa      	ldr	r2, [r7, #12]
  40a5a0:	4413      	add	r3, r2
  40a5a2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
  40a5a4:	68bb      	ldr	r3, [r7, #8]
  40a5a6:	f003 0301 	and.w	r3, r3, #1
  40a5aa:	2b00      	cmp	r3, #0
  40a5ac:	d00d      	beq.n	40a5ca <put_fat+0x96>
  40a5ae:	697b      	ldr	r3, [r7, #20]
  40a5b0:	781b      	ldrb	r3, [r3, #0]
  40a5b2:	b25b      	sxtb	r3, r3
  40a5b4:	f003 030f 	and.w	r3, r3, #15
  40a5b8:	b25a      	sxtb	r2, r3
  40a5ba:	687b      	ldr	r3, [r7, #4]
  40a5bc:	b2db      	uxtb	r3, r3
  40a5be:	011b      	lsls	r3, r3, #4
  40a5c0:	b25b      	sxtb	r3, r3
  40a5c2:	4313      	orrs	r3, r2
  40a5c4:	b25b      	sxtb	r3, r3
  40a5c6:	b2db      	uxtb	r3, r3
  40a5c8:	e001      	b.n	40a5ce <put_fat+0x9a>
  40a5ca:	687b      	ldr	r3, [r7, #4]
  40a5cc:	b2db      	uxtb	r3, r3
  40a5ce:	697a      	ldr	r2, [r7, #20]
  40a5d0:	7013      	strb	r3, [r2, #0]
			bc++;
  40a5d2:	69bb      	ldr	r3, [r7, #24]
  40a5d4:	3301      	adds	r3, #1
  40a5d6:	61bb      	str	r3, [r7, #24]
			fs->wflag = 1;
  40a5d8:	68fb      	ldr	r3, [r7, #12]
  40a5da:	2201      	movs	r2, #1
  40a5dc:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
  40a5de:	68fb      	ldr	r3, [r7, #12]
  40a5e0:	6a1a      	ldr	r2, [r3, #32]
  40a5e2:	69bb      	ldr	r3, [r7, #24]
  40a5e4:	0a5b      	lsrs	r3, r3, #9
  40a5e6:	4413      	add	r3, r2
  40a5e8:	4619      	mov	r1, r3
  40a5ea:	68f8      	ldr	r0, [r7, #12]
  40a5ec:	4b51      	ldr	r3, [pc, #324]	; (40a734 <put_fat+0x200>)
  40a5ee:	4798      	blx	r3
  40a5f0:	4603      	mov	r3, r0
  40a5f2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
  40a5f4:	7ffb      	ldrb	r3, [r7, #31]
  40a5f6:	2b00      	cmp	r3, #0
  40a5f8:	f040 808f 	bne.w	40a71a <put_fat+0x1e6>
			p = &fs->win[bc % SS(fs)];
  40a5fc:	69bb      	ldr	r3, [r7, #24]
  40a5fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
  40a602:	3330      	adds	r3, #48	; 0x30
  40a604:	68fa      	ldr	r2, [r7, #12]
  40a606:	4413      	add	r3, r2
  40a608:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
  40a60a:	68bb      	ldr	r3, [r7, #8]
  40a60c:	f003 0301 	and.w	r3, r3, #1
  40a610:	2b00      	cmp	r3, #0
  40a612:	d003      	beq.n	40a61c <put_fat+0xe8>
  40a614:	687b      	ldr	r3, [r7, #4]
  40a616:	091b      	lsrs	r3, r3, #4
  40a618:	b2db      	uxtb	r3, r3
  40a61a:	e00e      	b.n	40a63a <put_fat+0x106>
  40a61c:	697b      	ldr	r3, [r7, #20]
  40a61e:	781b      	ldrb	r3, [r3, #0]
  40a620:	b25b      	sxtb	r3, r3
  40a622:	f023 030f 	bic.w	r3, r3, #15
  40a626:	b25a      	sxtb	r2, r3
  40a628:	687b      	ldr	r3, [r7, #4]
  40a62a:	0a1b      	lsrs	r3, r3, #8
  40a62c:	b25b      	sxtb	r3, r3
  40a62e:	f003 030f 	and.w	r3, r3, #15
  40a632:	b25b      	sxtb	r3, r3
  40a634:	4313      	orrs	r3, r2
  40a636:	b25b      	sxtb	r3, r3
  40a638:	b2db      	uxtb	r3, r3
  40a63a:	697a      	ldr	r2, [r7, #20]
  40a63c:	7013      	strb	r3, [r2, #0]
			break;
  40a63e:	e071      	b.n	40a724 <put_fat+0x1f0>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
  40a640:	68fb      	ldr	r3, [r7, #12]
  40a642:	6a1a      	ldr	r2, [r3, #32]
  40a644:	68bb      	ldr	r3, [r7, #8]
  40a646:	0a1b      	lsrs	r3, r3, #8
  40a648:	4413      	add	r3, r2
  40a64a:	4619      	mov	r1, r3
  40a64c:	68f8      	ldr	r0, [r7, #12]
  40a64e:	4b39      	ldr	r3, [pc, #228]	; (40a734 <put_fat+0x200>)
  40a650:	4798      	blx	r3
  40a652:	4603      	mov	r3, r0
  40a654:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
  40a656:	7ffb      	ldrb	r3, [r7, #31]
  40a658:	2b00      	cmp	r3, #0
  40a65a:	d160      	bne.n	40a71e <put_fat+0x1ea>
			p = &fs->win[clst * 2 % SS(fs)];
  40a65c:	68bb      	ldr	r3, [r7, #8]
  40a65e:	005b      	lsls	r3, r3, #1
  40a660:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
  40a664:	3330      	adds	r3, #48	; 0x30
  40a666:	68fa      	ldr	r2, [r7, #12]
  40a668:	4413      	add	r3, r2
  40a66a:	617b      	str	r3, [r7, #20]
			ST_WORD(p, (WORD)val);
  40a66c:	687b      	ldr	r3, [r7, #4]
  40a66e:	b2da      	uxtb	r2, r3
  40a670:	697b      	ldr	r3, [r7, #20]
  40a672:	701a      	strb	r2, [r3, #0]
  40a674:	697b      	ldr	r3, [r7, #20]
  40a676:	3301      	adds	r3, #1
  40a678:	687a      	ldr	r2, [r7, #4]
  40a67a:	b292      	uxth	r2, r2
  40a67c:	0a12      	lsrs	r2, r2, #8
  40a67e:	b292      	uxth	r2, r2
  40a680:	b2d2      	uxtb	r2, r2
  40a682:	701a      	strb	r2, [r3, #0]
			break;
  40a684:	e04e      	b.n	40a724 <put_fat+0x1f0>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
  40a686:	68fb      	ldr	r3, [r7, #12]
  40a688:	6a1a      	ldr	r2, [r3, #32]
  40a68a:	68bb      	ldr	r3, [r7, #8]
  40a68c:	09db      	lsrs	r3, r3, #7
  40a68e:	4413      	add	r3, r2
  40a690:	4619      	mov	r1, r3
  40a692:	68f8      	ldr	r0, [r7, #12]
  40a694:	4b27      	ldr	r3, [pc, #156]	; (40a734 <put_fat+0x200>)
  40a696:	4798      	blx	r3
  40a698:	4603      	mov	r3, r0
  40a69a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
  40a69c:	7ffb      	ldrb	r3, [r7, #31]
  40a69e:	2b00      	cmp	r3, #0
  40a6a0:	d13f      	bne.n	40a722 <put_fat+0x1ee>
			p = &fs->win[clst * 4 % SS(fs)];
  40a6a2:	68bb      	ldr	r3, [r7, #8]
  40a6a4:	009b      	lsls	r3, r3, #2
  40a6a6:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
  40a6aa:	3330      	adds	r3, #48	; 0x30
  40a6ac:	68fa      	ldr	r2, [r7, #12]
  40a6ae:	4413      	add	r3, r2
  40a6b0:	617b      	str	r3, [r7, #20]
			val |= LD_DWORD(p) & 0xF0000000;
  40a6b2:	697b      	ldr	r3, [r7, #20]
  40a6b4:	3303      	adds	r3, #3
  40a6b6:	781b      	ldrb	r3, [r3, #0]
  40a6b8:	061a      	lsls	r2, r3, #24
  40a6ba:	697b      	ldr	r3, [r7, #20]
  40a6bc:	3302      	adds	r3, #2
  40a6be:	781b      	ldrb	r3, [r3, #0]
  40a6c0:	041b      	lsls	r3, r3, #16
  40a6c2:	4313      	orrs	r3, r2
  40a6c4:	697a      	ldr	r2, [r7, #20]
  40a6c6:	3201      	adds	r2, #1
  40a6c8:	7812      	ldrb	r2, [r2, #0]
  40a6ca:	0212      	lsls	r2, r2, #8
  40a6cc:	4313      	orrs	r3, r2
  40a6ce:	697a      	ldr	r2, [r7, #20]
  40a6d0:	7812      	ldrb	r2, [r2, #0]
  40a6d2:	4313      	orrs	r3, r2
  40a6d4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
  40a6d8:	687a      	ldr	r2, [r7, #4]
  40a6da:	4313      	orrs	r3, r2
  40a6dc:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
  40a6de:	687b      	ldr	r3, [r7, #4]
  40a6e0:	b2da      	uxtb	r2, r3
  40a6e2:	697b      	ldr	r3, [r7, #20]
  40a6e4:	701a      	strb	r2, [r3, #0]
  40a6e6:	697b      	ldr	r3, [r7, #20]
  40a6e8:	3301      	adds	r3, #1
  40a6ea:	687a      	ldr	r2, [r7, #4]
  40a6ec:	b292      	uxth	r2, r2
  40a6ee:	0a12      	lsrs	r2, r2, #8
  40a6f0:	b292      	uxth	r2, r2
  40a6f2:	b2d2      	uxtb	r2, r2
  40a6f4:	701a      	strb	r2, [r3, #0]
  40a6f6:	697b      	ldr	r3, [r7, #20]
  40a6f8:	3302      	adds	r3, #2
  40a6fa:	687a      	ldr	r2, [r7, #4]
  40a6fc:	0c12      	lsrs	r2, r2, #16
  40a6fe:	b2d2      	uxtb	r2, r2
  40a700:	701a      	strb	r2, [r3, #0]
  40a702:	697b      	ldr	r3, [r7, #20]
  40a704:	3303      	adds	r3, #3
  40a706:	687a      	ldr	r2, [r7, #4]
  40a708:	0e12      	lsrs	r2, r2, #24
  40a70a:	b2d2      	uxtb	r2, r2
  40a70c:	701a      	strb	r2, [r3, #0]
			break;
  40a70e:	e009      	b.n	40a724 <put_fat+0x1f0>

		default :
			res = FR_INT_ERR;
  40a710:	2302      	movs	r3, #2
  40a712:	77fb      	strb	r3, [r7, #31]
  40a714:	e006      	b.n	40a724 <put_fat+0x1f0>
			if (res != FR_OK) break;
  40a716:	bf00      	nop
  40a718:	e004      	b.n	40a724 <put_fat+0x1f0>
			if (res != FR_OK) break;
  40a71a:	bf00      	nop
  40a71c:	e002      	b.n	40a724 <put_fat+0x1f0>
			if (res != FR_OK) break;
  40a71e:	bf00      	nop
  40a720:	e000      	b.n	40a724 <put_fat+0x1f0>
			if (res != FR_OK) break;
  40a722:	bf00      	nop
		}
		fs->wflag = 1;
  40a724:	68fb      	ldr	r3, [r7, #12]
  40a726:	2201      	movs	r2, #1
  40a728:	711a      	strb	r2, [r3, #4]
	}

	return res;
  40a72a:	7ffb      	ldrb	r3, [r7, #31]
}
  40a72c:	4618      	mov	r0, r3
  40a72e:	3720      	adds	r7, #32
  40a730:	46bd      	mov	sp, r7
  40a732:	bd80      	pop	{r7, pc}
  40a734:	0040a181 	.word	0x0040a181

0040a738 <remove_chain>:
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
  40a738:	b580      	push	{r7, lr}
  40a73a:	b084      	sub	sp, #16
  40a73c:	af00      	add	r7, sp, #0
  40a73e:	6078      	str	r0, [r7, #4]
  40a740:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, resion[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
  40a742:	683b      	ldr	r3, [r7, #0]
  40a744:	2b01      	cmp	r3, #1
  40a746:	d904      	bls.n	40a752 <remove_chain+0x1a>
  40a748:	687b      	ldr	r3, [r7, #4]
  40a74a:	699a      	ldr	r2, [r3, #24]
  40a74c:	683b      	ldr	r3, [r7, #0]
  40a74e:	429a      	cmp	r2, r3
  40a750:	d802      	bhi.n	40a758 <remove_chain+0x20>
		res = FR_INT_ERR;
  40a752:	2302      	movs	r3, #2
  40a754:	73fb      	strb	r3, [r7, #15]
  40a756:	e039      	b.n	40a7cc <remove_chain+0x94>

	} else {
		res = FR_OK;
  40a758:	2300      	movs	r3, #0
  40a75a:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
  40a75c:	e02d      	b.n	40a7ba <remove_chain+0x82>
			nxt = get_fat(fs, clst);			/* Get cluster status */
  40a75e:	6839      	ldr	r1, [r7, #0]
  40a760:	6878      	ldr	r0, [r7, #4]
  40a762:	4b1d      	ldr	r3, [pc, #116]	; (40a7d8 <remove_chain+0xa0>)
  40a764:	4798      	blx	r3
  40a766:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
  40a768:	68bb      	ldr	r3, [r7, #8]
  40a76a:	2b00      	cmp	r3, #0
  40a76c:	d02b      	beq.n	40a7c6 <remove_chain+0x8e>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
  40a76e:	68bb      	ldr	r3, [r7, #8]
  40a770:	2b01      	cmp	r3, #1
  40a772:	d102      	bne.n	40a77a <remove_chain+0x42>
  40a774:	2302      	movs	r3, #2
  40a776:	73fb      	strb	r3, [r7, #15]
  40a778:	e028      	b.n	40a7cc <remove_chain+0x94>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
  40a77a:	68bb      	ldr	r3, [r7, #8]
  40a77c:	f1b3 3fff 	cmp.w	r3, #4294967295
  40a780:	d102      	bne.n	40a788 <remove_chain+0x50>
  40a782:	2301      	movs	r3, #1
  40a784:	73fb      	strb	r3, [r7, #15]
  40a786:	e021      	b.n	40a7cc <remove_chain+0x94>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
  40a788:	2200      	movs	r2, #0
  40a78a:	6839      	ldr	r1, [r7, #0]
  40a78c:	6878      	ldr	r0, [r7, #4]
  40a78e:	4b13      	ldr	r3, [pc, #76]	; (40a7dc <remove_chain+0xa4>)
  40a790:	4798      	blx	r3
  40a792:	4603      	mov	r3, r0
  40a794:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
  40a796:	7bfb      	ldrb	r3, [r7, #15]
  40a798:	2b00      	cmp	r3, #0
  40a79a:	d116      	bne.n	40a7ca <remove_chain+0x92>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
  40a79c:	687b      	ldr	r3, [r7, #4]
  40a79e:	691b      	ldr	r3, [r3, #16]
  40a7a0:	f1b3 3fff 	cmp.w	r3, #4294967295
  40a7a4:	d007      	beq.n	40a7b6 <remove_chain+0x7e>
				fs->free_clust++;
  40a7a6:	687b      	ldr	r3, [r7, #4]
  40a7a8:	691b      	ldr	r3, [r3, #16]
  40a7aa:	1c5a      	adds	r2, r3, #1
  40a7ac:	687b      	ldr	r3, [r7, #4]
  40a7ae:	611a      	str	r2, [r3, #16]
				fs->fsi_flag = 1;
  40a7b0:	687b      	ldr	r3, [r7, #4]
  40a7b2:	2201      	movs	r2, #1
  40a7b4:	715a      	strb	r2, [r3, #5]
				resion[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_ERASE_SECTOR, resion);		/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
  40a7b6:	68bb      	ldr	r3, [r7, #8]
  40a7b8:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
  40a7ba:	687b      	ldr	r3, [r7, #4]
  40a7bc:	699a      	ldr	r2, [r3, #24]
  40a7be:	683b      	ldr	r3, [r7, #0]
  40a7c0:	429a      	cmp	r2, r3
  40a7c2:	d8cc      	bhi.n	40a75e <remove_chain+0x26>
  40a7c4:	e002      	b.n	40a7cc <remove_chain+0x94>
			if (nxt == 0) break;				/* Empty cluster? */
  40a7c6:	bf00      	nop
  40a7c8:	e000      	b.n	40a7cc <remove_chain+0x94>
			if (res != FR_OK) break;
  40a7ca:	bf00      	nop
		}
	}

	return res;
  40a7cc:	7bfb      	ldrb	r3, [r7, #15]
}
  40a7ce:	4618      	mov	r0, r3
  40a7d0:	3710      	adds	r7, #16
  40a7d2:	46bd      	mov	sp, r7
  40a7d4:	bd80      	pop	{r7, pc}
  40a7d6:	bf00      	nop
  40a7d8:	0040a3d1 	.word	0x0040a3d1
  40a7dc:	0040a535 	.word	0x0040a535

0040a7e0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
  40a7e0:	b580      	push	{r7, lr}
  40a7e2:	b086      	sub	sp, #24
  40a7e4:	af00      	add	r7, sp, #0
  40a7e6:	6078      	str	r0, [r7, #4]
  40a7e8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
  40a7ea:	683b      	ldr	r3, [r7, #0]
  40a7ec:	2b00      	cmp	r3, #0
  40a7ee:	d10d      	bne.n	40a80c <create_chain+0x2c>
		scl = fs->last_clust;			/* Get suggested start point */
  40a7f0:	687b      	ldr	r3, [r7, #4]
  40a7f2:	68db      	ldr	r3, [r3, #12]
  40a7f4:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
  40a7f6:	693b      	ldr	r3, [r7, #16]
  40a7f8:	2b00      	cmp	r3, #0
  40a7fa:	d004      	beq.n	40a806 <create_chain+0x26>
  40a7fc:	687b      	ldr	r3, [r7, #4]
  40a7fe:	699a      	ldr	r2, [r3, #24]
  40a800:	693b      	ldr	r3, [r7, #16]
  40a802:	429a      	cmp	r2, r3
  40a804:	d815      	bhi.n	40a832 <create_chain+0x52>
  40a806:	2301      	movs	r3, #1
  40a808:	613b      	str	r3, [r7, #16]
  40a80a:	e012      	b.n	40a832 <create_chain+0x52>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
  40a80c:	6839      	ldr	r1, [r7, #0]
  40a80e:	6878      	ldr	r0, [r7, #4]
  40a810:	4b38      	ldr	r3, [pc, #224]	; (40a8f4 <create_chain+0x114>)
  40a812:	4798      	blx	r3
  40a814:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* It is an invalid cluster */
  40a816:	68bb      	ldr	r3, [r7, #8]
  40a818:	2b01      	cmp	r3, #1
  40a81a:	d801      	bhi.n	40a820 <create_chain+0x40>
  40a81c:	2301      	movs	r3, #1
  40a81e:	e064      	b.n	40a8ea <create_chain+0x10a>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
  40a820:	687b      	ldr	r3, [r7, #4]
  40a822:	699a      	ldr	r2, [r3, #24]
  40a824:	68bb      	ldr	r3, [r7, #8]
  40a826:	429a      	cmp	r2, r3
  40a828:	d901      	bls.n	40a82e <create_chain+0x4e>
  40a82a:	68bb      	ldr	r3, [r7, #8]
  40a82c:	e05d      	b.n	40a8ea <create_chain+0x10a>
		scl = clst;
  40a82e:	683b      	ldr	r3, [r7, #0]
  40a830:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
  40a832:	693b      	ldr	r3, [r7, #16]
  40a834:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
  40a836:	697b      	ldr	r3, [r7, #20]
  40a838:	3301      	adds	r3, #1
  40a83a:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Wrap around */
  40a83c:	687b      	ldr	r3, [r7, #4]
  40a83e:	699a      	ldr	r2, [r3, #24]
  40a840:	697b      	ldr	r3, [r7, #20]
  40a842:	429a      	cmp	r2, r3
  40a844:	d807      	bhi.n	40a856 <create_chain+0x76>
			ncl = 2;
  40a846:	2302      	movs	r3, #2
  40a848:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
  40a84a:	697a      	ldr	r2, [r7, #20]
  40a84c:	693b      	ldr	r3, [r7, #16]
  40a84e:	429a      	cmp	r2, r3
  40a850:	d901      	bls.n	40a856 <create_chain+0x76>
  40a852:	2300      	movs	r3, #0
  40a854:	e049      	b.n	40a8ea <create_chain+0x10a>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
  40a856:	6979      	ldr	r1, [r7, #20]
  40a858:	6878      	ldr	r0, [r7, #4]
  40a85a:	4b26      	ldr	r3, [pc, #152]	; (40a8f4 <create_chain+0x114>)
  40a85c:	4798      	blx	r3
  40a85e:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
  40a860:	68bb      	ldr	r3, [r7, #8]
  40a862:	2b00      	cmp	r3, #0
  40a864:	d00e      	beq.n	40a884 <create_chain+0xa4>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
  40a866:	68bb      	ldr	r3, [r7, #8]
  40a868:	f1b3 3fff 	cmp.w	r3, #4294967295
  40a86c:	d002      	beq.n	40a874 <create_chain+0x94>
  40a86e:	68bb      	ldr	r3, [r7, #8]
  40a870:	2b01      	cmp	r3, #1
  40a872:	d101      	bne.n	40a878 <create_chain+0x98>
			return cs;
  40a874:	68bb      	ldr	r3, [r7, #8]
  40a876:	e038      	b.n	40a8ea <create_chain+0x10a>
		if (ncl == scl) return 0;		/* No free cluster */
  40a878:	697a      	ldr	r2, [r7, #20]
  40a87a:	693b      	ldr	r3, [r7, #16]
  40a87c:	429a      	cmp	r2, r3
  40a87e:	d1da      	bne.n	40a836 <create_chain+0x56>
  40a880:	2300      	movs	r3, #0
  40a882:	e032      	b.n	40a8ea <create_chain+0x10a>
		if (cs == 0) break;				/* Found a free cluster */
  40a884:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
  40a886:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
  40a88a:	6979      	ldr	r1, [r7, #20]
  40a88c:	6878      	ldr	r0, [r7, #4]
  40a88e:	4b1a      	ldr	r3, [pc, #104]	; (40a8f8 <create_chain+0x118>)
  40a890:	4798      	blx	r3
  40a892:	4603      	mov	r3, r0
  40a894:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
  40a896:	7bfb      	ldrb	r3, [r7, #15]
  40a898:	2b00      	cmp	r3, #0
  40a89a:	d109      	bne.n	40a8b0 <create_chain+0xd0>
  40a89c:	683b      	ldr	r3, [r7, #0]
  40a89e:	2b00      	cmp	r3, #0
  40a8a0:	d006      	beq.n	40a8b0 <create_chain+0xd0>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
  40a8a2:	697a      	ldr	r2, [r7, #20]
  40a8a4:	6839      	ldr	r1, [r7, #0]
  40a8a6:	6878      	ldr	r0, [r7, #4]
  40a8a8:	4b13      	ldr	r3, [pc, #76]	; (40a8f8 <create_chain+0x118>)
  40a8aa:	4798      	blx	r3
  40a8ac:	4603      	mov	r3, r0
  40a8ae:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
  40a8b0:	7bfb      	ldrb	r3, [r7, #15]
  40a8b2:	2b00      	cmp	r3, #0
  40a8b4:	d110      	bne.n	40a8d8 <create_chain+0xf8>
		fs->last_clust = ncl;			/* Update FSINFO */
  40a8b6:	687b      	ldr	r3, [r7, #4]
  40a8b8:	697a      	ldr	r2, [r7, #20]
  40a8ba:	60da      	str	r2, [r3, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
  40a8bc:	687b      	ldr	r3, [r7, #4]
  40a8be:	691b      	ldr	r3, [r3, #16]
  40a8c0:	f1b3 3fff 	cmp.w	r3, #4294967295
  40a8c4:	d010      	beq.n	40a8e8 <create_chain+0x108>
			fs->free_clust--;
  40a8c6:	687b      	ldr	r3, [r7, #4]
  40a8c8:	691b      	ldr	r3, [r3, #16]
  40a8ca:	1e5a      	subs	r2, r3, #1
  40a8cc:	687b      	ldr	r3, [r7, #4]
  40a8ce:	611a      	str	r2, [r3, #16]
			fs->fsi_flag = 1;
  40a8d0:	687b      	ldr	r3, [r7, #4]
  40a8d2:	2201      	movs	r2, #1
  40a8d4:	715a      	strb	r2, [r3, #5]
  40a8d6:	e007      	b.n	40a8e8 <create_chain+0x108>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
  40a8d8:	7bfb      	ldrb	r3, [r7, #15]
  40a8da:	2b01      	cmp	r3, #1
  40a8dc:	d102      	bne.n	40a8e4 <create_chain+0x104>
  40a8de:	f04f 33ff 	mov.w	r3, #4294967295
  40a8e2:	e000      	b.n	40a8e6 <create_chain+0x106>
  40a8e4:	2301      	movs	r3, #1
  40a8e6:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
  40a8e8:	697b      	ldr	r3, [r7, #20]
}
  40a8ea:	4618      	mov	r0, r3
  40a8ec:	3718      	adds	r7, #24
  40a8ee:	46bd      	mov	sp, r7
  40a8f0:	bd80      	pop	{r7, pc}
  40a8f2:	bf00      	nop
  40a8f4:	0040a3d1 	.word	0x0040a3d1
  40a8f8:	0040a535 	.word	0x0040a535

0040a8fc <dir_sdi>:
static
FRESULT dir_sdi (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
  40a8fc:	b580      	push	{r7, lr}
  40a8fe:	b084      	sub	sp, #16
  40a900:	af00      	add	r7, sp, #0
  40a902:	6078      	str	r0, [r7, #4]
  40a904:	460b      	mov	r3, r1
  40a906:	807b      	strh	r3, [r7, #2]
	DWORD clst;
	WORD ic;


	dj->index = idx;
  40a908:	687b      	ldr	r3, [r7, #4]
  40a90a:	887a      	ldrh	r2, [r7, #2]
  40a90c:	80da      	strh	r2, [r3, #6]
	clst = dj->sclust;
  40a90e:	687b      	ldr	r3, [r7, #4]
  40a910:	689b      	ldr	r3, [r3, #8]
  40a912:	60fb      	str	r3, [r7, #12]
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
  40a914:	68fb      	ldr	r3, [r7, #12]
  40a916:	2b01      	cmp	r3, #1
  40a918:	d005      	beq.n	40a926 <dir_sdi+0x2a>
  40a91a:	687b      	ldr	r3, [r7, #4]
  40a91c:	681b      	ldr	r3, [r3, #0]
  40a91e:	699a      	ldr	r2, [r3, #24]
  40a920:	68fb      	ldr	r3, [r7, #12]
  40a922:	429a      	cmp	r2, r3
  40a924:	d801      	bhi.n	40a92a <dir_sdi+0x2e>
		return FR_INT_ERR;
  40a926:	2302      	movs	r3, #2
  40a928:	e066      	b.n	40a9f8 <dir_sdi+0xfc>
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
  40a92a:	68fb      	ldr	r3, [r7, #12]
  40a92c:	2b00      	cmp	r3, #0
  40a92e:	d108      	bne.n	40a942 <dir_sdi+0x46>
  40a930:	687b      	ldr	r3, [r7, #4]
  40a932:	681b      	ldr	r3, [r3, #0]
  40a934:	781b      	ldrb	r3, [r3, #0]
  40a936:	2b03      	cmp	r3, #3
  40a938:	d103      	bne.n	40a942 <dir_sdi+0x46>
		clst = dj->fs->dirbase;
  40a93a:	687b      	ldr	r3, [r7, #4]
  40a93c:	681b      	ldr	r3, [r3, #0]
  40a93e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  40a940:	60fb      	str	r3, [r7, #12]

	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
  40a942:	68fb      	ldr	r3, [r7, #12]
  40a944:	2b00      	cmp	r3, #0
  40a946:	d114      	bne.n	40a972 <dir_sdi+0x76>
		dj->clust = clst;
  40a948:	687b      	ldr	r3, [r7, #4]
  40a94a:	68fa      	ldr	r2, [r7, #12]
  40a94c:	60da      	str	r2, [r3, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
  40a94e:	687b      	ldr	r3, [r7, #4]
  40a950:	681b      	ldr	r3, [r3, #0]
  40a952:	891b      	ldrh	r3, [r3, #8]
  40a954:	887a      	ldrh	r2, [r7, #2]
  40a956:	429a      	cmp	r2, r3
  40a958:	d301      	bcc.n	40a95e <dir_sdi+0x62>
			return FR_INT_ERR;
  40a95a:	2302      	movs	r3, #2
  40a95c:	e04c      	b.n	40a9f8 <dir_sdi+0xfc>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
  40a95e:	687b      	ldr	r3, [r7, #4]
  40a960:	681b      	ldr	r3, [r3, #0]
  40a962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  40a964:	887a      	ldrh	r2, [r7, #2]
  40a966:	0912      	lsrs	r2, r2, #4
  40a968:	b292      	uxth	r2, r2
  40a96a:	441a      	add	r2, r3
  40a96c:	687b      	ldr	r3, [r7, #4]
  40a96e:	611a      	str	r2, [r3, #16]
  40a970:	e036      	b.n	40a9e0 <dir_sdi+0xe4>
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
  40a972:	687b      	ldr	r3, [r7, #4]
  40a974:	681b      	ldr	r3, [r3, #0]
  40a976:	789b      	ldrb	r3, [r3, #2]
  40a978:	b29b      	uxth	r3, r3
  40a97a:	011b      	lsls	r3, r3, #4
  40a97c:	817b      	strh	r3, [r7, #10]
		while (idx >= ic) {	/* Follow cluster chain */
  40a97e:	e01b      	b.n	40a9b8 <dir_sdi+0xbc>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
  40a980:	687b      	ldr	r3, [r7, #4]
  40a982:	681b      	ldr	r3, [r3, #0]
  40a984:	68f9      	ldr	r1, [r7, #12]
  40a986:	4618      	mov	r0, r3
  40a988:	4b1d      	ldr	r3, [pc, #116]	; (40aa00 <dir_sdi+0x104>)
  40a98a:	4798      	blx	r3
  40a98c:	60f8      	str	r0, [r7, #12]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
  40a98e:	68fb      	ldr	r3, [r7, #12]
  40a990:	f1b3 3fff 	cmp.w	r3, #4294967295
  40a994:	d101      	bne.n	40a99a <dir_sdi+0x9e>
  40a996:	2301      	movs	r3, #1
  40a998:	e02e      	b.n	40a9f8 <dir_sdi+0xfc>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
  40a99a:	68fb      	ldr	r3, [r7, #12]
  40a99c:	2b01      	cmp	r3, #1
  40a99e:	d905      	bls.n	40a9ac <dir_sdi+0xb0>
  40a9a0:	687b      	ldr	r3, [r7, #4]
  40a9a2:	681b      	ldr	r3, [r3, #0]
  40a9a4:	699a      	ldr	r2, [r3, #24]
  40a9a6:	68fb      	ldr	r3, [r7, #12]
  40a9a8:	429a      	cmp	r2, r3
  40a9aa:	d801      	bhi.n	40a9b0 <dir_sdi+0xb4>
				return FR_INT_ERR;
  40a9ac:	2302      	movs	r3, #2
  40a9ae:	e023      	b.n	40a9f8 <dir_sdi+0xfc>
			idx -= ic;
  40a9b0:	887a      	ldrh	r2, [r7, #2]
  40a9b2:	897b      	ldrh	r3, [r7, #10]
  40a9b4:	1ad3      	subs	r3, r2, r3
  40a9b6:	807b      	strh	r3, [r7, #2]
		while (idx >= ic) {	/* Follow cluster chain */
  40a9b8:	887a      	ldrh	r2, [r7, #2]
  40a9ba:	897b      	ldrh	r3, [r7, #10]
  40a9bc:	429a      	cmp	r2, r3
  40a9be:	d2df      	bcs.n	40a980 <dir_sdi+0x84>
		}
		dj->clust = clst;
  40a9c0:	687b      	ldr	r3, [r7, #4]
  40a9c2:	68fa      	ldr	r2, [r7, #12]
  40a9c4:	60da      	str	r2, [r3, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
  40a9c6:	687b      	ldr	r3, [r7, #4]
  40a9c8:	681b      	ldr	r3, [r3, #0]
  40a9ca:	68f9      	ldr	r1, [r7, #12]
  40a9cc:	4618      	mov	r0, r3
  40a9ce:	4b0d      	ldr	r3, [pc, #52]	; (40aa04 <dir_sdi+0x108>)
  40a9d0:	4798      	blx	r3
  40a9d2:	4602      	mov	r2, r0
  40a9d4:	887b      	ldrh	r3, [r7, #2]
  40a9d6:	091b      	lsrs	r3, r3, #4
  40a9d8:	b29b      	uxth	r3, r3
  40a9da:	441a      	add	r2, r3
  40a9dc:	687b      	ldr	r3, [r7, #4]
  40a9de:	611a      	str	r2, [r3, #16]
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
  40a9e0:	687b      	ldr	r3, [r7, #4]
  40a9e2:	681b      	ldr	r3, [r3, #0]
  40a9e4:	f103 0230 	add.w	r2, r3, #48	; 0x30
  40a9e8:	887b      	ldrh	r3, [r7, #2]
  40a9ea:	f003 030f 	and.w	r3, r3, #15
  40a9ee:	015b      	lsls	r3, r3, #5
  40a9f0:	441a      	add	r2, r3
  40a9f2:	687b      	ldr	r3, [r7, #4]
  40a9f4:	615a      	str	r2, [r3, #20]

	return FR_OK;	/* Seek succeeded */
  40a9f6:	2300      	movs	r3, #0
}
  40a9f8:	4618      	mov	r0, r3
  40a9fa:	3710      	adds	r7, #16
  40a9fc:	46bd      	mov	sp, r7
  40a9fe:	bd80      	pop	{r7, pc}
  40aa00:	0040a3d1 	.word	0x0040a3d1
  40aa04:	0040a391 	.word	0x0040a391

0040aa08 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
	DIR *dj,		/* Pointer to directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
  40aa08:	b590      	push	{r4, r7, lr}
  40aa0a:	b085      	sub	sp, #20
  40aa0c:	af00      	add	r7, sp, #0
  40aa0e:	6078      	str	r0, [r7, #4]
  40aa10:	6039      	str	r1, [r7, #0]
	DWORD clst;
	WORD i;


	stretch = stretch;		/* To suppress warning on read-only cfg. */
	i = dj->index + 1;
  40aa12:	687b      	ldr	r3, [r7, #4]
  40aa14:	88db      	ldrh	r3, [r3, #6]
  40aa16:	3301      	adds	r3, #1
  40aa18:	813b      	strh	r3, [r7, #8]
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
  40aa1a:	893b      	ldrh	r3, [r7, #8]
  40aa1c:	2b00      	cmp	r3, #0
  40aa1e:	d003      	beq.n	40aa28 <dir_next+0x20>
  40aa20:	687b      	ldr	r3, [r7, #4]
  40aa22:	691b      	ldr	r3, [r3, #16]
  40aa24:	2b00      	cmp	r3, #0
  40aa26:	d101      	bne.n	40aa2c <dir_next+0x24>
		return FR_NO_FILE;
  40aa28:	2304      	movs	r3, #4
  40aa2a:	e0bd      	b.n	40aba8 <dir_next+0x1a0>

	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
  40aa2c:	893b      	ldrh	r3, [r7, #8]
  40aa2e:	f003 030f 	and.w	r3, r3, #15
  40aa32:	b29b      	uxth	r3, r3
  40aa34:	2b00      	cmp	r3, #0
  40aa36:	f040 80a8 	bne.w	40ab8a <dir_next+0x182>
		dj->sect++;					/* Next sector */
  40aa3a:	687b      	ldr	r3, [r7, #4]
  40aa3c:	691b      	ldr	r3, [r3, #16]
  40aa3e:	1c5a      	adds	r2, r3, #1
  40aa40:	687b      	ldr	r3, [r7, #4]
  40aa42:	611a      	str	r2, [r3, #16]

		if (dj->clust == 0) {	/* Static table */
  40aa44:	687b      	ldr	r3, [r7, #4]
  40aa46:	68db      	ldr	r3, [r3, #12]
  40aa48:	2b00      	cmp	r3, #0
  40aa4a:	d108      	bne.n	40aa5e <dir_next+0x56>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
  40aa4c:	687b      	ldr	r3, [r7, #4]
  40aa4e:	681b      	ldr	r3, [r3, #0]
  40aa50:	891b      	ldrh	r3, [r3, #8]
  40aa52:	893a      	ldrh	r2, [r7, #8]
  40aa54:	429a      	cmp	r2, r3
  40aa56:	f0c0 8098 	bcc.w	40ab8a <dir_next+0x182>
				return FR_NO_FILE;
  40aa5a:	2304      	movs	r3, #4
  40aa5c:	e0a4      	b.n	40aba8 <dir_next+0x1a0>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
  40aa5e:	893b      	ldrh	r3, [r7, #8]
  40aa60:	091b      	lsrs	r3, r3, #4
  40aa62:	b29b      	uxth	r3, r3
  40aa64:	461a      	mov	r2, r3
  40aa66:	687b      	ldr	r3, [r7, #4]
  40aa68:	681b      	ldr	r3, [r3, #0]
  40aa6a:	789b      	ldrb	r3, [r3, #2]
  40aa6c:	3b01      	subs	r3, #1
  40aa6e:	4013      	ands	r3, r2
  40aa70:	2b00      	cmp	r3, #0
  40aa72:	f040 808a 	bne.w	40ab8a <dir_next+0x182>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
  40aa76:	687b      	ldr	r3, [r7, #4]
  40aa78:	681a      	ldr	r2, [r3, #0]
  40aa7a:	687b      	ldr	r3, [r7, #4]
  40aa7c:	68db      	ldr	r3, [r3, #12]
  40aa7e:	4619      	mov	r1, r3
  40aa80:	4610      	mov	r0, r2
  40aa82:	4b4b      	ldr	r3, [pc, #300]	; (40abb0 <dir_next+0x1a8>)
  40aa84:	4798      	blx	r3
  40aa86:	60f8      	str	r0, [r7, #12]
				if (clst <= 1) return FR_INT_ERR;
  40aa88:	68fb      	ldr	r3, [r7, #12]
  40aa8a:	2b01      	cmp	r3, #1
  40aa8c:	d801      	bhi.n	40aa92 <dir_next+0x8a>
  40aa8e:	2302      	movs	r3, #2
  40aa90:	e08a      	b.n	40aba8 <dir_next+0x1a0>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  40aa92:	68fb      	ldr	r3, [r7, #12]
  40aa94:	f1b3 3fff 	cmp.w	r3, #4294967295
  40aa98:	d101      	bne.n	40aa9e <dir_next+0x96>
  40aa9a:	2301      	movs	r3, #1
  40aa9c:	e084      	b.n	40aba8 <dir_next+0x1a0>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
  40aa9e:	687b      	ldr	r3, [r7, #4]
  40aaa0:	681b      	ldr	r3, [r3, #0]
  40aaa2:	699a      	ldr	r2, [r3, #24]
  40aaa4:	68fb      	ldr	r3, [r7, #12]
  40aaa6:	429a      	cmp	r2, r3
  40aaa8:	d863      	bhi.n	40ab72 <dir_next+0x16a>
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
  40aaaa:	683b      	ldr	r3, [r7, #0]
  40aaac:	2b00      	cmp	r3, #0
  40aaae:	d101      	bne.n	40aab4 <dir_next+0xac>
  40aab0:	2304      	movs	r3, #4
  40aab2:	e079      	b.n	40aba8 <dir_next+0x1a0>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
  40aab4:	687b      	ldr	r3, [r7, #4]
  40aab6:	681a      	ldr	r2, [r3, #0]
  40aab8:	687b      	ldr	r3, [r7, #4]
  40aaba:	68db      	ldr	r3, [r3, #12]
  40aabc:	4619      	mov	r1, r3
  40aabe:	4610      	mov	r0, r2
  40aac0:	4b3c      	ldr	r3, [pc, #240]	; (40abb4 <dir_next+0x1ac>)
  40aac2:	4798      	blx	r3
  40aac4:	60f8      	str	r0, [r7, #12]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
  40aac6:	68fb      	ldr	r3, [r7, #12]
  40aac8:	2b00      	cmp	r3, #0
  40aaca:	d101      	bne.n	40aad0 <dir_next+0xc8>
  40aacc:	2307      	movs	r3, #7
  40aace:	e06b      	b.n	40aba8 <dir_next+0x1a0>
					if (clst == 1) return FR_INT_ERR;
  40aad0:	68fb      	ldr	r3, [r7, #12]
  40aad2:	2b01      	cmp	r3, #1
  40aad4:	d101      	bne.n	40aada <dir_next+0xd2>
  40aad6:	2302      	movs	r3, #2
  40aad8:	e066      	b.n	40aba8 <dir_next+0x1a0>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  40aada:	68fb      	ldr	r3, [r7, #12]
  40aadc:	f1b3 3fff 	cmp.w	r3, #4294967295
  40aae0:	d101      	bne.n	40aae6 <dir_next+0xde>
  40aae2:	2301      	movs	r3, #1
  40aae4:	e060      	b.n	40aba8 <dir_next+0x1a0>
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
  40aae6:	687b      	ldr	r3, [r7, #4]
  40aae8:	681b      	ldr	r3, [r3, #0]
  40aaea:	2100      	movs	r1, #0
  40aaec:	4618      	mov	r0, r3
  40aaee:	4b32      	ldr	r3, [pc, #200]	; (40abb8 <dir_next+0x1b0>)
  40aaf0:	4798      	blx	r3
  40aaf2:	4603      	mov	r3, r0
  40aaf4:	2b00      	cmp	r3, #0
  40aaf6:	d001      	beq.n	40aafc <dir_next+0xf4>
  40aaf8:	2301      	movs	r3, #1
  40aafa:	e055      	b.n	40aba8 <dir_next+0x1a0>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
  40aafc:	687b      	ldr	r3, [r7, #4]
  40aafe:	681b      	ldr	r3, [r3, #0]
  40ab00:	3330      	adds	r3, #48	; 0x30
  40ab02:	f44f 7200 	mov.w	r2, #512	; 0x200
  40ab06:	2100      	movs	r1, #0
  40ab08:	4618      	mov	r0, r3
  40ab0a:	4b2c      	ldr	r3, [pc, #176]	; (40abbc <dir_next+0x1b4>)
  40ab0c:	4798      	blx	r3
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
  40ab0e:	687b      	ldr	r3, [r7, #4]
  40ab10:	681c      	ldr	r4, [r3, #0]
  40ab12:	687b      	ldr	r3, [r7, #4]
  40ab14:	681b      	ldr	r3, [r3, #0]
  40ab16:	68f9      	ldr	r1, [r7, #12]
  40ab18:	4618      	mov	r0, r3
  40ab1a:	4b29      	ldr	r3, [pc, #164]	; (40abc0 <dir_next+0x1b8>)
  40ab1c:	4798      	blx	r3
  40ab1e:	4603      	mov	r3, r0
  40ab20:	62e3      	str	r3, [r4, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
  40ab22:	2300      	movs	r3, #0
  40ab24:	72fb      	strb	r3, [r7, #11]
  40ab26:	e016      	b.n	40ab56 <dir_next+0x14e>
						dj->fs->wflag = 1;
  40ab28:	687b      	ldr	r3, [r7, #4]
  40ab2a:	681b      	ldr	r3, [r3, #0]
  40ab2c:	2201      	movs	r2, #1
  40ab2e:	711a      	strb	r2, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
  40ab30:	687b      	ldr	r3, [r7, #4]
  40ab32:	681b      	ldr	r3, [r3, #0]
  40ab34:	2100      	movs	r1, #0
  40ab36:	4618      	mov	r0, r3
  40ab38:	4b1f      	ldr	r3, [pc, #124]	; (40abb8 <dir_next+0x1b0>)
  40ab3a:	4798      	blx	r3
  40ab3c:	4603      	mov	r3, r0
  40ab3e:	2b00      	cmp	r3, #0
  40ab40:	d001      	beq.n	40ab46 <dir_next+0x13e>
  40ab42:	2301      	movs	r3, #1
  40ab44:	e030      	b.n	40aba8 <dir_next+0x1a0>
						dj->fs->winsect++;
  40ab46:	687b      	ldr	r3, [r7, #4]
  40ab48:	681b      	ldr	r3, [r3, #0]
  40ab4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  40ab4c:	3201      	adds	r2, #1
  40ab4e:	62da      	str	r2, [r3, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
  40ab50:	7afb      	ldrb	r3, [r7, #11]
  40ab52:	3301      	adds	r3, #1
  40ab54:	72fb      	strb	r3, [r7, #11]
  40ab56:	687b      	ldr	r3, [r7, #4]
  40ab58:	681b      	ldr	r3, [r3, #0]
  40ab5a:	789b      	ldrb	r3, [r3, #2]
  40ab5c:	7afa      	ldrb	r2, [r7, #11]
  40ab5e:	429a      	cmp	r2, r3
  40ab60:	d3e2      	bcc.n	40ab28 <dir_next+0x120>
					}
					dj->fs->winsect -= c;						/* Rewind window address */
  40ab62:	687b      	ldr	r3, [r7, #4]
  40ab64:	681b      	ldr	r3, [r3, #0]
  40ab66:	687a      	ldr	r2, [r7, #4]
  40ab68:	6812      	ldr	r2, [r2, #0]
  40ab6a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
  40ab6c:	7afa      	ldrb	r2, [r7, #11]
  40ab6e:	1a8a      	subs	r2, r1, r2
  40ab70:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
  40ab72:	687b      	ldr	r3, [r7, #4]
  40ab74:	68fa      	ldr	r2, [r7, #12]
  40ab76:	60da      	str	r2, [r3, #12]
				dj->sect = clust2sect(dj->fs, clst);
  40ab78:	687b      	ldr	r3, [r7, #4]
  40ab7a:	681b      	ldr	r3, [r3, #0]
  40ab7c:	68f9      	ldr	r1, [r7, #12]
  40ab7e:	4618      	mov	r0, r3
  40ab80:	4b0f      	ldr	r3, [pc, #60]	; (40abc0 <dir_next+0x1b8>)
  40ab82:	4798      	blx	r3
  40ab84:	4602      	mov	r2, r0
  40ab86:	687b      	ldr	r3, [r7, #4]
  40ab88:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dj->index = i;
  40ab8a:	687b      	ldr	r3, [r7, #4]
  40ab8c:	893a      	ldrh	r2, [r7, #8]
  40ab8e:	80da      	strh	r2, [r3, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
  40ab90:	687b      	ldr	r3, [r7, #4]
  40ab92:	681b      	ldr	r3, [r3, #0]
  40ab94:	f103 0230 	add.w	r2, r3, #48	; 0x30
  40ab98:	893b      	ldrh	r3, [r7, #8]
  40ab9a:	f003 030f 	and.w	r3, r3, #15
  40ab9e:	015b      	lsls	r3, r3, #5
  40aba0:	441a      	add	r2, r3
  40aba2:	687b      	ldr	r3, [r7, #4]
  40aba4:	615a      	str	r2, [r3, #20]

	return FR_OK;
  40aba6:	2300      	movs	r3, #0
}
  40aba8:	4618      	mov	r0, r3
  40abaa:	3714      	adds	r7, #20
  40abac:	46bd      	mov	sp, r7
  40abae:	bd90      	pop	{r4, r7, pc}
  40abb0:	0040a3d1 	.word	0x0040a3d1
  40abb4:	0040a7e1 	.word	0x0040a7e1
  40abb8:	0040a181 	.word	0x0040a181
  40abbc:	0040a0c9 	.word	0x0040a0c9
  40abc0:	0040a391 	.word	0x0040a391

0040abc4 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR *lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE *dir			/* Pointer to the directory entry containing a part of LFN */
)
{
  40abc4:	b580      	push	{r7, lr}
  40abc6:	b086      	sub	sp, #24
  40abc8:	af00      	add	r7, sp, #0
  40abca:	6078      	str	r0, [r7, #4]
  40abcc:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
  40abce:	683b      	ldr	r3, [r7, #0]
  40abd0:	781b      	ldrb	r3, [r3, #0]
  40abd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  40abd6:	1e5a      	subs	r2, r3, #1
  40abd8:	4613      	mov	r3, r2
  40abda:	005b      	lsls	r3, r3, #1
  40abdc:	4413      	add	r3, r2
  40abde:	009b      	lsls	r3, r3, #2
  40abe0:	4413      	add	r3, r2
  40abe2:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
  40abe4:	2300      	movs	r3, #0
  40abe6:	613b      	str	r3, [r7, #16]
  40abe8:	2301      	movs	r3, #1
  40abea:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
  40abec:	4a2b      	ldr	r2, [pc, #172]	; (40ac9c <cmp_lfn+0xd8>)
  40abee:	693b      	ldr	r3, [r7, #16]
  40abf0:	4413      	add	r3, r2
  40abf2:	781b      	ldrb	r3, [r3, #0]
  40abf4:	3301      	adds	r3, #1
  40abf6:	683a      	ldr	r2, [r7, #0]
  40abf8:	4413      	add	r3, r2
  40abfa:	781b      	ldrb	r3, [r3, #0]
  40abfc:	021b      	lsls	r3, r3, #8
  40abfe:	b21a      	sxth	r2, r3
  40ac00:	4926      	ldr	r1, [pc, #152]	; (40ac9c <cmp_lfn+0xd8>)
  40ac02:	693b      	ldr	r3, [r7, #16]
  40ac04:	440b      	add	r3, r1
  40ac06:	781b      	ldrb	r3, [r3, #0]
  40ac08:	4619      	mov	r1, r3
  40ac0a:	683b      	ldr	r3, [r7, #0]
  40ac0c:	440b      	add	r3, r1
  40ac0e:	781b      	ldrb	r3, [r3, #0]
  40ac10:	b21b      	sxth	r3, r3
  40ac12:	4313      	orrs	r3, r2
  40ac14:	b21b      	sxth	r3, r3
  40ac16:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last char has not been processed */
  40ac18:	89fb      	ldrh	r3, [r7, #14]
  40ac1a:	2b00      	cmp	r3, #0
  40ac1c:	d019      	beq.n	40ac52 <cmp_lfn+0x8e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
  40ac1e:	89bb      	ldrh	r3, [r7, #12]
  40ac20:	4618      	mov	r0, r3
  40ac22:	4b1f      	ldr	r3, [pc, #124]	; (40aca0 <cmp_lfn+0xdc>)
  40ac24:	4798      	blx	r3
  40ac26:	4603      	mov	r3, r0
  40ac28:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
  40ac2a:	697b      	ldr	r3, [r7, #20]
  40ac2c:	2bfe      	cmp	r3, #254	; 0xfe
  40ac2e:	d80e      	bhi.n	40ac4e <cmp_lfn+0x8a>
  40ac30:	697b      	ldr	r3, [r7, #20]
  40ac32:	1c5a      	adds	r2, r3, #1
  40ac34:	617a      	str	r2, [r7, #20]
  40ac36:	005b      	lsls	r3, r3, #1
  40ac38:	687a      	ldr	r2, [r7, #4]
  40ac3a:	4413      	add	r3, r2
  40ac3c:	881b      	ldrh	r3, [r3, #0]
  40ac3e:	4618      	mov	r0, r3
  40ac40:	4b17      	ldr	r3, [pc, #92]	; (40aca0 <cmp_lfn+0xdc>)
  40ac42:	4798      	blx	r3
  40ac44:	4603      	mov	r3, r0
  40ac46:	461a      	mov	r2, r3
  40ac48:	89fb      	ldrh	r3, [r7, #14]
  40ac4a:	4293      	cmp	r3, r2
  40ac4c:	d008      	beq.n	40ac60 <cmp_lfn+0x9c>
				return 0;				/* Not matched */
  40ac4e:	2300      	movs	r3, #0
  40ac50:	e01f      	b.n	40ac92 <cmp_lfn+0xce>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
  40ac52:	89bb      	ldrh	r3, [r7, #12]
  40ac54:	f64f 72ff 	movw	r2, #65535	; 0xffff
  40ac58:	4293      	cmp	r3, r2
  40ac5a:	d001      	beq.n	40ac60 <cmp_lfn+0x9c>
  40ac5c:	2300      	movs	r3, #0
  40ac5e:	e018      	b.n	40ac92 <cmp_lfn+0xce>
		}
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
  40ac60:	693b      	ldr	r3, [r7, #16]
  40ac62:	3301      	adds	r3, #1
  40ac64:	613b      	str	r3, [r7, #16]
  40ac66:	693b      	ldr	r3, [r7, #16]
  40ac68:	2b0c      	cmp	r3, #12
  40ac6a:	d9bf      	bls.n	40abec <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
  40ac6c:	683b      	ldr	r3, [r7, #0]
  40ac6e:	781b      	ldrb	r3, [r3, #0]
  40ac70:	f003 0340 	and.w	r3, r3, #64	; 0x40
  40ac74:	2b00      	cmp	r3, #0
  40ac76:	d00b      	beq.n	40ac90 <cmp_lfn+0xcc>
  40ac78:	89fb      	ldrh	r3, [r7, #14]
  40ac7a:	2b00      	cmp	r3, #0
  40ac7c:	d008      	beq.n	40ac90 <cmp_lfn+0xcc>
  40ac7e:	697b      	ldr	r3, [r7, #20]
  40ac80:	005b      	lsls	r3, r3, #1
  40ac82:	687a      	ldr	r2, [r7, #4]
  40ac84:	4413      	add	r3, r2
  40ac86:	881b      	ldrh	r3, [r3, #0]
  40ac88:	2b00      	cmp	r3, #0
  40ac8a:	d001      	beq.n	40ac90 <cmp_lfn+0xcc>
		return 0;
  40ac8c:	2300      	movs	r3, #0
  40ac8e:	e000      	b.n	40ac92 <cmp_lfn+0xce>

	return 1;						/* The part of LFN matched */
  40ac90:	2301      	movs	r3, #1
}
  40ac92:	4618      	mov	r0, r3
  40ac94:	3718      	adds	r7, #24
  40ac96:	46bd      	mov	sp, r7
  40ac98:	bd80      	pop	{r7, pc}
  40ac9a:	bf00      	nop
  40ac9c:	004110dc 	.word	0x004110dc
  40aca0:	0040d0f9 	.word	0x0040d0f9

0040aca4 <fit_lfn>:
	const WCHAR *lfnbuf,	/* Pointer to the LFN buffer */
	BYTE *dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
  40aca4:	b480      	push	{r7}
  40aca6:	b089      	sub	sp, #36	; 0x24
  40aca8:	af00      	add	r7, sp, #0
  40acaa:	60f8      	str	r0, [r7, #12]
  40acac:	60b9      	str	r1, [r7, #8]
  40acae:	4611      	mov	r1, r2
  40acb0:	461a      	mov	r2, r3
  40acb2:	460b      	mov	r3, r1
  40acb4:	71fb      	strb	r3, [r7, #7]
  40acb6:	4613      	mov	r3, r2
  40acb8:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
  40acba:	68bb      	ldr	r3, [r7, #8]
  40acbc:	330d      	adds	r3, #13
  40acbe:	79ba      	ldrb	r2, [r7, #6]
  40acc0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
  40acc2:	68bb      	ldr	r3, [r7, #8]
  40acc4:	330b      	adds	r3, #11
  40acc6:	220f      	movs	r2, #15
  40acc8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
  40acca:	68bb      	ldr	r3, [r7, #8]
  40accc:	330c      	adds	r3, #12
  40acce:	2200      	movs	r2, #0
  40acd0:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir+LDIR_FstClusLO, 0);
  40acd2:	68bb      	ldr	r3, [r7, #8]
  40acd4:	331a      	adds	r3, #26
  40acd6:	2200      	movs	r2, #0
  40acd8:	701a      	strb	r2, [r3, #0]
  40acda:	68bb      	ldr	r3, [r7, #8]
  40acdc:	331b      	adds	r3, #27
  40acde:	2200      	movs	r2, #0
  40ace0:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
  40ace2:	79fb      	ldrb	r3, [r7, #7]
  40ace4:	1e5a      	subs	r2, r3, #1
  40ace6:	4613      	mov	r3, r2
  40ace8:	005b      	lsls	r3, r3, #1
  40acea:	4413      	add	r3, r2
  40acec:	009b      	lsls	r3, r3, #2
  40acee:	4413      	add	r3, r2
  40acf0:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
  40acf2:	2300      	movs	r3, #0
  40acf4:	82fb      	strh	r3, [r7, #22]
  40acf6:	2300      	movs	r3, #0
  40acf8:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
  40acfa:	8afb      	ldrh	r3, [r7, #22]
  40acfc:	f64f 72ff 	movw	r2, #65535	; 0xffff
  40ad00:	4293      	cmp	r3, r2
  40ad02:	d007      	beq.n	40ad14 <fit_lfn+0x70>
  40ad04:	69fb      	ldr	r3, [r7, #28]
  40ad06:	1c5a      	adds	r2, r3, #1
  40ad08:	61fa      	str	r2, [r7, #28]
  40ad0a:	005b      	lsls	r3, r3, #1
  40ad0c:	68fa      	ldr	r2, [r7, #12]
  40ad0e:	4413      	add	r3, r2
  40ad10:	881b      	ldrh	r3, [r3, #0]
  40ad12:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
  40ad14:	4a1d      	ldr	r2, [pc, #116]	; (40ad8c <fit_lfn+0xe8>)
  40ad16:	69bb      	ldr	r3, [r7, #24]
  40ad18:	4413      	add	r3, r2
  40ad1a:	781b      	ldrb	r3, [r3, #0]
  40ad1c:	461a      	mov	r2, r3
  40ad1e:	68bb      	ldr	r3, [r7, #8]
  40ad20:	4413      	add	r3, r2
  40ad22:	8afa      	ldrh	r2, [r7, #22]
  40ad24:	b2d2      	uxtb	r2, r2
  40ad26:	701a      	strb	r2, [r3, #0]
  40ad28:	4a18      	ldr	r2, [pc, #96]	; (40ad8c <fit_lfn+0xe8>)
  40ad2a:	69bb      	ldr	r3, [r7, #24]
  40ad2c:	4413      	add	r3, r2
  40ad2e:	781b      	ldrb	r3, [r3, #0]
  40ad30:	3301      	adds	r3, #1
  40ad32:	68ba      	ldr	r2, [r7, #8]
  40ad34:	4413      	add	r3, r2
  40ad36:	8afa      	ldrh	r2, [r7, #22]
  40ad38:	0a12      	lsrs	r2, r2, #8
  40ad3a:	b292      	uxth	r2, r2
  40ad3c:	b2d2      	uxtb	r2, r2
  40ad3e:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
  40ad40:	8afb      	ldrh	r3, [r7, #22]
  40ad42:	2b00      	cmp	r3, #0
  40ad44:	d102      	bne.n	40ad4c <fit_lfn+0xa8>
  40ad46:	f64f 73ff 	movw	r3, #65535	; 0xffff
  40ad4a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
  40ad4c:	69bb      	ldr	r3, [r7, #24]
  40ad4e:	3301      	adds	r3, #1
  40ad50:	61bb      	str	r3, [r7, #24]
  40ad52:	69bb      	ldr	r3, [r7, #24]
  40ad54:	2b0c      	cmp	r3, #12
  40ad56:	d9d0      	bls.n	40acfa <fit_lfn+0x56>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
  40ad58:	8afb      	ldrh	r3, [r7, #22]
  40ad5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
  40ad5e:	4293      	cmp	r3, r2
  40ad60:	d006      	beq.n	40ad70 <fit_lfn+0xcc>
  40ad62:	69fb      	ldr	r3, [r7, #28]
  40ad64:	005b      	lsls	r3, r3, #1
  40ad66:	68fa      	ldr	r2, [r7, #12]
  40ad68:	4413      	add	r3, r2
  40ad6a:	881b      	ldrh	r3, [r3, #0]
  40ad6c:	2b00      	cmp	r3, #0
  40ad6e:	d103      	bne.n	40ad78 <fit_lfn+0xd4>
  40ad70:	79fb      	ldrb	r3, [r7, #7]
  40ad72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40ad76:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
  40ad78:	68bb      	ldr	r3, [r7, #8]
  40ad7a:	79fa      	ldrb	r2, [r7, #7]
  40ad7c:	701a      	strb	r2, [r3, #0]
}
  40ad7e:	bf00      	nop
  40ad80:	3724      	adds	r7, #36	; 0x24
  40ad82:	46bd      	mov	sp, r7
  40ad84:	f85d 7b04 	ldr.w	r7, [sp], #4
  40ad88:	4770      	bx	lr
  40ad8a:	bf00      	nop
  40ad8c:	004110dc 	.word	0x004110dc

0040ad90 <gen_numname>:
	BYTE *dst,			/* Pointer to generated SFN */
	const BYTE *src,	/* Pointer to source SFN to be modified */
	const WCHAR *lfn,	/* Pointer to LFN */
	WORD seq			/* Sequence number */
)
{
  40ad90:	b580      	push	{r7, lr}
  40ad92:	b08a      	sub	sp, #40	; 0x28
  40ad94:	af00      	add	r7, sp, #0
  40ad96:	60f8      	str	r0, [r7, #12]
  40ad98:	60b9      	str	r1, [r7, #8]
  40ad9a:	607a      	str	r2, [r7, #4]
  40ad9c:	807b      	strh	r3, [r7, #2]
	BYTE ns[8], c;
	UINT i, j;


	mem_cpy(dst, src, 11);
  40ad9e:	220b      	movs	r2, #11
  40ada0:	68b9      	ldr	r1, [r7, #8]
  40ada2:	68f8      	ldr	r0, [r7, #12]
  40ada4:	4b33      	ldr	r3, [pc, #204]	; (40ae74 <gen_numname+0xe4>)
  40ada6:	4798      	blx	r3

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
  40ada8:	887b      	ldrh	r3, [r7, #2]
  40adaa:	2b05      	cmp	r3, #5
  40adac:	d90f      	bls.n	40adce <gen_numname+0x3e>
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
  40adae:	887b      	ldrh	r3, [r7, #2]
  40adb0:	b29a      	uxth	r2, r3
  40adb2:	0852      	lsrs	r2, r2, #1
  40adb4:	03db      	lsls	r3, r3, #15
  40adb6:	4313      	orrs	r3, r2
  40adb8:	b29a      	uxth	r2, r3
  40adba:	687b      	ldr	r3, [r7, #4]
  40adbc:	1c99      	adds	r1, r3, #2
  40adbe:	6079      	str	r1, [r7, #4]
  40adc0:	881b      	ldrh	r3, [r3, #0]
  40adc2:	4413      	add	r3, r2
  40adc4:	807b      	strh	r3, [r7, #2]
  40adc6:	687b      	ldr	r3, [r7, #4]
  40adc8:	881b      	ldrh	r3, [r3, #0]
  40adca:	2b00      	cmp	r3, #0
  40adcc:	d1ef      	bne.n	40adae <gen_numname+0x1e>
	}

	/* itoa (hexdecimal) */
	i = 7;
  40adce:	2307      	movs	r3, #7
  40add0:	623b      	str	r3, [r7, #32]
	do {
		c = (seq % 16) + '0';
  40add2:	887b      	ldrh	r3, [r7, #2]
  40add4:	b2db      	uxtb	r3, r3
  40add6:	f003 030f 	and.w	r3, r3, #15
  40adda:	b2db      	uxtb	r3, r3
  40addc:	3330      	adds	r3, #48	; 0x30
  40adde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (c > '9') c += 7;
  40ade2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  40ade6:	2b39      	cmp	r3, #57	; 0x39
  40ade8:	d904      	bls.n	40adf4 <gen_numname+0x64>
  40adea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  40adee:	3307      	adds	r3, #7
  40adf0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		ns[i--] = c;
  40adf4:	6a3b      	ldr	r3, [r7, #32]
  40adf6:	1e5a      	subs	r2, r3, #1
  40adf8:	623a      	str	r2, [r7, #32]
  40adfa:	f107 0228 	add.w	r2, r7, #40	; 0x28
  40adfe:	4413      	add	r3, r2
  40ae00:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
  40ae04:	f803 2c14 	strb.w	r2, [r3, #-20]
		seq /= 16;
  40ae08:	887b      	ldrh	r3, [r7, #2]
  40ae0a:	091b      	lsrs	r3, r3, #4
  40ae0c:	807b      	strh	r3, [r7, #2]
	} while (seq);
  40ae0e:	887b      	ldrh	r3, [r7, #2]
  40ae10:	2b00      	cmp	r3, #0
  40ae12:	d1de      	bne.n	40add2 <gen_numname+0x42>
	ns[i] = '~';
  40ae14:	f107 0214 	add.w	r2, r7, #20
  40ae18:	6a3b      	ldr	r3, [r7, #32]
  40ae1a:	4413      	add	r3, r2
  40ae1c:	227e      	movs	r2, #126	; 0x7e
  40ae1e:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
  40ae20:	2300      	movs	r3, #0
  40ae22:	61fb      	str	r3, [r7, #28]
  40ae24:	e002      	b.n	40ae2c <gen_numname+0x9c>
  40ae26:	69fb      	ldr	r3, [r7, #28]
  40ae28:	3301      	adds	r3, #1
  40ae2a:	61fb      	str	r3, [r7, #28]
  40ae2c:	69fa      	ldr	r2, [r7, #28]
  40ae2e:	6a3b      	ldr	r3, [r7, #32]
  40ae30:	429a      	cmp	r2, r3
  40ae32:	d205      	bcs.n	40ae40 <gen_numname+0xb0>
  40ae34:	68fa      	ldr	r2, [r7, #12]
  40ae36:	69fb      	ldr	r3, [r7, #28]
  40ae38:	4413      	add	r3, r2
  40ae3a:	781b      	ldrb	r3, [r3, #0]
  40ae3c:	2b20      	cmp	r3, #32
  40ae3e:	d1f2      	bne.n	40ae26 <gen_numname+0x96>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
  40ae40:	69fb      	ldr	r3, [r7, #28]
  40ae42:	1c5a      	adds	r2, r3, #1
  40ae44:	61fa      	str	r2, [r7, #28]
  40ae46:	68fa      	ldr	r2, [r7, #12]
  40ae48:	441a      	add	r2, r3
  40ae4a:	6a3b      	ldr	r3, [r7, #32]
  40ae4c:	2b07      	cmp	r3, #7
  40ae4e:	d808      	bhi.n	40ae62 <gen_numname+0xd2>
  40ae50:	6a3b      	ldr	r3, [r7, #32]
  40ae52:	1c59      	adds	r1, r3, #1
  40ae54:	6239      	str	r1, [r7, #32]
  40ae56:	f107 0128 	add.w	r1, r7, #40	; 0x28
  40ae5a:	440b      	add	r3, r1
  40ae5c:	f813 3c14 	ldrb.w	r3, [r3, #-20]
  40ae60:	e000      	b.n	40ae64 <gen_numname+0xd4>
  40ae62:	2320      	movs	r3, #32
  40ae64:	7013      	strb	r3, [r2, #0]
	} while (j < 8);
  40ae66:	69fb      	ldr	r3, [r7, #28]
  40ae68:	2b07      	cmp	r3, #7
  40ae6a:	d9e9      	bls.n	40ae40 <gen_numname+0xb0>
}
  40ae6c:	bf00      	nop
  40ae6e:	3728      	adds	r7, #40	; 0x28
  40ae70:	46bd      	mov	sp, r7
  40ae72:	bd80      	pop	{r7, pc}
  40ae74:	0040a08d 	.word	0x0040a08d

0040ae78 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
  40ae78:	b480      	push	{r7}
  40ae7a:	b085      	sub	sp, #20
  40ae7c:	af00      	add	r7, sp, #0
  40ae7e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
  40ae80:	2300      	movs	r3, #0
  40ae82:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
  40ae84:	230b      	movs	r3, #11
  40ae86:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
  40ae88:	7bfb      	ldrb	r3, [r7, #15]
  40ae8a:	b2da      	uxtb	r2, r3
  40ae8c:	0852      	lsrs	r2, r2, #1
  40ae8e:	01db      	lsls	r3, r3, #7
  40ae90:	4313      	orrs	r3, r2
  40ae92:	b2da      	uxtb	r2, r3
  40ae94:	687b      	ldr	r3, [r7, #4]
  40ae96:	1c59      	adds	r1, r3, #1
  40ae98:	6079      	str	r1, [r7, #4]
  40ae9a:	781b      	ldrb	r3, [r3, #0]
  40ae9c:	4413      	add	r3, r2
  40ae9e:	73fb      	strb	r3, [r7, #15]
  40aea0:	68bb      	ldr	r3, [r7, #8]
  40aea2:	3b01      	subs	r3, #1
  40aea4:	60bb      	str	r3, [r7, #8]
  40aea6:	68bb      	ldr	r3, [r7, #8]
  40aea8:	2b00      	cmp	r3, #0
  40aeaa:	d1ed      	bne.n	40ae88 <sum_sfn+0x10>
	return sum;
  40aeac:	7bfb      	ldrb	r3, [r7, #15]
}
  40aeae:	4618      	mov	r0, r3
  40aeb0:	3714      	adds	r7, #20
  40aeb2:	46bd      	mov	sp, r7
  40aeb4:	f85d 7b04 	ldr.w	r7, [sp], #4
  40aeb8:	4770      	bx	lr
	...

0040aebc <dir_find>:

static
FRESULT dir_find (
	DIR *dj			/* Pointer to the directory object linked to the file name */
)
{
  40aebc:	b580      	push	{r7, lr}
  40aebe:	b086      	sub	sp, #24
  40aec0:	af00      	add	r7, sp, #0
  40aec2:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dj, 0);			/* Rewind directory object */
  40aec4:	2100      	movs	r1, #0
  40aec6:	6878      	ldr	r0, [r7, #4]
  40aec8:	4b52      	ldr	r3, [pc, #328]	; (40b014 <dir_find+0x158>)
  40aeca:	4798      	blx	r3
  40aecc:	4603      	mov	r3, r0
  40aece:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
  40aed0:	7dfb      	ldrb	r3, [r7, #23]
  40aed2:	2b00      	cmp	r3, #0
  40aed4:	d001      	beq.n	40aeda <dir_find+0x1e>
  40aed6:	7dfb      	ldrb	r3, [r7, #23]
  40aed8:	e098      	b.n	40b00c <dir_find+0x150>

#if _USE_LFN
	ord = sum = 0xFF;
  40aeda:	23ff      	movs	r3, #255	; 0xff
  40aedc:	753b      	strb	r3, [r7, #20]
  40aede:	7d3b      	ldrb	r3, [r7, #20]
  40aee0:	757b      	strb	r3, [r7, #21]
#endif
	do {
		res = move_window(dj->fs, dj->sect);
  40aee2:	687b      	ldr	r3, [r7, #4]
  40aee4:	681a      	ldr	r2, [r3, #0]
  40aee6:	687b      	ldr	r3, [r7, #4]
  40aee8:	691b      	ldr	r3, [r3, #16]
  40aeea:	4619      	mov	r1, r3
  40aeec:	4610      	mov	r0, r2
  40aeee:	4b4a      	ldr	r3, [pc, #296]	; (40b018 <dir_find+0x15c>)
  40aef0:	4798      	blx	r3
  40aef2:	4603      	mov	r3, r0
  40aef4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
  40aef6:	7dfb      	ldrb	r3, [r7, #23]
  40aef8:	2b00      	cmp	r3, #0
  40aefa:	f040 8081 	bne.w	40b000 <dir_find+0x144>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
  40aefe:	687b      	ldr	r3, [r7, #4]
  40af00:	695b      	ldr	r3, [r3, #20]
  40af02:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
  40af04:	693b      	ldr	r3, [r7, #16]
  40af06:	781b      	ldrb	r3, [r3, #0]
  40af08:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
  40af0a:	7dbb      	ldrb	r3, [r7, #22]
  40af0c:	2b00      	cmp	r3, #0
  40af0e:	d102      	bne.n	40af16 <dir_find+0x5a>
  40af10:	2304      	movs	r3, #4
  40af12:	75fb      	strb	r3, [r7, #23]
  40af14:	e079      	b.n	40b00a <dir_find+0x14e>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
  40af16:	693b      	ldr	r3, [r7, #16]
  40af18:	330b      	adds	r3, #11
  40af1a:	781b      	ldrb	r3, [r3, #0]
  40af1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  40af20:	73fb      	strb	r3, [r7, #15]
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
  40af22:	7dbb      	ldrb	r3, [r7, #22]
  40af24:	2be5      	cmp	r3, #229	; 0xe5
  40af26:	d007      	beq.n	40af38 <dir_find+0x7c>
  40af28:	7bfb      	ldrb	r3, [r7, #15]
  40af2a:	f003 0308 	and.w	r3, r3, #8
  40af2e:	2b00      	cmp	r3, #0
  40af30:	d005      	beq.n	40af3e <dir_find+0x82>
  40af32:	7bfb      	ldrb	r3, [r7, #15]
  40af34:	2b0f      	cmp	r3, #15
  40af36:	d002      	beq.n	40af3e <dir_find+0x82>
			ord = 0xFF;
  40af38:	23ff      	movs	r3, #255	; 0xff
  40af3a:	757b      	strb	r3, [r7, #21]
  40af3c:	e055      	b.n	40afea <dir_find+0x12e>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
  40af3e:	7bfb      	ldrb	r3, [r7, #15]
  40af40:	2b0f      	cmp	r3, #15
  40af42:	d12f      	bne.n	40afa4 <dir_find+0xe8>
				if (dj->lfn) {
  40af44:	687b      	ldr	r3, [r7, #4]
  40af46:	69db      	ldr	r3, [r3, #28]
  40af48:	2b00      	cmp	r3, #0
  40af4a:	d04e      	beq.n	40afea <dir_find+0x12e>
					if (c & LLE) {		/* Is it start of LFN sequence? */
  40af4c:	7dbb      	ldrb	r3, [r7, #22]
  40af4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  40af52:	2b00      	cmp	r3, #0
  40af54:	d00c      	beq.n	40af70 <dir_find+0xb4>
						sum = dir[LDIR_Chksum];
  40af56:	693b      	ldr	r3, [r7, #16]
  40af58:	7b5b      	ldrb	r3, [r3, #13]
  40af5a:	753b      	strb	r3, [r7, #20]
						c &= ~LLE; ord = c;	/* LFN start order */
  40af5c:	7dbb      	ldrb	r3, [r7, #22]
  40af5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  40af62:	75bb      	strb	r3, [r7, #22]
  40af64:	7dbb      	ldrb	r3, [r7, #22]
  40af66:	757b      	strb	r3, [r7, #21]
						dj->lfn_idx = dj->index;
  40af68:	687b      	ldr	r3, [r7, #4]
  40af6a:	88da      	ldrh	r2, [r3, #6]
  40af6c:	687b      	ldr	r3, [r7, #4]
  40af6e:	841a      	strh	r2, [r3, #32]
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
  40af70:	7dba      	ldrb	r2, [r7, #22]
  40af72:	7d7b      	ldrb	r3, [r7, #21]
  40af74:	429a      	cmp	r2, r3
  40af76:	d112      	bne.n	40af9e <dir_find+0xe2>
  40af78:	693b      	ldr	r3, [r7, #16]
  40af7a:	330d      	adds	r3, #13
  40af7c:	781b      	ldrb	r3, [r3, #0]
  40af7e:	7d3a      	ldrb	r2, [r7, #20]
  40af80:	429a      	cmp	r2, r3
  40af82:	d10c      	bne.n	40af9e <dir_find+0xe2>
  40af84:	687b      	ldr	r3, [r7, #4]
  40af86:	69db      	ldr	r3, [r3, #28]
  40af88:	6939      	ldr	r1, [r7, #16]
  40af8a:	4618      	mov	r0, r3
  40af8c:	4b23      	ldr	r3, [pc, #140]	; (40b01c <dir_find+0x160>)
  40af8e:	4798      	blx	r3
  40af90:	4603      	mov	r3, r0
  40af92:	2b00      	cmp	r3, #0
  40af94:	d003      	beq.n	40af9e <dir_find+0xe2>
  40af96:	7d7b      	ldrb	r3, [r7, #21]
  40af98:	3b01      	subs	r3, #1
  40af9a:	b2db      	uxtb	r3, r3
  40af9c:	e000      	b.n	40afa0 <dir_find+0xe4>
  40af9e:	23ff      	movs	r3, #255	; 0xff
  40afa0:	757b      	strb	r3, [r7, #21]
  40afa2:	e022      	b.n	40afea <dir_find+0x12e>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
  40afa4:	7d7b      	ldrb	r3, [r7, #21]
  40afa6:	2b00      	cmp	r3, #0
  40afa8:	d107      	bne.n	40afba <dir_find+0xfe>
  40afaa:	6938      	ldr	r0, [r7, #16]
  40afac:	4b1c      	ldr	r3, [pc, #112]	; (40b020 <dir_find+0x164>)
  40afae:	4798      	blx	r3
  40afb0:	4603      	mov	r3, r0
  40afb2:	461a      	mov	r2, r3
  40afb4:	7d3b      	ldrb	r3, [r7, #20]
  40afb6:	4293      	cmp	r3, r2
  40afb8:	d024      	beq.n	40b004 <dir_find+0x148>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
  40afba:	23ff      	movs	r3, #255	; 0xff
  40afbc:	757b      	strb	r3, [r7, #21]
  40afbe:	687b      	ldr	r3, [r7, #4]
  40afc0:	f64f 72ff 	movw	r2, #65535	; 0xffff
  40afc4:	841a      	strh	r2, [r3, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
  40afc6:	687b      	ldr	r3, [r7, #4]
  40afc8:	699b      	ldr	r3, [r3, #24]
  40afca:	330b      	adds	r3, #11
  40afcc:	781b      	ldrb	r3, [r3, #0]
  40afce:	f003 0301 	and.w	r3, r3, #1
  40afd2:	2b00      	cmp	r3, #0
  40afd4:	d109      	bne.n	40afea <dir_find+0x12e>
  40afd6:	687b      	ldr	r3, [r7, #4]
  40afd8:	699b      	ldr	r3, [r3, #24]
  40afda:	220b      	movs	r2, #11
  40afdc:	4619      	mov	r1, r3
  40afde:	6938      	ldr	r0, [r7, #16]
  40afe0:	4b10      	ldr	r3, [pc, #64]	; (40b024 <dir_find+0x168>)
  40afe2:	4798      	blx	r3
  40afe4:	4603      	mov	r3, r0
  40afe6:	2b00      	cmp	r3, #0
  40afe8:	d00e      	beq.n	40b008 <dir_find+0x14c>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, 0);		/* Next entry */
  40afea:	2100      	movs	r1, #0
  40afec:	6878      	ldr	r0, [r7, #4]
  40afee:	4b0e      	ldr	r3, [pc, #56]	; (40b028 <dir_find+0x16c>)
  40aff0:	4798      	blx	r3
  40aff2:	4603      	mov	r3, r0
  40aff4:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
  40aff6:	7dfb      	ldrb	r3, [r7, #23]
  40aff8:	2b00      	cmp	r3, #0
  40affa:	f43f af72 	beq.w	40aee2 <dir_find+0x26>
  40affe:	e004      	b.n	40b00a <dir_find+0x14e>
		if (res != FR_OK) break;
  40b000:	bf00      	nop
  40b002:	e002      	b.n	40b00a <dir_find+0x14e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
  40b004:	bf00      	nop
  40b006:	e000      	b.n	40b00a <dir_find+0x14e>
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
  40b008:	bf00      	nop

	return res;
  40b00a:	7dfb      	ldrb	r3, [r7, #23]
}
  40b00c:	4618      	mov	r0, r3
  40b00e:	3718      	adds	r7, #24
  40b010:	46bd      	mov	sp, r7
  40b012:	bd80      	pop	{r7, pc}
  40b014:	0040a8fd 	.word	0x0040a8fd
  40b018:	0040a181 	.word	0x0040a181
  40b01c:	0040abc5 	.word	0x0040abc5
  40b020:	0040ae79 	.word	0x0040ae79
  40b024:	0040a0fd 	.word	0x0040a0fd
  40b028:	0040aa09 	.word	0x0040aa09

0040b02c <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
  40b02c:	b590      	push	{r4, r7, lr}
  40b02e:	b08d      	sub	sp, #52	; 0x34
  40b030:	af00      	add	r7, sp, #0
  40b032:	6078      	str	r0, [r7, #4]
	WORD n, ne, is;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dj->fn; lfn = dj->lfn;
  40b034:	687b      	ldr	r3, [r7, #4]
  40b036:	699b      	ldr	r3, [r3, #24]
  40b038:	627b      	str	r3, [r7, #36]	; 0x24
  40b03a:	687b      	ldr	r3, [r7, #4]
  40b03c:	69db      	ldr	r3, [r3, #28]
  40b03e:	623b      	str	r3, [r7, #32]
	mem_cpy(sn, fn, 12);
  40b040:	f107 030c 	add.w	r3, r7, #12
  40b044:	220c      	movs	r2, #12
  40b046:	6a79      	ldr	r1, [r7, #36]	; 0x24
  40b048:	4618      	mov	r0, r3
  40b04a:	4b92      	ldr	r3, [pc, #584]	; (40b294 <dir_register+0x268>)
  40b04c:	4798      	blx	r3

	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
  40b04e:	7dfb      	ldrb	r3, [r7, #23]
  40b050:	f003 0301 	and.w	r3, r3, #1
  40b054:	2b00      	cmp	r3, #0
  40b056:	d035      	beq.n	40b0c4 <dir_register+0x98>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
  40b058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40b05a:	330b      	adds	r3, #11
  40b05c:	2200      	movs	r2, #0
  40b05e:	701a      	strb	r2, [r3, #0]
  40b060:	687b      	ldr	r3, [r7, #4]
  40b062:	2200      	movs	r2, #0
  40b064:	61da      	str	r2, [r3, #28]
		for (n = 1; n < 100; n++) {
  40b066:	2301      	movs	r3, #1
  40b068:	85bb      	strh	r3, [r7, #44]	; 0x2c
  40b06a:	e013      	b.n	40b094 <dir_register+0x68>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
  40b06c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
  40b06e:	f107 010c 	add.w	r1, r7, #12
  40b072:	6a3a      	ldr	r2, [r7, #32]
  40b074:	6a78      	ldr	r0, [r7, #36]	; 0x24
  40b076:	4c88      	ldr	r4, [pc, #544]	; (40b298 <dir_register+0x26c>)
  40b078:	47a0      	blx	r4
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
  40b07a:	6878      	ldr	r0, [r7, #4]
  40b07c:	4b87      	ldr	r3, [pc, #540]	; (40b29c <dir_register+0x270>)
  40b07e:	4798      	blx	r3
  40b080:	4603      	mov	r3, r0
  40b082:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
  40b086:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  40b08a:	2b00      	cmp	r3, #0
  40b08c:	d106      	bne.n	40b09c <dir_register+0x70>
		for (n = 1; n < 100; n++) {
  40b08e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
  40b090:	3301      	adds	r3, #1
  40b092:	85bb      	strh	r3, [r7, #44]	; 0x2c
  40b094:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
  40b096:	2b63      	cmp	r3, #99	; 0x63
  40b098:	d9e8      	bls.n	40b06c <dir_register+0x40>
  40b09a:	e000      	b.n	40b09e <dir_register+0x72>
			if (res != FR_OK) break;
  40b09c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
  40b09e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
  40b0a0:	2b64      	cmp	r3, #100	; 0x64
  40b0a2:	d101      	bne.n	40b0a8 <dir_register+0x7c>
  40b0a4:	2307      	movs	r3, #7
  40b0a6:	e0f1      	b.n	40b28c <dir_register+0x260>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
  40b0a8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  40b0ac:	2b04      	cmp	r3, #4
  40b0ae:	d002      	beq.n	40b0b6 <dir_register+0x8a>
  40b0b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  40b0b4:	e0ea      	b.n	40b28c <dir_register+0x260>
		fn[NS] = sn[NS]; dj->lfn = lfn;
  40b0b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40b0b8:	330b      	adds	r3, #11
  40b0ba:	7dfa      	ldrb	r2, [r7, #23]
  40b0bc:	701a      	strb	r2, [r3, #0]
  40b0be:	687b      	ldr	r3, [r7, #4]
  40b0c0:	6a3a      	ldr	r2, [r7, #32]
  40b0c2:	61da      	str	r2, [r3, #28]
	}

	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
  40b0c4:	7dfb      	ldrb	r3, [r7, #23]
  40b0c6:	f003 0302 	and.w	r3, r3, #2
  40b0ca:	2b00      	cmp	r3, #0
  40b0cc:	d016      	beq.n	40b0fc <dir_register+0xd0>
		for (ne = 0; lfn[ne]; ne++) ;
  40b0ce:	2300      	movs	r3, #0
  40b0d0:	857b      	strh	r3, [r7, #42]	; 0x2a
  40b0d2:	e002      	b.n	40b0da <dir_register+0xae>
  40b0d4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
  40b0d6:	3301      	adds	r3, #1
  40b0d8:	857b      	strh	r3, [r7, #42]	; 0x2a
  40b0da:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
  40b0dc:	005b      	lsls	r3, r3, #1
  40b0de:	6a3a      	ldr	r2, [r7, #32]
  40b0e0:	4413      	add	r3, r2
  40b0e2:	881b      	ldrh	r3, [r3, #0]
  40b0e4:	2b00      	cmp	r3, #0
  40b0e6:	d1f5      	bne.n	40b0d4 <dir_register+0xa8>
		ne = (ne + 25) / 13;
  40b0e8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
  40b0ea:	3319      	adds	r3, #25
  40b0ec:	4a6c      	ldr	r2, [pc, #432]	; (40b2a0 <dir_register+0x274>)
  40b0ee:	fb82 1203 	smull	r1, r2, r2, r3
  40b0f2:	1092      	asrs	r2, r2, #2
  40b0f4:	17db      	asrs	r3, r3, #31
  40b0f6:	1ad3      	subs	r3, r2, r3
  40b0f8:	857b      	strh	r3, [r7, #42]	; 0x2a
  40b0fa:	e001      	b.n	40b100 <dir_register+0xd4>
	} else {						/* Otherwise reserve only an SFN entry. */
		ne = 1;
  40b0fc:	2301      	movs	r3, #1
  40b0fe:	857b      	strh	r3, [r7, #42]	; 0x2a
	}

	/* Reserve contiguous entries */
	res = dir_sdi(dj, 0);
  40b100:	2100      	movs	r1, #0
  40b102:	6878      	ldr	r0, [r7, #4]
  40b104:	4b67      	ldr	r3, [pc, #412]	; (40b2a4 <dir_register+0x278>)
  40b106:	4798      	blx	r3
  40b108:	4603      	mov	r3, r0
  40b10a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK) return res;
  40b10e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  40b112:	2b00      	cmp	r3, #0
  40b114:	d002      	beq.n	40b11c <dir_register+0xf0>
  40b116:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  40b11a:	e0b7      	b.n	40b28c <dir_register+0x260>
	n = is = 0;
  40b11c:	2300      	movs	r3, #0
  40b11e:	853b      	strh	r3, [r7, #40]	; 0x28
  40b120:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
  40b122:	85bb      	strh	r3, [r7, #44]	; 0x2c
	do {
		res = move_window(dj->fs, dj->sect);
  40b124:	687b      	ldr	r3, [r7, #4]
  40b126:	681a      	ldr	r2, [r3, #0]
  40b128:	687b      	ldr	r3, [r7, #4]
  40b12a:	691b      	ldr	r3, [r3, #16]
  40b12c:	4619      	mov	r1, r3
  40b12e:	4610      	mov	r0, r2
  40b130:	4b5d      	ldr	r3, [pc, #372]	; (40b2a8 <dir_register+0x27c>)
  40b132:	4798      	blx	r3
  40b134:	4603      	mov	r3, r0
  40b136:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res != FR_OK) break;
  40b13a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  40b13e:	2b00      	cmp	r3, #0
  40b140:	d125      	bne.n	40b18e <dir_register+0x162>
		c = *dj->dir;				/* Check the entry status */
  40b142:	687b      	ldr	r3, [r7, #4]
  40b144:	695b      	ldr	r3, [r3, #20]
  40b146:	781b      	ldrb	r3, [r3, #0]
  40b148:	77fb      	strb	r3, [r7, #31]
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
  40b14a:	7ffb      	ldrb	r3, [r7, #31]
  40b14c:	2be5      	cmp	r3, #229	; 0xe5
  40b14e:	d002      	beq.n	40b156 <dir_register+0x12a>
  40b150:	7ffb      	ldrb	r3, [r7, #31]
  40b152:	2b00      	cmp	r3, #0
  40b154:	d10d      	bne.n	40b172 <dir_register+0x146>
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
  40b156:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
  40b158:	2b00      	cmp	r3, #0
  40b15a:	d102      	bne.n	40b162 <dir_register+0x136>
  40b15c:	687b      	ldr	r3, [r7, #4]
  40b15e:	88db      	ldrh	r3, [r3, #6]
  40b160:	853b      	strh	r3, [r7, #40]	; 0x28
			if (++n == ne) break;	/* A contiguous entry that required count is found */
  40b162:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
  40b164:	3301      	adds	r3, #1
  40b166:	85bb      	strh	r3, [r7, #44]	; 0x2c
  40b168:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
  40b16a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
  40b16c:	429a      	cmp	r2, r3
  40b16e:	d102      	bne.n	40b176 <dir_register+0x14a>
  40b170:	e00e      	b.n	40b190 <dir_register+0x164>
		} else {
			n = 0;					/* Not a blank entry. Restart to search */
  40b172:	2300      	movs	r3, #0
  40b174:	85bb      	strh	r3, [r7, #44]	; 0x2c
		}
		res = dir_next(dj, 1);		/* Next entry with table stretch */
  40b176:	2101      	movs	r1, #1
  40b178:	6878      	ldr	r0, [r7, #4]
  40b17a:	4b4c      	ldr	r3, [pc, #304]	; (40b2ac <dir_register+0x280>)
  40b17c:	4798      	blx	r3
  40b17e:	4603      	mov	r3, r0
  40b180:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	} while (res == FR_OK);
  40b184:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  40b188:	2b00      	cmp	r3, #0
  40b18a:	d0cb      	beq.n	40b124 <dir_register+0xf8>
  40b18c:	e000      	b.n	40b190 <dir_register+0x164>
		if (res != FR_OK) break;
  40b18e:	bf00      	nop

	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
  40b190:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  40b194:	2b00      	cmp	r3, #0
  40b196:	d147      	bne.n	40b228 <dir_register+0x1fc>
  40b198:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
  40b19a:	2b01      	cmp	r3, #1
  40b19c:	d944      	bls.n	40b228 <dir_register+0x1fc>
		res = dir_sdi(dj, is);
  40b19e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
  40b1a0:	4619      	mov	r1, r3
  40b1a2:	6878      	ldr	r0, [r7, #4]
  40b1a4:	4b3f      	ldr	r3, [pc, #252]	; (40b2a4 <dir_register+0x278>)
  40b1a6:	4798      	blx	r3
  40b1a8:	4603      	mov	r3, r0
  40b1aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
  40b1ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  40b1b2:	2b00      	cmp	r3, #0
  40b1b4:	d138      	bne.n	40b228 <dir_register+0x1fc>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
  40b1b6:	687b      	ldr	r3, [r7, #4]
  40b1b8:	699b      	ldr	r3, [r3, #24]
  40b1ba:	4618      	mov	r0, r3
  40b1bc:	4b3c      	ldr	r3, [pc, #240]	; (40b2b0 <dir_register+0x284>)
  40b1be:	4798      	blx	r3
  40b1c0:	4603      	mov	r3, r0
  40b1c2:	77bb      	strb	r3, [r7, #30]
			ne--;
  40b1c4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
  40b1c6:	3b01      	subs	r3, #1
  40b1c8:	857b      	strh	r3, [r7, #42]	; 0x2a
			do {					/* Store LFN entries in bottom first */
				res = move_window(dj->fs, dj->sect);
  40b1ca:	687b      	ldr	r3, [r7, #4]
  40b1cc:	681a      	ldr	r2, [r3, #0]
  40b1ce:	687b      	ldr	r3, [r7, #4]
  40b1d0:	691b      	ldr	r3, [r3, #16]
  40b1d2:	4619      	mov	r1, r3
  40b1d4:	4610      	mov	r0, r2
  40b1d6:	4b34      	ldr	r3, [pc, #208]	; (40b2a8 <dir_register+0x27c>)
  40b1d8:	4798      	blx	r3
  40b1da:	4603      	mov	r3, r0
  40b1dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
  40b1e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  40b1e4:	2b00      	cmp	r3, #0
  40b1e6:	d11e      	bne.n	40b226 <dir_register+0x1fa>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
  40b1e8:	687b      	ldr	r3, [r7, #4]
  40b1ea:	69d8      	ldr	r0, [r3, #28]
  40b1ec:	687b      	ldr	r3, [r7, #4]
  40b1ee:	6959      	ldr	r1, [r3, #20]
  40b1f0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
  40b1f2:	b2da      	uxtb	r2, r3
  40b1f4:	7fbb      	ldrb	r3, [r7, #30]
  40b1f6:	4c2f      	ldr	r4, [pc, #188]	; (40b2b4 <dir_register+0x288>)
  40b1f8:	47a0      	blx	r4
				dj->fs->wflag = 1;
  40b1fa:	687b      	ldr	r3, [r7, #4]
  40b1fc:	681b      	ldr	r3, [r3, #0]
  40b1fe:	2201      	movs	r2, #1
  40b200:	711a      	strb	r2, [r3, #4]
				res = dir_next(dj, 0);	/* Next entry */
  40b202:	2100      	movs	r1, #0
  40b204:	6878      	ldr	r0, [r7, #4]
  40b206:	4b29      	ldr	r3, [pc, #164]	; (40b2ac <dir_register+0x280>)
  40b208:	4798      	blx	r3
  40b20a:	4603      	mov	r3, r0
  40b20c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --ne);
  40b210:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  40b214:	2b00      	cmp	r3, #0
  40b216:	d107      	bne.n	40b228 <dir_register+0x1fc>
  40b218:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
  40b21a:	3b01      	subs	r3, #1
  40b21c:	857b      	strh	r3, [r7, #42]	; 0x2a
  40b21e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
  40b220:	2b00      	cmp	r3, #0
  40b222:	d1d2      	bne.n	40b1ca <dir_register+0x19e>
  40b224:	e000      	b.n	40b228 <dir_register+0x1fc>
				if (res != FR_OK) break;
  40b226:	bf00      	nop
			res = dir_next(dj, 1);			/* Next entry with table stretch */
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
  40b228:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  40b22c:	2b00      	cmp	r3, #0
  40b22e:	d12b      	bne.n	40b288 <dir_register+0x25c>
		res = move_window(dj->fs, dj->sect);
  40b230:	687b      	ldr	r3, [r7, #4]
  40b232:	681a      	ldr	r2, [r3, #0]
  40b234:	687b      	ldr	r3, [r7, #4]
  40b236:	691b      	ldr	r3, [r3, #16]
  40b238:	4619      	mov	r1, r3
  40b23a:	4610      	mov	r0, r2
  40b23c:	4b1a      	ldr	r3, [pc, #104]	; (40b2a8 <dir_register+0x27c>)
  40b23e:	4798      	blx	r3
  40b240:	4603      	mov	r3, r0
  40b242:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
  40b246:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  40b24a:	2b00      	cmp	r3, #0
  40b24c:	d11c      	bne.n	40b288 <dir_register+0x25c>
			dir = dj->dir;
  40b24e:	687b      	ldr	r3, [r7, #4]
  40b250:	695b      	ldr	r3, [r3, #20]
  40b252:	61bb      	str	r3, [r7, #24]
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
  40b254:	2220      	movs	r2, #32
  40b256:	2100      	movs	r1, #0
  40b258:	69b8      	ldr	r0, [r7, #24]
  40b25a:	4b17      	ldr	r3, [pc, #92]	; (40b2b8 <dir_register+0x28c>)
  40b25c:	4798      	blx	r3
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
  40b25e:	687b      	ldr	r3, [r7, #4]
  40b260:	699b      	ldr	r3, [r3, #24]
  40b262:	220b      	movs	r2, #11
  40b264:	4619      	mov	r1, r3
  40b266:	69b8      	ldr	r0, [r7, #24]
  40b268:	4b0a      	ldr	r3, [pc, #40]	; (40b294 <dir_register+0x268>)
  40b26a:	4798      	blx	r3
#if _USE_LFN
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
  40b26c:	69bb      	ldr	r3, [r7, #24]
  40b26e:	330c      	adds	r3, #12
  40b270:	687a      	ldr	r2, [r7, #4]
  40b272:	6992      	ldr	r2, [r2, #24]
  40b274:	320b      	adds	r2, #11
  40b276:	7812      	ldrb	r2, [r2, #0]
  40b278:	f002 0218 	and.w	r2, r2, #24
  40b27c:	b2d2      	uxtb	r2, r2
  40b27e:	701a      	strb	r2, [r3, #0]
#endif
			dj->fs->wflag = 1;
  40b280:	687b      	ldr	r3, [r7, #4]
  40b282:	681b      	ldr	r3, [r3, #0]
  40b284:	2201      	movs	r2, #1
  40b286:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
  40b288:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
  40b28c:	4618      	mov	r0, r3
  40b28e:	3734      	adds	r7, #52	; 0x34
  40b290:	46bd      	mov	sp, r7
  40b292:	bd90      	pop	{r4, r7, pc}
  40b294:	0040a08d 	.word	0x0040a08d
  40b298:	0040ad91 	.word	0x0040ad91
  40b29c:	0040aebd 	.word	0x0040aebd
  40b2a0:	4ec4ec4f 	.word	0x4ec4ec4f
  40b2a4:	0040a8fd 	.word	0x0040a8fd
  40b2a8:	0040a181 	.word	0x0040a181
  40b2ac:	0040aa09 	.word	0x0040aa09
  40b2b0:	0040ae79 	.word	0x0040ae79
  40b2b4:	0040aca5 	.word	0x0040aca5
  40b2b8:	0040a0c9 	.word	0x0040a0c9

0040b2bc <create_name>:
static
FRESULT create_name (
	DIR *dj,			/* Pointer to the directory object */
	const TCHAR **path	/* Pointer to pointer to the segment in the path string */
)
{
  40b2bc:	b580      	push	{r7, lr}
  40b2be:	b08a      	sub	sp, #40	; 0x28
  40b2c0:	af00      	add	r7, sp, #0
  40b2c2:	6078      	str	r0, [r7, #4]
  40b2c4:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
  40b2c6:	683b      	ldr	r3, [r7, #0]
  40b2c8:	681b      	ldr	r3, [r3, #0]
  40b2ca:	613b      	str	r3, [r7, #16]
  40b2cc:	e002      	b.n	40b2d4 <create_name+0x18>
  40b2ce:	693b      	ldr	r3, [r7, #16]
  40b2d0:	3301      	adds	r3, #1
  40b2d2:	613b      	str	r3, [r7, #16]
  40b2d4:	693b      	ldr	r3, [r7, #16]
  40b2d6:	781b      	ldrb	r3, [r3, #0]
  40b2d8:	2b2f      	cmp	r3, #47	; 0x2f
  40b2da:	d0f8      	beq.n	40b2ce <create_name+0x12>
  40b2dc:	693b      	ldr	r3, [r7, #16]
  40b2de:	781b      	ldrb	r3, [r3, #0]
  40b2e0:	2b5c      	cmp	r3, #92	; 0x5c
  40b2e2:	d0f4      	beq.n	40b2ce <create_name+0x12>
	lfn = dj->lfn;
  40b2e4:	687b      	ldr	r3, [r7, #4]
  40b2e6:	69db      	ldr	r3, [r3, #28]
  40b2e8:	60fb      	str	r3, [r7, #12]
	si = di = 0;
  40b2ea:	2300      	movs	r3, #0
  40b2ec:	617b      	str	r3, [r7, #20]
  40b2ee:	697b      	ldr	r3, [r7, #20]
  40b2f0:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
  40b2f2:	69bb      	ldr	r3, [r7, #24]
  40b2f4:	1c5a      	adds	r2, r3, #1
  40b2f6:	61ba      	str	r2, [r7, #24]
  40b2f8:	693a      	ldr	r2, [r7, #16]
  40b2fa:	4413      	add	r3, r2
  40b2fc:	781b      	ldrb	r3, [r3, #0]
  40b2fe:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
  40b300:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  40b302:	2b1f      	cmp	r3, #31
  40b304:	d92f      	bls.n	40b366 <create_name+0xaa>
  40b306:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  40b308:	2b2f      	cmp	r3, #47	; 0x2f
  40b30a:	d02c      	beq.n	40b366 <create_name+0xaa>
  40b30c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  40b30e:	2b5c      	cmp	r3, #92	; 0x5c
  40b310:	d029      	beq.n	40b366 <create_name+0xaa>
		if (di >= _MAX_LFN)				/* Reject too long name */
  40b312:	697b      	ldr	r3, [r7, #20]
  40b314:	2bfe      	cmp	r3, #254	; 0xfe
  40b316:	d901      	bls.n	40b31c <create_name+0x60>
			return FR_INVALID_NAME;
  40b318:	2306      	movs	r3, #6
  40b31a:	e182      	b.n	40b622 <create_name+0x366>
#if !_LFN_UNICODE
		w &= 0xFF;
  40b31c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  40b31e:	b2db      	uxtb	r3, r3
  40b320:	84bb      	strh	r3, [r7, #36]	; 0x24
			b = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
			w = (w << 8) + b;			/* Create a DBC */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
  40b322:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  40b324:	2101      	movs	r1, #1
  40b326:	4618      	mov	r0, r3
  40b328:	4b93      	ldr	r3, [pc, #588]	; (40b578 <create_name+0x2bc>)
  40b32a:	4798      	blx	r3
  40b32c:	4603      	mov	r3, r0
  40b32e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
  40b330:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  40b332:	2b00      	cmp	r3, #0
  40b334:	d101      	bne.n	40b33a <create_name+0x7e>
  40b336:	2306      	movs	r3, #6
  40b338:	e173      	b.n	40b622 <create_name+0x366>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
  40b33a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  40b33c:	2b7f      	cmp	r3, #127	; 0x7f
  40b33e:	d809      	bhi.n	40b354 <create_name+0x98>
  40b340:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  40b342:	4619      	mov	r1, r3
  40b344:	488d      	ldr	r0, [pc, #564]	; (40b57c <create_name+0x2c0>)
  40b346:	4b8e      	ldr	r3, [pc, #568]	; (40b580 <create_name+0x2c4>)
  40b348:	4798      	blx	r3
  40b34a:	4603      	mov	r3, r0
  40b34c:	2b00      	cmp	r3, #0
  40b34e:	d001      	beq.n	40b354 <create_name+0x98>
			return FR_INVALID_NAME;
  40b350:	2306      	movs	r3, #6
  40b352:	e166      	b.n	40b622 <create_name+0x366>
		lfn[di++] = w;					/* Store the Unicode char */
  40b354:	697b      	ldr	r3, [r7, #20]
  40b356:	1c5a      	adds	r2, r3, #1
  40b358:	617a      	str	r2, [r7, #20]
  40b35a:	005b      	lsls	r3, r3, #1
  40b35c:	68fa      	ldr	r2, [r7, #12]
  40b35e:	4413      	add	r3, r2
  40b360:	8cba      	ldrh	r2, [r7, #36]	; 0x24
  40b362:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
  40b364:	e7c5      	b.n	40b2f2 <create_name+0x36>
	}
	*path = &p[si];						/* Return pointer to the next segment */
  40b366:	693a      	ldr	r2, [r7, #16]
  40b368:	69bb      	ldr	r3, [r7, #24]
  40b36a:	441a      	add	r2, r3
  40b36c:	683b      	ldr	r3, [r7, #0]
  40b36e:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
  40b370:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  40b372:	2b1f      	cmp	r3, #31
  40b374:	d801      	bhi.n	40b37a <create_name+0xbe>
  40b376:	2304      	movs	r3, #4
  40b378:	e000      	b.n	40b37c <create_name+0xc0>
  40b37a:	2300      	movs	r3, #0
  40b37c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			dj->fn[i] = (i < di) ? '.' : ' ';
		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
  40b380:	e011      	b.n	40b3a6 <create_name+0xea>
		w = lfn[di-1];
  40b382:	697b      	ldr	r3, [r7, #20]
  40b384:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  40b388:	3b01      	subs	r3, #1
  40b38a:	005b      	lsls	r3, r3, #1
  40b38c:	68fa      	ldr	r2, [r7, #12]
  40b38e:	4413      	add	r3, r2
  40b390:	881b      	ldrh	r3, [r3, #0]
  40b392:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
  40b394:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  40b396:	2b20      	cmp	r3, #32
  40b398:	d002      	beq.n	40b3a0 <create_name+0xe4>
  40b39a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  40b39c:	2b2e      	cmp	r3, #46	; 0x2e
  40b39e:	d106      	bne.n	40b3ae <create_name+0xf2>
		di--;
  40b3a0:	697b      	ldr	r3, [r7, #20]
  40b3a2:	3b01      	subs	r3, #1
  40b3a4:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
  40b3a6:	697b      	ldr	r3, [r7, #20]
  40b3a8:	2b00      	cmp	r3, #0
  40b3aa:	d1ea      	bne.n	40b382 <create_name+0xc6>
  40b3ac:	e000      	b.n	40b3b0 <create_name+0xf4>
		if (w != ' ' && w != '.') break;
  40b3ae:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
  40b3b0:	697b      	ldr	r3, [r7, #20]
  40b3b2:	2b00      	cmp	r3, #0
  40b3b4:	d101      	bne.n	40b3ba <create_name+0xfe>
  40b3b6:	2306      	movs	r3, #6
  40b3b8:	e133      	b.n	40b622 <create_name+0x366>

	lfn[di] = 0;						/* LFN is created */
  40b3ba:	697b      	ldr	r3, [r7, #20]
  40b3bc:	005b      	lsls	r3, r3, #1
  40b3be:	68fa      	ldr	r2, [r7, #12]
  40b3c0:	4413      	add	r3, r2
  40b3c2:	2200      	movs	r2, #0
  40b3c4:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dj->fn, ' ', 11);
  40b3c6:	687b      	ldr	r3, [r7, #4]
  40b3c8:	699b      	ldr	r3, [r3, #24]
  40b3ca:	220b      	movs	r2, #11
  40b3cc:	2120      	movs	r1, #32
  40b3ce:	4618      	mov	r0, r3
  40b3d0:	4b6c      	ldr	r3, [pc, #432]	; (40b584 <create_name+0x2c8>)
  40b3d2:	4798      	blx	r3
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
  40b3d4:	2300      	movs	r3, #0
  40b3d6:	61bb      	str	r3, [r7, #24]
  40b3d8:	e002      	b.n	40b3e0 <create_name+0x124>
  40b3da:	69bb      	ldr	r3, [r7, #24]
  40b3dc:	3301      	adds	r3, #1
  40b3de:	61bb      	str	r3, [r7, #24]
  40b3e0:	69bb      	ldr	r3, [r7, #24]
  40b3e2:	005b      	lsls	r3, r3, #1
  40b3e4:	68fa      	ldr	r2, [r7, #12]
  40b3e6:	4413      	add	r3, r2
  40b3e8:	881b      	ldrh	r3, [r3, #0]
  40b3ea:	2b20      	cmp	r3, #32
  40b3ec:	d0f5      	beq.n	40b3da <create_name+0x11e>
  40b3ee:	69bb      	ldr	r3, [r7, #24]
  40b3f0:	005b      	lsls	r3, r3, #1
  40b3f2:	68fa      	ldr	r2, [r7, #12]
  40b3f4:	4413      	add	r3, r2
  40b3f6:	881b      	ldrh	r3, [r3, #0]
  40b3f8:	2b2e      	cmp	r3, #46	; 0x2e
  40b3fa:	d0ee      	beq.n	40b3da <create_name+0x11e>
	if (si) cf |= NS_LOSS | NS_LFN;
  40b3fc:	69bb      	ldr	r3, [r7, #24]
  40b3fe:	2b00      	cmp	r3, #0
  40b400:	d009      	beq.n	40b416 <create_name+0x15a>
  40b402:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
  40b406:	f043 0303 	orr.w	r3, r3, #3
  40b40a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
  40b40e:	e002      	b.n	40b416 <create_name+0x15a>
  40b410:	697b      	ldr	r3, [r7, #20]
  40b412:	3b01      	subs	r3, #1
  40b414:	617b      	str	r3, [r7, #20]
  40b416:	697b      	ldr	r3, [r7, #20]
  40b418:	2b00      	cmp	r3, #0
  40b41a:	d009      	beq.n	40b430 <create_name+0x174>
  40b41c:	697b      	ldr	r3, [r7, #20]
  40b41e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  40b422:	3b01      	subs	r3, #1
  40b424:	005b      	lsls	r3, r3, #1
  40b426:	68fa      	ldr	r2, [r7, #12]
  40b428:	4413      	add	r3, r2
  40b42a:	881b      	ldrh	r3, [r3, #0]
  40b42c:	2b2e      	cmp	r3, #46	; 0x2e
  40b42e:	d1ef      	bne.n	40b410 <create_name+0x154>

	b = i = 0; ni = 8;
  40b430:	2300      	movs	r3, #0
  40b432:	623b      	str	r3, [r7, #32]
  40b434:	2300      	movs	r3, #0
  40b436:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  40b43a:	2308      	movs	r3, #8
  40b43c:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN char */
  40b43e:	69bb      	ldr	r3, [r7, #24]
  40b440:	1c5a      	adds	r2, r3, #1
  40b442:	61ba      	str	r2, [r7, #24]
  40b444:	005b      	lsls	r3, r3, #1
  40b446:	68fa      	ldr	r2, [r7, #12]
  40b448:	4413      	add	r3, r2
  40b44a:	881b      	ldrh	r3, [r3, #0]
  40b44c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
  40b44e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  40b450:	2b00      	cmp	r3, #0
  40b452:	f000 808f 	beq.w	40b574 <create_name+0x2b8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
  40b456:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  40b458:	2b20      	cmp	r3, #32
  40b45a:	d006      	beq.n	40b46a <create_name+0x1ae>
  40b45c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  40b45e:	2b2e      	cmp	r3, #46	; 0x2e
  40b460:	d10a      	bne.n	40b478 <create_name+0x1bc>
  40b462:	69ba      	ldr	r2, [r7, #24]
  40b464:	697b      	ldr	r3, [r7, #20]
  40b466:	429a      	cmp	r2, r3
  40b468:	d006      	beq.n	40b478 <create_name+0x1bc>
			cf |= NS_LOSS | NS_LFN; continue;
  40b46a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
  40b46e:	f043 0303 	orr.w	r3, r3, #3
  40b472:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  40b476:	e07c      	b.n	40b572 <create_name+0x2b6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
  40b478:	6a3a      	ldr	r2, [r7, #32]
  40b47a:	69fb      	ldr	r3, [r7, #28]
  40b47c:	429a      	cmp	r2, r3
  40b47e:	d203      	bcs.n	40b488 <create_name+0x1cc>
  40b480:	69ba      	ldr	r2, [r7, #24]
  40b482:	697b      	ldr	r3, [r7, #20]
  40b484:	429a      	cmp	r2, r3
  40b486:	d123      	bne.n	40b4d0 <create_name+0x214>
			if (ni == 11) {				/* Long extension */
  40b488:	69fb      	ldr	r3, [r7, #28]
  40b48a:	2b0b      	cmp	r3, #11
  40b48c:	d106      	bne.n	40b49c <create_name+0x1e0>
				cf |= NS_LOSS | NS_LFN; break;
  40b48e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
  40b492:	f043 0303 	orr.w	r3, r3, #3
  40b496:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  40b49a:	e07a      	b.n	40b592 <create_name+0x2d6>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
  40b49c:	69ba      	ldr	r2, [r7, #24]
  40b49e:	697b      	ldr	r3, [r7, #20]
  40b4a0:	429a      	cmp	r2, r3
  40b4a2:	d005      	beq.n	40b4b0 <create_name+0x1f4>
  40b4a4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
  40b4a8:	f043 0303 	orr.w	r3, r3, #3
  40b4ac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			if (si > di) break;			/* No extension */
  40b4b0:	69ba      	ldr	r2, [r7, #24]
  40b4b2:	697b      	ldr	r3, [r7, #20]
  40b4b4:	429a      	cmp	r2, r3
  40b4b6:	d86b      	bhi.n	40b590 <create_name+0x2d4>
			si = di; i = 8; ni = 11;	/* Enter extension section */
  40b4b8:	697b      	ldr	r3, [r7, #20]
  40b4ba:	61bb      	str	r3, [r7, #24]
  40b4bc:	2308      	movs	r3, #8
  40b4be:	623b      	str	r3, [r7, #32]
  40b4c0:	230b      	movs	r3, #11
  40b4c2:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
  40b4c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  40b4c8:	009b      	lsls	r3, r3, #2
  40b4ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  40b4ce:	e050      	b.n	40b572 <create_name+0x2b6>
		}

		if (w >= 0x80) {				/* Non ASCII char */
  40b4d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  40b4d2:	2b7f      	cmp	r3, #127	; 0x7f
  40b4d4:	d914      	bls.n	40b500 <create_name+0x244>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
  40b4d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  40b4d8:	2100      	movs	r1, #0
  40b4da:	4618      	mov	r0, r3
  40b4dc:	4b26      	ldr	r3, [pc, #152]	; (40b578 <create_name+0x2bc>)
  40b4de:	4798      	blx	r3
  40b4e0:	4603      	mov	r3, r0
  40b4e2:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
  40b4e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  40b4e6:	2b00      	cmp	r3, #0
  40b4e8:	d004      	beq.n	40b4f4 <create_name+0x238>
  40b4ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  40b4ec:	3b80      	subs	r3, #128	; 0x80
  40b4ee:	4a26      	ldr	r2, [pc, #152]	; (40b588 <create_name+0x2cc>)
  40b4f0:	5cd3      	ldrb	r3, [r2, r3]
  40b4f2:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
  40b4f4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
  40b4f8:	f043 0302 	orr.w	r3, r3, #2
  40b4fc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dj->fn[i++] = (BYTE)(w >> 8);
		} else {						/* Single byte char */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
  40b500:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  40b502:	2b00      	cmp	r3, #0
  40b504:	d007      	beq.n	40b516 <create_name+0x25a>
  40b506:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  40b508:	4619      	mov	r1, r3
  40b50a:	4820      	ldr	r0, [pc, #128]	; (40b58c <create_name+0x2d0>)
  40b50c:	4b1c      	ldr	r3, [pc, #112]	; (40b580 <create_name+0x2c4>)
  40b50e:	4798      	blx	r3
  40b510:	4603      	mov	r3, r0
  40b512:	2b00      	cmp	r3, #0
  40b514:	d008      	beq.n	40b528 <create_name+0x26c>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
  40b516:	235f      	movs	r3, #95	; 0x5f
  40b518:	84bb      	strh	r3, [r7, #36]	; 0x24
  40b51a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
  40b51e:	f043 0303 	orr.w	r3, r3, #3
  40b522:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  40b526:	e01b      	b.n	40b560 <create_name+0x2a4>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
  40b528:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  40b52a:	2b40      	cmp	r3, #64	; 0x40
  40b52c:	d909      	bls.n	40b542 <create_name+0x286>
  40b52e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  40b530:	2b5a      	cmp	r3, #90	; 0x5a
  40b532:	d806      	bhi.n	40b542 <create_name+0x286>
					b |= 2;
  40b534:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  40b538:	f043 0302 	orr.w	r3, r3, #2
  40b53c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  40b540:	e00e      	b.n	40b560 <create_name+0x2a4>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
  40b542:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  40b544:	2b60      	cmp	r3, #96	; 0x60
  40b546:	d90b      	bls.n	40b560 <create_name+0x2a4>
  40b548:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  40b54a:	2b7a      	cmp	r3, #122	; 0x7a
  40b54c:	d808      	bhi.n	40b560 <create_name+0x2a4>
						b |= 1; w -= 0x20;
  40b54e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  40b552:	f043 0301 	orr.w	r3, r3, #1
  40b556:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  40b55a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  40b55c:	3b20      	subs	r3, #32
  40b55e:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dj->fn[i++] = (BYTE)w;
  40b560:	687b      	ldr	r3, [r7, #4]
  40b562:	699a      	ldr	r2, [r3, #24]
  40b564:	6a3b      	ldr	r3, [r7, #32]
  40b566:	1c59      	adds	r1, r3, #1
  40b568:	6239      	str	r1, [r7, #32]
  40b56a:	4413      	add	r3, r2
  40b56c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
  40b56e:	b2d2      	uxtb	r2, r2
  40b570:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN char */
  40b572:	e764      	b.n	40b43e <create_name+0x182>
		if (!w) break;					/* Break on end of the LFN */
  40b574:	bf00      	nop
  40b576:	e00c      	b.n	40b592 <create_name+0x2d6>
  40b578:	0040d081 	.word	0x0040d081
  40b57c:	004110ec 	.word	0x004110ec
  40b580:	0040a14b 	.word	0x0040a14b
  40b584:	0040a0c9 	.word	0x0040a0c9
  40b588:	00411134 	.word	0x00411134
  40b58c:	004110f8 	.word	0x004110f8
			if (si > di) break;			/* No extension */
  40b590:	bf00      	nop
	}

	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
  40b592:	687b      	ldr	r3, [r7, #4]
  40b594:	699b      	ldr	r3, [r3, #24]
  40b596:	781b      	ldrb	r3, [r3, #0]
  40b598:	2be5      	cmp	r3, #229	; 0xe5
  40b59a:	d103      	bne.n	40b5a4 <create_name+0x2e8>
  40b59c:	687b      	ldr	r3, [r7, #4]
  40b59e:	699b      	ldr	r3, [r3, #24]
  40b5a0:	2205      	movs	r2, #5
  40b5a2:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
  40b5a4:	69fb      	ldr	r3, [r7, #28]
  40b5a6:	2b08      	cmp	r3, #8
  40b5a8:	d104      	bne.n	40b5b4 <create_name+0x2f8>
  40b5aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  40b5ae:	009b      	lsls	r3, r3, #2
  40b5b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
  40b5b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  40b5b8:	f003 030c 	and.w	r3, r3, #12
  40b5bc:	2b0c      	cmp	r3, #12
  40b5be:	d005      	beq.n	40b5cc <create_name+0x310>
  40b5c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  40b5c4:	f003 0303 	and.w	r3, r3, #3
  40b5c8:	2b03      	cmp	r3, #3
  40b5ca:	d105      	bne.n	40b5d8 <create_name+0x31c>
		cf |= NS_LFN;
  40b5cc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
  40b5d0:	f043 0302 	orr.w	r3, r3, #2
  40b5d4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
  40b5d8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
  40b5dc:	f003 0302 	and.w	r3, r3, #2
  40b5e0:	2b00      	cmp	r3, #0
  40b5e2:	d117      	bne.n	40b614 <create_name+0x358>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
  40b5e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  40b5e8:	f003 0303 	and.w	r3, r3, #3
  40b5ec:	2b01      	cmp	r3, #1
  40b5ee:	d105      	bne.n	40b5fc <create_name+0x340>
  40b5f0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
  40b5f4:	f043 0310 	orr.w	r3, r3, #16
  40b5f8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
  40b5fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  40b600:	f003 030c 	and.w	r3, r3, #12
  40b604:	2b04      	cmp	r3, #4
  40b606:	d105      	bne.n	40b614 <create_name+0x358>
  40b608:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
  40b60c:	f043 0308 	orr.w	r3, r3, #8
  40b610:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	}

	dj->fn[NS] = cf;	/* SFN is created */
  40b614:	687b      	ldr	r3, [r7, #4]
  40b616:	699b      	ldr	r3, [r3, #24]
  40b618:	330b      	adds	r3, #11
  40b61a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
  40b61e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
  40b620:	2300      	movs	r3, #0

	sfn[NS] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
  40b622:	4618      	mov	r0, r3
  40b624:	3728      	adds	r7, #40	; 0x28
  40b626:	46bd      	mov	sp, r7
  40b628:	bd80      	pop	{r7, pc}
  40b62a:	bf00      	nop

0040b62c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const TCHAR *path	/* Full-path string to find a file or directory */
)
{
  40b62c:	b580      	push	{r7, lr}
  40b62e:	b084      	sub	sp, #16
  40b630:	af00      	add	r7, sp, #0
  40b632:	6078      	str	r0, [r7, #4]
  40b634:	6039      	str	r1, [r7, #0]
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
  40b636:	683b      	ldr	r3, [r7, #0]
  40b638:	781b      	ldrb	r3, [r3, #0]
  40b63a:	2b2f      	cmp	r3, #47	; 0x2f
  40b63c:	d003      	beq.n	40b646 <follow_path+0x1a>
  40b63e:	683b      	ldr	r3, [r7, #0]
  40b640:	781b      	ldrb	r3, [r3, #0]
  40b642:	2b5c      	cmp	r3, #92	; 0x5c
  40b644:	d102      	bne.n	40b64c <follow_path+0x20>
		path++;
  40b646:	683b      	ldr	r3, [r7, #0]
  40b648:	3301      	adds	r3, #1
  40b64a:	603b      	str	r3, [r7, #0]
	dj->sclust = 0;						/* Start from the root dir */
  40b64c:	687b      	ldr	r3, [r7, #4]
  40b64e:	2200      	movs	r2, #0
  40b650:	609a      	str	r2, [r3, #8]
#endif

	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
  40b652:	683b      	ldr	r3, [r7, #0]
  40b654:	781b      	ldrb	r3, [r3, #0]
  40b656:	2b1f      	cmp	r3, #31
  40b658:	d809      	bhi.n	40b66e <follow_path+0x42>
		res = dir_sdi(dj, 0);
  40b65a:	2100      	movs	r1, #0
  40b65c:	6878      	ldr	r0, [r7, #4]
  40b65e:	4b32      	ldr	r3, [pc, #200]	; (40b728 <follow_path+0xfc>)
  40b660:	4798      	blx	r3
  40b662:	4603      	mov	r3, r0
  40b664:	73fb      	strb	r3, [r7, #15]
		dj->dir = 0;
  40b666:	687b      	ldr	r3, [r7, #4]
  40b668:	2200      	movs	r2, #0
  40b66a:	615a      	str	r2, [r3, #20]
  40b66c:	e056      	b.n	40b71c <follow_path+0xf0>

	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
  40b66e:	463b      	mov	r3, r7
  40b670:	4619      	mov	r1, r3
  40b672:	6878      	ldr	r0, [r7, #4]
  40b674:	4b2d      	ldr	r3, [pc, #180]	; (40b72c <follow_path+0x100>)
  40b676:	4798      	blx	r3
  40b678:	4603      	mov	r3, r0
  40b67a:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
  40b67c:	7bfb      	ldrb	r3, [r7, #15]
  40b67e:	2b00      	cmp	r3, #0
  40b680:	d145      	bne.n	40b70e <follow_path+0xe2>
			res = dir_find(dj);				/* Find it */
  40b682:	6878      	ldr	r0, [r7, #4]
  40b684:	4b2a      	ldr	r3, [pc, #168]	; (40b730 <follow_path+0x104>)
  40b686:	4798      	blx	r3
  40b688:	4603      	mov	r3, r0
  40b68a:	73fb      	strb	r3, [r7, #15]
			ns = *(dj->fn+NS);
  40b68c:	687b      	ldr	r3, [r7, #4]
  40b68e:	699b      	ldr	r3, [r3, #24]
  40b690:	7adb      	ldrb	r3, [r3, #11]
  40b692:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
  40b694:	7bfb      	ldrb	r3, [r7, #15]
  40b696:	2b00      	cmp	r3, #0
  40b698:	d00a      	beq.n	40b6b0 <follow_path+0x84>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
  40b69a:	7bfb      	ldrb	r3, [r7, #15]
  40b69c:	2b04      	cmp	r3, #4
  40b69e:	d138      	bne.n	40b712 <follow_path+0xe6>
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
					res = FR_OK;
					if (!(ns & NS_LAST)) continue;
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
  40b6a0:	7bbb      	ldrb	r3, [r7, #14]
  40b6a2:	f003 0304 	and.w	r3, r3, #4
  40b6a6:	2b00      	cmp	r3, #0
  40b6a8:	d135      	bne.n	40b716 <follow_path+0xea>
  40b6aa:	2305      	movs	r3, #5
  40b6ac:	73fb      	strb	r3, [r7, #15]
				}
				break;
  40b6ae:	e032      	b.n	40b716 <follow_path+0xea>
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
  40b6b0:	7bbb      	ldrb	r3, [r7, #14]
  40b6b2:	f003 0304 	and.w	r3, r3, #4
  40b6b6:	2b00      	cmp	r3, #0
  40b6b8:	d12f      	bne.n	40b71a <follow_path+0xee>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
  40b6ba:	687b      	ldr	r3, [r7, #4]
  40b6bc:	695b      	ldr	r3, [r3, #20]
  40b6be:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
  40b6c0:	68bb      	ldr	r3, [r7, #8]
  40b6c2:	330b      	adds	r3, #11
  40b6c4:	781b      	ldrb	r3, [r3, #0]
  40b6c6:	f003 0310 	and.w	r3, r3, #16
  40b6ca:	2b00      	cmp	r3, #0
  40b6cc:	d102      	bne.n	40b6d4 <follow_path+0xa8>
				res = FR_NO_PATH; break;
  40b6ce:	2305      	movs	r3, #5
  40b6d0:	73fb      	strb	r3, [r7, #15]
  40b6d2:	e023      	b.n	40b71c <follow_path+0xf0>
			}
			dj->sclust = LD_CLUST(dir);
  40b6d4:	68bb      	ldr	r3, [r7, #8]
  40b6d6:	3315      	adds	r3, #21
  40b6d8:	781b      	ldrb	r3, [r3, #0]
  40b6da:	021b      	lsls	r3, r3, #8
  40b6dc:	b21a      	sxth	r2, r3
  40b6de:	68bb      	ldr	r3, [r7, #8]
  40b6e0:	3314      	adds	r3, #20
  40b6e2:	781b      	ldrb	r3, [r3, #0]
  40b6e4:	b21b      	sxth	r3, r3
  40b6e6:	4313      	orrs	r3, r2
  40b6e8:	b21b      	sxth	r3, r3
  40b6ea:	b29b      	uxth	r3, r3
  40b6ec:	041b      	lsls	r3, r3, #16
  40b6ee:	68ba      	ldr	r2, [r7, #8]
  40b6f0:	321b      	adds	r2, #27
  40b6f2:	7812      	ldrb	r2, [r2, #0]
  40b6f4:	0212      	lsls	r2, r2, #8
  40b6f6:	b211      	sxth	r1, r2
  40b6f8:	68ba      	ldr	r2, [r7, #8]
  40b6fa:	321a      	adds	r2, #26
  40b6fc:	7812      	ldrb	r2, [r2, #0]
  40b6fe:	b212      	sxth	r2, r2
  40b700:	430a      	orrs	r2, r1
  40b702:	b212      	sxth	r2, r2
  40b704:	b292      	uxth	r2, r2
  40b706:	431a      	orrs	r2, r3
  40b708:	687b      	ldr	r3, [r7, #4]
  40b70a:	609a      	str	r2, [r3, #8]
			res = create_name(dj, &path);	/* Get a segment */
  40b70c:	e7af      	b.n	40b66e <follow_path+0x42>
			if (res != FR_OK) break;
  40b70e:	bf00      	nop
  40b710:	e004      	b.n	40b71c <follow_path+0xf0>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
  40b712:	bf00      	nop
  40b714:	e002      	b.n	40b71c <follow_path+0xf0>
				break;
  40b716:	bf00      	nop
  40b718:	e000      	b.n	40b71c <follow_path+0xf0>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
  40b71a:	bf00      	nop
		}
	}

	return res;
  40b71c:	7bfb      	ldrb	r3, [r7, #15]
}
  40b71e:	4618      	mov	r0, r3
  40b720:	3710      	adds	r7, #16
  40b722:	46bd      	mov	sp, r7
  40b724:	bd80      	pop	{r7, pc}
  40b726:	bf00      	nop
  40b728:	0040a8fd 	.word	0x0040a8fd
  40b72c:	0040b2bd 	.word	0x0040b2bd
  40b730:	0040aebd 	.word	0x0040aebd

0040b734 <check_fs>:
static
BYTE check_fs (	/* 0:FAT-VBR, 1:Valid BR but not FAT, 2:Not a BR, 3:Disk error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
  40b734:	b590      	push	{r4, r7, lr}
  40b736:	b083      	sub	sp, #12
  40b738:	af00      	add	r7, sp, #0
  40b73a:	6078      	str	r0, [r7, #4]
  40b73c:	6039      	str	r1, [r7, #0]
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
  40b73e:	687b      	ldr	r3, [r7, #4]
  40b740:	7858      	ldrb	r0, [r3, #1]
  40b742:	687b      	ldr	r3, [r7, #4]
  40b744:	f103 0130 	add.w	r1, r3, #48	; 0x30
  40b748:	2301      	movs	r3, #1
  40b74a:	683a      	ldr	r2, [r7, #0]
  40b74c:	4c2a      	ldr	r4, [pc, #168]	; (40b7f8 <check_fs+0xc4>)
  40b74e:	47a0      	blx	r4
  40b750:	4603      	mov	r3, r0
  40b752:	2b00      	cmp	r3, #0
  40b754:	d001      	beq.n	40b75a <check_fs+0x26>
		return 3;
  40b756:	2303      	movs	r3, #3
  40b758:	e04a      	b.n	40b7f0 <check_fs+0xbc>
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
  40b75a:	687b      	ldr	r3, [r7, #4]
  40b75c:	f203 232e 	addw	r3, r3, #558	; 0x22e
  40b760:	3301      	adds	r3, #1
  40b762:	781b      	ldrb	r3, [r3, #0]
  40b764:	021b      	lsls	r3, r3, #8
  40b766:	b21a      	sxth	r2, r3
  40b768:	687b      	ldr	r3, [r7, #4]
  40b76a:	f893 322e 	ldrb.w	r3, [r3, #558]	; 0x22e
  40b76e:	b21b      	sxth	r3, r3
  40b770:	4313      	orrs	r3, r2
  40b772:	b21b      	sxth	r3, r3
  40b774:	4a21      	ldr	r2, [pc, #132]	; (40b7fc <check_fs+0xc8>)
  40b776:	4293      	cmp	r3, r2
  40b778:	d001      	beq.n	40b77e <check_fs+0x4a>
		return 2;
  40b77a:	2302      	movs	r3, #2
  40b77c:	e038      	b.n	40b7f0 <check_fs+0xbc>

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
  40b77e:	687b      	ldr	r3, [r7, #4]
  40b780:	3366      	adds	r3, #102	; 0x66
  40b782:	3303      	adds	r3, #3
  40b784:	781b      	ldrb	r3, [r3, #0]
  40b786:	061a      	lsls	r2, r3, #24
  40b788:	687b      	ldr	r3, [r7, #4]
  40b78a:	3366      	adds	r3, #102	; 0x66
  40b78c:	3302      	adds	r3, #2
  40b78e:	781b      	ldrb	r3, [r3, #0]
  40b790:	041b      	lsls	r3, r3, #16
  40b792:	4313      	orrs	r3, r2
  40b794:	687a      	ldr	r2, [r7, #4]
  40b796:	3266      	adds	r2, #102	; 0x66
  40b798:	3201      	adds	r2, #1
  40b79a:	7812      	ldrb	r2, [r2, #0]
  40b79c:	0212      	lsls	r2, r2, #8
  40b79e:	4313      	orrs	r3, r2
  40b7a0:	687a      	ldr	r2, [r7, #4]
  40b7a2:	f892 2066 	ldrb.w	r2, [r2, #102]	; 0x66
  40b7a6:	4313      	orrs	r3, r2
  40b7a8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  40b7ac:	4a14      	ldr	r2, [pc, #80]	; (40b800 <check_fs+0xcc>)
  40b7ae:	4293      	cmp	r3, r2
  40b7b0:	d101      	bne.n	40b7b6 <check_fs+0x82>
		return 0;
  40b7b2:	2300      	movs	r3, #0
  40b7b4:	e01c      	b.n	40b7f0 <check_fs+0xbc>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
  40b7b6:	687b      	ldr	r3, [r7, #4]
  40b7b8:	3382      	adds	r3, #130	; 0x82
  40b7ba:	3303      	adds	r3, #3
  40b7bc:	781b      	ldrb	r3, [r3, #0]
  40b7be:	061a      	lsls	r2, r3, #24
  40b7c0:	687b      	ldr	r3, [r7, #4]
  40b7c2:	3382      	adds	r3, #130	; 0x82
  40b7c4:	3302      	adds	r3, #2
  40b7c6:	781b      	ldrb	r3, [r3, #0]
  40b7c8:	041b      	lsls	r3, r3, #16
  40b7ca:	4313      	orrs	r3, r2
  40b7cc:	687a      	ldr	r2, [r7, #4]
  40b7ce:	3282      	adds	r2, #130	; 0x82
  40b7d0:	3201      	adds	r2, #1
  40b7d2:	7812      	ldrb	r2, [r2, #0]
  40b7d4:	0212      	lsls	r2, r2, #8
  40b7d6:	4313      	orrs	r3, r2
  40b7d8:	687a      	ldr	r2, [r7, #4]
  40b7da:	f892 2082 	ldrb.w	r2, [r2, #130]	; 0x82
  40b7de:	4313      	orrs	r3, r2
  40b7e0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  40b7e4:	4a06      	ldr	r2, [pc, #24]	; (40b800 <check_fs+0xcc>)
  40b7e6:	4293      	cmp	r3, r2
  40b7e8:	d101      	bne.n	40b7ee <check_fs+0xba>
		return 0;
  40b7ea:	2300      	movs	r3, #0
  40b7ec:	e000      	b.n	40b7f0 <check_fs+0xbc>

	return 1;
  40b7ee:	2301      	movs	r3, #1
}
  40b7f0:	4618      	mov	r0, r3
  40b7f2:	370c      	adds	r7, #12
  40b7f4:	46bd      	mov	sp, r7
  40b7f6:	bd90      	pop	{r4, r7, pc}
  40b7f8:	00409e01 	.word	0x00409e01
  40b7fc:	ffffaa55 	.word	0xffffaa55
  40b800:	00544146 	.word	0x00544146

0040b804 <chk_mounted>:
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
  40b804:	b590      	push	{r4, r7, lr}
  40b806:	b093      	sub	sp, #76	; 0x4c
  40b808:	af00      	add	r7, sp, #0
  40b80a:	60f8      	str	r0, [r7, #12]
  40b80c:	60b9      	str	r1, [r7, #8]
  40b80e:	4613      	mov	r3, r2
  40b810:	71fb      	strb	r3, [r7, #7]
	BYTE fmt, b, pi, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fasize, tsect, sysect, nclst, szbfat;
	WORD nrsv;
	const TCHAR *p = *path;
  40b812:	68fb      	ldr	r3, [r7, #12]
  40b814:	681b      	ldr	r3, [r3, #0]
  40b816:	62fb      	str	r3, [r7, #44]	; 0x2c
	FATFS *fs;

	/* Get logical drive number from the path name */
	vol = p[0] - '0';					/* Is there a drive number? */
  40b818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40b81a:	781b      	ldrb	r3, [r3, #0]
  40b81c:	3b30      	subs	r3, #48	; 0x30
  40b81e:	643b      	str	r3, [r7, #64]	; 0x40
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
  40b820:	6c3b      	ldr	r3, [r7, #64]	; 0x40
  40b822:	2b09      	cmp	r3, #9
  40b824:	d80b      	bhi.n	40b83e <chk_mounted+0x3a>
  40b826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40b828:	3301      	adds	r3, #1
  40b82a:	781b      	ldrb	r3, [r3, #0]
  40b82c:	2b3a      	cmp	r3, #58	; 0x3a
  40b82e:	d106      	bne.n	40b83e <chk_mounted+0x3a>
		p += 2; *path = p;				/* Return pointer to the path name */
  40b830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40b832:	3302      	adds	r3, #2
  40b834:	62fb      	str	r3, [r7, #44]	; 0x2c
  40b836:	68fb      	ldr	r3, [r7, #12]
  40b838:	6afa      	ldr	r2, [r7, #44]	; 0x2c
  40b83a:	601a      	str	r2, [r3, #0]
  40b83c:	e001      	b.n	40b842 <chk_mounted+0x3e>
	} else {							/* No drive number is given */
#if _FS_RPATH
		vol = CurrVol;					/* Use current drive */
#else
		vol = 0;						/* Use drive 0 */
  40b83e:	2300      	movs	r3, #0
  40b840:	643b      	str	r3, [r7, #64]	; 0x40
#endif
	}

	/* Check if the file system object is valid or not */
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
  40b842:	6c3b      	ldr	r3, [r7, #64]	; 0x40
  40b844:	2b07      	cmp	r3, #7
  40b846:	d901      	bls.n	40b84c <chk_mounted+0x48>
		return FR_INVALID_DRIVE;
  40b848:	230b      	movs	r3, #11
  40b84a:	e276      	b.n	40bd3a <chk_mounted+0x536>
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
  40b84c:	4aa8      	ldr	r2, [pc, #672]	; (40baf0 <chk_mounted+0x2ec>)
  40b84e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
  40b850:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  40b854:	62bb      	str	r3, [r7, #40]	; 0x28
  40b856:	68bb      	ldr	r3, [r7, #8]
  40b858:	6aba      	ldr	r2, [r7, #40]	; 0x28
  40b85a:	601a      	str	r2, [r3, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
  40b85c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40b85e:	2b00      	cmp	r3, #0
  40b860:	d101      	bne.n	40b866 <chk_mounted+0x62>
  40b862:	230c      	movs	r3, #12
  40b864:	e269      	b.n	40bd3a <chk_mounted+0x536>

	ENTER_FF(fs);						/* Lock file system */

	if (fs->fs_type) {					/* If the logical drive has been mounted */
  40b866:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40b868:	781b      	ldrb	r3, [r3, #0]
  40b86a:	2b00      	cmp	r3, #0
  40b86c:	d01a      	beq.n	40b8a4 <chk_mounted+0xa0>
		stat = disk_status(fs->drv);
  40b86e:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40b870:	785b      	ldrb	r3, [r3, #1]
  40b872:	4618      	mov	r0, r3
  40b874:	4b9f      	ldr	r3, [pc, #636]	; (40baf4 <chk_mounted+0x2f0>)
  40b876:	4798      	blx	r3
  40b878:	4603      	mov	r3, r0
  40b87a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
  40b87e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  40b882:	f003 0301 	and.w	r3, r3, #1
  40b886:	2b00      	cmp	r3, #0
  40b888:	d10c      	bne.n	40b8a4 <chk_mounted+0xa0>
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
  40b88a:	79fb      	ldrb	r3, [r7, #7]
  40b88c:	2b00      	cmp	r3, #0
  40b88e:	d007      	beq.n	40b8a0 <chk_mounted+0x9c>
  40b890:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  40b894:	f003 0304 	and.w	r3, r3, #4
  40b898:	2b00      	cmp	r3, #0
  40b89a:	d001      	beq.n	40b8a0 <chk_mounted+0x9c>
				return FR_WRITE_PROTECTED;
  40b89c:	230a      	movs	r3, #10
  40b89e:	e24c      	b.n	40bd3a <chk_mounted+0x536>
			return FR_OK;				/* The file system object is valid */
  40b8a0:	2300      	movs	r3, #0
  40b8a2:	e24a      	b.n	40bd3a <chk_mounted+0x536>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
  40b8a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40b8a6:	2200      	movs	r2, #0
  40b8a8:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
  40b8aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
  40b8ac:	b2da      	uxtb	r2, r3
  40b8ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40b8b0:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
  40b8b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40b8b4:	785b      	ldrb	r3, [r3, #1]
  40b8b6:	4618      	mov	r0, r3
  40b8b8:	4b8f      	ldr	r3, [pc, #572]	; (40baf8 <chk_mounted+0x2f4>)
  40b8ba:	4798      	blx	r3
  40b8bc:	4603      	mov	r3, r0
  40b8be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
  40b8c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  40b8c6:	f003 0301 	and.w	r3, r3, #1
  40b8ca:	2b00      	cmp	r3, #0
  40b8cc:	d001      	beq.n	40b8d2 <chk_mounted+0xce>
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
  40b8ce:	2303      	movs	r3, #3
  40b8d0:	e233      	b.n	40bd3a <chk_mounted+0x536>
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
  40b8d2:	79fb      	ldrb	r3, [r7, #7]
  40b8d4:	2b00      	cmp	r3, #0
  40b8d6:	d007      	beq.n	40b8e8 <chk_mounted+0xe4>
  40b8d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  40b8dc:	f003 0304 	and.w	r3, r3, #4
  40b8e0:	2b00      	cmp	r3, #0
  40b8e2:	d001      	beq.n	40b8e8 <chk_mounted+0xe4>
		return FR_WRITE_PROTECTED;
  40b8e4:	230a      	movs	r3, #10
  40b8e6:	e228      	b.n	40bd3a <chk_mounted+0x536>
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
	/* Search FAT partition on the drive. Supports only generic partitionings, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
  40b8e8:	2300      	movs	r3, #0
  40b8ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  40b8ec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
  40b8ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
  40b8f0:	4b82      	ldr	r3, [pc, #520]	; (40bafc <chk_mounted+0x2f8>)
  40b8f2:	4798      	blx	r3
  40b8f4:	4603      	mov	r3, r0
  40b8f6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (LD2PT(vol) && !fmt) fmt = 1;	/* Force non-SFD if the volume is forced partition */
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
  40b8fa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
  40b8fe:	2b01      	cmp	r3, #1
  40b900:	d133      	bne.n	40b96a <chk_mounted+0x166>
		/* Check the partition listed in the partition table */
		pi = LD2PT(vol);
  40b902:	2300      	movs	r3, #0
  40b904:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
		if (pi) pi--;
  40b908:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
  40b90c:	2b00      	cmp	r3, #0
  40b90e:	d004      	beq.n	40b91a <chk_mounted+0x116>
  40b910:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
  40b914:	3b01      	subs	r3, #1
  40b916:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
		tbl = &fs->win[MBR_Table + pi * SZ_PTE];/* Partition table */
  40b91a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
  40b91e:	011b      	lsls	r3, r3, #4
  40b920:	f503 73df 	add.w	r3, r3, #446	; 0x1be
  40b924:	3330      	adds	r3, #48	; 0x30
  40b926:	6aba      	ldr	r2, [r7, #40]	; 0x28
  40b928:	4413      	add	r3, r2
  40b92a:	623b      	str	r3, [r7, #32]
		if (tbl[4]) {						/* Is the partition existing? */
  40b92c:	6a3b      	ldr	r3, [r7, #32]
  40b92e:	3304      	adds	r3, #4
  40b930:	781b      	ldrb	r3, [r3, #0]
  40b932:	2b00      	cmp	r3, #0
  40b934:	d019      	beq.n	40b96a <chk_mounted+0x166>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
  40b936:	6a3b      	ldr	r3, [r7, #32]
  40b938:	330b      	adds	r3, #11
  40b93a:	781b      	ldrb	r3, [r3, #0]
  40b93c:	061a      	lsls	r2, r3, #24
  40b93e:	6a3b      	ldr	r3, [r7, #32]
  40b940:	330a      	adds	r3, #10
  40b942:	781b      	ldrb	r3, [r3, #0]
  40b944:	041b      	lsls	r3, r3, #16
  40b946:	4313      	orrs	r3, r2
  40b948:	6a3a      	ldr	r2, [r7, #32]
  40b94a:	3209      	adds	r2, #9
  40b94c:	7812      	ldrb	r2, [r2, #0]
  40b94e:	0212      	lsls	r2, r2, #8
  40b950:	4313      	orrs	r3, r2
  40b952:	6a3a      	ldr	r2, [r7, #32]
  40b954:	3208      	adds	r2, #8
  40b956:	7812      	ldrb	r2, [r2, #0]
  40b958:	4313      	orrs	r3, r2
  40b95a:	63fb      	str	r3, [r7, #60]	; 0x3c
			fmt = check_fs(fs, bsect);		/* Check the partition */
  40b95c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
  40b95e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
  40b960:	4b66      	ldr	r3, [pc, #408]	; (40bafc <chk_mounted+0x2f8>)
  40b962:	4798      	blx	r3
  40b964:	4603      	mov	r3, r0
  40b966:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
  40b96a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
  40b96e:	2b03      	cmp	r3, #3
  40b970:	d101      	bne.n	40b976 <chk_mounted+0x172>
  40b972:	2301      	movs	r3, #1
  40b974:	e1e1      	b.n	40bd3a <chk_mounted+0x536>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
  40b976:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
  40b97a:	2b00      	cmp	r3, #0
  40b97c:	d001      	beq.n	40b982 <chk_mounted+0x17e>
  40b97e:	230d      	movs	r3, #13
  40b980:	e1db      	b.n	40bd3a <chk_mounted+0x536>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
  40b982:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40b984:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
  40b988:	021b      	lsls	r3, r3, #8
  40b98a:	b21a      	sxth	r2, r3
  40b98c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40b98e:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
  40b992:	b21b      	sxth	r3, r3
  40b994:	4313      	orrs	r3, r2
  40b996:	b21b      	sxth	r3, r3
  40b998:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40b99c:	d001      	beq.n	40b9a2 <chk_mounted+0x19e>
		return FR_NO_FILESYSTEM;
  40b99e:	230d      	movs	r3, #13
  40b9a0:	e1cb      	b.n	40bd3a <chk_mounted+0x536>

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
  40b9a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40b9a4:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
  40b9a8:	021b      	lsls	r3, r3, #8
  40b9aa:	b21a      	sxth	r2, r3
  40b9ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40b9ae:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
  40b9b2:	b21b      	sxth	r3, r3
  40b9b4:	4313      	orrs	r3, r2
  40b9b6:	b21b      	sxth	r3, r3
  40b9b8:	b29b      	uxth	r3, r3
  40b9ba:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
  40b9bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  40b9be:	2b00      	cmp	r3, #0
  40b9c0:	d112      	bne.n	40b9e8 <chk_mounted+0x1e4>
  40b9c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40b9c4:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
  40b9c8:	061a      	lsls	r2, r3, #24
  40b9ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40b9cc:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
  40b9d0:	041b      	lsls	r3, r3, #16
  40b9d2:	4313      	orrs	r3, r2
  40b9d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
  40b9d6:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
  40b9da:	0212      	lsls	r2, r2, #8
  40b9dc:	4313      	orrs	r3, r2
  40b9de:	6aba      	ldr	r2, [r7, #40]	; 0x28
  40b9e0:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
  40b9e4:	4313      	orrs	r3, r2
  40b9e6:	63bb      	str	r3, [r7, #56]	; 0x38
	fs->fsize = fasize;
  40b9e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40b9ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
  40b9ec:	61da      	str	r2, [r3, #28]

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
  40b9ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40b9f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
  40b9f4:	77fb      	strb	r3, [r7, #31]
  40b9f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40b9f8:	7ffa      	ldrb	r2, [r7, #31]
  40b9fa:	70da      	strb	r2, [r3, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
  40b9fc:	7ffb      	ldrb	r3, [r7, #31]
  40b9fe:	2b01      	cmp	r3, #1
  40ba00:	d004      	beq.n	40ba0c <chk_mounted+0x208>
  40ba02:	7ffb      	ldrb	r3, [r7, #31]
  40ba04:	2b02      	cmp	r3, #2
  40ba06:	d001      	beq.n	40ba0c <chk_mounted+0x208>
  40ba08:	230d      	movs	r3, #13
  40ba0a:	e196      	b.n	40bd3a <chk_mounted+0x536>
	fasize *= b;										/* Number of sectors for FAT area */
  40ba0c:	7ffa      	ldrb	r2, [r7, #31]
  40ba0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  40ba10:	fb02 f303 	mul.w	r3, r2, r3
  40ba14:	63bb      	str	r3, [r7, #56]	; 0x38

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
  40ba16:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40ba18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
  40ba1c:	77fb      	strb	r3, [r7, #31]
  40ba1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40ba20:	7ffa      	ldrb	r2, [r7, #31]
  40ba22:	709a      	strb	r2, [r3, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
  40ba24:	7ffb      	ldrb	r3, [r7, #31]
  40ba26:	2b00      	cmp	r3, #0
  40ba28:	d005      	beq.n	40ba36 <chk_mounted+0x232>
  40ba2a:	7ffa      	ldrb	r2, [r7, #31]
  40ba2c:	7ffb      	ldrb	r3, [r7, #31]
  40ba2e:	3b01      	subs	r3, #1
  40ba30:	4013      	ands	r3, r2
  40ba32:	2b00      	cmp	r3, #0
  40ba34:	d001      	beq.n	40ba3a <chk_mounted+0x236>
  40ba36:	230d      	movs	r3, #13
  40ba38:	e17f      	b.n	40bd3a <chk_mounted+0x536>

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
  40ba3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40ba3c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
  40ba40:	021b      	lsls	r3, r3, #8
  40ba42:	b21a      	sxth	r2, r3
  40ba44:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40ba46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
  40ba4a:	b21b      	sxth	r3, r3
  40ba4c:	4313      	orrs	r3, r2
  40ba4e:	b21b      	sxth	r3, r3
  40ba50:	b29a      	uxth	r2, r3
  40ba52:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40ba54:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
  40ba56:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40ba58:	891b      	ldrh	r3, [r3, #8]
  40ba5a:	f003 030f 	and.w	r3, r3, #15
  40ba5e:	b29b      	uxth	r3, r3
  40ba60:	2b00      	cmp	r3, #0
  40ba62:	d001      	beq.n	40ba68 <chk_mounted+0x264>
  40ba64:	230d      	movs	r3, #13
  40ba66:	e168      	b.n	40bd3a <chk_mounted+0x536>

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
  40ba68:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40ba6a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
  40ba6e:	021b      	lsls	r3, r3, #8
  40ba70:	b21a      	sxth	r2, r3
  40ba72:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40ba74:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
  40ba78:	b21b      	sxth	r3, r3
  40ba7a:	4313      	orrs	r3, r2
  40ba7c:	b21b      	sxth	r3, r3
  40ba7e:	b29b      	uxth	r3, r3
  40ba80:	637b      	str	r3, [r7, #52]	; 0x34
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
  40ba82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  40ba84:	2b00      	cmp	r3, #0
  40ba86:	d112      	bne.n	40baae <chk_mounted+0x2aa>
  40ba88:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40ba8a:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
  40ba8e:	061a      	lsls	r2, r3, #24
  40ba90:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40ba92:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
  40ba96:	041b      	lsls	r3, r3, #16
  40ba98:	4313      	orrs	r3, r2
  40ba9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
  40ba9c:	f892 2051 	ldrb.w	r2, [r2, #81]	; 0x51
  40baa0:	0212      	lsls	r2, r2, #8
  40baa2:	4313      	orrs	r3, r2
  40baa4:	6aba      	ldr	r2, [r7, #40]	; 0x28
  40baa6:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
  40baaa:	4313      	orrs	r3, r2
  40baac:	637b      	str	r3, [r7, #52]	; 0x34

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
  40baae:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40bab0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
  40bab4:	021b      	lsls	r3, r3, #8
  40bab6:	b21a      	sxth	r2, r3
  40bab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40baba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
  40babe:	b21b      	sxth	r3, r3
  40bac0:	4313      	orrs	r3, r2
  40bac2:	b21b      	sxth	r3, r3
  40bac4:	83bb      	strh	r3, [r7, #28]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
  40bac6:	8bbb      	ldrh	r3, [r7, #28]
  40bac8:	2b00      	cmp	r3, #0
  40baca:	d101      	bne.n	40bad0 <chk_mounted+0x2cc>
  40bacc:	230d      	movs	r3, #13
  40bace:	e134      	b.n	40bd3a <chk_mounted+0x536>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
  40bad0:	8bba      	ldrh	r2, [r7, #28]
  40bad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  40bad4:	4413      	add	r3, r2
  40bad6:	6aba      	ldr	r2, [r7, #40]	; 0x28
  40bad8:	8912      	ldrh	r2, [r2, #8]
  40bada:	0912      	lsrs	r2, r2, #4
  40badc:	b292      	uxth	r2, r2
  40bade:	4413      	add	r3, r2
  40bae0:	61bb      	str	r3, [r7, #24]
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
  40bae2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
  40bae4:	69bb      	ldr	r3, [r7, #24]
  40bae6:	429a      	cmp	r2, r3
  40bae8:	d20a      	bcs.n	40bb00 <chk_mounted+0x2fc>
  40baea:	230d      	movs	r3, #13
  40baec:	e125      	b.n	40bd3a <chk_mounted+0x536>
  40baee:	bf00      	nop
  40baf0:	2001a334 	.word	0x2001a334
  40baf4:	00409dcd 	.word	0x00409dcd
  40baf8:	00409d61 	.word	0x00409d61
  40bafc:	0040b735 	.word	0x0040b735
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
  40bb00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
  40bb02:	69bb      	ldr	r3, [r7, #24]
  40bb04:	1ad3      	subs	r3, r2, r3
  40bb06:	6aba      	ldr	r2, [r7, #40]	; 0x28
  40bb08:	7892      	ldrb	r2, [r2, #2]
  40bb0a:	fbb3 f3f2 	udiv	r3, r3, r2
  40bb0e:	617b      	str	r3, [r7, #20]
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
  40bb10:	697b      	ldr	r3, [r7, #20]
  40bb12:	2b00      	cmp	r3, #0
  40bb14:	d101      	bne.n	40bb1a <chk_mounted+0x316>
  40bb16:	230d      	movs	r3, #13
  40bb18:	e10f      	b.n	40bd3a <chk_mounted+0x536>
	fmt = FS_FAT12;
  40bb1a:	2301      	movs	r3, #1
  40bb1c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
  40bb20:	697b      	ldr	r3, [r7, #20]
  40bb22:	f640 72f5 	movw	r2, #4085	; 0xff5
  40bb26:	4293      	cmp	r3, r2
  40bb28:	d902      	bls.n	40bb30 <chk_mounted+0x32c>
  40bb2a:	2302      	movs	r3, #2
  40bb2c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
  40bb30:	697b      	ldr	r3, [r7, #20]
  40bb32:	f64f 72f5 	movw	r2, #65525	; 0xfff5
  40bb36:	4293      	cmp	r3, r2
  40bb38:	d902      	bls.n	40bb40 <chk_mounted+0x33c>
  40bb3a:	2303      	movs	r3, #3
  40bb3c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
  40bb40:	697b      	ldr	r3, [r7, #20]
  40bb42:	1c9a      	adds	r2, r3, #2
  40bb44:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40bb46:	619a      	str	r2, [r3, #24]
	fs->database = bsect + sysect;						/* Data start sector */
  40bb48:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
  40bb4a:	69bb      	ldr	r3, [r7, #24]
  40bb4c:	441a      	add	r2, r3
  40bb4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40bb50:	629a      	str	r2, [r3, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
  40bb52:	8bba      	ldrh	r2, [r7, #28]
  40bb54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  40bb56:	441a      	add	r2, r3
  40bb58:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40bb5a:	621a      	str	r2, [r3, #32]
	if (fmt == FS_FAT32) {
  40bb5c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
  40bb60:	2b03      	cmp	r3, #3
  40bb62:	d11e      	bne.n	40bba2 <chk_mounted+0x39e>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
  40bb64:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40bb66:	891b      	ldrh	r3, [r3, #8]
  40bb68:	2b00      	cmp	r3, #0
  40bb6a:	d001      	beq.n	40bb70 <chk_mounted+0x36c>
  40bb6c:	230d      	movs	r3, #13
  40bb6e:	e0e4      	b.n	40bd3a <chk_mounted+0x536>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
  40bb70:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40bb72:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
  40bb76:	061a      	lsls	r2, r3, #24
  40bb78:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40bb7a:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
  40bb7e:	041b      	lsls	r3, r3, #16
  40bb80:	4313      	orrs	r3, r2
  40bb82:	6aba      	ldr	r2, [r7, #40]	; 0x28
  40bb84:	f892 205d 	ldrb.w	r2, [r2, #93]	; 0x5d
  40bb88:	0212      	lsls	r2, r2, #8
  40bb8a:	4313      	orrs	r3, r2
  40bb8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
  40bb8e:	f892 205c 	ldrb.w	r2, [r2, #92]	; 0x5c
  40bb92:	431a      	orrs	r2, r3
  40bb94:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40bb96:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
  40bb98:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40bb9a:	699b      	ldr	r3, [r3, #24]
  40bb9c:	009b      	lsls	r3, r3, #2
  40bb9e:	633b      	str	r3, [r7, #48]	; 0x30
  40bba0:	e01f      	b.n	40bbe2 <chk_mounted+0x3de>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
  40bba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40bba4:	891b      	ldrh	r3, [r3, #8]
  40bba6:	2b00      	cmp	r3, #0
  40bba8:	d101      	bne.n	40bbae <chk_mounted+0x3aa>
  40bbaa:	230d      	movs	r3, #13
  40bbac:	e0c5      	b.n	40bd3a <chk_mounted+0x536>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
  40bbae:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40bbb0:	6a1a      	ldr	r2, [r3, #32]
  40bbb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  40bbb4:	441a      	add	r2, r3
  40bbb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40bbb8:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
  40bbba:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
  40bbbe:	2b02      	cmp	r3, #2
  40bbc0:	d103      	bne.n	40bbca <chk_mounted+0x3c6>
  40bbc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40bbc4:	699b      	ldr	r3, [r3, #24]
  40bbc6:	005b      	lsls	r3, r3, #1
  40bbc8:	e00a      	b.n	40bbe0 <chk_mounted+0x3dc>
  40bbca:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40bbcc:	699a      	ldr	r2, [r3, #24]
  40bbce:	4613      	mov	r3, r2
  40bbd0:	005b      	lsls	r3, r3, #1
  40bbd2:	4413      	add	r3, r2
  40bbd4:	085a      	lsrs	r2, r3, #1
  40bbd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40bbd8:	699b      	ldr	r3, [r3, #24]
  40bbda:	f003 0301 	and.w	r3, r3, #1
  40bbde:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
  40bbe0:	633b      	str	r3, [r7, #48]	; 0x30
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
  40bbe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40bbe4:	69da      	ldr	r2, [r3, #28]
  40bbe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  40bbe8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
  40bbec:	0a5b      	lsrs	r3, r3, #9
  40bbee:	429a      	cmp	r2, r3
  40bbf0:	d201      	bcs.n	40bbf6 <chk_mounted+0x3f2>
		return FR_NO_FILESYSTEM;
  40bbf2:	230d      	movs	r3, #13
  40bbf4:	e0a1      	b.n	40bd3a <chk_mounted+0x536>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->free_clust = 0xFFFFFFFF;
  40bbf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40bbf8:	f04f 32ff 	mov.w	r2, #4294967295
  40bbfc:	611a      	str	r2, [r3, #16]
	fs->last_clust = 0;
  40bbfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40bc00:	2200      	movs	r2, #0
  40bc02:	60da      	str	r2, [r3, #12]

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
  40bc04:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
  40bc08:	2b03      	cmp	r3, #3
  40bc0a:	f040 8081 	bne.w	40bd10 <chk_mounted+0x50c>
	 	fs->fsi_flag = 0;
  40bc0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40bc10:	2200      	movs	r2, #0
  40bc12:	715a      	strb	r2, [r3, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
  40bc14:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40bc16:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
  40bc1a:	021b      	lsls	r3, r3, #8
  40bc1c:	b21a      	sxth	r2, r3
  40bc1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40bc20:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
  40bc24:	b21b      	sxth	r3, r3
  40bc26:	4313      	orrs	r3, r2
  40bc28:	b21b      	sxth	r3, r3
  40bc2a:	b29b      	uxth	r3, r3
  40bc2c:	461a      	mov	r2, r3
  40bc2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  40bc30:	441a      	add	r2, r3
  40bc32:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40bc34:	615a      	str	r2, [r3, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
  40bc36:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40bc38:	7858      	ldrb	r0, [r3, #1]
  40bc3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40bc3c:	f103 0130 	add.w	r1, r3, #48	; 0x30
  40bc40:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40bc42:	695a      	ldr	r2, [r3, #20]
  40bc44:	2301      	movs	r3, #1
  40bc46:	4c3f      	ldr	r4, [pc, #252]	; (40bd44 <chk_mounted+0x540>)
  40bc48:	47a0      	blx	r4
  40bc4a:	4603      	mov	r3, r0
  40bc4c:	2b00      	cmp	r3, #0
  40bc4e:	d15f      	bne.n	40bd10 <chk_mounted+0x50c>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
  40bc50:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40bc52:	f893 322f 	ldrb.w	r3, [r3, #559]	; 0x22f
  40bc56:	021b      	lsls	r3, r3, #8
  40bc58:	b21a      	sxth	r2, r3
  40bc5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40bc5c:	f893 322e 	ldrb.w	r3, [r3, #558]	; 0x22e
  40bc60:	b21b      	sxth	r3, r3
  40bc62:	4313      	orrs	r3, r2
  40bc64:	b21b      	sxth	r3, r3
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
  40bc66:	4a38      	ldr	r2, [pc, #224]	; (40bd48 <chk_mounted+0x544>)
  40bc68:	4293      	cmp	r3, r2
  40bc6a:	d151      	bne.n	40bd10 <chk_mounted+0x50c>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
  40bc6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40bc6e:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
  40bc72:	061a      	lsls	r2, r3, #24
  40bc74:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40bc76:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
  40bc7a:	041b      	lsls	r3, r3, #16
  40bc7c:	4313      	orrs	r3, r2
  40bc7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
  40bc80:	f892 2031 	ldrb.w	r2, [r2, #49]	; 0x31
  40bc84:	0212      	lsls	r2, r2, #8
  40bc86:	4313      	orrs	r3, r2
  40bc88:	6aba      	ldr	r2, [r7, #40]	; 0x28
  40bc8a:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
  40bc8e:	4313      	orrs	r3, r2
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
  40bc90:	4a2e      	ldr	r2, [pc, #184]	; (40bd4c <chk_mounted+0x548>)
  40bc92:	4293      	cmp	r3, r2
  40bc94:	d13c      	bne.n	40bd10 <chk_mounted+0x50c>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
  40bc96:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40bc98:	f893 3217 	ldrb.w	r3, [r3, #535]	; 0x217
  40bc9c:	061a      	lsls	r2, r3, #24
  40bc9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40bca0:	f893 3216 	ldrb.w	r3, [r3, #534]	; 0x216
  40bca4:	041b      	lsls	r3, r3, #16
  40bca6:	4313      	orrs	r3, r2
  40bca8:	6aba      	ldr	r2, [r7, #40]	; 0x28
  40bcaa:	f892 2215 	ldrb.w	r2, [r2, #533]	; 0x215
  40bcae:	0212      	lsls	r2, r2, #8
  40bcb0:	4313      	orrs	r3, r2
  40bcb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
  40bcb4:	f892 2214 	ldrb.w	r2, [r2, #532]	; 0x214
  40bcb8:	4313      	orrs	r3, r2
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
  40bcba:	4a25      	ldr	r2, [pc, #148]	; (40bd50 <chk_mounted+0x54c>)
  40bcbc:	4293      	cmp	r3, r2
  40bcbe:	d127      	bne.n	40bd10 <chk_mounted+0x50c>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
  40bcc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40bcc2:	f893 321f 	ldrb.w	r3, [r3, #543]	; 0x21f
  40bcc6:	061a      	lsls	r2, r3, #24
  40bcc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40bcca:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
  40bcce:	041b      	lsls	r3, r3, #16
  40bcd0:	4313      	orrs	r3, r2
  40bcd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
  40bcd4:	f892 221d 	ldrb.w	r2, [r2, #541]	; 0x21d
  40bcd8:	0212      	lsls	r2, r2, #8
  40bcda:	4313      	orrs	r3, r2
  40bcdc:	6aba      	ldr	r2, [r7, #40]	; 0x28
  40bcde:	f892 221c 	ldrb.w	r2, [r2, #540]	; 0x21c
  40bce2:	431a      	orrs	r2, r3
  40bce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40bce6:	60da      	str	r2, [r3, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
  40bce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40bcea:	f893 321b 	ldrb.w	r3, [r3, #539]	; 0x21b
  40bcee:	061a      	lsls	r2, r3, #24
  40bcf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40bcf2:	f893 321a 	ldrb.w	r3, [r3, #538]	; 0x21a
  40bcf6:	041b      	lsls	r3, r3, #16
  40bcf8:	4313      	orrs	r3, r2
  40bcfa:	6aba      	ldr	r2, [r7, #40]	; 0x28
  40bcfc:	f892 2219 	ldrb.w	r2, [r2, #537]	; 0x219
  40bd00:	0212      	lsls	r2, r2, #8
  40bd02:	4313      	orrs	r3, r2
  40bd04:	6aba      	ldr	r2, [r7, #40]	; 0x28
  40bd06:	f892 2218 	ldrb.w	r2, [r2, #536]	; 0x218
  40bd0a:	431a      	orrs	r2, r3
  40bd0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40bd0e:	611a      	str	r2, [r3, #16]
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
  40bd10:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40bd12:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
  40bd16:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
  40bd18:	4b0e      	ldr	r3, [pc, #56]	; (40bd54 <chk_mounted+0x550>)
  40bd1a:	881b      	ldrh	r3, [r3, #0]
  40bd1c:	3301      	adds	r3, #1
  40bd1e:	b29a      	uxth	r2, r3
  40bd20:	4b0c      	ldr	r3, [pc, #48]	; (40bd54 <chk_mounted+0x550>)
  40bd22:	801a      	strh	r2, [r3, #0]
  40bd24:	4b0b      	ldr	r3, [pc, #44]	; (40bd54 <chk_mounted+0x550>)
  40bd26:	881a      	ldrh	r2, [r3, #0]
  40bd28:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40bd2a:	80da      	strh	r2, [r3, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
  40bd2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40bd2e:	2200      	movs	r2, #0
  40bd30:	62da      	str	r2, [r3, #44]	; 0x2c
	fs->wflag = 0;
  40bd32:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40bd34:	2200      	movs	r2, #0
  40bd36:	711a      	strb	r2, [r3, #4]
#endif
#if _FS_SHARE				/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
  40bd38:	2300      	movs	r3, #0
}
  40bd3a:	4618      	mov	r0, r3
  40bd3c:	374c      	adds	r7, #76	; 0x4c
  40bd3e:	46bd      	mov	sp, r7
  40bd40:	bd90      	pop	{r4, r7, pc}
  40bd42:	bf00      	nop
  40bd44:	00409e01 	.word	0x00409e01
  40bd48:	ffffaa55 	.word	0xffffaa55
  40bd4c:	41615252 	.word	0x41615252
  40bd50:	61417272 	.word	0x61417272
  40bd54:	2001a354 	.word	0x2001a354

0040bd58 <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
  40bd58:	b580      	push	{r7, lr}
  40bd5a:	b082      	sub	sp, #8
  40bd5c:	af00      	add	r7, sp, #0
  40bd5e:	6078      	str	r0, [r7, #4]
  40bd60:	460b      	mov	r3, r1
  40bd62:	807b      	strh	r3, [r7, #2]
	if (!fs || !fs->fs_type || fs->id != id)
  40bd64:	687b      	ldr	r3, [r7, #4]
  40bd66:	2b00      	cmp	r3, #0
  40bd68:	d008      	beq.n	40bd7c <validate+0x24>
  40bd6a:	687b      	ldr	r3, [r7, #4]
  40bd6c:	781b      	ldrb	r3, [r3, #0]
  40bd6e:	2b00      	cmp	r3, #0
  40bd70:	d004      	beq.n	40bd7c <validate+0x24>
  40bd72:	687b      	ldr	r3, [r7, #4]
  40bd74:	88db      	ldrh	r3, [r3, #6]
  40bd76:	887a      	ldrh	r2, [r7, #2]
  40bd78:	429a      	cmp	r2, r3
  40bd7a:	d001      	beq.n	40bd80 <validate+0x28>
		return FR_INVALID_OBJECT;
  40bd7c:	2309      	movs	r3, #9
  40bd7e:	e00c      	b.n	40bd9a <validate+0x42>

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drv) & STA_NOINIT)
  40bd80:	687b      	ldr	r3, [r7, #4]
  40bd82:	785b      	ldrb	r3, [r3, #1]
  40bd84:	4618      	mov	r0, r3
  40bd86:	4b07      	ldr	r3, [pc, #28]	; (40bda4 <validate+0x4c>)
  40bd88:	4798      	blx	r3
  40bd8a:	4603      	mov	r3, r0
  40bd8c:	f003 0301 	and.w	r3, r3, #1
  40bd90:	2b00      	cmp	r3, #0
  40bd92:	d001      	beq.n	40bd98 <validate+0x40>
		return FR_NOT_READY;
  40bd94:	2303      	movs	r3, #3
  40bd96:	e000      	b.n	40bd9a <validate+0x42>

	return FR_OK;
  40bd98:	2300      	movs	r3, #0
}
  40bd9a:	4618      	mov	r0, r3
  40bd9c:	3708      	adds	r7, #8
  40bd9e:	46bd      	mov	sp, r7
  40bda0:	bd80      	pop	{r7, pc}
  40bda2:	bf00      	nop
  40bda4:	00409dcd 	.word	0x00409dcd

0040bda8 <f_mount>:

FRESULT f_mount (
	BYTE vol,		/* Logical drive number to be mounted/unmounted */
	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
)
{
  40bda8:	b480      	push	{r7}
  40bdaa:	b085      	sub	sp, #20
  40bdac:	af00      	add	r7, sp, #0
  40bdae:	4603      	mov	r3, r0
  40bdb0:	6039      	str	r1, [r7, #0]
  40bdb2:	71fb      	strb	r3, [r7, #7]
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
  40bdb4:	79fb      	ldrb	r3, [r7, #7]
  40bdb6:	2b07      	cmp	r3, #7
  40bdb8:	d901      	bls.n	40bdbe <f_mount+0x16>
		return FR_INVALID_DRIVE;
  40bdba:	230b      	movs	r3, #11
  40bdbc:	e016      	b.n	40bdec <f_mount+0x44>
	rfs = FatFs[vol];			/* Get current fs object */
  40bdbe:	79fb      	ldrb	r3, [r7, #7]
  40bdc0:	4a0d      	ldr	r2, [pc, #52]	; (40bdf8 <f_mount+0x50>)
  40bdc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  40bdc6:	60fb      	str	r3, [r7, #12]

	if (rfs) {
  40bdc8:	68fb      	ldr	r3, [r7, #12]
  40bdca:	2b00      	cmp	r3, #0
  40bdcc:	d002      	beq.n	40bdd4 <f_mount+0x2c>
		clear_lock(rfs);
#endif
#if _FS_REENTRANT				/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;		/* Clear old fs object */
  40bdce:	68fb      	ldr	r3, [r7, #12]
  40bdd0:	2200      	movs	r2, #0
  40bdd2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
  40bdd4:	683b      	ldr	r3, [r7, #0]
  40bdd6:	2b00      	cmp	r3, #0
  40bdd8:	d002      	beq.n	40bde0 <f_mount+0x38>
		fs->fs_type = 0;		/* Clear new fs object */
  40bdda:	683b      	ldr	r3, [r7, #0]
  40bddc:	2200      	movs	r2, #0
  40bdde:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT				/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */
  40bde0:	79fb      	ldrb	r3, [r7, #7]
  40bde2:	4905      	ldr	r1, [pc, #20]	; (40bdf8 <f_mount+0x50>)
  40bde4:	683a      	ldr	r2, [r7, #0]
  40bde6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	return FR_OK;
  40bdea:	2300      	movs	r3, #0
}
  40bdec:	4618      	mov	r0, r3
  40bdee:	3714      	adds	r7, #20
  40bdf0:	46bd      	mov	sp, r7
  40bdf2:	f85d 7b04 	ldr.w	r7, [sp], #4
  40bdf6:	4770      	bx	lr
  40bdf8:	2001a334 	.word	0x2001a334

0040bdfc <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
  40bdfc:	b580      	push	{r7, lr}
  40bdfe:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
  40be02:	af00      	add	r7, sp, #0
  40be04:	f107 030c 	add.w	r3, r7, #12
  40be08:	6018      	str	r0, [r3, #0]
  40be0a:	f107 0308 	add.w	r3, r7, #8
  40be0e:	6019      	str	r1, [r3, #0]
  40be10:	1dfb      	adds	r3, r7, #7
  40be12:	701a      	strb	r2, [r3, #0]
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
  40be14:	f107 030c 	add.w	r3, r7, #12
  40be18:	681b      	ldr	r3, [r3, #0]
  40be1a:	2200      	movs	r2, #0
  40be1c:	601a      	str	r2, [r3, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
  40be1e:	1dfb      	adds	r3, r7, #7
  40be20:	1dfa      	adds	r2, r7, #7
  40be22:	7812      	ldrb	r2, [r2, #0]
  40be24:	f002 021f 	and.w	r2, r2, #31
  40be28:	701a      	strb	r2, [r3, #0]
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
  40be2a:	1dfb      	adds	r3, r7, #7
  40be2c:	781b      	ldrb	r3, [r3, #0]
  40be2e:	f023 0301 	bic.w	r3, r3, #1
  40be32:	b2da      	uxtb	r2, r3
  40be34:	f507 7107 	add.w	r1, r7, #540	; 0x21c
  40be38:	f107 0308 	add.w	r3, r7, #8
  40be3c:	4618      	mov	r0, r3
  40be3e:	4b8e      	ldr	r3, [pc, #568]	; (40c078 <f_open+0x27c>)
  40be40:	4798      	blx	r3
  40be42:	4603      	mov	r3, r0
  40be44:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
  40be48:	f507 7304 	add.w	r3, r7, #528	; 0x210
  40be4c:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
  40be50:	f107 0310 	add.w	r3, r7, #16
  40be54:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
	if (res == FR_OK)
  40be58:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
  40be5c:	2b00      	cmp	r3, #0
  40be5e:	d10b      	bne.n	40be78 <f_open+0x7c>
		res = follow_path(&dj, path);	/* Follow the file path */
  40be60:	f107 0308 	add.w	r3, r7, #8
  40be64:	681a      	ldr	r2, [r3, #0]
  40be66:	f507 7307 	add.w	r3, r7, #540	; 0x21c
  40be6a:	4611      	mov	r1, r2
  40be6c:	4618      	mov	r0, r3
  40be6e:	4b83      	ldr	r3, [pc, #524]	; (40c07c <f_open+0x280>)
  40be70:	4798      	blx	r3
  40be72:	4603      	mov	r3, r0
  40be74:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
	dir = dj.dir;
  40be78:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
  40be7c:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248

#if !_FS_READONLY	/* R/W configuration */
	if (res == FR_OK) {
  40be80:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
  40be84:	2b00      	cmp	r3, #0
  40be86:	d106      	bne.n	40be96 <f_open+0x9a>
		if (!dir)	/* Current dir itself */
  40be88:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  40be8c:	2b00      	cmp	r3, #0
  40be8e:	d102      	bne.n	40be96 <f_open+0x9a>
			res = FR_INVALID_NAME;
  40be90:	2306      	movs	r3, #6
  40be92:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
  40be96:	1dfb      	adds	r3, r7, #7
  40be98:	781b      	ldrb	r3, [r3, #0]
  40be9a:	f003 031c 	and.w	r3, r3, #28
  40be9e:	2b00      	cmp	r3, #0
  40bea0:	f000 80da 	beq.w	40c058 <f_open+0x25c>
		DWORD dw, cl;

		if (res != FR_OK) {					/* No file, create new */
  40bea4:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
  40bea8:	2b00      	cmp	r3, #0
  40beaa:	d016      	beq.n	40beda <f_open+0xde>
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
  40beac:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
  40beb0:	2b04      	cmp	r3, #4
  40beb2:	d107      	bne.n	40bec4 <f_open+0xc8>
#if _FS_SHARE
				res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
				res = dir_register(&dj);
  40beb4:	f507 7307 	add.w	r3, r7, #540	; 0x21c
  40beb8:	4618      	mov	r0, r3
  40beba:	4b71      	ldr	r3, [pc, #452]	; (40c080 <f_open+0x284>)
  40bebc:	4798      	blx	r3
  40bebe:	4603      	mov	r3, r0
  40bec0:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#endif
			mode |= FA_CREATE_ALWAYS;		/* File is created */
  40bec4:	1dfb      	adds	r3, r7, #7
  40bec6:	1dfa      	adds	r2, r7, #7
  40bec8:	7812      	ldrb	r2, [r2, #0]
  40beca:	f042 0208 	orr.w	r2, r2, #8
  40bece:	701a      	strb	r2, [r3, #0]
			dir = dj.dir;					/* New entry */
  40bed0:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
  40bed4:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
  40bed8:	e014      	b.n	40bf04 <f_open+0x108>
		}
		else {								/* Any object is already existing */
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
  40beda:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  40bede:	330b      	adds	r3, #11
  40bee0:	781b      	ldrb	r3, [r3, #0]
  40bee2:	f003 0311 	and.w	r3, r3, #17
  40bee6:	2b00      	cmp	r3, #0
  40bee8:	d003      	beq.n	40bef2 <f_open+0xf6>
				res = FR_DENIED;
  40beea:	2307      	movs	r3, #7
  40beec:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
  40bef0:	e008      	b.n	40bf04 <f_open+0x108>
			} else {
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
  40bef2:	1dfb      	adds	r3, r7, #7
  40bef4:	781b      	ldrb	r3, [r3, #0]
  40bef6:	f003 0304 	and.w	r3, r3, #4
  40befa:	2b00      	cmp	r3, #0
  40befc:	d002      	beq.n	40bf04 <f_open+0x108>
					res = FR_EXIST;
  40befe:	2308      	movs	r3, #8
  40bf00:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			}
		}
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
  40bf04:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
  40bf08:	2b00      	cmp	r3, #0
  40bf0a:	f040 80d2 	bne.w	40c0b2 <f_open+0x2b6>
  40bf0e:	1dfb      	adds	r3, r7, #7
  40bf10:	781b      	ldrb	r3, [r3, #0]
  40bf12:	f003 0308 	and.w	r3, r3, #8
  40bf16:	2b00      	cmp	r3, #0
  40bf18:	f000 80cb 	beq.w	40c0b2 <f_open+0x2b6>
			dw = get_fattime();					/* Created time */
  40bf1c:	4b59      	ldr	r3, [pc, #356]	; (40c084 <f_open+0x288>)
  40bf1e:	4798      	blx	r3
  40bf20:	f8c7 0244 	str.w	r0, [r7, #580]	; 0x244
			ST_DWORD(dir+DIR_CrtTime, dw);
  40bf24:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  40bf28:	330e      	adds	r3, #14
  40bf2a:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
  40bf2e:	b2d2      	uxtb	r2, r2
  40bf30:	701a      	strb	r2, [r3, #0]
  40bf32:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  40bf36:	330f      	adds	r3, #15
  40bf38:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
  40bf3c:	b292      	uxth	r2, r2
  40bf3e:	0a12      	lsrs	r2, r2, #8
  40bf40:	b292      	uxth	r2, r2
  40bf42:	b2d2      	uxtb	r2, r2
  40bf44:	701a      	strb	r2, [r3, #0]
  40bf46:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  40bf4a:	3310      	adds	r3, #16
  40bf4c:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
  40bf50:	0c12      	lsrs	r2, r2, #16
  40bf52:	b2d2      	uxtb	r2, r2
  40bf54:	701a      	strb	r2, [r3, #0]
  40bf56:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  40bf5a:	3311      	adds	r3, #17
  40bf5c:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
  40bf60:	0e12      	lsrs	r2, r2, #24
  40bf62:	b2d2      	uxtb	r2, r2
  40bf64:	701a      	strb	r2, [r3, #0]
			dir[DIR_Attr] = 0;					/* Reset attribute */
  40bf66:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  40bf6a:	330b      	adds	r3, #11
  40bf6c:	2200      	movs	r2, #0
  40bf6e:	701a      	strb	r2, [r3, #0]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
  40bf70:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  40bf74:	331c      	adds	r3, #28
  40bf76:	2200      	movs	r2, #0
  40bf78:	701a      	strb	r2, [r3, #0]
  40bf7a:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  40bf7e:	331d      	adds	r3, #29
  40bf80:	2200      	movs	r2, #0
  40bf82:	701a      	strb	r2, [r3, #0]
  40bf84:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  40bf88:	331e      	adds	r3, #30
  40bf8a:	2200      	movs	r2, #0
  40bf8c:	701a      	strb	r2, [r3, #0]
  40bf8e:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  40bf92:	331f      	adds	r3, #31
  40bf94:	2200      	movs	r2, #0
  40bf96:	701a      	strb	r2, [r3, #0]
			cl = LD_CLUST(dir);					/* Get start cluster */
  40bf98:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  40bf9c:	3315      	adds	r3, #21
  40bf9e:	781b      	ldrb	r3, [r3, #0]
  40bfa0:	021b      	lsls	r3, r3, #8
  40bfa2:	b21a      	sxth	r2, r3
  40bfa4:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  40bfa8:	3314      	adds	r3, #20
  40bfaa:	781b      	ldrb	r3, [r3, #0]
  40bfac:	b21b      	sxth	r3, r3
  40bfae:	4313      	orrs	r3, r2
  40bfb0:	b21b      	sxth	r3, r3
  40bfb2:	b29b      	uxth	r3, r3
  40bfb4:	041b      	lsls	r3, r3, #16
  40bfb6:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
  40bfba:	321b      	adds	r2, #27
  40bfbc:	7812      	ldrb	r2, [r2, #0]
  40bfbe:	0212      	lsls	r2, r2, #8
  40bfc0:	b211      	sxth	r1, r2
  40bfc2:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
  40bfc6:	321a      	adds	r2, #26
  40bfc8:	7812      	ldrb	r2, [r2, #0]
  40bfca:	b212      	sxth	r2, r2
  40bfcc:	430a      	orrs	r2, r1
  40bfce:	b212      	sxth	r2, r2
  40bfd0:	b292      	uxth	r2, r2
  40bfd2:	4313      	orrs	r3, r2
  40bfd4:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
			ST_CLUST(dir, 0);					/* cluster = 0 */
  40bfd8:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  40bfdc:	331a      	adds	r3, #26
  40bfde:	2200      	movs	r2, #0
  40bfe0:	701a      	strb	r2, [r3, #0]
  40bfe2:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  40bfe6:	331b      	adds	r3, #27
  40bfe8:	2200      	movs	r2, #0
  40bfea:	701a      	strb	r2, [r3, #0]
  40bfec:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  40bff0:	3314      	adds	r3, #20
  40bff2:	2200      	movs	r2, #0
  40bff4:	701a      	strb	r2, [r3, #0]
  40bff6:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  40bffa:	3315      	adds	r3, #21
  40bffc:	2200      	movs	r2, #0
  40bffe:	701a      	strb	r2, [r3, #0]
			dj.fs->wflag = 1;
  40c000:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
  40c004:	2201      	movs	r2, #1
  40c006:	711a      	strb	r2, [r3, #4]
			if (cl) {							/* Remove the cluster chain if exist */
  40c008:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
  40c00c:	2b00      	cmp	r3, #0
  40c00e:	d050      	beq.n	40c0b2 <f_open+0x2b6>
				dw = dj.fs->winsect;
  40c010:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
  40c014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40c016:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
				res = remove_chain(dj.fs, cl);
  40c01a:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
  40c01e:	f8d7 1240 	ldr.w	r1, [r7, #576]	; 0x240
  40c022:	4618      	mov	r0, r3
  40c024:	4b18      	ldr	r3, [pc, #96]	; (40c088 <f_open+0x28c>)
  40c026:	4798      	blx	r3
  40c028:	4603      	mov	r3, r0
  40c02a:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				if (res == FR_OK) {
  40c02e:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
  40c032:	2b00      	cmp	r3, #0
  40c034:	d13d      	bne.n	40c0b2 <f_open+0x2b6>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
  40c036:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
  40c03a:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
  40c03e:	3a01      	subs	r2, #1
  40c040:	60da      	str	r2, [r3, #12]
					res = move_window(dj.fs, dw);
  40c042:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
  40c046:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
  40c04a:	4618      	mov	r0, r3
  40c04c:	4b0f      	ldr	r3, [pc, #60]	; (40c08c <f_open+0x290>)
  40c04e:	4798      	blx	r3
  40c050:	4603      	mov	r3, r0
  40c052:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
  40c056:	e02c      	b.n	40c0b2 <f_open+0x2b6>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
  40c058:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
  40c05c:	2b00      	cmp	r3, #0
  40c05e:	d128      	bne.n	40c0b2 <f_open+0x2b6>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
  40c060:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  40c064:	330b      	adds	r3, #11
  40c066:	781b      	ldrb	r3, [r3, #0]
  40c068:	f003 0310 	and.w	r3, r3, #16
  40c06c:	2b00      	cmp	r3, #0
  40c06e:	d00f      	beq.n	40c090 <f_open+0x294>
				res = FR_NO_FILE;
  40c070:	2304      	movs	r3, #4
  40c072:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
  40c076:	e01c      	b.n	40c0b2 <f_open+0x2b6>
  40c078:	0040b805 	.word	0x0040b805
  40c07c:	0040b62d 	.word	0x0040b62d
  40c080:	0040b02d 	.word	0x0040b02d
  40c084:	0040a021 	.word	0x0040a021
  40c088:	0040a739 	.word	0x0040a739
  40c08c:	0040a181 	.word	0x0040a181
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
  40c090:	1dfb      	adds	r3, r7, #7
  40c092:	781b      	ldrb	r3, [r3, #0]
  40c094:	f003 0302 	and.w	r3, r3, #2
  40c098:	2b00      	cmp	r3, #0
  40c09a:	d00a      	beq.n	40c0b2 <f_open+0x2b6>
  40c09c:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  40c0a0:	330b      	adds	r3, #11
  40c0a2:	781b      	ldrb	r3, [r3, #0]
  40c0a4:	f003 0301 	and.w	r3, r3, #1
  40c0a8:	2b00      	cmp	r3, #0
  40c0aa:	d002      	beq.n	40c0b2 <f_open+0x2b6>
					res = FR_DENIED;
  40c0ac:	2307      	movs	r3, #7
  40c0ae:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			}
		}
	}
	if (res == FR_OK) {
  40c0b2:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
  40c0b6:	2b00      	cmp	r3, #0
  40c0b8:	d118      	bne.n	40c0ec <f_open+0x2f0>
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
  40c0ba:	1dfb      	adds	r3, r7, #7
  40c0bc:	781b      	ldrb	r3, [r3, #0]
  40c0be:	f003 0308 	and.w	r3, r3, #8
  40c0c2:	2b00      	cmp	r3, #0
  40c0c4:	d005      	beq.n	40c0d2 <f_open+0x2d6>
			mode |= FA__WRITTEN;
  40c0c6:	1dfb      	adds	r3, r7, #7
  40c0c8:	1dfa      	adds	r2, r7, #7
  40c0ca:	7812      	ldrb	r2, [r2, #0]
  40c0cc:	f042 0220 	orr.w	r2, r2, #32
  40c0d0:	701a      	strb	r2, [r3, #0]
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
  40c0d2:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
  40c0d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  40c0d8:	f107 030c 	add.w	r3, r7, #12
  40c0dc:	681b      	ldr	r3, [r3, #0]
  40c0de:	61da      	str	r2, [r3, #28]
		fp->dir_ptr = dir;
  40c0e0:	f107 030c 	add.w	r3, r7, #12
  40c0e4:	681b      	ldr	r3, [r3, #0]
  40c0e6:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
  40c0ea:	621a      	str	r2, [r3, #32]
		}
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
  40c0ec:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
  40c0f0:	2b00      	cmp	r3, #0
  40c0f2:	d158      	bne.n	40c1a6 <f_open+0x3aa>
		fp->flag = mode;					/* File access mode */
  40c0f4:	f107 030c 	add.w	r3, r7, #12
  40c0f8:	681b      	ldr	r3, [r3, #0]
  40c0fa:	1dfa      	adds	r2, r7, #7
  40c0fc:	7812      	ldrb	r2, [r2, #0]
  40c0fe:	719a      	strb	r2, [r3, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
  40c100:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  40c104:	3315      	adds	r3, #21
  40c106:	781b      	ldrb	r3, [r3, #0]
  40c108:	021b      	lsls	r3, r3, #8
  40c10a:	b21a      	sxth	r2, r3
  40c10c:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  40c110:	3314      	adds	r3, #20
  40c112:	781b      	ldrb	r3, [r3, #0]
  40c114:	b21b      	sxth	r3, r3
  40c116:	4313      	orrs	r3, r2
  40c118:	b21b      	sxth	r3, r3
  40c11a:	b29b      	uxth	r3, r3
  40c11c:	041b      	lsls	r3, r3, #16
  40c11e:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
  40c122:	321b      	adds	r2, #27
  40c124:	7812      	ldrb	r2, [r2, #0]
  40c126:	0212      	lsls	r2, r2, #8
  40c128:	b211      	sxth	r1, r2
  40c12a:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
  40c12e:	321a      	adds	r2, #26
  40c130:	7812      	ldrb	r2, [r2, #0]
  40c132:	b212      	sxth	r2, r2
  40c134:	430a      	orrs	r2, r1
  40c136:	b212      	sxth	r2, r2
  40c138:	b292      	uxth	r2, r2
  40c13a:	431a      	orrs	r2, r3
  40c13c:	f107 030c 	add.w	r3, r7, #12
  40c140:	681b      	ldr	r3, [r3, #0]
  40c142:	611a      	str	r2, [r3, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
  40c144:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  40c148:	331f      	adds	r3, #31
  40c14a:	781b      	ldrb	r3, [r3, #0]
  40c14c:	061a      	lsls	r2, r3, #24
  40c14e:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  40c152:	331e      	adds	r3, #30
  40c154:	781b      	ldrb	r3, [r3, #0]
  40c156:	041b      	lsls	r3, r3, #16
  40c158:	4313      	orrs	r3, r2
  40c15a:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
  40c15e:	321d      	adds	r2, #29
  40c160:	7812      	ldrb	r2, [r2, #0]
  40c162:	0212      	lsls	r2, r2, #8
  40c164:	4313      	orrs	r3, r2
  40c166:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
  40c16a:	321c      	adds	r2, #28
  40c16c:	7812      	ldrb	r2, [r2, #0]
  40c16e:	431a      	orrs	r2, r3
  40c170:	f107 030c 	add.w	r3, r7, #12
  40c174:	681b      	ldr	r3, [r3, #0]
  40c176:	60da      	str	r2, [r3, #12]
		fp->fptr = 0;						/* File pointer */
  40c178:	f107 030c 	add.w	r3, r7, #12
  40c17c:	681b      	ldr	r3, [r3, #0]
  40c17e:	2200      	movs	r2, #0
  40c180:	609a      	str	r2, [r3, #8]
		fp->dsect = 0;
  40c182:	f107 030c 	add.w	r3, r7, #12
  40c186:	681b      	ldr	r3, [r3, #0]
  40c188:	2200      	movs	r2, #0
  40c18a:	619a      	str	r2, [r3, #24]
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
  40c18c:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
  40c190:	f107 030c 	add.w	r3, r7, #12
  40c194:	681b      	ldr	r3, [r3, #0]
  40c196:	601a      	str	r2, [r3, #0]
  40c198:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
  40c19c:	88da      	ldrh	r2, [r3, #6]
  40c19e:	f107 030c 	add.w	r3, r7, #12
  40c1a2:	681b      	ldr	r3, [r3, #0]
  40c1a4:	809a      	strh	r2, [r3, #4]
	}

	LEAVE_FF(dj.fs, res);
  40c1a6:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
}
  40c1aa:	4618      	mov	r0, r3
  40c1ac:	f507 7714 	add.w	r7, r7, #592	; 0x250
  40c1b0:	46bd      	mov	sp, r7
  40c1b2:	bd80      	pop	{r7, pc}

0040c1b4 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
  40c1b4:	b590      	push	{r4, r7, lr}
  40c1b6:	b08b      	sub	sp, #44	; 0x2c
  40c1b8:	af00      	add	r7, sp, #0
  40c1ba:	60f8      	str	r0, [r7, #12]
  40c1bc:	60b9      	str	r1, [r7, #8]
  40c1be:	607a      	str	r2, [r7, #4]
  40c1c0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
  40c1c2:	68bb      	ldr	r3, [r7, #8]
  40c1c4:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
  40c1c6:	683b      	ldr	r3, [r7, #0]
  40c1c8:	2200      	movs	r2, #0
  40c1ca:	601a      	str	r2, [r3, #0]

	res = validate(fp->fs, fp->id);			/* Check validity */
  40c1cc:	68fb      	ldr	r3, [r7, #12]
  40c1ce:	681a      	ldr	r2, [r3, #0]
  40c1d0:	68fb      	ldr	r3, [r7, #12]
  40c1d2:	889b      	ldrh	r3, [r3, #4]
  40c1d4:	4619      	mov	r1, r3
  40c1d6:	4610      	mov	r0, r2
  40c1d8:	4b8f      	ldr	r3, [pc, #572]	; (40c418 <f_write+0x264>)
  40c1da:	4798      	blx	r3
  40c1dc:	4603      	mov	r3, r0
  40c1de:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
  40c1e0:	7dfb      	ldrb	r3, [r7, #23]
  40c1e2:	2b00      	cmp	r3, #0
  40c1e4:	d001      	beq.n	40c1ea <f_write+0x36>
  40c1e6:	7dfb      	ldrb	r3, [r7, #23]
  40c1e8:	e172      	b.n	40c4d0 <f_write+0x31c>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
  40c1ea:	68fb      	ldr	r3, [r7, #12]
  40c1ec:	799b      	ldrb	r3, [r3, #6]
  40c1ee:	b25b      	sxtb	r3, r3
  40c1f0:	2b00      	cmp	r3, #0
  40c1f2:	da01      	bge.n	40c1f8 <f_write+0x44>
		LEAVE_FF(fp->fs, FR_INT_ERR);
  40c1f4:	2302      	movs	r3, #2
  40c1f6:	e16b      	b.n	40c4d0 <f_write+0x31c>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
  40c1f8:	68fb      	ldr	r3, [r7, #12]
  40c1fa:	799b      	ldrb	r3, [r3, #6]
  40c1fc:	f003 0302 	and.w	r3, r3, #2
  40c200:	2b00      	cmp	r3, #0
  40c202:	d101      	bne.n	40c208 <f_write+0x54>
		LEAVE_FF(fp->fs, FR_DENIED);
  40c204:	2307      	movs	r3, #7
  40c206:	e163      	b.n	40c4d0 <f_write+0x31c>
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
  40c208:	68fb      	ldr	r3, [r7, #12]
  40c20a:	68da      	ldr	r2, [r3, #12]
  40c20c:	687b      	ldr	r3, [r7, #4]
  40c20e:	441a      	add	r2, r3
  40c210:	68fb      	ldr	r3, [r7, #12]
  40c212:	68db      	ldr	r3, [r3, #12]
  40c214:	429a      	cmp	r2, r3
  40c216:	f080 8143 	bcs.w	40c4a0 <f_write+0x2ec>
  40c21a:	2300      	movs	r3, #0
  40c21c:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
  40c21e:	e13f      	b.n	40c4a0 <f_write+0x2ec>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
  40c220:	68fb      	ldr	r3, [r7, #12]
  40c222:	689b      	ldr	r3, [r3, #8]
  40c224:	f3c3 0308 	ubfx	r3, r3, #0, #9
  40c228:	2b00      	cmp	r3, #0
  40c22a:	f040 8104 	bne.w	40c436 <f_write+0x282>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
  40c22e:	68fb      	ldr	r3, [r7, #12]
  40c230:	689b      	ldr	r3, [r3, #8]
  40c232:	0a5b      	lsrs	r3, r3, #9
  40c234:	b2da      	uxtb	r2, r3
  40c236:	68fb      	ldr	r3, [r7, #12]
  40c238:	681b      	ldr	r3, [r3, #0]
  40c23a:	789b      	ldrb	r3, [r3, #2]
  40c23c:	3b01      	subs	r3, #1
  40c23e:	b2db      	uxtb	r3, r3
  40c240:	4013      	ands	r3, r2
  40c242:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
  40c244:	7dbb      	ldrb	r3, [r7, #22]
  40c246:	2b00      	cmp	r3, #0
  40c248:	d13d      	bne.n	40c2c6 <f_write+0x112>
				if (fp->fptr == 0) {		/* On the top of the file? */
  40c24a:	68fb      	ldr	r3, [r7, #12]
  40c24c:	689b      	ldr	r3, [r3, #8]
  40c24e:	2b00      	cmp	r3, #0
  40c250:	d110      	bne.n	40c274 <f_write+0xc0>
					clst = fp->sclust;		/* Follow from the origin */
  40c252:	68fb      	ldr	r3, [r7, #12]
  40c254:	691b      	ldr	r3, [r3, #16]
  40c256:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
  40c258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40c25a:	2b00      	cmp	r3, #0
  40c25c:	d113      	bne.n	40c286 <f_write+0xd2>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
  40c25e:	68fb      	ldr	r3, [r7, #12]
  40c260:	681b      	ldr	r3, [r3, #0]
  40c262:	2100      	movs	r1, #0
  40c264:	4618      	mov	r0, r3
  40c266:	4b6d      	ldr	r3, [pc, #436]	; (40c41c <f_write+0x268>)
  40c268:	4798      	blx	r3
  40c26a:	6278      	str	r0, [r7, #36]	; 0x24
  40c26c:	68fb      	ldr	r3, [r7, #12]
  40c26e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
  40c270:	611a      	str	r2, [r3, #16]
  40c272:	e008      	b.n	40c286 <f_write+0xd2>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
  40c274:	68fb      	ldr	r3, [r7, #12]
  40c276:	681a      	ldr	r2, [r3, #0]
  40c278:	68fb      	ldr	r3, [r7, #12]
  40c27a:	695b      	ldr	r3, [r3, #20]
  40c27c:	4619      	mov	r1, r3
  40c27e:	4610      	mov	r0, r2
  40c280:	4b66      	ldr	r3, [pc, #408]	; (40c41c <f_write+0x268>)
  40c282:	4798      	blx	r3
  40c284:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
  40c286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40c288:	2b00      	cmp	r3, #0
  40c28a:	f000 810e 	beq.w	40c4aa <f_write+0x2f6>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
  40c28e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40c290:	2b01      	cmp	r3, #1
  40c292:	d108      	bne.n	40c2a6 <f_write+0xf2>
  40c294:	68fb      	ldr	r3, [r7, #12]
  40c296:	799b      	ldrb	r3, [r3, #6]
  40c298:	f063 037f 	orn	r3, r3, #127	; 0x7f
  40c29c:	b2da      	uxtb	r2, r3
  40c29e:	68fb      	ldr	r3, [r7, #12]
  40c2a0:	719a      	strb	r2, [r3, #6]
  40c2a2:	2302      	movs	r3, #2
  40c2a4:	e114      	b.n	40c4d0 <f_write+0x31c>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
  40c2a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40c2a8:	f1b3 3fff 	cmp.w	r3, #4294967295
  40c2ac:	d108      	bne.n	40c2c0 <f_write+0x10c>
  40c2ae:	68fb      	ldr	r3, [r7, #12]
  40c2b0:	799b      	ldrb	r3, [r3, #6]
  40c2b2:	f063 037f 	orn	r3, r3, #127	; 0x7f
  40c2b6:	b2da      	uxtb	r2, r3
  40c2b8:	68fb      	ldr	r3, [r7, #12]
  40c2ba:	719a      	strb	r2, [r3, #6]
  40c2bc:	2301      	movs	r3, #1
  40c2be:	e107      	b.n	40c4d0 <f_write+0x31c>
				fp->clust = clst;			/* Update current cluster */
  40c2c0:	68fb      	ldr	r3, [r7, #12]
  40c2c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
  40c2c4:	615a      	str	r2, [r3, #20]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
  40c2c6:	68fb      	ldr	r3, [r7, #12]
  40c2c8:	799b      	ldrb	r3, [r3, #6]
  40c2ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
  40c2ce:	2b00      	cmp	r3, #0
  40c2d0:	d01d      	beq.n	40c30e <f_write+0x15a>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
  40c2d2:	68fb      	ldr	r3, [r7, #12]
  40c2d4:	681b      	ldr	r3, [r3, #0]
  40c2d6:	7858      	ldrb	r0, [r3, #1]
  40c2d8:	68fb      	ldr	r3, [r7, #12]
  40c2da:	f103 0124 	add.w	r1, r3, #36	; 0x24
  40c2de:	68fb      	ldr	r3, [r7, #12]
  40c2e0:	699a      	ldr	r2, [r3, #24]
  40c2e2:	2301      	movs	r3, #1
  40c2e4:	4c4e      	ldr	r4, [pc, #312]	; (40c420 <f_write+0x26c>)
  40c2e6:	47a0      	blx	r4
  40c2e8:	4603      	mov	r3, r0
  40c2ea:	2b00      	cmp	r3, #0
  40c2ec:	d008      	beq.n	40c300 <f_write+0x14c>
					ABORT(fp->fs, FR_DISK_ERR);
  40c2ee:	68fb      	ldr	r3, [r7, #12]
  40c2f0:	799b      	ldrb	r3, [r3, #6]
  40c2f2:	f063 037f 	orn	r3, r3, #127	; 0x7f
  40c2f6:	b2da      	uxtb	r2, r3
  40c2f8:	68fb      	ldr	r3, [r7, #12]
  40c2fa:	719a      	strb	r2, [r3, #6]
  40c2fc:	2301      	movs	r3, #1
  40c2fe:	e0e7      	b.n	40c4d0 <f_write+0x31c>
				fp->flag &= ~FA__DIRTY;
  40c300:	68fb      	ldr	r3, [r7, #12]
  40c302:	799b      	ldrb	r3, [r3, #6]
  40c304:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  40c308:	b2da      	uxtb	r2, r3
  40c30a:	68fb      	ldr	r3, [r7, #12]
  40c30c:	719a      	strb	r2, [r3, #6]
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
  40c30e:	68fb      	ldr	r3, [r7, #12]
  40c310:	681a      	ldr	r2, [r3, #0]
  40c312:	68fb      	ldr	r3, [r7, #12]
  40c314:	695b      	ldr	r3, [r3, #20]
  40c316:	4619      	mov	r1, r3
  40c318:	4610      	mov	r0, r2
  40c31a:	4b42      	ldr	r3, [pc, #264]	; (40c424 <f_write+0x270>)
  40c31c:	4798      	blx	r3
  40c31e:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
  40c320:	693b      	ldr	r3, [r7, #16]
  40c322:	2b00      	cmp	r3, #0
  40c324:	d108      	bne.n	40c338 <f_write+0x184>
  40c326:	68fb      	ldr	r3, [r7, #12]
  40c328:	799b      	ldrb	r3, [r3, #6]
  40c32a:	f063 037f 	orn	r3, r3, #127	; 0x7f
  40c32e:	b2da      	uxtb	r2, r3
  40c330:	68fb      	ldr	r3, [r7, #12]
  40c332:	719a      	strb	r2, [r3, #6]
  40c334:	2302      	movs	r3, #2
  40c336:	e0cb      	b.n	40c4d0 <f_write+0x31c>
			sect += csect;
  40c338:	7dbb      	ldrb	r3, [r7, #22]
  40c33a:	693a      	ldr	r2, [r7, #16]
  40c33c:	4413      	add	r3, r2
  40c33e:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
  40c340:	687b      	ldr	r3, [r7, #4]
  40c342:	0a5b      	lsrs	r3, r3, #9
  40c344:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
  40c346:	69fb      	ldr	r3, [r7, #28]
  40c348:	2b00      	cmp	r3, #0
  40c34a:	d044      	beq.n	40c3d6 <f_write+0x222>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
  40c34c:	7dba      	ldrb	r2, [r7, #22]
  40c34e:	69fb      	ldr	r3, [r7, #28]
  40c350:	4413      	add	r3, r2
  40c352:	68fa      	ldr	r2, [r7, #12]
  40c354:	6812      	ldr	r2, [r2, #0]
  40c356:	7892      	ldrb	r2, [r2, #2]
  40c358:	4293      	cmp	r3, r2
  40c35a:	d906      	bls.n	40c36a <f_write+0x1b6>
					cc = fp->fs->csize - csect;
  40c35c:	68fb      	ldr	r3, [r7, #12]
  40c35e:	681b      	ldr	r3, [r3, #0]
  40c360:	789b      	ldrb	r3, [r3, #2]
  40c362:	461a      	mov	r2, r3
  40c364:	7dbb      	ldrb	r3, [r7, #22]
  40c366:	1ad3      	subs	r3, r2, r3
  40c368:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
  40c36a:	68fb      	ldr	r3, [r7, #12]
  40c36c:	681b      	ldr	r3, [r3, #0]
  40c36e:	7858      	ldrb	r0, [r3, #1]
  40c370:	69fb      	ldr	r3, [r7, #28]
  40c372:	b2db      	uxtb	r3, r3
  40c374:	693a      	ldr	r2, [r7, #16]
  40c376:	69b9      	ldr	r1, [r7, #24]
  40c378:	4c29      	ldr	r4, [pc, #164]	; (40c420 <f_write+0x26c>)
  40c37a:	47a0      	blx	r4
  40c37c:	4603      	mov	r3, r0
  40c37e:	2b00      	cmp	r3, #0
  40c380:	d008      	beq.n	40c394 <f_write+0x1e0>
					ABORT(fp->fs, FR_DISK_ERR);
  40c382:	68fb      	ldr	r3, [r7, #12]
  40c384:	799b      	ldrb	r3, [r3, #6]
  40c386:	f063 037f 	orn	r3, r3, #127	; 0x7f
  40c38a:	b2da      	uxtb	r2, r3
  40c38c:	68fb      	ldr	r3, [r7, #12]
  40c38e:	719a      	strb	r2, [r3, #6]
  40c390:	2301      	movs	r3, #1
  40c392:	e09d      	b.n	40c4d0 <f_write+0x31c>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
  40c394:	68fb      	ldr	r3, [r7, #12]
  40c396:	699a      	ldr	r2, [r3, #24]
  40c398:	693b      	ldr	r3, [r7, #16]
  40c39a:	1ad2      	subs	r2, r2, r3
  40c39c:	69fb      	ldr	r3, [r7, #28]
  40c39e:	429a      	cmp	r2, r3
  40c3a0:	d215      	bcs.n	40c3ce <f_write+0x21a>
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
  40c3a2:	68fb      	ldr	r3, [r7, #12]
  40c3a4:	f103 0024 	add.w	r0, r3, #36	; 0x24
  40c3a8:	68fb      	ldr	r3, [r7, #12]
  40c3aa:	699a      	ldr	r2, [r3, #24]
  40c3ac:	693b      	ldr	r3, [r7, #16]
  40c3ae:	1ad3      	subs	r3, r2, r3
  40c3b0:	025b      	lsls	r3, r3, #9
  40c3b2:	69ba      	ldr	r2, [r7, #24]
  40c3b4:	4413      	add	r3, r2
  40c3b6:	f44f 7200 	mov.w	r2, #512	; 0x200
  40c3ba:	4619      	mov	r1, r3
  40c3bc:	4b1a      	ldr	r3, [pc, #104]	; (40c428 <f_write+0x274>)
  40c3be:	4798      	blx	r3
					fp->flag &= ~FA__DIRTY;
  40c3c0:	68fb      	ldr	r3, [r7, #12]
  40c3c2:	799b      	ldrb	r3, [r3, #6]
  40c3c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  40c3c8:	b2da      	uxtb	r2, r3
  40c3ca:	68fb      	ldr	r3, [r7, #12]
  40c3cc:	719a      	strb	r2, [r3, #6]
				}
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
  40c3ce:	69fb      	ldr	r3, [r7, #28]
  40c3d0:	025b      	lsls	r3, r3, #9
  40c3d2:	623b      	str	r3, [r7, #32]
				continue;
  40c3d4:	e050      	b.n	40c478 <f_write+0x2c4>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
  40c3d6:	68fb      	ldr	r3, [r7, #12]
  40c3d8:	699a      	ldr	r2, [r3, #24]
  40c3da:	693b      	ldr	r3, [r7, #16]
  40c3dc:	429a      	cmp	r2, r3
  40c3de:	d027      	beq.n	40c430 <f_write+0x27c>
				if (fp->fptr < fp->fsize &&
  40c3e0:	68fb      	ldr	r3, [r7, #12]
  40c3e2:	689a      	ldr	r2, [r3, #8]
  40c3e4:	68fb      	ldr	r3, [r7, #12]
  40c3e6:	68db      	ldr	r3, [r3, #12]
  40c3e8:	429a      	cmp	r2, r3
  40c3ea:	d221      	bcs.n	40c430 <f_write+0x27c>
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
  40c3ec:	68fb      	ldr	r3, [r7, #12]
  40c3ee:	681b      	ldr	r3, [r3, #0]
  40c3f0:	7858      	ldrb	r0, [r3, #1]
  40c3f2:	68fb      	ldr	r3, [r7, #12]
  40c3f4:	f103 0124 	add.w	r1, r3, #36	; 0x24
  40c3f8:	2301      	movs	r3, #1
  40c3fa:	693a      	ldr	r2, [r7, #16]
  40c3fc:	4c0b      	ldr	r4, [pc, #44]	; (40c42c <f_write+0x278>)
  40c3fe:	47a0      	blx	r4
  40c400:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
  40c402:	2b00      	cmp	r3, #0
  40c404:	d014      	beq.n	40c430 <f_write+0x27c>
						ABORT(fp->fs, FR_DISK_ERR);
  40c406:	68fb      	ldr	r3, [r7, #12]
  40c408:	799b      	ldrb	r3, [r3, #6]
  40c40a:	f063 037f 	orn	r3, r3, #127	; 0x7f
  40c40e:	b2da      	uxtb	r2, r3
  40c410:	68fb      	ldr	r3, [r7, #12]
  40c412:	719a      	strb	r2, [r3, #6]
  40c414:	2301      	movs	r3, #1
  40c416:	e05b      	b.n	40c4d0 <f_write+0x31c>
  40c418:	0040bd59 	.word	0x0040bd59
  40c41c:	0040a7e1 	.word	0x0040a7e1
  40c420:	00409eb1 	.word	0x00409eb1
  40c424:	0040a391 	.word	0x0040a391
  40c428:	0040a08d 	.word	0x0040a08d
  40c42c:	00409e01 	.word	0x00409e01
			}
#endif
			fp->dsect = sect;
  40c430:	68fb      	ldr	r3, [r7, #12]
  40c432:	693a      	ldr	r2, [r7, #16]
  40c434:	619a      	str	r2, [r3, #24]
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
  40c436:	68fb      	ldr	r3, [r7, #12]
  40c438:	689b      	ldr	r3, [r3, #8]
  40c43a:	f3c3 0308 	ubfx	r3, r3, #0, #9
  40c43e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
  40c442:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
  40c444:	6a3a      	ldr	r2, [r7, #32]
  40c446:	687b      	ldr	r3, [r7, #4]
  40c448:	429a      	cmp	r2, r3
  40c44a:	d901      	bls.n	40c450 <f_write+0x29c>
  40c44c:	687b      	ldr	r3, [r7, #4]
  40c44e:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
  40c450:	68fb      	ldr	r3, [r7, #12]
  40c452:	689b      	ldr	r3, [r3, #8]
  40c454:	f3c3 0308 	ubfx	r3, r3, #0, #9
  40c458:	3320      	adds	r3, #32
  40c45a:	68fa      	ldr	r2, [r7, #12]
  40c45c:	4413      	add	r3, r2
  40c45e:	3304      	adds	r3, #4
  40c460:	6a3a      	ldr	r2, [r7, #32]
  40c462:	69b9      	ldr	r1, [r7, #24]
  40c464:	4618      	mov	r0, r3
  40c466:	4b1c      	ldr	r3, [pc, #112]	; (40c4d8 <f_write+0x324>)
  40c468:	4798      	blx	r3
		fp->flag |= FA__DIRTY;
  40c46a:	68fb      	ldr	r3, [r7, #12]
  40c46c:	799b      	ldrb	r3, [r3, #6]
  40c46e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40c472:	b2da      	uxtb	r2, r3
  40c474:	68fb      	ldr	r3, [r7, #12]
  40c476:	719a      	strb	r2, [r3, #6]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
  40c478:	69ba      	ldr	r2, [r7, #24]
  40c47a:	6a3b      	ldr	r3, [r7, #32]
  40c47c:	4413      	add	r3, r2
  40c47e:	61bb      	str	r3, [r7, #24]
  40c480:	68fb      	ldr	r3, [r7, #12]
  40c482:	689a      	ldr	r2, [r3, #8]
  40c484:	6a3b      	ldr	r3, [r7, #32]
  40c486:	441a      	add	r2, r3
  40c488:	68fb      	ldr	r3, [r7, #12]
  40c48a:	609a      	str	r2, [r3, #8]
  40c48c:	683b      	ldr	r3, [r7, #0]
  40c48e:	681a      	ldr	r2, [r3, #0]
  40c490:	6a3b      	ldr	r3, [r7, #32]
  40c492:	441a      	add	r2, r3
  40c494:	683b      	ldr	r3, [r7, #0]
  40c496:	601a      	str	r2, [r3, #0]
  40c498:	687a      	ldr	r2, [r7, #4]
  40c49a:	6a3b      	ldr	r3, [r7, #32]
  40c49c:	1ad3      	subs	r3, r2, r3
  40c49e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
  40c4a0:	687b      	ldr	r3, [r7, #4]
  40c4a2:	2b00      	cmp	r3, #0
  40c4a4:	f47f aebc 	bne.w	40c220 <f_write+0x6c>
  40c4a8:	e000      	b.n	40c4ac <f_write+0x2f8>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
  40c4aa:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
  40c4ac:	68fb      	ldr	r3, [r7, #12]
  40c4ae:	689a      	ldr	r2, [r3, #8]
  40c4b0:	68fb      	ldr	r3, [r7, #12]
  40c4b2:	68db      	ldr	r3, [r3, #12]
  40c4b4:	429a      	cmp	r2, r3
  40c4b6:	d903      	bls.n	40c4c0 <f_write+0x30c>
  40c4b8:	68fb      	ldr	r3, [r7, #12]
  40c4ba:	689a      	ldr	r2, [r3, #8]
  40c4bc:	68fb      	ldr	r3, [r7, #12]
  40c4be:	60da      	str	r2, [r3, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
  40c4c0:	68fb      	ldr	r3, [r7, #12]
  40c4c2:	799b      	ldrb	r3, [r3, #6]
  40c4c4:	f043 0320 	orr.w	r3, r3, #32
  40c4c8:	b2da      	uxtb	r2, r3
  40c4ca:	68fb      	ldr	r3, [r7, #12]
  40c4cc:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
  40c4ce:	2300      	movs	r3, #0
}
  40c4d0:	4618      	mov	r0, r3
  40c4d2:	372c      	adds	r7, #44	; 0x2c
  40c4d4:	46bd      	mov	sp, r7
  40c4d6:	bd90      	pop	{r4, r7, pc}
  40c4d8:	0040a08d 	.word	0x0040a08d

0040c4dc <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
  40c4dc:	b590      	push	{r4, r7, lr}
  40c4de:	b087      	sub	sp, #28
  40c4e0:	af00      	add	r7, sp, #0
  40c4e2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
  40c4e4:	687b      	ldr	r3, [r7, #4]
  40c4e6:	681a      	ldr	r2, [r3, #0]
  40c4e8:	687b      	ldr	r3, [r7, #4]
  40c4ea:	889b      	ldrh	r3, [r3, #4]
  40c4ec:	4619      	mov	r1, r3
  40c4ee:	4610      	mov	r0, r2
  40c4f0:	4b5a      	ldr	r3, [pc, #360]	; (40c65c <f_sync+0x180>)
  40c4f2:	4798      	blx	r3
  40c4f4:	4603      	mov	r3, r0
  40c4f6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
  40c4f8:	7dfb      	ldrb	r3, [r7, #23]
  40c4fa:	2b00      	cmp	r3, #0
  40c4fc:	f040 80a8 	bne.w	40c650 <f_sync+0x174>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
  40c500:	687b      	ldr	r3, [r7, #4]
  40c502:	799b      	ldrb	r3, [r3, #6]
  40c504:	f003 0320 	and.w	r3, r3, #32
  40c508:	2b00      	cmp	r3, #0
  40c50a:	f000 80a1 	beq.w	40c650 <f_sync+0x174>
#if !_FS_TINY	/* Write-back dirty buffer */
			if (fp->flag & FA__DIRTY) {
  40c50e:	687b      	ldr	r3, [r7, #4]
  40c510:	799b      	ldrb	r3, [r3, #6]
  40c512:	f003 0340 	and.w	r3, r3, #64	; 0x40
  40c516:	2b00      	cmp	r3, #0
  40c518:	d016      	beq.n	40c548 <f_sync+0x6c>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
  40c51a:	687b      	ldr	r3, [r7, #4]
  40c51c:	681b      	ldr	r3, [r3, #0]
  40c51e:	7858      	ldrb	r0, [r3, #1]
  40c520:	687b      	ldr	r3, [r7, #4]
  40c522:	f103 0124 	add.w	r1, r3, #36	; 0x24
  40c526:	687b      	ldr	r3, [r7, #4]
  40c528:	699a      	ldr	r2, [r3, #24]
  40c52a:	2301      	movs	r3, #1
  40c52c:	4c4c      	ldr	r4, [pc, #304]	; (40c660 <f_sync+0x184>)
  40c52e:	47a0      	blx	r4
  40c530:	4603      	mov	r3, r0
  40c532:	2b00      	cmp	r3, #0
  40c534:	d001      	beq.n	40c53a <f_sync+0x5e>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
  40c536:	2301      	movs	r3, #1
  40c538:	e08b      	b.n	40c652 <f_sync+0x176>
				fp->flag &= ~FA__DIRTY;
  40c53a:	687b      	ldr	r3, [r7, #4]
  40c53c:	799b      	ldrb	r3, [r3, #6]
  40c53e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  40c542:	b2da      	uxtb	r2, r3
  40c544:	687b      	ldr	r3, [r7, #4]
  40c546:	719a      	strb	r2, [r3, #6]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
  40c548:	687b      	ldr	r3, [r7, #4]
  40c54a:	681a      	ldr	r2, [r3, #0]
  40c54c:	687b      	ldr	r3, [r7, #4]
  40c54e:	69db      	ldr	r3, [r3, #28]
  40c550:	4619      	mov	r1, r3
  40c552:	4610      	mov	r0, r2
  40c554:	4b43      	ldr	r3, [pc, #268]	; (40c664 <f_sync+0x188>)
  40c556:	4798      	blx	r3
  40c558:	4603      	mov	r3, r0
  40c55a:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
  40c55c:	7dfb      	ldrb	r3, [r7, #23]
  40c55e:	2b00      	cmp	r3, #0
  40c560:	d176      	bne.n	40c650 <f_sync+0x174>
				dir = fp->dir_ptr;
  40c562:	687b      	ldr	r3, [r7, #4]
  40c564:	6a1b      	ldr	r3, [r3, #32]
  40c566:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
  40c568:	693b      	ldr	r3, [r7, #16]
  40c56a:	330b      	adds	r3, #11
  40c56c:	693a      	ldr	r2, [r7, #16]
  40c56e:	320b      	adds	r2, #11
  40c570:	7812      	ldrb	r2, [r2, #0]
  40c572:	f042 0220 	orr.w	r2, r2, #32
  40c576:	b2d2      	uxtb	r2, r2
  40c578:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
  40c57a:	693b      	ldr	r3, [r7, #16]
  40c57c:	331c      	adds	r3, #28
  40c57e:	687a      	ldr	r2, [r7, #4]
  40c580:	68d2      	ldr	r2, [r2, #12]
  40c582:	b2d2      	uxtb	r2, r2
  40c584:	701a      	strb	r2, [r3, #0]
  40c586:	693b      	ldr	r3, [r7, #16]
  40c588:	331d      	adds	r3, #29
  40c58a:	687a      	ldr	r2, [r7, #4]
  40c58c:	68d2      	ldr	r2, [r2, #12]
  40c58e:	b292      	uxth	r2, r2
  40c590:	0a12      	lsrs	r2, r2, #8
  40c592:	b292      	uxth	r2, r2
  40c594:	b2d2      	uxtb	r2, r2
  40c596:	701a      	strb	r2, [r3, #0]
  40c598:	693b      	ldr	r3, [r7, #16]
  40c59a:	331e      	adds	r3, #30
  40c59c:	687a      	ldr	r2, [r7, #4]
  40c59e:	68d2      	ldr	r2, [r2, #12]
  40c5a0:	0c12      	lsrs	r2, r2, #16
  40c5a2:	b2d2      	uxtb	r2, r2
  40c5a4:	701a      	strb	r2, [r3, #0]
  40c5a6:	693b      	ldr	r3, [r7, #16]
  40c5a8:	331f      	adds	r3, #31
  40c5aa:	687a      	ldr	r2, [r7, #4]
  40c5ac:	68d2      	ldr	r2, [r2, #12]
  40c5ae:	0e12      	lsrs	r2, r2, #24
  40c5b0:	b2d2      	uxtb	r2, r2
  40c5b2:	701a      	strb	r2, [r3, #0]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
  40c5b4:	693b      	ldr	r3, [r7, #16]
  40c5b6:	331a      	adds	r3, #26
  40c5b8:	687a      	ldr	r2, [r7, #4]
  40c5ba:	6912      	ldr	r2, [r2, #16]
  40c5bc:	b2d2      	uxtb	r2, r2
  40c5be:	701a      	strb	r2, [r3, #0]
  40c5c0:	693b      	ldr	r3, [r7, #16]
  40c5c2:	331b      	adds	r3, #27
  40c5c4:	687a      	ldr	r2, [r7, #4]
  40c5c6:	6912      	ldr	r2, [r2, #16]
  40c5c8:	b292      	uxth	r2, r2
  40c5ca:	0a12      	lsrs	r2, r2, #8
  40c5cc:	b292      	uxth	r2, r2
  40c5ce:	b2d2      	uxtb	r2, r2
  40c5d0:	701a      	strb	r2, [r3, #0]
  40c5d2:	693b      	ldr	r3, [r7, #16]
  40c5d4:	3314      	adds	r3, #20
  40c5d6:	687a      	ldr	r2, [r7, #4]
  40c5d8:	6912      	ldr	r2, [r2, #16]
  40c5da:	0c12      	lsrs	r2, r2, #16
  40c5dc:	b2d2      	uxtb	r2, r2
  40c5de:	701a      	strb	r2, [r3, #0]
  40c5e0:	693b      	ldr	r3, [r7, #16]
  40c5e2:	3315      	adds	r3, #21
  40c5e4:	687a      	ldr	r2, [r7, #4]
  40c5e6:	6912      	ldr	r2, [r2, #16]
  40c5e8:	0c12      	lsrs	r2, r2, #16
  40c5ea:	b292      	uxth	r2, r2
  40c5ec:	0a12      	lsrs	r2, r2, #8
  40c5ee:	b292      	uxth	r2, r2
  40c5f0:	b2d2      	uxtb	r2, r2
  40c5f2:	701a      	strb	r2, [r3, #0]
				tim = get_fattime();						/* Update updated time */
  40c5f4:	4b1c      	ldr	r3, [pc, #112]	; (40c668 <f_sync+0x18c>)
  40c5f6:	4798      	blx	r3
  40c5f8:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir+DIR_WrtTime, tim);
  40c5fa:	693b      	ldr	r3, [r7, #16]
  40c5fc:	3316      	adds	r3, #22
  40c5fe:	68fa      	ldr	r2, [r7, #12]
  40c600:	b2d2      	uxtb	r2, r2
  40c602:	701a      	strb	r2, [r3, #0]
  40c604:	693b      	ldr	r3, [r7, #16]
  40c606:	3317      	adds	r3, #23
  40c608:	68fa      	ldr	r2, [r7, #12]
  40c60a:	b292      	uxth	r2, r2
  40c60c:	0a12      	lsrs	r2, r2, #8
  40c60e:	b292      	uxth	r2, r2
  40c610:	b2d2      	uxtb	r2, r2
  40c612:	701a      	strb	r2, [r3, #0]
  40c614:	693b      	ldr	r3, [r7, #16]
  40c616:	3318      	adds	r3, #24
  40c618:	68fa      	ldr	r2, [r7, #12]
  40c61a:	0c12      	lsrs	r2, r2, #16
  40c61c:	b2d2      	uxtb	r2, r2
  40c61e:	701a      	strb	r2, [r3, #0]
  40c620:	693b      	ldr	r3, [r7, #16]
  40c622:	3319      	adds	r3, #25
  40c624:	68fa      	ldr	r2, [r7, #12]
  40c626:	0e12      	lsrs	r2, r2, #24
  40c628:	b2d2      	uxtb	r2, r2
  40c62a:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
  40c62c:	687b      	ldr	r3, [r7, #4]
  40c62e:	799b      	ldrb	r3, [r3, #6]
  40c630:	f023 0320 	bic.w	r3, r3, #32
  40c634:	b2da      	uxtb	r2, r3
  40c636:	687b      	ldr	r3, [r7, #4]
  40c638:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
  40c63a:	687b      	ldr	r3, [r7, #4]
  40c63c:	681b      	ldr	r3, [r3, #0]
  40c63e:	2201      	movs	r2, #1
  40c640:	711a      	strb	r2, [r3, #4]
				res = sync(fp->fs);
  40c642:	687b      	ldr	r3, [r7, #4]
  40c644:	681b      	ldr	r3, [r3, #0]
  40c646:	4618      	mov	r0, r3
  40c648:	4b08      	ldr	r3, [pc, #32]	; (40c66c <f_sync+0x190>)
  40c64a:	4798      	blx	r3
  40c64c:	4603      	mov	r3, r0
  40c64e:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
  40c650:	7dfb      	ldrb	r3, [r7, #23]
}
  40c652:	4618      	mov	r0, r3
  40c654:	371c      	adds	r7, #28
  40c656:	46bd      	mov	sp, r7
  40c658:	bd90      	pop	{r4, r7, pc}
  40c65a:	bf00      	nop
  40c65c:	0040bd59 	.word	0x0040bd59
  40c660:	00409eb1 	.word	0x00409eb1
  40c664:	0040a181 	.word	0x0040a181
  40c668:	0040a021 	.word	0x0040a021
  40c66c:	0040a23d 	.word	0x0040a23d

0040c670 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
  40c670:	b580      	push	{r7, lr}
  40c672:	b084      	sub	sp, #16
  40c674:	af00      	add	r7, sp, #0
  40c676:	6078      	str	r0, [r7, #4]
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
  40c678:	6878      	ldr	r0, [r7, #4]
  40c67a:	4b07      	ldr	r3, [pc, #28]	; (40c698 <f_close+0x28>)
  40c67c:	4798      	blx	r3
  40c67e:	4603      	mov	r3, r0
  40c680:	73fb      	strb	r3, [r7, #15]
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
  40c682:	7bfb      	ldrb	r3, [r7, #15]
  40c684:	2b00      	cmp	r3, #0
  40c686:	d102      	bne.n	40c68e <f_close+0x1e>
  40c688:	687b      	ldr	r3, [r7, #4]
  40c68a:	2200      	movs	r2, #0
  40c68c:	601a      	str	r2, [r3, #0]
	return res;
  40c68e:	7bfb      	ldrb	r3, [r7, #15]
#endif
}
  40c690:	4618      	mov	r0, r3
  40c692:	3710      	adds	r7, #16
  40c694:	46bd      	mov	sp, r7
  40c696:	bd80      	pop	{r7, pc}
  40c698:	0040c4dd 	.word	0x0040c4dd

0040c69c <f_mkfs>:
FRESULT f_mkfs (
	BYTE drv,		/* Logical drive number */
	BYTE sfd,		/* Partitioning rule 0:FDISK, 1:SFD */
	UINT au			/* Allocation unit size [bytes] */
)
{
  40c69c:	b590      	push	{r4, r7, lr}
  40c69e:	b095      	sub	sp, #84	; 0x54
  40c6a0:	af00      	add	r7, sp, #0
  40c6a2:	4603      	mov	r3, r0
  40c6a4:	603a      	str	r2, [r7, #0]
  40c6a6:	71fb      	strb	r3, [r7, #7]
  40c6a8:	460b      	mov	r3, r1
  40c6aa:	71bb      	strb	r3, [r7, #6]
	FATFS *fs;
	DSTATUS stat;


	/* Check mounted drive and clear work area */
	if (drv >= _VOLUMES) return FR_INVALID_DRIVE;
  40c6ac:	79fb      	ldrb	r3, [r7, #7]
  40c6ae:	2b07      	cmp	r3, #7
  40c6b0:	d902      	bls.n	40c6b8 <f_mkfs+0x1c>
  40c6b2:	230b      	movs	r3, #11
  40c6b4:	f000 bc95 	b.w	40cfe2 <f_mkfs+0x946>
	if (sfd > 1) return FR_INVALID_PARAMETER;
  40c6b8:	79bb      	ldrb	r3, [r7, #6]
  40c6ba:	2b01      	cmp	r3, #1
  40c6bc:	d902      	bls.n	40c6c4 <f_mkfs+0x28>
  40c6be:	2313      	movs	r3, #19
  40c6c0:	f000 bc8f 	b.w	40cfe2 <f_mkfs+0x946>
	if (au & (au - 1)) return FR_INVALID_PARAMETER;
  40c6c4:	683b      	ldr	r3, [r7, #0]
  40c6c6:	1e5a      	subs	r2, r3, #1
  40c6c8:	683b      	ldr	r3, [r7, #0]
  40c6ca:	4013      	ands	r3, r2
  40c6cc:	2b00      	cmp	r3, #0
  40c6ce:	d002      	beq.n	40c6d6 <f_mkfs+0x3a>
  40c6d0:	2313      	movs	r3, #19
  40c6d2:	f000 bc86 	b.w	40cfe2 <f_mkfs+0x946>
	fs = FatFs[drv];
  40c6d6:	79fb      	ldrb	r3, [r7, #7]
  40c6d8:	4a9b      	ldr	r2, [pc, #620]	; (40c948 <f_mkfs+0x2ac>)
  40c6da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  40c6de:	633b      	str	r3, [r7, #48]	; 0x30
	if (!fs) return FR_NOT_ENABLED;
  40c6e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  40c6e2:	2b00      	cmp	r3, #0
  40c6e4:	d102      	bne.n	40c6ec <f_mkfs+0x50>
  40c6e6:	230c      	movs	r3, #12
  40c6e8:	f000 bc7b 	b.w	40cfe2 <f_mkfs+0x946>
	fs->fs_type = 0;
  40c6ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  40c6ee:	2200      	movs	r2, #0
  40c6f0:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(drv);	/* Physical drive */
  40c6f2:	79fb      	ldrb	r3, [r7, #7]
  40c6f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	part = LD2PT(drv);	/* Partition (0:auto detect, 1-4:get from partition table)*/
  40c6f8:	2300      	movs	r3, #0
  40c6fa:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	/* Get disk statics */
	stat = disk_initialize(pdrv);
  40c6fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  40c702:	4618      	mov	r0, r3
  40c704:	4b91      	ldr	r3, [pc, #580]	; (40c94c <f_mkfs+0x2b0>)
  40c706:	4798      	blx	r3
  40c708:	4603      	mov	r3, r0
  40c70a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	if (stat & STA_NOINIT) return FR_NOT_READY;
  40c70e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
  40c712:	f003 0301 	and.w	r3, r3, #1
  40c716:	2b00      	cmp	r3, #0
  40c718:	d002      	beq.n	40c720 <f_mkfs+0x84>
  40c71a:	2303      	movs	r3, #3
  40c71c:	f000 bc61 	b.w	40cfe2 <f_mkfs+0x946>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
  40c720:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
  40c724:	f003 0304 	and.w	r3, r3, #4
  40c728:	2b00      	cmp	r3, #0
  40c72a:	d002      	beq.n	40c732 <f_mkfs+0x96>
  40c72c:	230a      	movs	r3, #10
  40c72e:	f000 bc58 	b.w	40cfe2 <f_mkfs+0x946>
		if (!tbl[4]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = LD_DWORD(tbl+8);	/* Volume start sector */
		n_vol = LD_DWORD(tbl+12);	/* Volume size */
	} else {
		/* Create a partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &n_vol) != RES_OK || n_vol < 128)
  40c732:	f107 020c 	add.w	r2, r7, #12
  40c736:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  40c73a:	2101      	movs	r1, #1
  40c73c:	4618      	mov	r0, r3
  40c73e:	4b84      	ldr	r3, [pc, #528]	; (40c950 <f_mkfs+0x2b4>)
  40c740:	4798      	blx	r3
  40c742:	4603      	mov	r3, r0
  40c744:	2b00      	cmp	r3, #0
  40c746:	d102      	bne.n	40c74e <f_mkfs+0xb2>
  40c748:	68fb      	ldr	r3, [r7, #12]
  40c74a:	2b7f      	cmp	r3, #127	; 0x7f
  40c74c:	d802      	bhi.n	40c754 <f_mkfs+0xb8>
			return FR_DISK_ERR;
  40c74e:	2301      	movs	r3, #1
  40c750:	f000 bc47 	b.w	40cfe2 <f_mkfs+0x946>
		b_vol = (sfd) ? 0 : 63;		/* Volume start sector */
  40c754:	79bb      	ldrb	r3, [r7, #6]
  40c756:	2b00      	cmp	r3, #0
  40c758:	d001      	beq.n	40c75e <f_mkfs+0xc2>
  40c75a:	2300      	movs	r3, #0
  40c75c:	e000      	b.n	40c760 <f_mkfs+0xc4>
  40c75e:	233f      	movs	r3, #63	; 0x3f
  40c760:	62bb      	str	r3, [r7, #40]	; 0x28
		n_vol -= b_vol;				/* Volume size */
  40c762:	68fa      	ldr	r2, [r7, #12]
  40c764:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40c766:	1ad3      	subs	r3, r2, r3
  40c768:	60fb      	str	r3, [r7, #12]
	}

	if (!au) {				/* AU auto selection */
  40c76a:	683b      	ldr	r3, [r7, #0]
  40c76c:	2b00      	cmp	r3, #0
  40c76e:	d118      	bne.n	40c7a2 <f_mkfs+0x106>
		vs = n_vol / (2000 / (SS(fs) / 512));
  40c770:	68fb      	ldr	r3, [r7, #12]
  40c772:	4a78      	ldr	r2, [pc, #480]	; (40c954 <f_mkfs+0x2b8>)
  40c774:	fba2 2303 	umull	r2, r3, r2, r3
  40c778:	09db      	lsrs	r3, r3, #7
  40c77a:	627b      	str	r3, [r7, #36]	; 0x24
		for (i = 0; vs < vst[i]; i++) ;
  40c77c:	2300      	movs	r3, #0
  40c77e:	647b      	str	r3, [r7, #68]	; 0x44
  40c780:	e002      	b.n	40c788 <f_mkfs+0xec>
  40c782:	6c7b      	ldr	r3, [r7, #68]	; 0x44
  40c784:	3301      	adds	r3, #1
  40c786:	647b      	str	r3, [r7, #68]	; 0x44
  40c788:	4a73      	ldr	r2, [pc, #460]	; (40c958 <f_mkfs+0x2bc>)
  40c78a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
  40c78c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
  40c790:	461a      	mov	r2, r3
  40c792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40c794:	429a      	cmp	r2, r3
  40c796:	d8f4      	bhi.n	40c782 <f_mkfs+0xe6>
		au = cst[i];
  40c798:	4a70      	ldr	r2, [pc, #448]	; (40c95c <f_mkfs+0x2c0>)
  40c79a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
  40c79c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
  40c7a0:	603b      	str	r3, [r7, #0]
	}
	au /= SS(fs);		/* Number of sectors per cluster */
  40c7a2:	683b      	ldr	r3, [r7, #0]
  40c7a4:	0a5b      	lsrs	r3, r3, #9
  40c7a6:	603b      	str	r3, [r7, #0]
	if (au == 0) au = 1;
  40c7a8:	683b      	ldr	r3, [r7, #0]
  40c7aa:	2b00      	cmp	r3, #0
  40c7ac:	d101      	bne.n	40c7b2 <f_mkfs+0x116>
  40c7ae:	2301      	movs	r3, #1
  40c7b0:	603b      	str	r3, [r7, #0]
	if (au > 128) au = 128;
  40c7b2:	683b      	ldr	r3, [r7, #0]
  40c7b4:	2b80      	cmp	r3, #128	; 0x80
  40c7b6:	d901      	bls.n	40c7bc <f_mkfs+0x120>
  40c7b8:	2380      	movs	r3, #128	; 0x80
  40c7ba:	603b      	str	r3, [r7, #0]

	/* Pre-compute number of clusters and FAT syb-type */
	n_clst = n_vol / au;
  40c7bc:	68fa      	ldr	r2, [r7, #12]
  40c7be:	683b      	ldr	r3, [r7, #0]
  40c7c0:	fbb2 f3f3 	udiv	r3, r2, r3
  40c7c4:	623b      	str	r3, [r7, #32]
	fmt = FS_FAT12;
  40c7c6:	2301      	movs	r3, #1
  40c7c8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	if (n_clst >= MIN_FAT16) fmt = FS_FAT16;
  40c7cc:	6a3b      	ldr	r3, [r7, #32]
  40c7ce:	f640 72f5 	movw	r2, #4085	; 0xff5
  40c7d2:	4293      	cmp	r3, r2
  40c7d4:	d902      	bls.n	40c7dc <f_mkfs+0x140>
  40c7d6:	2302      	movs	r3, #2
  40c7d8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	if (n_clst >= MIN_FAT32) fmt = FS_FAT32;
  40c7dc:	6a3b      	ldr	r3, [r7, #32]
  40c7de:	f64f 72f5 	movw	r2, #65525	; 0xfff5
  40c7e2:	4293      	cmp	r3, r2
  40c7e4:	d902      	bls.n	40c7ec <f_mkfs+0x150>
  40c7e6:	2303      	movs	r3, #3
  40c7e8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	/* Determine offset and size of FAT structure */
	if (fmt == FS_FAT32) {
  40c7ec:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
  40c7f0:	2b03      	cmp	r3, #3
  40c7f2:	d10a      	bne.n	40c80a <f_mkfs+0x16e>
		n_fat = ((n_clst * 4) + 8 + SS(fs) - 1) / SS(fs);
  40c7f4:	6a3b      	ldr	r3, [r7, #32]
  40c7f6:	3382      	adds	r3, #130	; 0x82
  40c7f8:	009b      	lsls	r3, r3, #2
  40c7fa:	3b01      	subs	r3, #1
  40c7fc:	0a5b      	lsrs	r3, r3, #9
  40c7fe:	63bb      	str	r3, [r7, #56]	; 0x38
		n_rsv = 32;
  40c800:	2320      	movs	r3, #32
  40c802:	63fb      	str	r3, [r7, #60]	; 0x3c
		n_dir = 0;
  40c804:	2300      	movs	r3, #0
  40c806:	637b      	str	r3, [r7, #52]	; 0x34
  40c808:	e018      	b.n	40c83c <f_mkfs+0x1a0>
	} else {
		n_fat = (fmt == FS_FAT12) ? (n_clst * 3 + 1) / 2 + 3 : (n_clst * 2) + 4;
  40c80a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
  40c80e:	2b01      	cmp	r3, #1
  40c810:	d107      	bne.n	40c822 <f_mkfs+0x186>
  40c812:	6a3a      	ldr	r2, [r7, #32]
  40c814:	4613      	mov	r3, r2
  40c816:	005b      	lsls	r3, r3, #1
  40c818:	4413      	add	r3, r2
  40c81a:	3301      	adds	r3, #1
  40c81c:	085b      	lsrs	r3, r3, #1
  40c81e:	3303      	adds	r3, #3
  40c820:	e002      	b.n	40c828 <f_mkfs+0x18c>
  40c822:	6a3b      	ldr	r3, [r7, #32]
  40c824:	3302      	adds	r3, #2
  40c826:	005b      	lsls	r3, r3, #1
  40c828:	63bb      	str	r3, [r7, #56]	; 0x38
		n_fat = (n_fat + SS(fs) - 1) / SS(fs);
  40c82a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  40c82c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
  40c830:	0a5b      	lsrs	r3, r3, #9
  40c832:	63bb      	str	r3, [r7, #56]	; 0x38
		n_rsv = 1;
  40c834:	2301      	movs	r3, #1
  40c836:	63fb      	str	r3, [r7, #60]	; 0x3c
		n_dir = (DWORD)N_ROOTDIR * SZ_DIR / SS(fs);
  40c838:	2320      	movs	r3, #32
  40c83a:	637b      	str	r3, [r7, #52]	; 0x34
	}
	b_fat = b_vol + n_rsv;				/* FAT area start sector */
  40c83c:	6aba      	ldr	r2, [r7, #40]	; 0x28
  40c83e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  40c840:	4413      	add	r3, r2
  40c842:	643b      	str	r3, [r7, #64]	; 0x40
	b_dir = b_fat + n_fat * N_FATS;		/* Directory area start sector */
  40c844:	6c3a      	ldr	r2, [r7, #64]	; 0x40
  40c846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  40c848:	4413      	add	r3, r2
  40c84a:	61fb      	str	r3, [r7, #28]
	b_data = b_dir + n_dir;				/* Data area start sector */
  40c84c:	69fa      	ldr	r2, [r7, #28]
  40c84e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  40c850:	4413      	add	r3, r2
  40c852:	61bb      	str	r3, [r7, #24]
	if (n_vol < b_data + au - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
  40c854:	69ba      	ldr	r2, [r7, #24]
  40c856:	683b      	ldr	r3, [r7, #0]
  40c858:	441a      	add	r2, r3
  40c85a:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40c85c:	1ad2      	subs	r2, r2, r3
  40c85e:	68fb      	ldr	r3, [r7, #12]
  40c860:	429a      	cmp	r2, r3
  40c862:	d901      	bls.n	40c868 <f_mkfs+0x1cc>
  40c864:	230e      	movs	r3, #14
  40c866:	e3bc      	b.n	40cfe2 <f_mkfs+0x946>

	/* Align data start sector to erase block boundary (for flash memory media) */
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &n) != RES_OK || !n || n > 32768) n = 1;
  40c868:	f107 0210 	add.w	r2, r7, #16
  40c86c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  40c870:	2103      	movs	r1, #3
  40c872:	4618      	mov	r0, r3
  40c874:	4b36      	ldr	r3, [pc, #216]	; (40c950 <f_mkfs+0x2b4>)
  40c876:	4798      	blx	r3
  40c878:	4603      	mov	r3, r0
  40c87a:	2b00      	cmp	r3, #0
  40c87c:	d106      	bne.n	40c88c <f_mkfs+0x1f0>
  40c87e:	693b      	ldr	r3, [r7, #16]
  40c880:	2b00      	cmp	r3, #0
  40c882:	d003      	beq.n	40c88c <f_mkfs+0x1f0>
  40c884:	693b      	ldr	r3, [r7, #16]
  40c886:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  40c88a:	d901      	bls.n	40c890 <f_mkfs+0x1f4>
  40c88c:	2301      	movs	r3, #1
  40c88e:	613b      	str	r3, [r7, #16]
	n = (b_data + n - 1) & ~(n - 1);	/* Next nearest erase block from current data start */
  40c890:	693a      	ldr	r2, [r7, #16]
  40c892:	69bb      	ldr	r3, [r7, #24]
  40c894:	4413      	add	r3, r2
  40c896:	1e5a      	subs	r2, r3, #1
  40c898:	693b      	ldr	r3, [r7, #16]
  40c89a:	425b      	negs	r3, r3
  40c89c:	4013      	ands	r3, r2
  40c89e:	613b      	str	r3, [r7, #16]
	n = (n - b_data) / N_FATS;
  40c8a0:	693a      	ldr	r2, [r7, #16]
  40c8a2:	69bb      	ldr	r3, [r7, #24]
  40c8a4:	1ad3      	subs	r3, r2, r3
  40c8a6:	613b      	str	r3, [r7, #16]
	if (fmt == FS_FAT32) {		/* FAT32: Move FAT offset */
  40c8a8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
  40c8ac:	2b03      	cmp	r3, #3
  40c8ae:	d108      	bne.n	40c8c2 <f_mkfs+0x226>
		n_rsv += n;
  40c8b0:	693b      	ldr	r3, [r7, #16]
  40c8b2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
  40c8b4:	4413      	add	r3, r2
  40c8b6:	63fb      	str	r3, [r7, #60]	; 0x3c
		b_fat += n;
  40c8b8:	693b      	ldr	r3, [r7, #16]
  40c8ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
  40c8bc:	4413      	add	r3, r2
  40c8be:	643b      	str	r3, [r7, #64]	; 0x40
  40c8c0:	e003      	b.n	40c8ca <f_mkfs+0x22e>
	} else {					/* FAT12/16: Expand FAT size */
		n_fat += n;
  40c8c2:	693b      	ldr	r3, [r7, #16]
  40c8c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
  40c8c6:	4413      	add	r3, r2
  40c8c8:	63bb      	str	r3, [r7, #56]	; 0x38
	}

	/* Determine number of clusters and final check of validity of the FAT sub-type */
	n_clst = (n_vol - n_rsv - n_fat * N_FATS - n_dir) / au;
  40c8ca:	68fa      	ldr	r2, [r7, #12]
  40c8cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  40c8ce:	1ad2      	subs	r2, r2, r3
  40c8d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  40c8d2:	1ad2      	subs	r2, r2, r3
  40c8d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  40c8d6:	1ad2      	subs	r2, r2, r3
  40c8d8:	683b      	ldr	r3, [r7, #0]
  40c8da:	fbb2 f3f3 	udiv	r3, r2, r3
  40c8de:	623b      	str	r3, [r7, #32]
	if (   (fmt == FS_FAT16 && n_clst < MIN_FAT16)
  40c8e0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
  40c8e4:	2b02      	cmp	r3, #2
  40c8e6:	d104      	bne.n	40c8f2 <f_mkfs+0x256>
  40c8e8:	6a3b      	ldr	r3, [r7, #32]
  40c8ea:	f640 72f5 	movw	r2, #4085	; 0xff5
  40c8ee:	4293      	cmp	r3, r2
  40c8f0:	d908      	bls.n	40c904 <f_mkfs+0x268>
		|| (fmt == FS_FAT32 && n_clst < MIN_FAT32))
  40c8f2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
  40c8f6:	2b03      	cmp	r3, #3
  40c8f8:	d106      	bne.n	40c908 <f_mkfs+0x26c>
  40c8fa:	6a3b      	ldr	r3, [r7, #32]
  40c8fc:	f64f 72f5 	movw	r2, #65525	; 0xfff5
  40c900:	4293      	cmp	r3, r2
  40c902:	d801      	bhi.n	40c908 <f_mkfs+0x26c>
		return FR_MKFS_ABORTED;
  40c904:	230e      	movs	r3, #14
  40c906:	e36c      	b.n	40cfe2 <f_mkfs+0x946>

	switch (fmt) {	/* Determine system ID for partition table */
  40c908:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
  40c90c:	2b01      	cmp	r3, #1
  40c90e:	d002      	beq.n	40c916 <f_mkfs+0x27a>
  40c910:	2b02      	cmp	r3, #2
  40c912:	d004      	beq.n	40c91e <f_mkfs+0x282>
  40c914:	e00d      	b.n	40c932 <f_mkfs+0x296>
	case FS_FAT12:	sys = 0x01; break;
  40c916:	2301      	movs	r3, #1
  40c918:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
  40c91c:	e00c      	b.n	40c938 <f_mkfs+0x29c>
	case FS_FAT16:	sys = (n_vol < 0x10000) ? 0x04 : 0x06; break;
  40c91e:	68fb      	ldr	r3, [r7, #12]
  40c920:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  40c924:	d201      	bcs.n	40c92a <f_mkfs+0x28e>
  40c926:	2304      	movs	r3, #4
  40c928:	e000      	b.n	40c92c <f_mkfs+0x290>
  40c92a:	2306      	movs	r3, #6
  40c92c:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
  40c930:	e002      	b.n	40c938 <f_mkfs+0x29c>
	default: 		sys = 0x0C;
  40c932:	230c      	movs	r3, #12
  40c934:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
		tbl = &fs->win[MBR_Table + (part - 1) * SZ_PTE];
		tbl[4] = sys;
		if (disk_write(pdrv, fs->win, 0, 1) != RES_OK) return FR_DISK_ERR;
		md = 0xF8;
	} else {
		if (sfd) {	/* No patition table (SFD) */
  40c938:	79bb      	ldrb	r3, [r7, #6]
  40c93a:	2b00      	cmp	r3, #0
  40c93c:	d010      	beq.n	40c960 <f_mkfs+0x2c4>
			md = 0xF0;
  40c93e:	23f0      	movs	r3, #240	; 0xf0
  40c940:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
  40c944:	e089      	b.n	40ca5a <f_mkfs+0x3be>
  40c946:	bf00      	nop
  40c948:	2001a334 	.word	0x2001a334
  40c94c:	00409d61 	.word	0x00409d61
  40c950:	00409f61 	.word	0x00409f61
  40c954:	10624dd3 	.word	0x10624dd3
  40c958:	004111b4 	.word	0x004111b4
  40c95c:	004111cc 	.word	0x004111cc
		} else {	/* Create partition table (FDISK) */
			mem_set(fs->win, 0, SS(fs));
  40c960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  40c962:	3330      	adds	r3, #48	; 0x30
  40c964:	f44f 7200 	mov.w	r2, #512	; 0x200
  40c968:	2100      	movs	r1, #0
  40c96a:	4618      	mov	r0, r3
  40c96c:	4b69      	ldr	r3, [pc, #420]	; (40cb14 <f_mkfs+0x478>)
  40c96e:	4798      	blx	r3
			tbl = fs->win+MBR_Table;	/* Create partiton table for single partition in the drive */
  40c970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  40c972:	3330      	adds	r3, #48	; 0x30
  40c974:	f503 73df 	add.w	r3, r3, #446	; 0x1be
  40c978:	617b      	str	r3, [r7, #20]
			tbl[1] = 1;						/* Partition start head */
  40c97a:	697b      	ldr	r3, [r7, #20]
  40c97c:	3301      	adds	r3, #1
  40c97e:	2201      	movs	r2, #1
  40c980:	701a      	strb	r2, [r3, #0]
			tbl[2] = 1;						/* Partition start sector */
  40c982:	697b      	ldr	r3, [r7, #20]
  40c984:	3302      	adds	r3, #2
  40c986:	2201      	movs	r2, #1
  40c988:	701a      	strb	r2, [r3, #0]
			tbl[3] = 0;						/* Partition start cylinder */
  40c98a:	697b      	ldr	r3, [r7, #20]
  40c98c:	3303      	adds	r3, #3
  40c98e:	2200      	movs	r2, #0
  40c990:	701a      	strb	r2, [r3, #0]
			tbl[4] = sys;					/* System type */
  40c992:	697b      	ldr	r3, [r7, #20]
  40c994:	3304      	adds	r3, #4
  40c996:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
  40c99a:	701a      	strb	r2, [r3, #0]
			tbl[5] = 254;					/* Partition end head */
  40c99c:	697b      	ldr	r3, [r7, #20]
  40c99e:	3305      	adds	r3, #5
  40c9a0:	22fe      	movs	r2, #254	; 0xfe
  40c9a2:	701a      	strb	r2, [r3, #0]
			n = (b_vol + n_vol) / 63 / 255;
  40c9a4:	68fa      	ldr	r2, [r7, #12]
  40c9a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40c9a8:	441a      	add	r2, r3
  40c9aa:	4b5b      	ldr	r3, [pc, #364]	; (40cb18 <f_mkfs+0x47c>)
  40c9ac:	fba3 1302 	umull	r1, r3, r3, r2
  40c9b0:	1ad2      	subs	r2, r2, r3
  40c9b2:	0852      	lsrs	r2, r2, #1
  40c9b4:	4413      	add	r3, r2
  40c9b6:	0b5b      	lsrs	r3, r3, #13
  40c9b8:	613b      	str	r3, [r7, #16]
			tbl[6] = (BYTE)((n >> 2) | 63);	/* Partiiton end sector */
  40c9ba:	697b      	ldr	r3, [r7, #20]
  40c9bc:	3306      	adds	r3, #6
  40c9be:	693a      	ldr	r2, [r7, #16]
  40c9c0:	0892      	lsrs	r2, r2, #2
  40c9c2:	b2d2      	uxtb	r2, r2
  40c9c4:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
  40c9c8:	b2d2      	uxtb	r2, r2
  40c9ca:	701a      	strb	r2, [r3, #0]
			tbl[7] = (BYTE)n;				/* End cylinder */
  40c9cc:	697b      	ldr	r3, [r7, #20]
  40c9ce:	3307      	adds	r3, #7
  40c9d0:	693a      	ldr	r2, [r7, #16]
  40c9d2:	b2d2      	uxtb	r2, r2
  40c9d4:	701a      	strb	r2, [r3, #0]
			ST_DWORD(tbl+8, 63);			/* Partition start in LBA */
  40c9d6:	697b      	ldr	r3, [r7, #20]
  40c9d8:	3308      	adds	r3, #8
  40c9da:	223f      	movs	r2, #63	; 0x3f
  40c9dc:	701a      	strb	r2, [r3, #0]
  40c9de:	697b      	ldr	r3, [r7, #20]
  40c9e0:	3309      	adds	r3, #9
  40c9e2:	2200      	movs	r2, #0
  40c9e4:	701a      	strb	r2, [r3, #0]
  40c9e6:	697b      	ldr	r3, [r7, #20]
  40c9e8:	330a      	adds	r3, #10
  40c9ea:	2200      	movs	r2, #0
  40c9ec:	701a      	strb	r2, [r3, #0]
  40c9ee:	697b      	ldr	r3, [r7, #20]
  40c9f0:	330b      	adds	r3, #11
  40c9f2:	2200      	movs	r2, #0
  40c9f4:	701a      	strb	r2, [r3, #0]
			ST_DWORD(tbl+12, n_vol);		/* Partition size in LBA */
  40c9f6:	697b      	ldr	r3, [r7, #20]
  40c9f8:	330c      	adds	r3, #12
  40c9fa:	68fa      	ldr	r2, [r7, #12]
  40c9fc:	b2d2      	uxtb	r2, r2
  40c9fe:	701a      	strb	r2, [r3, #0]
  40ca00:	697b      	ldr	r3, [r7, #20]
  40ca02:	330d      	adds	r3, #13
  40ca04:	68fa      	ldr	r2, [r7, #12]
  40ca06:	b292      	uxth	r2, r2
  40ca08:	0a12      	lsrs	r2, r2, #8
  40ca0a:	b292      	uxth	r2, r2
  40ca0c:	b2d2      	uxtb	r2, r2
  40ca0e:	701a      	strb	r2, [r3, #0]
  40ca10:	697b      	ldr	r3, [r7, #20]
  40ca12:	330e      	adds	r3, #14
  40ca14:	68fa      	ldr	r2, [r7, #12]
  40ca16:	0c12      	lsrs	r2, r2, #16
  40ca18:	b2d2      	uxtb	r2, r2
  40ca1a:	701a      	strb	r2, [r3, #0]
  40ca1c:	697b      	ldr	r3, [r7, #20]
  40ca1e:	330f      	adds	r3, #15
  40ca20:	68fa      	ldr	r2, [r7, #12]
  40ca22:	0e12      	lsrs	r2, r2, #24
  40ca24:	b2d2      	uxtb	r2, r2
  40ca26:	701a      	strb	r2, [r3, #0]
			ST_WORD(fs->win+BS_55AA, 0xAA55);	/* MBR signature */
  40ca28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  40ca2a:	2255      	movs	r2, #85	; 0x55
  40ca2c:	f883 222e 	strb.w	r2, [r3, #558]	; 0x22e
  40ca30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  40ca32:	22aa      	movs	r2, #170	; 0xaa
  40ca34:	f883 222f 	strb.w	r2, [r3, #559]	; 0x22f
			if (disk_write(pdrv, fs->win, 0, 1) != RES_OK)	/* Write it to the MBR sector */
  40ca38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  40ca3a:	f103 0130 	add.w	r1, r3, #48	; 0x30
  40ca3e:	f897 002f 	ldrb.w	r0, [r7, #47]	; 0x2f
  40ca42:	2301      	movs	r3, #1
  40ca44:	2200      	movs	r2, #0
  40ca46:	4c35      	ldr	r4, [pc, #212]	; (40cb1c <f_mkfs+0x480>)
  40ca48:	47a0      	blx	r4
  40ca4a:	4603      	mov	r3, r0
  40ca4c:	2b00      	cmp	r3, #0
  40ca4e:	d001      	beq.n	40ca54 <f_mkfs+0x3b8>
				return FR_DISK_ERR;
  40ca50:	2301      	movs	r3, #1
  40ca52:	e2c6      	b.n	40cfe2 <f_mkfs+0x946>
			md = 0xF8;
  40ca54:	23f8      	movs	r3, #248	; 0xf8
  40ca56:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		}
	}

	/* Create BPB in the VBR */
	tbl = fs->win;							/* Clear sector */
  40ca5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  40ca5c:	3330      	adds	r3, #48	; 0x30
  40ca5e:	617b      	str	r3, [r7, #20]
	mem_set(tbl, 0, SS(fs));
  40ca60:	f44f 7200 	mov.w	r2, #512	; 0x200
  40ca64:	2100      	movs	r1, #0
  40ca66:	6978      	ldr	r0, [r7, #20]
  40ca68:	4b2a      	ldr	r3, [pc, #168]	; (40cb14 <f_mkfs+0x478>)
  40ca6a:	4798      	blx	r3
	mem_cpy(tbl, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code, OEM name */
  40ca6c:	220b      	movs	r2, #11
  40ca6e:	492c      	ldr	r1, [pc, #176]	; (40cb20 <f_mkfs+0x484>)
  40ca70:	6978      	ldr	r0, [r7, #20]
  40ca72:	4b2c      	ldr	r3, [pc, #176]	; (40cb24 <f_mkfs+0x488>)
  40ca74:	4798      	blx	r3
	i = SS(fs);								/* Sector size */
  40ca76:	f44f 7300 	mov.w	r3, #512	; 0x200
  40ca7a:	647b      	str	r3, [r7, #68]	; 0x44
	ST_WORD(tbl+BPB_BytsPerSec, i);
  40ca7c:	697b      	ldr	r3, [r7, #20]
  40ca7e:	330b      	adds	r3, #11
  40ca80:	6c7a      	ldr	r2, [r7, #68]	; 0x44
  40ca82:	b2d2      	uxtb	r2, r2
  40ca84:	701a      	strb	r2, [r3, #0]
  40ca86:	697b      	ldr	r3, [r7, #20]
  40ca88:	330c      	adds	r3, #12
  40ca8a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
  40ca8c:	b292      	uxth	r2, r2
  40ca8e:	0a12      	lsrs	r2, r2, #8
  40ca90:	b292      	uxth	r2, r2
  40ca92:	b2d2      	uxtb	r2, r2
  40ca94:	701a      	strb	r2, [r3, #0]
	tbl[BPB_SecPerClus] = (BYTE)au;			/* Sectors per cluster */
  40ca96:	697b      	ldr	r3, [r7, #20]
  40ca98:	330d      	adds	r3, #13
  40ca9a:	683a      	ldr	r2, [r7, #0]
  40ca9c:	b2d2      	uxtb	r2, r2
  40ca9e:	701a      	strb	r2, [r3, #0]
	ST_WORD(tbl+BPB_RsvdSecCnt, n_rsv);		/* Reserved sectors */
  40caa0:	697b      	ldr	r3, [r7, #20]
  40caa2:	330e      	adds	r3, #14
  40caa4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
  40caa6:	b2d2      	uxtb	r2, r2
  40caa8:	701a      	strb	r2, [r3, #0]
  40caaa:	697b      	ldr	r3, [r7, #20]
  40caac:	330f      	adds	r3, #15
  40caae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
  40cab0:	b292      	uxth	r2, r2
  40cab2:	0a12      	lsrs	r2, r2, #8
  40cab4:	b292      	uxth	r2, r2
  40cab6:	b2d2      	uxtb	r2, r2
  40cab8:	701a      	strb	r2, [r3, #0]
	tbl[BPB_NumFATs] = N_FATS;				/* Number of FATs */
  40caba:	697b      	ldr	r3, [r7, #20]
  40cabc:	3310      	adds	r3, #16
  40cabe:	2201      	movs	r2, #1
  40cac0:	701a      	strb	r2, [r3, #0]
	i = (fmt == FS_FAT32) ? 0 : N_ROOTDIR;	/* Number of rootdir entries */
  40cac2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
  40cac6:	2b03      	cmp	r3, #3
  40cac8:	d101      	bne.n	40cace <f_mkfs+0x432>
  40caca:	2300      	movs	r3, #0
  40cacc:	e001      	b.n	40cad2 <f_mkfs+0x436>
  40cace:	f44f 7300 	mov.w	r3, #512	; 0x200
  40cad2:	647b      	str	r3, [r7, #68]	; 0x44
	ST_WORD(tbl+BPB_RootEntCnt, i);
  40cad4:	697b      	ldr	r3, [r7, #20]
  40cad6:	3311      	adds	r3, #17
  40cad8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
  40cada:	b2d2      	uxtb	r2, r2
  40cadc:	701a      	strb	r2, [r3, #0]
  40cade:	697b      	ldr	r3, [r7, #20]
  40cae0:	3312      	adds	r3, #18
  40cae2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
  40cae4:	b292      	uxth	r2, r2
  40cae6:	0a12      	lsrs	r2, r2, #8
  40cae8:	b292      	uxth	r2, r2
  40caea:	b2d2      	uxtb	r2, r2
  40caec:	701a      	strb	r2, [r3, #0]
	if (n_vol < 0x10000) {					/* Number of total sectors */
  40caee:	68fb      	ldr	r3, [r7, #12]
  40caf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  40caf4:	d218      	bcs.n	40cb28 <f_mkfs+0x48c>
		ST_WORD(tbl+BPB_TotSec16, n_vol);
  40caf6:	697b      	ldr	r3, [r7, #20]
  40caf8:	3313      	adds	r3, #19
  40cafa:	68fa      	ldr	r2, [r7, #12]
  40cafc:	b2d2      	uxtb	r2, r2
  40cafe:	701a      	strb	r2, [r3, #0]
  40cb00:	697b      	ldr	r3, [r7, #20]
  40cb02:	3314      	adds	r3, #20
  40cb04:	68fa      	ldr	r2, [r7, #12]
  40cb06:	b292      	uxth	r2, r2
  40cb08:	0a12      	lsrs	r2, r2, #8
  40cb0a:	b292      	uxth	r2, r2
  40cb0c:	b2d2      	uxtb	r2, r2
  40cb0e:	701a      	strb	r2, [r3, #0]
  40cb10:	e023      	b.n	40cb5a <f_mkfs+0x4be>
  40cb12:	bf00      	nop
  40cb14:	0040a0c9 	.word	0x0040a0c9
  40cb18:	0515565b 	.word	0x0515565b
  40cb1c:	00409eb1 	.word	0x00409eb1
  40cb20:	00411100 	.word	0x00411100
  40cb24:	0040a08d 	.word	0x0040a08d
	} else {
		ST_DWORD(tbl+BPB_TotSec32, n_vol);
  40cb28:	697b      	ldr	r3, [r7, #20]
  40cb2a:	3320      	adds	r3, #32
  40cb2c:	68fa      	ldr	r2, [r7, #12]
  40cb2e:	b2d2      	uxtb	r2, r2
  40cb30:	701a      	strb	r2, [r3, #0]
  40cb32:	697b      	ldr	r3, [r7, #20]
  40cb34:	3321      	adds	r3, #33	; 0x21
  40cb36:	68fa      	ldr	r2, [r7, #12]
  40cb38:	b292      	uxth	r2, r2
  40cb3a:	0a12      	lsrs	r2, r2, #8
  40cb3c:	b292      	uxth	r2, r2
  40cb3e:	b2d2      	uxtb	r2, r2
  40cb40:	701a      	strb	r2, [r3, #0]
  40cb42:	697b      	ldr	r3, [r7, #20]
  40cb44:	3322      	adds	r3, #34	; 0x22
  40cb46:	68fa      	ldr	r2, [r7, #12]
  40cb48:	0c12      	lsrs	r2, r2, #16
  40cb4a:	b2d2      	uxtb	r2, r2
  40cb4c:	701a      	strb	r2, [r3, #0]
  40cb4e:	697b      	ldr	r3, [r7, #20]
  40cb50:	3323      	adds	r3, #35	; 0x23
  40cb52:	68fa      	ldr	r2, [r7, #12]
  40cb54:	0e12      	lsrs	r2, r2, #24
  40cb56:	b2d2      	uxtb	r2, r2
  40cb58:	701a      	strb	r2, [r3, #0]
	}
	tbl[BPB_Media] = md;					/* Media descriptor */
  40cb5a:	697b      	ldr	r3, [r7, #20]
  40cb5c:	3315      	adds	r3, #21
  40cb5e:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
  40cb62:	701a      	strb	r2, [r3, #0]
	ST_WORD(tbl+BPB_SecPerTrk, 63);			/* Number of sectors per track */
  40cb64:	697b      	ldr	r3, [r7, #20]
  40cb66:	3318      	adds	r3, #24
  40cb68:	223f      	movs	r2, #63	; 0x3f
  40cb6a:	701a      	strb	r2, [r3, #0]
  40cb6c:	697b      	ldr	r3, [r7, #20]
  40cb6e:	3319      	adds	r3, #25
  40cb70:	2200      	movs	r2, #0
  40cb72:	701a      	strb	r2, [r3, #0]
	ST_WORD(tbl+BPB_NumHeads, 255);			/* Number of heads */
  40cb74:	697b      	ldr	r3, [r7, #20]
  40cb76:	331a      	adds	r3, #26
  40cb78:	22ff      	movs	r2, #255	; 0xff
  40cb7a:	701a      	strb	r2, [r3, #0]
  40cb7c:	697b      	ldr	r3, [r7, #20]
  40cb7e:	331b      	adds	r3, #27
  40cb80:	2200      	movs	r2, #0
  40cb82:	701a      	strb	r2, [r3, #0]
	ST_DWORD(tbl+BPB_HiddSec, b_vol);		/* Hidden sectors */
  40cb84:	697b      	ldr	r3, [r7, #20]
  40cb86:	331c      	adds	r3, #28
  40cb88:	6aba      	ldr	r2, [r7, #40]	; 0x28
  40cb8a:	b2d2      	uxtb	r2, r2
  40cb8c:	701a      	strb	r2, [r3, #0]
  40cb8e:	697b      	ldr	r3, [r7, #20]
  40cb90:	331d      	adds	r3, #29
  40cb92:	6aba      	ldr	r2, [r7, #40]	; 0x28
  40cb94:	b292      	uxth	r2, r2
  40cb96:	0a12      	lsrs	r2, r2, #8
  40cb98:	b292      	uxth	r2, r2
  40cb9a:	b2d2      	uxtb	r2, r2
  40cb9c:	701a      	strb	r2, [r3, #0]
  40cb9e:	697b      	ldr	r3, [r7, #20]
  40cba0:	331e      	adds	r3, #30
  40cba2:	6aba      	ldr	r2, [r7, #40]	; 0x28
  40cba4:	0c12      	lsrs	r2, r2, #16
  40cba6:	b2d2      	uxtb	r2, r2
  40cba8:	701a      	strb	r2, [r3, #0]
  40cbaa:	697b      	ldr	r3, [r7, #20]
  40cbac:	331f      	adds	r3, #31
  40cbae:	6aba      	ldr	r2, [r7, #40]	; 0x28
  40cbb0:	0e12      	lsrs	r2, r2, #24
  40cbb2:	b2d2      	uxtb	r2, r2
  40cbb4:	701a      	strb	r2, [r3, #0]
	n = get_fattime();						/* Use current time as VSN */
  40cbb6:	4bac      	ldr	r3, [pc, #688]	; (40ce68 <f_mkfs+0x7cc>)
  40cbb8:	4798      	blx	r3
  40cbba:	4603      	mov	r3, r0
  40cbbc:	613b      	str	r3, [r7, #16]
	if (fmt == FS_FAT32) {
  40cbbe:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
  40cbc2:	2b03      	cmp	r3, #3
  40cbc4:	d161      	bne.n	40cc8a <f_mkfs+0x5ee>
		ST_DWORD(tbl+BS_VolID32, n);		/* VSN */
  40cbc6:	697b      	ldr	r3, [r7, #20]
  40cbc8:	3343      	adds	r3, #67	; 0x43
  40cbca:	693a      	ldr	r2, [r7, #16]
  40cbcc:	b2d2      	uxtb	r2, r2
  40cbce:	701a      	strb	r2, [r3, #0]
  40cbd0:	697b      	ldr	r3, [r7, #20]
  40cbd2:	3344      	adds	r3, #68	; 0x44
  40cbd4:	693a      	ldr	r2, [r7, #16]
  40cbd6:	b292      	uxth	r2, r2
  40cbd8:	0a12      	lsrs	r2, r2, #8
  40cbda:	b292      	uxth	r2, r2
  40cbdc:	b2d2      	uxtb	r2, r2
  40cbde:	701a      	strb	r2, [r3, #0]
  40cbe0:	697b      	ldr	r3, [r7, #20]
  40cbe2:	3345      	adds	r3, #69	; 0x45
  40cbe4:	693a      	ldr	r2, [r7, #16]
  40cbe6:	0c12      	lsrs	r2, r2, #16
  40cbe8:	b2d2      	uxtb	r2, r2
  40cbea:	701a      	strb	r2, [r3, #0]
  40cbec:	697b      	ldr	r3, [r7, #20]
  40cbee:	3346      	adds	r3, #70	; 0x46
  40cbf0:	693a      	ldr	r2, [r7, #16]
  40cbf2:	0e12      	lsrs	r2, r2, #24
  40cbf4:	b2d2      	uxtb	r2, r2
  40cbf6:	701a      	strb	r2, [r3, #0]
		ST_DWORD(tbl+BPB_FATSz32, n_fat);	/* Number of sectors per FAT */
  40cbf8:	697b      	ldr	r3, [r7, #20]
  40cbfa:	3324      	adds	r3, #36	; 0x24
  40cbfc:	6bba      	ldr	r2, [r7, #56]	; 0x38
  40cbfe:	b2d2      	uxtb	r2, r2
  40cc00:	701a      	strb	r2, [r3, #0]
  40cc02:	697b      	ldr	r3, [r7, #20]
  40cc04:	3325      	adds	r3, #37	; 0x25
  40cc06:	6bba      	ldr	r2, [r7, #56]	; 0x38
  40cc08:	b292      	uxth	r2, r2
  40cc0a:	0a12      	lsrs	r2, r2, #8
  40cc0c:	b292      	uxth	r2, r2
  40cc0e:	b2d2      	uxtb	r2, r2
  40cc10:	701a      	strb	r2, [r3, #0]
  40cc12:	697b      	ldr	r3, [r7, #20]
  40cc14:	3326      	adds	r3, #38	; 0x26
  40cc16:	6bba      	ldr	r2, [r7, #56]	; 0x38
  40cc18:	0c12      	lsrs	r2, r2, #16
  40cc1a:	b2d2      	uxtb	r2, r2
  40cc1c:	701a      	strb	r2, [r3, #0]
  40cc1e:	697b      	ldr	r3, [r7, #20]
  40cc20:	3327      	adds	r3, #39	; 0x27
  40cc22:	6bba      	ldr	r2, [r7, #56]	; 0x38
  40cc24:	0e12      	lsrs	r2, r2, #24
  40cc26:	b2d2      	uxtb	r2, r2
  40cc28:	701a      	strb	r2, [r3, #0]
		ST_DWORD(tbl+BPB_RootClus, 2);		/* Root directory start cluster (2) */
  40cc2a:	697b      	ldr	r3, [r7, #20]
  40cc2c:	332c      	adds	r3, #44	; 0x2c
  40cc2e:	2202      	movs	r2, #2
  40cc30:	701a      	strb	r2, [r3, #0]
  40cc32:	697b      	ldr	r3, [r7, #20]
  40cc34:	332d      	adds	r3, #45	; 0x2d
  40cc36:	2200      	movs	r2, #0
  40cc38:	701a      	strb	r2, [r3, #0]
  40cc3a:	697b      	ldr	r3, [r7, #20]
  40cc3c:	332e      	adds	r3, #46	; 0x2e
  40cc3e:	2200      	movs	r2, #0
  40cc40:	701a      	strb	r2, [r3, #0]
  40cc42:	697b      	ldr	r3, [r7, #20]
  40cc44:	332f      	adds	r3, #47	; 0x2f
  40cc46:	2200      	movs	r2, #0
  40cc48:	701a      	strb	r2, [r3, #0]
		ST_WORD(tbl+BPB_FSInfo, 1);			/* FSInfo record offset (VBR+1) */
  40cc4a:	697b      	ldr	r3, [r7, #20]
  40cc4c:	3330      	adds	r3, #48	; 0x30
  40cc4e:	2201      	movs	r2, #1
  40cc50:	701a      	strb	r2, [r3, #0]
  40cc52:	697b      	ldr	r3, [r7, #20]
  40cc54:	3331      	adds	r3, #49	; 0x31
  40cc56:	2200      	movs	r2, #0
  40cc58:	701a      	strb	r2, [r3, #0]
		ST_WORD(tbl+BPB_BkBootSec, 6);		/* Backup boot record offset (VBR+6) */
  40cc5a:	697b      	ldr	r3, [r7, #20]
  40cc5c:	3332      	adds	r3, #50	; 0x32
  40cc5e:	2206      	movs	r2, #6
  40cc60:	701a      	strb	r2, [r3, #0]
  40cc62:	697b      	ldr	r3, [r7, #20]
  40cc64:	3333      	adds	r3, #51	; 0x33
  40cc66:	2200      	movs	r2, #0
  40cc68:	701a      	strb	r2, [r3, #0]
		tbl[BS_DrvNum32] = 0x80;			/* Drive number */
  40cc6a:	697b      	ldr	r3, [r7, #20]
  40cc6c:	3340      	adds	r3, #64	; 0x40
  40cc6e:	2280      	movs	r2, #128	; 0x80
  40cc70:	701a      	strb	r2, [r3, #0]
		tbl[BS_BootSig32] = 0x29;			/* Extended boot signature */
  40cc72:	697b      	ldr	r3, [r7, #20]
  40cc74:	3342      	adds	r3, #66	; 0x42
  40cc76:	2229      	movs	r2, #41	; 0x29
  40cc78:	701a      	strb	r2, [r3, #0]
		mem_cpy(tbl+BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
  40cc7a:	697b      	ldr	r3, [r7, #20]
  40cc7c:	3347      	adds	r3, #71	; 0x47
  40cc7e:	2213      	movs	r2, #19
  40cc80:	497a      	ldr	r1, [pc, #488]	; (40ce6c <f_mkfs+0x7d0>)
  40cc82:	4618      	mov	r0, r3
  40cc84:	4b7a      	ldr	r3, [pc, #488]	; (40ce70 <f_mkfs+0x7d4>)
  40cc86:	4798      	blx	r3
  40cc88:	e034      	b.n	40ccf4 <f_mkfs+0x658>
	} else {
		ST_DWORD(tbl+BS_VolID, n);			/* VSN */
  40cc8a:	697b      	ldr	r3, [r7, #20]
  40cc8c:	3327      	adds	r3, #39	; 0x27
  40cc8e:	693a      	ldr	r2, [r7, #16]
  40cc90:	b2d2      	uxtb	r2, r2
  40cc92:	701a      	strb	r2, [r3, #0]
  40cc94:	697b      	ldr	r3, [r7, #20]
  40cc96:	3328      	adds	r3, #40	; 0x28
  40cc98:	693a      	ldr	r2, [r7, #16]
  40cc9a:	b292      	uxth	r2, r2
  40cc9c:	0a12      	lsrs	r2, r2, #8
  40cc9e:	b292      	uxth	r2, r2
  40cca0:	b2d2      	uxtb	r2, r2
  40cca2:	701a      	strb	r2, [r3, #0]
  40cca4:	697b      	ldr	r3, [r7, #20]
  40cca6:	3329      	adds	r3, #41	; 0x29
  40cca8:	693a      	ldr	r2, [r7, #16]
  40ccaa:	0c12      	lsrs	r2, r2, #16
  40ccac:	b2d2      	uxtb	r2, r2
  40ccae:	701a      	strb	r2, [r3, #0]
  40ccb0:	697b      	ldr	r3, [r7, #20]
  40ccb2:	332a      	adds	r3, #42	; 0x2a
  40ccb4:	693a      	ldr	r2, [r7, #16]
  40ccb6:	0e12      	lsrs	r2, r2, #24
  40ccb8:	b2d2      	uxtb	r2, r2
  40ccba:	701a      	strb	r2, [r3, #0]
		ST_WORD(tbl+BPB_FATSz16, n_fat);	/* Number of sectors per FAT */
  40ccbc:	697b      	ldr	r3, [r7, #20]
  40ccbe:	3316      	adds	r3, #22
  40ccc0:	6bba      	ldr	r2, [r7, #56]	; 0x38
  40ccc2:	b2d2      	uxtb	r2, r2
  40ccc4:	701a      	strb	r2, [r3, #0]
  40ccc6:	697b      	ldr	r3, [r7, #20]
  40ccc8:	3317      	adds	r3, #23
  40ccca:	6bba      	ldr	r2, [r7, #56]	; 0x38
  40cccc:	b292      	uxth	r2, r2
  40ccce:	0a12      	lsrs	r2, r2, #8
  40ccd0:	b292      	uxth	r2, r2
  40ccd2:	b2d2      	uxtb	r2, r2
  40ccd4:	701a      	strb	r2, [r3, #0]
		tbl[BS_DrvNum] = 0x80;				/* Drive number */
  40ccd6:	697b      	ldr	r3, [r7, #20]
  40ccd8:	3324      	adds	r3, #36	; 0x24
  40ccda:	2280      	movs	r2, #128	; 0x80
  40ccdc:	701a      	strb	r2, [r3, #0]
		tbl[BS_BootSig] = 0x29;				/* Extended boot signature */
  40ccde:	697b      	ldr	r3, [r7, #20]
  40cce0:	3326      	adds	r3, #38	; 0x26
  40cce2:	2229      	movs	r2, #41	; 0x29
  40cce4:	701a      	strb	r2, [r3, #0]
		mem_cpy(tbl+BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
  40cce6:	697b      	ldr	r3, [r7, #20]
  40cce8:	332b      	adds	r3, #43	; 0x2b
  40ccea:	2213      	movs	r2, #19
  40ccec:	4961      	ldr	r1, [pc, #388]	; (40ce74 <f_mkfs+0x7d8>)
  40ccee:	4618      	mov	r0, r3
  40ccf0:	4b5f      	ldr	r3, [pc, #380]	; (40ce70 <f_mkfs+0x7d4>)
  40ccf2:	4798      	blx	r3
	}
	ST_WORD(tbl+BS_55AA, 0xAA55);			/* Signature (Offset is fixed here regardless of sector size) */
  40ccf4:	697b      	ldr	r3, [r7, #20]
  40ccf6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
  40ccfa:	2255      	movs	r2, #85	; 0x55
  40ccfc:	701a      	strb	r2, [r3, #0]
  40ccfe:	697b      	ldr	r3, [r7, #20]
  40cd00:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
  40cd04:	22aa      	movs	r2, #170	; 0xaa
  40cd06:	701a      	strb	r2, [r3, #0]
	if (disk_write(pdrv, tbl, b_vol, 1) != RES_OK)	/* Write it to the VBR sector */
  40cd08:	f897 002f 	ldrb.w	r0, [r7, #47]	; 0x2f
  40cd0c:	2301      	movs	r3, #1
  40cd0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
  40cd10:	6979      	ldr	r1, [r7, #20]
  40cd12:	4c59      	ldr	r4, [pc, #356]	; (40ce78 <f_mkfs+0x7dc>)
  40cd14:	47a0      	blx	r4
  40cd16:	4603      	mov	r3, r0
  40cd18:	2b00      	cmp	r3, #0
  40cd1a:	d001      	beq.n	40cd20 <f_mkfs+0x684>
		return FR_DISK_ERR;
  40cd1c:	2301      	movs	r3, #1
  40cd1e:	e160      	b.n	40cfe2 <f_mkfs+0x946>
	if (fmt == FS_FAT32)							/* Write backup VBR if needed (VBR+6) */
  40cd20:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
  40cd24:	2b03      	cmp	r3, #3
  40cd26:	d107      	bne.n	40cd38 <f_mkfs+0x69c>
		disk_write(pdrv, tbl, b_vol + 6, 1);
  40cd28:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40cd2a:	1d9a      	adds	r2, r3, #6
  40cd2c:	f897 002f 	ldrb.w	r0, [r7, #47]	; 0x2f
  40cd30:	2301      	movs	r3, #1
  40cd32:	6979      	ldr	r1, [r7, #20]
  40cd34:	4c50      	ldr	r4, [pc, #320]	; (40ce78 <f_mkfs+0x7dc>)
  40cd36:	47a0      	blx	r4

	/* Initialize FAT area */
	wsect = b_fat;
  40cd38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
  40cd3a:	64bb      	str	r3, [r7, #72]	; 0x48
	for (i = 0; i < N_FATS; i++) {		/* Initialize each FAT copy */
  40cd3c:	2300      	movs	r3, #0
  40cd3e:	647b      	str	r3, [r7, #68]	; 0x44
  40cd40:	e0aa      	b.n	40ce98 <f_mkfs+0x7fc>
		mem_set(tbl, 0, SS(fs));			/* 1st sector of the FAT  */
  40cd42:	f44f 7200 	mov.w	r2, #512	; 0x200
  40cd46:	2100      	movs	r1, #0
  40cd48:	6978      	ldr	r0, [r7, #20]
  40cd4a:	4b4c      	ldr	r3, [pc, #304]	; (40ce7c <f_mkfs+0x7e0>)
  40cd4c:	4798      	blx	r3
		n = md;								/* Media descriptor byte */
  40cd4e:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
  40cd52:	613b      	str	r3, [r7, #16]
		if (fmt != FS_FAT32) {
  40cd54:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
  40cd58:	2b03      	cmp	r3, #3
  40cd5a:	d023      	beq.n	40cda4 <f_mkfs+0x708>
			n |= (fmt == FS_FAT12) ? 0x00FFFF00 : 0xFFFFFF00;
  40cd5c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
  40cd60:	2b01      	cmp	r3, #1
  40cd62:	d101      	bne.n	40cd68 <f_mkfs+0x6cc>
  40cd64:	4a46      	ldr	r2, [pc, #280]	; (40ce80 <f_mkfs+0x7e4>)
  40cd66:	e001      	b.n	40cd6c <f_mkfs+0x6d0>
  40cd68:	f06f 02ff 	mvn.w	r2, #255	; 0xff
  40cd6c:	693b      	ldr	r3, [r7, #16]
  40cd6e:	4313      	orrs	r3, r2
  40cd70:	613b      	str	r3, [r7, #16]
			ST_DWORD(tbl+0, n);				/* Reserve cluster #0-1 (FAT12/16) */
  40cd72:	693b      	ldr	r3, [r7, #16]
  40cd74:	b2da      	uxtb	r2, r3
  40cd76:	697b      	ldr	r3, [r7, #20]
  40cd78:	701a      	strb	r2, [r3, #0]
  40cd7a:	697b      	ldr	r3, [r7, #20]
  40cd7c:	3301      	adds	r3, #1
  40cd7e:	693a      	ldr	r2, [r7, #16]
  40cd80:	b292      	uxth	r2, r2
  40cd82:	0a12      	lsrs	r2, r2, #8
  40cd84:	b292      	uxth	r2, r2
  40cd86:	b2d2      	uxtb	r2, r2
  40cd88:	701a      	strb	r2, [r3, #0]
  40cd8a:	697b      	ldr	r3, [r7, #20]
  40cd8c:	3302      	adds	r3, #2
  40cd8e:	693a      	ldr	r2, [r7, #16]
  40cd90:	0c12      	lsrs	r2, r2, #16
  40cd92:	b2d2      	uxtb	r2, r2
  40cd94:	701a      	strb	r2, [r3, #0]
  40cd96:	697b      	ldr	r3, [r7, #20]
  40cd98:	3303      	adds	r3, #3
  40cd9a:	693a      	ldr	r2, [r7, #16]
  40cd9c:	0e12      	lsrs	r2, r2, #24
  40cd9e:	b2d2      	uxtb	r2, r2
  40cda0:	701a      	strb	r2, [r3, #0]
  40cda2:	e03b      	b.n	40ce1c <f_mkfs+0x780>
		} else {
			n |= 0xFFFFFF00;
  40cda4:	693b      	ldr	r3, [r7, #16]
  40cda6:	f063 03ff 	orn	r3, r3, #255	; 0xff
  40cdaa:	613b      	str	r3, [r7, #16]
			ST_DWORD(tbl+0, n);				/* Reserve cluster #0-1 (FAT32) */
  40cdac:	693b      	ldr	r3, [r7, #16]
  40cdae:	b2da      	uxtb	r2, r3
  40cdb0:	697b      	ldr	r3, [r7, #20]
  40cdb2:	701a      	strb	r2, [r3, #0]
  40cdb4:	697b      	ldr	r3, [r7, #20]
  40cdb6:	3301      	adds	r3, #1
  40cdb8:	693a      	ldr	r2, [r7, #16]
  40cdba:	b292      	uxth	r2, r2
  40cdbc:	0a12      	lsrs	r2, r2, #8
  40cdbe:	b292      	uxth	r2, r2
  40cdc0:	b2d2      	uxtb	r2, r2
  40cdc2:	701a      	strb	r2, [r3, #0]
  40cdc4:	697b      	ldr	r3, [r7, #20]
  40cdc6:	3302      	adds	r3, #2
  40cdc8:	693a      	ldr	r2, [r7, #16]
  40cdca:	0c12      	lsrs	r2, r2, #16
  40cdcc:	b2d2      	uxtb	r2, r2
  40cdce:	701a      	strb	r2, [r3, #0]
  40cdd0:	697b      	ldr	r3, [r7, #20]
  40cdd2:	3303      	adds	r3, #3
  40cdd4:	693a      	ldr	r2, [r7, #16]
  40cdd6:	0e12      	lsrs	r2, r2, #24
  40cdd8:	b2d2      	uxtb	r2, r2
  40cdda:	701a      	strb	r2, [r3, #0]
			ST_DWORD(tbl+4, 0xFFFFFFFF);
  40cddc:	697b      	ldr	r3, [r7, #20]
  40cdde:	3304      	adds	r3, #4
  40cde0:	22ff      	movs	r2, #255	; 0xff
  40cde2:	701a      	strb	r2, [r3, #0]
  40cde4:	697b      	ldr	r3, [r7, #20]
  40cde6:	3305      	adds	r3, #5
  40cde8:	22ff      	movs	r2, #255	; 0xff
  40cdea:	701a      	strb	r2, [r3, #0]
  40cdec:	697b      	ldr	r3, [r7, #20]
  40cdee:	3306      	adds	r3, #6
  40cdf0:	22ff      	movs	r2, #255	; 0xff
  40cdf2:	701a      	strb	r2, [r3, #0]
  40cdf4:	697b      	ldr	r3, [r7, #20]
  40cdf6:	3307      	adds	r3, #7
  40cdf8:	22ff      	movs	r2, #255	; 0xff
  40cdfa:	701a      	strb	r2, [r3, #0]
			ST_DWORD(tbl+8, 0x0FFFFFFF);	/* Reserve cluster #2 for root dir */
  40cdfc:	697b      	ldr	r3, [r7, #20]
  40cdfe:	3308      	adds	r3, #8
  40ce00:	22ff      	movs	r2, #255	; 0xff
  40ce02:	701a      	strb	r2, [r3, #0]
  40ce04:	697b      	ldr	r3, [r7, #20]
  40ce06:	3309      	adds	r3, #9
  40ce08:	22ff      	movs	r2, #255	; 0xff
  40ce0a:	701a      	strb	r2, [r3, #0]
  40ce0c:	697b      	ldr	r3, [r7, #20]
  40ce0e:	330a      	adds	r3, #10
  40ce10:	22ff      	movs	r2, #255	; 0xff
  40ce12:	701a      	strb	r2, [r3, #0]
  40ce14:	697b      	ldr	r3, [r7, #20]
  40ce16:	330b      	adds	r3, #11
  40ce18:	220f      	movs	r2, #15
  40ce1a:	701a      	strb	r2, [r3, #0]
		}
		if (disk_write(pdrv, tbl, wsect++, 1) != RES_OK)
  40ce1c:	6cba      	ldr	r2, [r7, #72]	; 0x48
  40ce1e:	1c53      	adds	r3, r2, #1
  40ce20:	64bb      	str	r3, [r7, #72]	; 0x48
  40ce22:	f897 002f 	ldrb.w	r0, [r7, #47]	; 0x2f
  40ce26:	2301      	movs	r3, #1
  40ce28:	6979      	ldr	r1, [r7, #20]
  40ce2a:	4c13      	ldr	r4, [pc, #76]	; (40ce78 <f_mkfs+0x7dc>)
  40ce2c:	47a0      	blx	r4
  40ce2e:	4603      	mov	r3, r0
  40ce30:	2b00      	cmp	r3, #0
  40ce32:	d001      	beq.n	40ce38 <f_mkfs+0x79c>
			return FR_DISK_ERR;
  40ce34:	2301      	movs	r3, #1
  40ce36:	e0d4      	b.n	40cfe2 <f_mkfs+0x946>
		mem_set(tbl, 0, SS(fs));			/* Fill following FAT entries with zero */
  40ce38:	f44f 7200 	mov.w	r2, #512	; 0x200
  40ce3c:	2100      	movs	r1, #0
  40ce3e:	6978      	ldr	r0, [r7, #20]
  40ce40:	4b0e      	ldr	r3, [pc, #56]	; (40ce7c <f_mkfs+0x7e0>)
  40ce42:	4798      	blx	r3
		for (n = 1; n < n_fat; n++) {		/* This loop may take a time on FAT32 volume due to many single sector writes */
  40ce44:	2301      	movs	r3, #1
  40ce46:	613b      	str	r3, [r7, #16]
  40ce48:	e01f      	b.n	40ce8a <f_mkfs+0x7ee>
			if (disk_write(pdrv, tbl, wsect++, 1) != RES_OK)
  40ce4a:	6cba      	ldr	r2, [r7, #72]	; 0x48
  40ce4c:	1c53      	adds	r3, r2, #1
  40ce4e:	64bb      	str	r3, [r7, #72]	; 0x48
  40ce50:	f897 002f 	ldrb.w	r0, [r7, #47]	; 0x2f
  40ce54:	2301      	movs	r3, #1
  40ce56:	6979      	ldr	r1, [r7, #20]
  40ce58:	4c07      	ldr	r4, [pc, #28]	; (40ce78 <f_mkfs+0x7dc>)
  40ce5a:	47a0      	blx	r4
  40ce5c:	4603      	mov	r3, r0
  40ce5e:	2b00      	cmp	r3, #0
  40ce60:	d010      	beq.n	40ce84 <f_mkfs+0x7e8>
				return FR_DISK_ERR;
  40ce62:	2301      	movs	r3, #1
  40ce64:	e0bd      	b.n	40cfe2 <f_mkfs+0x946>
  40ce66:	bf00      	nop
  40ce68:	0040a021 	.word	0x0040a021
  40ce6c:	0041110c 	.word	0x0041110c
  40ce70:	0040a08d 	.word	0x0040a08d
  40ce74:	00411120 	.word	0x00411120
  40ce78:	00409eb1 	.word	0x00409eb1
  40ce7c:	0040a0c9 	.word	0x0040a0c9
  40ce80:	00ffff00 	.word	0x00ffff00
		for (n = 1; n < n_fat; n++) {		/* This loop may take a time on FAT32 volume due to many single sector writes */
  40ce84:	693b      	ldr	r3, [r7, #16]
  40ce86:	3301      	adds	r3, #1
  40ce88:	613b      	str	r3, [r7, #16]
  40ce8a:	693a      	ldr	r2, [r7, #16]
  40ce8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  40ce8e:	429a      	cmp	r2, r3
  40ce90:	d3db      	bcc.n	40ce4a <f_mkfs+0x7ae>
	for (i = 0; i < N_FATS; i++) {		/* Initialize each FAT copy */
  40ce92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
  40ce94:	3301      	adds	r3, #1
  40ce96:	647b      	str	r3, [r7, #68]	; 0x44
  40ce98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
  40ce9a:	2b00      	cmp	r3, #0
  40ce9c:	f43f af51 	beq.w	40cd42 <f_mkfs+0x6a6>
		}
	}

	/* Initialize root directory */
	i = (fmt == FS_FAT32) ? au : n_dir;
  40cea0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
  40cea4:	2b03      	cmp	r3, #3
  40cea6:	d101      	bne.n	40ceac <f_mkfs+0x810>
  40cea8:	683b      	ldr	r3, [r7, #0]
  40ceaa:	e000      	b.n	40ceae <f_mkfs+0x812>
  40ceac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  40ceae:	647b      	str	r3, [r7, #68]	; 0x44
	do {
		if (disk_write(pdrv, tbl, wsect++, 1) != RES_OK)
  40ceb0:	6cba      	ldr	r2, [r7, #72]	; 0x48
  40ceb2:	1c53      	adds	r3, r2, #1
  40ceb4:	64bb      	str	r3, [r7, #72]	; 0x48
  40ceb6:	f897 002f 	ldrb.w	r0, [r7, #47]	; 0x2f
  40ceba:	2301      	movs	r3, #1
  40cebc:	6979      	ldr	r1, [r7, #20]
  40cebe:	4c4b      	ldr	r4, [pc, #300]	; (40cfec <f_mkfs+0x950>)
  40cec0:	47a0      	blx	r4
  40cec2:	4603      	mov	r3, r0
  40cec4:	2b00      	cmp	r3, #0
  40cec6:	d001      	beq.n	40cecc <f_mkfs+0x830>
			return FR_DISK_ERR;
  40cec8:	2301      	movs	r3, #1
  40ceca:	e08a      	b.n	40cfe2 <f_mkfs+0x946>
	} while (--i);
  40cecc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
  40cece:	3b01      	subs	r3, #1
  40ced0:	647b      	str	r3, [r7, #68]	; 0x44
  40ced2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
  40ced4:	2b00      	cmp	r3, #0
  40ced6:	d1eb      	bne.n	40ceb0 <f_mkfs+0x814>
		disk_ioctl(pdrv, CTRL_ERASE_SECTOR, eb);
	}
#endif

	/* Create FSInfo if needed */
	if (fmt == FS_FAT32) {
  40ced8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
  40cedc:	2b03      	cmp	r3, #3
  40cede:	d173      	bne.n	40cfc8 <f_mkfs+0x92c>
		ST_DWORD(tbl+FSI_LeadSig, 0x41615252);
  40cee0:	697b      	ldr	r3, [r7, #20]
  40cee2:	2252      	movs	r2, #82	; 0x52
  40cee4:	701a      	strb	r2, [r3, #0]
  40cee6:	697b      	ldr	r3, [r7, #20]
  40cee8:	3301      	adds	r3, #1
  40ceea:	2252      	movs	r2, #82	; 0x52
  40ceec:	701a      	strb	r2, [r3, #0]
  40ceee:	697b      	ldr	r3, [r7, #20]
  40cef0:	3302      	adds	r3, #2
  40cef2:	2261      	movs	r2, #97	; 0x61
  40cef4:	701a      	strb	r2, [r3, #0]
  40cef6:	697b      	ldr	r3, [r7, #20]
  40cef8:	3303      	adds	r3, #3
  40cefa:	2241      	movs	r2, #65	; 0x41
  40cefc:	701a      	strb	r2, [r3, #0]
		ST_DWORD(tbl+FSI_StrucSig, 0x61417272);
  40cefe:	697b      	ldr	r3, [r7, #20]
  40cf00:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
  40cf04:	2272      	movs	r2, #114	; 0x72
  40cf06:	701a      	strb	r2, [r3, #0]
  40cf08:	697b      	ldr	r3, [r7, #20]
  40cf0a:	f203 13e5 	addw	r3, r3, #485	; 0x1e5
  40cf0e:	2272      	movs	r2, #114	; 0x72
  40cf10:	701a      	strb	r2, [r3, #0]
  40cf12:	697b      	ldr	r3, [r7, #20]
  40cf14:	f503 73f3 	add.w	r3, r3, #486	; 0x1e6
  40cf18:	2241      	movs	r2, #65	; 0x41
  40cf1a:	701a      	strb	r2, [r3, #0]
  40cf1c:	697b      	ldr	r3, [r7, #20]
  40cf1e:	f203 13e7 	addw	r3, r3, #487	; 0x1e7
  40cf22:	2261      	movs	r2, #97	; 0x61
  40cf24:	701a      	strb	r2, [r3, #0]
		ST_DWORD(tbl+FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
  40cf26:	697b      	ldr	r3, [r7, #20]
  40cf28:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
  40cf2c:	6a3a      	ldr	r2, [r7, #32]
  40cf2e:	b2d2      	uxtb	r2, r2
  40cf30:	3a01      	subs	r2, #1
  40cf32:	b2d2      	uxtb	r2, r2
  40cf34:	701a      	strb	r2, [r3, #0]
  40cf36:	697b      	ldr	r3, [r7, #20]
  40cf38:	f203 13e9 	addw	r3, r3, #489	; 0x1e9
  40cf3c:	6a3a      	ldr	r2, [r7, #32]
  40cf3e:	b292      	uxth	r2, r2
  40cf40:	3a01      	subs	r2, #1
  40cf42:	b292      	uxth	r2, r2
  40cf44:	0a12      	lsrs	r2, r2, #8
  40cf46:	b292      	uxth	r2, r2
  40cf48:	b2d2      	uxtb	r2, r2
  40cf4a:	701a      	strb	r2, [r3, #0]
  40cf4c:	697b      	ldr	r3, [r7, #20]
  40cf4e:	f503 73f5 	add.w	r3, r3, #490	; 0x1ea
  40cf52:	6a3a      	ldr	r2, [r7, #32]
  40cf54:	3a01      	subs	r2, #1
  40cf56:	0c12      	lsrs	r2, r2, #16
  40cf58:	b2d2      	uxtb	r2, r2
  40cf5a:	701a      	strb	r2, [r3, #0]
  40cf5c:	697b      	ldr	r3, [r7, #20]
  40cf5e:	f203 13eb 	addw	r3, r3, #491	; 0x1eb
  40cf62:	6a3a      	ldr	r2, [r7, #32]
  40cf64:	3a01      	subs	r2, #1
  40cf66:	0e12      	lsrs	r2, r2, #24
  40cf68:	b2d2      	uxtb	r2, r2
  40cf6a:	701a      	strb	r2, [r3, #0]
		ST_DWORD(tbl+FSI_Nxt_Free, 2);				/* Last allocated cluster# */
  40cf6c:	697b      	ldr	r3, [r7, #20]
  40cf6e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
  40cf72:	2202      	movs	r2, #2
  40cf74:	701a      	strb	r2, [r3, #0]
  40cf76:	697b      	ldr	r3, [r7, #20]
  40cf78:	f203 13ed 	addw	r3, r3, #493	; 0x1ed
  40cf7c:	2200      	movs	r2, #0
  40cf7e:	701a      	strb	r2, [r3, #0]
  40cf80:	697b      	ldr	r3, [r7, #20]
  40cf82:	f503 73f7 	add.w	r3, r3, #494	; 0x1ee
  40cf86:	2200      	movs	r2, #0
  40cf88:	701a      	strb	r2, [r3, #0]
  40cf8a:	697b      	ldr	r3, [r7, #20]
  40cf8c:	f203 13ef 	addw	r3, r3, #495	; 0x1ef
  40cf90:	2200      	movs	r2, #0
  40cf92:	701a      	strb	r2, [r3, #0]
		ST_WORD(tbl+BS_55AA, 0xAA55);
  40cf94:	697b      	ldr	r3, [r7, #20]
  40cf96:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
  40cf9a:	2255      	movs	r2, #85	; 0x55
  40cf9c:	701a      	strb	r2, [r3, #0]
  40cf9e:	697b      	ldr	r3, [r7, #20]
  40cfa0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
  40cfa4:	22aa      	movs	r2, #170	; 0xaa
  40cfa6:	701a      	strb	r2, [r3, #0]
		disk_write(pdrv, tbl, b_vol + 1, 1);	/* Write original (VBR+1) */
  40cfa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40cfaa:	1c5a      	adds	r2, r3, #1
  40cfac:	f897 002f 	ldrb.w	r0, [r7, #47]	; 0x2f
  40cfb0:	2301      	movs	r3, #1
  40cfb2:	6979      	ldr	r1, [r7, #20]
  40cfb4:	4c0d      	ldr	r4, [pc, #52]	; (40cfec <f_mkfs+0x950>)
  40cfb6:	47a0      	blx	r4
		disk_write(pdrv, tbl, b_vol + 7, 1);	/* Write backup (VBR+7) */
  40cfb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40cfba:	1dda      	adds	r2, r3, #7
  40cfbc:	f897 002f 	ldrb.w	r0, [r7, #47]	; 0x2f
  40cfc0:	2301      	movs	r3, #1
  40cfc2:	6979      	ldr	r1, [r7, #20]
  40cfc4:	4c09      	ldr	r4, [pc, #36]	; (40cfec <f_mkfs+0x950>)
  40cfc6:	47a0      	blx	r4
	}

	return (disk_ioctl(pdrv, CTRL_SYNC, 0) == RES_OK) ? FR_OK : FR_DISK_ERR;
  40cfc8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  40cfcc:	2200      	movs	r2, #0
  40cfce:	2100      	movs	r1, #0
  40cfd0:	4618      	mov	r0, r3
  40cfd2:	4b07      	ldr	r3, [pc, #28]	; (40cff0 <f_mkfs+0x954>)
  40cfd4:	4798      	blx	r3
  40cfd6:	4603      	mov	r3, r0
  40cfd8:	2b00      	cmp	r3, #0
  40cfda:	bf14      	ite	ne
  40cfdc:	2301      	movne	r3, #1
  40cfde:	2300      	moveq	r3, #0
  40cfe0:	b2db      	uxtb	r3, r3
}
  40cfe2:	4618      	mov	r0, r3
  40cfe4:	3754      	adds	r7, #84	; 0x54
  40cfe6:	46bd      	mov	sp, r7
  40cfe8:	bd90      	pop	{r4, r7, pc}
  40cfea:	bf00      	nop
  40cfec:	00409eb1 	.word	0x00409eb1
  40cff0:	00409f61 	.word	0x00409f61

0040cff4 <f_putc>:
/*-----------------------------------------------------------------------*/
int f_putc (
	TCHAR c,	/* A character to be output */
	FIL* fil	/* Pointer to the file object */
)
{
  40cff4:	b590      	push	{r4, r7, lr}
  40cff6:	b087      	sub	sp, #28
  40cff8:	af00      	add	r7, sp, #0
  40cffa:	4603      	mov	r3, r0
  40cffc:	6039      	str	r1, [r7, #0]
  40cffe:	71fb      	strb	r3, [r7, #7]
			s[2] = (BYTE)(0x80 | (c & 0x3F));
			btw = 3;
		}
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
  40d000:	79fb      	ldrb	r3, [r7, #7]
  40d002:	733b      	strb	r3, [r7, #12]
	btw = 1;
  40d004:	2301      	movs	r3, #1
  40d006:	617b      	str	r3, [r7, #20]
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
  40d008:	f107 0310 	add.w	r3, r7, #16
  40d00c:	f107 010c 	add.w	r1, r7, #12
  40d010:	697a      	ldr	r2, [r7, #20]
  40d012:	6838      	ldr	r0, [r7, #0]
  40d014:	4c06      	ldr	r4, [pc, #24]	; (40d030 <f_putc+0x3c>)
  40d016:	47a0      	blx	r4
	return (bw == btw) ? 1 : EOF;	/* Return the result */
  40d018:	693a      	ldr	r2, [r7, #16]
  40d01a:	697b      	ldr	r3, [r7, #20]
  40d01c:	429a      	cmp	r2, r3
  40d01e:	d101      	bne.n	40d024 <f_putc+0x30>
  40d020:	2301      	movs	r3, #1
  40d022:	e001      	b.n	40d028 <f_putc+0x34>
  40d024:	f04f 33ff 	mov.w	r3, #4294967295
}
  40d028:	4618      	mov	r0, r3
  40d02a:	371c      	adds	r7, #28
  40d02c:	46bd      	mov	sp, r7
  40d02e:	bd90      	pop	{r4, r7, pc}
  40d030:	0040c1b5 	.word	0x0040c1b5

0040d034 <f_puts>:
/*-----------------------------------------------------------------------*/
int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fil			/* Pointer to the file object */
)
{
  40d034:	b580      	push	{r7, lr}
  40d036:	b084      	sub	sp, #16
  40d038:	af00      	add	r7, sp, #0
  40d03a:	6078      	str	r0, [r7, #4]
  40d03c:	6039      	str	r1, [r7, #0]
	int n;


	for (n = 0; *str; str++, n++) {
  40d03e:	2300      	movs	r3, #0
  40d040:	60fb      	str	r3, [r7, #12]
  40d042:	e012      	b.n	40d06a <f_puts+0x36>
		if (f_putc(*str, fil) == EOF) return EOF;
  40d044:	687b      	ldr	r3, [r7, #4]
  40d046:	781b      	ldrb	r3, [r3, #0]
  40d048:	6839      	ldr	r1, [r7, #0]
  40d04a:	4618      	mov	r0, r3
  40d04c:	4b0b      	ldr	r3, [pc, #44]	; (40d07c <f_puts+0x48>)
  40d04e:	4798      	blx	r3
  40d050:	4603      	mov	r3, r0
  40d052:	f1b3 3fff 	cmp.w	r3, #4294967295
  40d056:	d102      	bne.n	40d05e <f_puts+0x2a>
  40d058:	f04f 33ff 	mov.w	r3, #4294967295
  40d05c:	e00a      	b.n	40d074 <f_puts+0x40>
	for (n = 0; *str; str++, n++) {
  40d05e:	687b      	ldr	r3, [r7, #4]
  40d060:	3301      	adds	r3, #1
  40d062:	607b      	str	r3, [r7, #4]
  40d064:	68fb      	ldr	r3, [r7, #12]
  40d066:	3301      	adds	r3, #1
  40d068:	60fb      	str	r3, [r7, #12]
  40d06a:	687b      	ldr	r3, [r7, #4]
  40d06c:	781b      	ldrb	r3, [r3, #0]
  40d06e:	2b00      	cmp	r3, #0
  40d070:	d1e8      	bne.n	40d044 <f_puts+0x10>
	}
	return n;
  40d072:	68fb      	ldr	r3, [r7, #12]
}
  40d074:	4618      	mov	r0, r3
  40d076:	3710      	adds	r7, #16
  40d078:	46bd      	mov	sp, r7
  40d07a:	bd80      	pop	{r7, pc}
  40d07c:	0040cff5 	.word	0x0040cff5

0040d080 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	src,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
  40d080:	b480      	push	{r7}
  40d082:	b085      	sub	sp, #20
  40d084:	af00      	add	r7, sp, #0
  40d086:	4603      	mov	r3, r0
  40d088:	6039      	str	r1, [r7, #0]
  40d08a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
  40d08c:	88fb      	ldrh	r3, [r7, #6]
  40d08e:	2b7f      	cmp	r3, #127	; 0x7f
  40d090:	d802      	bhi.n	40d098 <ff_convert+0x18>
		c = src;
  40d092:	88fb      	ldrh	r3, [r7, #6]
  40d094:	81fb      	strh	r3, [r7, #14]
  40d096:	e025      	b.n	40d0e4 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
  40d098:	683b      	ldr	r3, [r7, #0]
  40d09a:	2b00      	cmp	r3, #0
  40d09c:	d00b      	beq.n	40d0b6 <ff_convert+0x36>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
  40d09e:	88fb      	ldrh	r3, [r7, #6]
  40d0a0:	2bff      	cmp	r3, #255	; 0xff
  40d0a2:	d805      	bhi.n	40d0b0 <ff_convert+0x30>
  40d0a4:	88fb      	ldrh	r3, [r7, #6]
  40d0a6:	3b80      	subs	r3, #128	; 0x80
  40d0a8:	4a12      	ldr	r2, [pc, #72]	; (40d0f4 <ff_convert+0x74>)
  40d0aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
  40d0ae:	e000      	b.n	40d0b2 <ff_convert+0x32>
  40d0b0:	2300      	movs	r3, #0
  40d0b2:	81fb      	strh	r3, [r7, #14]
  40d0b4:	e016      	b.n	40d0e4 <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
  40d0b6:	2300      	movs	r3, #0
  40d0b8:	81fb      	strh	r3, [r7, #14]
  40d0ba:	e009      	b.n	40d0d0 <ff_convert+0x50>
				if (src == Tbl[c]) break;
  40d0bc:	89fb      	ldrh	r3, [r7, #14]
  40d0be:	4a0d      	ldr	r2, [pc, #52]	; (40d0f4 <ff_convert+0x74>)
  40d0c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
  40d0c4:	88fa      	ldrh	r2, [r7, #6]
  40d0c6:	429a      	cmp	r2, r3
  40d0c8:	d006      	beq.n	40d0d8 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
  40d0ca:	89fb      	ldrh	r3, [r7, #14]
  40d0cc:	3301      	adds	r3, #1
  40d0ce:	81fb      	strh	r3, [r7, #14]
  40d0d0:	89fb      	ldrh	r3, [r7, #14]
  40d0d2:	2b7f      	cmp	r3, #127	; 0x7f
  40d0d4:	d9f2      	bls.n	40d0bc <ff_convert+0x3c>
  40d0d6:	e000      	b.n	40d0da <ff_convert+0x5a>
				if (src == Tbl[c]) break;
  40d0d8:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
  40d0da:	89fb      	ldrh	r3, [r7, #14]
  40d0dc:	3380      	adds	r3, #128	; 0x80
  40d0de:	b29b      	uxth	r3, r3
  40d0e0:	b2db      	uxtb	r3, r3
  40d0e2:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
  40d0e4:	89fb      	ldrh	r3, [r7, #14]
}
  40d0e6:	4618      	mov	r0, r3
  40d0e8:	3714      	adds	r7, #20
  40d0ea:	46bd      	mov	sp, r7
  40d0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
  40d0f0:	4770      	bx	lr
  40d0f2:	bf00      	nop
  40d0f4:	004111e4 	.word	0x004111e4

0040d0f8 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
  40d0f8:	b480      	push	{r7}
  40d0fa:	b085      	sub	sp, #20
  40d0fc:	af00      	add	r7, sp, #0
  40d0fe:	4603      	mov	r3, r0
  40d100:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
  40d102:	2300      	movs	r3, #0
  40d104:	60fb      	str	r3, [r7, #12]
  40d106:	e002      	b.n	40d10e <ff_wtoupper+0x16>
  40d108:	68fb      	ldr	r3, [r7, #12]
  40d10a:	3301      	adds	r3, #1
  40d10c:	60fb      	str	r3, [r7, #12]
  40d10e:	4a0f      	ldr	r2, [pc, #60]	; (40d14c <ff_wtoupper+0x54>)
  40d110:	68fb      	ldr	r3, [r7, #12]
  40d112:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
  40d116:	2b00      	cmp	r3, #0
  40d118:	d006      	beq.n	40d128 <ff_wtoupper+0x30>
  40d11a:	4a0c      	ldr	r2, [pc, #48]	; (40d14c <ff_wtoupper+0x54>)
  40d11c:	68fb      	ldr	r3, [r7, #12]
  40d11e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
  40d122:	88fa      	ldrh	r2, [r7, #6]
  40d124:	429a      	cmp	r2, r3
  40d126:	d1ef      	bne.n	40d108 <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
  40d128:	4a08      	ldr	r2, [pc, #32]	; (40d14c <ff_wtoupper+0x54>)
  40d12a:	68fb      	ldr	r3, [r7, #12]
  40d12c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
  40d130:	2b00      	cmp	r3, #0
  40d132:	d004      	beq.n	40d13e <ff_wtoupper+0x46>
  40d134:	4a06      	ldr	r2, [pc, #24]	; (40d150 <ff_wtoupper+0x58>)
  40d136:	68fb      	ldr	r3, [r7, #12]
  40d138:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
  40d13c:	e000      	b.n	40d140 <ff_wtoupper+0x48>
  40d13e:	88fb      	ldrh	r3, [r7, #6]
}
  40d140:	4618      	mov	r0, r3
  40d142:	3714      	adds	r7, #20
  40d144:	46bd      	mov	sp, r7
  40d146:	f85d 7b04 	ldr.w	r7, [sp], #4
  40d14a:	4770      	bx	lr
  40d14c:	004112e4 	.word	0x004112e4
  40d150:	004114c4 	.word	0x004114c4

0040d154 <__NVIC_EnableIRQ>:
{
  40d154:	b480      	push	{r7}
  40d156:	b083      	sub	sp, #12
  40d158:	af00      	add	r7, sp, #0
  40d15a:	4603      	mov	r3, r0
  40d15c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
  40d15e:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40d162:	2b00      	cmp	r3, #0
  40d164:	db0b      	blt.n	40d17e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40d166:	4909      	ldr	r1, [pc, #36]	; (40d18c <__NVIC_EnableIRQ+0x38>)
  40d168:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40d16c:	095b      	lsrs	r3, r3, #5
  40d16e:	79fa      	ldrb	r2, [r7, #7]
  40d170:	f002 021f 	and.w	r2, r2, #31
  40d174:	2001      	movs	r0, #1
  40d176:	fa00 f202 	lsl.w	r2, r0, r2
  40d17a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  40d17e:	bf00      	nop
  40d180:	370c      	adds	r7, #12
  40d182:	46bd      	mov	sp, r7
  40d184:	f85d 7b04 	ldr.w	r7, [sp], #4
  40d188:	4770      	bx	lr
  40d18a:	bf00      	nop
  40d18c:	e000e100 	.word	0xe000e100

0040d190 <osc_get_rate>:
{
  40d190:	b480      	push	{r7}
  40d192:	b083      	sub	sp, #12
  40d194:	af00      	add	r7, sp, #0
  40d196:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  40d198:	687b      	ldr	r3, [r7, #4]
  40d19a:	2b07      	cmp	r3, #7
  40d19c:	d825      	bhi.n	40d1ea <osc_get_rate+0x5a>
  40d19e:	a201      	add	r2, pc, #4	; (adr r2, 40d1a4 <osc_get_rate+0x14>)
  40d1a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40d1a4:	0040d1c5 	.word	0x0040d1c5
  40d1a8:	0040d1cb 	.word	0x0040d1cb
  40d1ac:	0040d1d1 	.word	0x0040d1d1
  40d1b0:	0040d1d7 	.word	0x0040d1d7
  40d1b4:	0040d1db 	.word	0x0040d1db
  40d1b8:	0040d1df 	.word	0x0040d1df
  40d1bc:	0040d1e3 	.word	0x0040d1e3
  40d1c0:	0040d1e7 	.word	0x0040d1e7
		return OSC_SLCK_32K_RC_HZ;
  40d1c4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  40d1c8:	e010      	b.n	40d1ec <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  40d1ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40d1ce:	e00d      	b.n	40d1ec <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  40d1d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40d1d4:	e00a      	b.n	40d1ec <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  40d1d6:	4b08      	ldr	r3, [pc, #32]	; (40d1f8 <osc_get_rate+0x68>)
  40d1d8:	e008      	b.n	40d1ec <osc_get_rate+0x5c>
		return OSC_MAINCK_16M_RC_HZ;
  40d1da:	4b08      	ldr	r3, [pc, #32]	; (40d1fc <osc_get_rate+0x6c>)
  40d1dc:	e006      	b.n	40d1ec <osc_get_rate+0x5c>
		return OSC_MAINCK_24M_RC_HZ;
  40d1de:	4b08      	ldr	r3, [pc, #32]	; (40d200 <osc_get_rate+0x70>)
  40d1e0:	e004      	b.n	40d1ec <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  40d1e2:	2300      	movs	r3, #0
  40d1e4:	e002      	b.n	40d1ec <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  40d1e6:	2300      	movs	r3, #0
  40d1e8:	e000      	b.n	40d1ec <osc_get_rate+0x5c>
	return 0;
  40d1ea:	2300      	movs	r3, #0
}
  40d1ec:	4618      	mov	r0, r3
  40d1ee:	370c      	adds	r7, #12
  40d1f0:	46bd      	mov	sp, r7
  40d1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
  40d1f6:	4770      	bx	lr
  40d1f8:	007a1200 	.word	0x007a1200
  40d1fc:	00f42400 	.word	0x00f42400
  40d200:	016e3600 	.word	0x016e3600

0040d204 <sysclk_get_main_hz>:
{
  40d204:	b580      	push	{r7, lr}
  40d206:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  40d208:	2001      	movs	r0, #1
  40d20a:	4b04      	ldr	r3, [pc, #16]	; (40d21c <sysclk_get_main_hz+0x18>)
  40d20c:	4798      	blx	r3
  40d20e:	4602      	mov	r2, r0
  40d210:	f640 3372 	movw	r3, #2930	; 0xb72
  40d214:	fb03 f302 	mul.w	r3, r3, r2
}
  40d218:	4618      	mov	r0, r3
  40d21a:	bd80      	pop	{r7, pc}
  40d21c:	0040d191 	.word	0x0040d191

0040d220 <sysclk_get_peripheral_hz>:
{
  40d220:	b580      	push	{r7, lr}
  40d222:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  40d224:	4b02      	ldr	r3, [pc, #8]	; (40d230 <sysclk_get_peripheral_hz+0x10>)
  40d226:	4798      	blx	r3
  40d228:	4603      	mov	r3, r0
}
  40d22a:	4618      	mov	r0, r3
  40d22c:	bd80      	pop	{r7, pc}
  40d22e:	bf00      	nop
  40d230:	0040d205 	.word	0x0040d205

0040d234 <sysclk_enable_peripheral_clock>:
{
  40d234:	b580      	push	{r7, lr}
  40d236:	b082      	sub	sp, #8
  40d238:	af00      	add	r7, sp, #0
  40d23a:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  40d23c:	6878      	ldr	r0, [r7, #4]
  40d23e:	4b03      	ldr	r3, [pc, #12]	; (40d24c <sysclk_enable_peripheral_clock+0x18>)
  40d240:	4798      	blx	r3
}
  40d242:	bf00      	nop
  40d244:	3708      	adds	r7, #8
  40d246:	46bd      	mov	sp, r7
  40d248:	bd80      	pop	{r7, pc}
  40d24a:	bf00      	nop
  40d24c:	0040681d 	.word	0x0040681d

0040d250 <usart_serial_init>:
{
  40d250:	b580      	push	{r7, lr}
  40d252:	b088      	sub	sp, #32
  40d254:	af00      	add	r7, sp, #0
  40d256:	6078      	str	r0, [r7, #4]
  40d258:	6039      	str	r1, [r7, #0]
	usart_settings.baudrate = opt->baudrate;
  40d25a:	683b      	ldr	r3, [r7, #0]
  40d25c:	681b      	ldr	r3, [r3, #0]
  40d25e:	60bb      	str	r3, [r7, #8]
	usart_settings.char_length = opt->charlength;
  40d260:	683b      	ldr	r3, [r7, #0]
  40d262:	685b      	ldr	r3, [r3, #4]
  40d264:	60fb      	str	r3, [r7, #12]
	usart_settings.parity_type = opt->paritytype;
  40d266:	683b      	ldr	r3, [r7, #0]
  40d268:	689b      	ldr	r3, [r3, #8]
  40d26a:	613b      	str	r3, [r7, #16]
	usart_settings.stop_bits= opt->stopbits;
  40d26c:	683b      	ldr	r3, [r7, #0]
  40d26e:	68db      	ldr	r3, [r3, #12]
  40d270:	617b      	str	r3, [r7, #20]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  40d272:	2300      	movs	r3, #0
  40d274:	61bb      	str	r3, [r7, #24]
	if (USART0 == p_usart) {
  40d276:	687b      	ldr	r3, [r7, #4]
  40d278:	4a69      	ldr	r2, [pc, #420]	; (40d420 <usart_serial_init+0x1d0>)
  40d27a:	4293      	cmp	r3, r2
  40d27c:	d115      	bne.n	40d2aa <usart_serial_init+0x5a>
		flexcom_enable(FLEXCOM0);
  40d27e:	4869      	ldr	r0, [pc, #420]	; (40d424 <usart_serial_init+0x1d4>)
  40d280:	4b69      	ldr	r3, [pc, #420]	; (40d428 <usart_serial_init+0x1d8>)
  40d282:	4798      	blx	r3
		flexcom_set_opmode(FLEXCOM0, FLEXCOM_USART);
  40d284:	2101      	movs	r1, #1
  40d286:	4867      	ldr	r0, [pc, #412]	; (40d424 <usart_serial_init+0x1d4>)
  40d288:	4b68      	ldr	r3, [pc, #416]	; (40d42c <usart_serial_init+0x1dc>)
  40d28a:	4798      	blx	r3
		usart_init_rs232(p_usart, &usart_settings,
  40d28c:	4b68      	ldr	r3, [pc, #416]	; (40d430 <usart_serial_init+0x1e0>)
  40d28e:	4798      	blx	r3
  40d290:	4602      	mov	r2, r0
  40d292:	f107 0308 	add.w	r3, r7, #8
  40d296:	4619      	mov	r1, r3
  40d298:	6878      	ldr	r0, [r7, #4]
  40d29a:	4b66      	ldr	r3, [pc, #408]	; (40d434 <usart_serial_init+0x1e4>)
  40d29c:	4798      	blx	r3
		usart_enable_tx(p_usart);
  40d29e:	6878      	ldr	r0, [r7, #4]
  40d2a0:	4b65      	ldr	r3, [pc, #404]	; (40d438 <usart_serial_init+0x1e8>)
  40d2a2:	4798      	blx	r3
		usart_enable_rx(p_usart);
  40d2a4:	6878      	ldr	r0, [r7, #4]
  40d2a6:	4b65      	ldr	r3, [pc, #404]	; (40d43c <usart_serial_init+0x1ec>)
  40d2a8:	4798      	blx	r3
	if (USART1 == p_usart) {
  40d2aa:	687b      	ldr	r3, [r7, #4]
  40d2ac:	4a64      	ldr	r2, [pc, #400]	; (40d440 <usart_serial_init+0x1f0>)
  40d2ae:	4293      	cmp	r3, r2
  40d2b0:	d115      	bne.n	40d2de <usart_serial_init+0x8e>
		flexcom_enable(FLEXCOM1);
  40d2b2:	4864      	ldr	r0, [pc, #400]	; (40d444 <usart_serial_init+0x1f4>)
  40d2b4:	4b5c      	ldr	r3, [pc, #368]	; (40d428 <usart_serial_init+0x1d8>)
  40d2b6:	4798      	blx	r3
		flexcom_set_opmode(FLEXCOM1, FLEXCOM_USART);
  40d2b8:	2101      	movs	r1, #1
  40d2ba:	4862      	ldr	r0, [pc, #392]	; (40d444 <usart_serial_init+0x1f4>)
  40d2bc:	4b5b      	ldr	r3, [pc, #364]	; (40d42c <usart_serial_init+0x1dc>)
  40d2be:	4798      	blx	r3
		usart_init_rs232(p_usart, &usart_settings,
  40d2c0:	4b5b      	ldr	r3, [pc, #364]	; (40d430 <usart_serial_init+0x1e0>)
  40d2c2:	4798      	blx	r3
  40d2c4:	4602      	mov	r2, r0
  40d2c6:	f107 0308 	add.w	r3, r7, #8
  40d2ca:	4619      	mov	r1, r3
  40d2cc:	6878      	ldr	r0, [r7, #4]
  40d2ce:	4b59      	ldr	r3, [pc, #356]	; (40d434 <usart_serial_init+0x1e4>)
  40d2d0:	4798      	blx	r3
		usart_enable_tx(p_usart);
  40d2d2:	6878      	ldr	r0, [r7, #4]
  40d2d4:	4b58      	ldr	r3, [pc, #352]	; (40d438 <usart_serial_init+0x1e8>)
  40d2d6:	4798      	blx	r3
		usart_enable_rx(p_usart);
  40d2d8:	6878      	ldr	r0, [r7, #4]
  40d2da:	4b58      	ldr	r3, [pc, #352]	; (40d43c <usart_serial_init+0x1ec>)
  40d2dc:	4798      	blx	r3
	if (USART2 == p_usart) {
  40d2de:	687b      	ldr	r3, [r7, #4]
  40d2e0:	4a59      	ldr	r2, [pc, #356]	; (40d448 <usart_serial_init+0x1f8>)
  40d2e2:	4293      	cmp	r3, r2
  40d2e4:	d115      	bne.n	40d312 <usart_serial_init+0xc2>
		flexcom_enable(FLEXCOM2);
  40d2e6:	4859      	ldr	r0, [pc, #356]	; (40d44c <usart_serial_init+0x1fc>)
  40d2e8:	4b4f      	ldr	r3, [pc, #316]	; (40d428 <usart_serial_init+0x1d8>)
  40d2ea:	4798      	blx	r3
		flexcom_set_opmode(FLEXCOM2, FLEXCOM_USART);
  40d2ec:	2101      	movs	r1, #1
  40d2ee:	4857      	ldr	r0, [pc, #348]	; (40d44c <usart_serial_init+0x1fc>)
  40d2f0:	4b4e      	ldr	r3, [pc, #312]	; (40d42c <usart_serial_init+0x1dc>)
  40d2f2:	4798      	blx	r3
		usart_init_rs232(p_usart, &usart_settings,
  40d2f4:	4b4e      	ldr	r3, [pc, #312]	; (40d430 <usart_serial_init+0x1e0>)
  40d2f6:	4798      	blx	r3
  40d2f8:	4602      	mov	r2, r0
  40d2fa:	f107 0308 	add.w	r3, r7, #8
  40d2fe:	4619      	mov	r1, r3
  40d300:	6878      	ldr	r0, [r7, #4]
  40d302:	4b4c      	ldr	r3, [pc, #304]	; (40d434 <usart_serial_init+0x1e4>)
  40d304:	4798      	blx	r3
		usart_enable_tx(p_usart);
  40d306:	6878      	ldr	r0, [r7, #4]
  40d308:	4b4b      	ldr	r3, [pc, #300]	; (40d438 <usart_serial_init+0x1e8>)
  40d30a:	4798      	blx	r3
		usart_enable_rx(p_usart);
  40d30c:	6878      	ldr	r0, [r7, #4]
  40d30e:	4b4b      	ldr	r3, [pc, #300]	; (40d43c <usart_serial_init+0x1ec>)
  40d310:	4798      	blx	r3
	if (USART3 == p_usart) {
  40d312:	687b      	ldr	r3, [r7, #4]
  40d314:	4a4e      	ldr	r2, [pc, #312]	; (40d450 <usart_serial_init+0x200>)
  40d316:	4293      	cmp	r3, r2
  40d318:	d115      	bne.n	40d346 <usart_serial_init+0xf6>
		flexcom_enable(FLEXCOM3);
  40d31a:	484e      	ldr	r0, [pc, #312]	; (40d454 <usart_serial_init+0x204>)
  40d31c:	4b42      	ldr	r3, [pc, #264]	; (40d428 <usart_serial_init+0x1d8>)
  40d31e:	4798      	blx	r3
		flexcom_set_opmode(FLEXCOM3, FLEXCOM_USART);
  40d320:	2101      	movs	r1, #1
  40d322:	484c      	ldr	r0, [pc, #304]	; (40d454 <usart_serial_init+0x204>)
  40d324:	4b41      	ldr	r3, [pc, #260]	; (40d42c <usart_serial_init+0x1dc>)
  40d326:	4798      	blx	r3
		usart_init_rs232(p_usart, &usart_settings,
  40d328:	4b41      	ldr	r3, [pc, #260]	; (40d430 <usart_serial_init+0x1e0>)
  40d32a:	4798      	blx	r3
  40d32c:	4602      	mov	r2, r0
  40d32e:	f107 0308 	add.w	r3, r7, #8
  40d332:	4619      	mov	r1, r3
  40d334:	6878      	ldr	r0, [r7, #4]
  40d336:	4b3f      	ldr	r3, [pc, #252]	; (40d434 <usart_serial_init+0x1e4>)
  40d338:	4798      	blx	r3
		usart_enable_tx(p_usart);
  40d33a:	6878      	ldr	r0, [r7, #4]
  40d33c:	4b3e      	ldr	r3, [pc, #248]	; (40d438 <usart_serial_init+0x1e8>)
  40d33e:	4798      	blx	r3
		usart_enable_rx(p_usart);
  40d340:	6878      	ldr	r0, [r7, #4]
  40d342:	4b3e      	ldr	r3, [pc, #248]	; (40d43c <usart_serial_init+0x1ec>)
  40d344:	4798      	blx	r3
	if (USART4 == p_usart) {
  40d346:	687b      	ldr	r3, [r7, #4]
  40d348:	4a43      	ldr	r2, [pc, #268]	; (40d458 <usart_serial_init+0x208>)
  40d34a:	4293      	cmp	r3, r2
  40d34c:	d115      	bne.n	40d37a <usart_serial_init+0x12a>
		flexcom_enable(FLEXCOM4);
  40d34e:	4843      	ldr	r0, [pc, #268]	; (40d45c <usart_serial_init+0x20c>)
  40d350:	4b35      	ldr	r3, [pc, #212]	; (40d428 <usart_serial_init+0x1d8>)
  40d352:	4798      	blx	r3
		flexcom_set_opmode(FLEXCOM4, FLEXCOM_USART);
  40d354:	2101      	movs	r1, #1
  40d356:	4841      	ldr	r0, [pc, #260]	; (40d45c <usart_serial_init+0x20c>)
  40d358:	4b34      	ldr	r3, [pc, #208]	; (40d42c <usart_serial_init+0x1dc>)
  40d35a:	4798      	blx	r3
		usart_init_rs232(p_usart, &usart_settings,
  40d35c:	4b34      	ldr	r3, [pc, #208]	; (40d430 <usart_serial_init+0x1e0>)
  40d35e:	4798      	blx	r3
  40d360:	4602      	mov	r2, r0
  40d362:	f107 0308 	add.w	r3, r7, #8
  40d366:	4619      	mov	r1, r3
  40d368:	6878      	ldr	r0, [r7, #4]
  40d36a:	4b32      	ldr	r3, [pc, #200]	; (40d434 <usart_serial_init+0x1e4>)
  40d36c:	4798      	blx	r3
		usart_enable_tx(p_usart);
  40d36e:	6878      	ldr	r0, [r7, #4]
  40d370:	4b31      	ldr	r3, [pc, #196]	; (40d438 <usart_serial_init+0x1e8>)
  40d372:	4798      	blx	r3
		usart_enable_rx(p_usart);
  40d374:	6878      	ldr	r0, [r7, #4]
  40d376:	4b31      	ldr	r3, [pc, #196]	; (40d43c <usart_serial_init+0x1ec>)
  40d378:	4798      	blx	r3
	if (USART5 == p_usart) {
  40d37a:	687b      	ldr	r3, [r7, #4]
  40d37c:	4a38      	ldr	r2, [pc, #224]	; (40d460 <usart_serial_init+0x210>)
  40d37e:	4293      	cmp	r3, r2
  40d380:	d115      	bne.n	40d3ae <usart_serial_init+0x15e>
		flexcom_enable(FLEXCOM5);
  40d382:	4838      	ldr	r0, [pc, #224]	; (40d464 <usart_serial_init+0x214>)
  40d384:	4b28      	ldr	r3, [pc, #160]	; (40d428 <usart_serial_init+0x1d8>)
  40d386:	4798      	blx	r3
		flexcom_set_opmode(FLEXCOM5, FLEXCOM_USART);
  40d388:	2101      	movs	r1, #1
  40d38a:	4836      	ldr	r0, [pc, #216]	; (40d464 <usart_serial_init+0x214>)
  40d38c:	4b27      	ldr	r3, [pc, #156]	; (40d42c <usart_serial_init+0x1dc>)
  40d38e:	4798      	blx	r3
		usart_init_rs232(p_usart, &usart_settings,
  40d390:	4b27      	ldr	r3, [pc, #156]	; (40d430 <usart_serial_init+0x1e0>)
  40d392:	4798      	blx	r3
  40d394:	4602      	mov	r2, r0
  40d396:	f107 0308 	add.w	r3, r7, #8
  40d39a:	4619      	mov	r1, r3
  40d39c:	6878      	ldr	r0, [r7, #4]
  40d39e:	4b25      	ldr	r3, [pc, #148]	; (40d434 <usart_serial_init+0x1e4>)
  40d3a0:	4798      	blx	r3
		usart_enable_tx(p_usart);
  40d3a2:	6878      	ldr	r0, [r7, #4]
  40d3a4:	4b24      	ldr	r3, [pc, #144]	; (40d438 <usart_serial_init+0x1e8>)
  40d3a6:	4798      	blx	r3
		usart_enable_rx(p_usart);
  40d3a8:	6878      	ldr	r0, [r7, #4]
  40d3aa:	4b24      	ldr	r3, [pc, #144]	; (40d43c <usart_serial_init+0x1ec>)
  40d3ac:	4798      	blx	r3
	if (USART6 == p_usart) {
  40d3ae:	687b      	ldr	r3, [r7, #4]
  40d3b0:	4a2d      	ldr	r2, [pc, #180]	; (40d468 <usart_serial_init+0x218>)
  40d3b2:	4293      	cmp	r3, r2
  40d3b4:	d115      	bne.n	40d3e2 <usart_serial_init+0x192>
		flexcom_enable(FLEXCOM6);
  40d3b6:	482d      	ldr	r0, [pc, #180]	; (40d46c <usart_serial_init+0x21c>)
  40d3b8:	4b1b      	ldr	r3, [pc, #108]	; (40d428 <usart_serial_init+0x1d8>)
  40d3ba:	4798      	blx	r3
		flexcom_set_opmode(FLEXCOM6, FLEXCOM_USART);
  40d3bc:	2101      	movs	r1, #1
  40d3be:	482b      	ldr	r0, [pc, #172]	; (40d46c <usart_serial_init+0x21c>)
  40d3c0:	4b1a      	ldr	r3, [pc, #104]	; (40d42c <usart_serial_init+0x1dc>)
  40d3c2:	4798      	blx	r3
		usart_init_rs232(p_usart, &usart_settings,
  40d3c4:	4b1a      	ldr	r3, [pc, #104]	; (40d430 <usart_serial_init+0x1e0>)
  40d3c6:	4798      	blx	r3
  40d3c8:	4602      	mov	r2, r0
  40d3ca:	f107 0308 	add.w	r3, r7, #8
  40d3ce:	4619      	mov	r1, r3
  40d3d0:	6878      	ldr	r0, [r7, #4]
  40d3d2:	4b18      	ldr	r3, [pc, #96]	; (40d434 <usart_serial_init+0x1e4>)
  40d3d4:	4798      	blx	r3
		usart_enable_tx(p_usart);
  40d3d6:	6878      	ldr	r0, [r7, #4]
  40d3d8:	4b17      	ldr	r3, [pc, #92]	; (40d438 <usart_serial_init+0x1e8>)
  40d3da:	4798      	blx	r3
		usart_enable_rx(p_usart);
  40d3dc:	6878      	ldr	r0, [r7, #4]
  40d3de:	4b17      	ldr	r3, [pc, #92]	; (40d43c <usart_serial_init+0x1ec>)
  40d3e0:	4798      	blx	r3
	if (USART7 == p_usart) {
  40d3e2:	687b      	ldr	r3, [r7, #4]
  40d3e4:	4a22      	ldr	r2, [pc, #136]	; (40d470 <usart_serial_init+0x220>)
  40d3e6:	4293      	cmp	r3, r2
  40d3e8:	d115      	bne.n	40d416 <usart_serial_init+0x1c6>
		flexcom_enable(FLEXCOM7);
  40d3ea:	4822      	ldr	r0, [pc, #136]	; (40d474 <usart_serial_init+0x224>)
  40d3ec:	4b0e      	ldr	r3, [pc, #56]	; (40d428 <usart_serial_init+0x1d8>)
  40d3ee:	4798      	blx	r3
		flexcom_set_opmode(FLEXCOM7, FLEXCOM_USART);
  40d3f0:	2101      	movs	r1, #1
  40d3f2:	4820      	ldr	r0, [pc, #128]	; (40d474 <usart_serial_init+0x224>)
  40d3f4:	4b0d      	ldr	r3, [pc, #52]	; (40d42c <usart_serial_init+0x1dc>)
  40d3f6:	4798      	blx	r3
		usart_init_rs232(p_usart, &usart_settings,
  40d3f8:	4b0d      	ldr	r3, [pc, #52]	; (40d430 <usart_serial_init+0x1e0>)
  40d3fa:	4798      	blx	r3
  40d3fc:	4602      	mov	r2, r0
  40d3fe:	f107 0308 	add.w	r3, r7, #8
  40d402:	4619      	mov	r1, r3
  40d404:	6878      	ldr	r0, [r7, #4]
  40d406:	4b0b      	ldr	r3, [pc, #44]	; (40d434 <usart_serial_init+0x1e4>)
  40d408:	4798      	blx	r3
		usart_enable_tx(p_usart);
  40d40a:	6878      	ldr	r0, [r7, #4]
  40d40c:	4b0a      	ldr	r3, [pc, #40]	; (40d438 <usart_serial_init+0x1e8>)
  40d40e:	4798      	blx	r3
		usart_enable_rx(p_usart);
  40d410:	6878      	ldr	r0, [r7, #4]
  40d412:	4b0a      	ldr	r3, [pc, #40]	; (40d43c <usart_serial_init+0x1ec>)
  40d414:	4798      	blx	r3
}
  40d416:	bf00      	nop
  40d418:	3720      	adds	r7, #32
  40d41a:	46bd      	mov	sp, r7
  40d41c:	bd80      	pop	{r7, pc}
  40d41e:	bf00      	nop
  40d420:	4000c200 	.word	0x4000c200
  40d424:	4000c000 	.word	0x4000c000
  40d428:	00405fad 	.word	0x00405fad
  40d42c:	00406115 	.word	0x00406115
  40d430:	0040d221 	.word	0x0040d221
  40d434:	004097bd 	.word	0x004097bd
  40d438:	00409841 	.word	0x00409841
  40d43c:	00409875 	.word	0x00409875
  40d440:	40020200 	.word	0x40020200
  40d444:	40020000 	.word	0x40020000
  40d448:	40024200 	.word	0x40024200
  40d44c:	40024000 	.word	0x40024000
  40d450:	40018200 	.word	0x40018200
  40d454:	40018000 	.word	0x40018000
  40d458:	4001c200 	.word	0x4001c200
  40d45c:	4001c000 	.word	0x4001c000
  40d460:	40008200 	.word	0x40008200
  40d464:	40008000 	.word	0x40008000
  40d468:	40040200 	.word	0x40040200
  40d46c:	40040000 	.word	0x40040000
  40d470:	40034200 	.word	0x40034200
  40d474:	40034000 	.word	0x40034000

0040d478 <usart_serial_putchar>:
{
  40d478:	b580      	push	{r7, lr}
  40d47a:	b082      	sub	sp, #8
  40d47c:	af00      	add	r7, sp, #0
  40d47e:	6078      	str	r0, [r7, #4]
  40d480:	460b      	mov	r3, r1
  40d482:	70fb      	strb	r3, [r7, #3]
	if (USART0 == p_usart) {
  40d484:	687b      	ldr	r3, [r7, #4]
  40d486:	4a3e      	ldr	r2, [pc, #248]	; (40d580 <usart_serial_putchar+0x108>)
  40d488:	4293      	cmp	r3, r2
  40d48a:	d10a      	bne.n	40d4a2 <usart_serial_putchar+0x2a>
		while (usart_write(p_usart, c)!=0);
  40d48c:	bf00      	nop
  40d48e:	78fb      	ldrb	r3, [r7, #3]
  40d490:	4619      	mov	r1, r3
  40d492:	6878      	ldr	r0, [r7, #4]
  40d494:	4b3b      	ldr	r3, [pc, #236]	; (40d584 <usart_serial_putchar+0x10c>)
  40d496:	4798      	blx	r3
  40d498:	4603      	mov	r3, r0
  40d49a:	2b00      	cmp	r3, #0
  40d49c:	d1f7      	bne.n	40d48e <usart_serial_putchar+0x16>
		return 1;
  40d49e:	2301      	movs	r3, #1
  40d4a0:	e069      	b.n	40d576 <usart_serial_putchar+0xfe>
	if (USART1 == p_usart) {
  40d4a2:	687b      	ldr	r3, [r7, #4]
  40d4a4:	4a38      	ldr	r2, [pc, #224]	; (40d588 <usart_serial_putchar+0x110>)
  40d4a6:	4293      	cmp	r3, r2
  40d4a8:	d10a      	bne.n	40d4c0 <usart_serial_putchar+0x48>
		while (usart_write(p_usart, c)!=0);
  40d4aa:	bf00      	nop
  40d4ac:	78fb      	ldrb	r3, [r7, #3]
  40d4ae:	4619      	mov	r1, r3
  40d4b0:	6878      	ldr	r0, [r7, #4]
  40d4b2:	4b34      	ldr	r3, [pc, #208]	; (40d584 <usart_serial_putchar+0x10c>)
  40d4b4:	4798      	blx	r3
  40d4b6:	4603      	mov	r3, r0
  40d4b8:	2b00      	cmp	r3, #0
  40d4ba:	d1f7      	bne.n	40d4ac <usart_serial_putchar+0x34>
		return 1;
  40d4bc:	2301      	movs	r3, #1
  40d4be:	e05a      	b.n	40d576 <usart_serial_putchar+0xfe>
	if (USART2 == p_usart) {
  40d4c0:	687b      	ldr	r3, [r7, #4]
  40d4c2:	4a32      	ldr	r2, [pc, #200]	; (40d58c <usart_serial_putchar+0x114>)
  40d4c4:	4293      	cmp	r3, r2
  40d4c6:	d10a      	bne.n	40d4de <usart_serial_putchar+0x66>
		while (usart_write(p_usart, c)!=0);
  40d4c8:	bf00      	nop
  40d4ca:	78fb      	ldrb	r3, [r7, #3]
  40d4cc:	4619      	mov	r1, r3
  40d4ce:	6878      	ldr	r0, [r7, #4]
  40d4d0:	4b2c      	ldr	r3, [pc, #176]	; (40d584 <usart_serial_putchar+0x10c>)
  40d4d2:	4798      	blx	r3
  40d4d4:	4603      	mov	r3, r0
  40d4d6:	2b00      	cmp	r3, #0
  40d4d8:	d1f7      	bne.n	40d4ca <usart_serial_putchar+0x52>
		return 1;
  40d4da:	2301      	movs	r3, #1
  40d4dc:	e04b      	b.n	40d576 <usart_serial_putchar+0xfe>
	if (USART3 == p_usart) {
  40d4de:	687b      	ldr	r3, [r7, #4]
  40d4e0:	4a2b      	ldr	r2, [pc, #172]	; (40d590 <usart_serial_putchar+0x118>)
  40d4e2:	4293      	cmp	r3, r2
  40d4e4:	d10a      	bne.n	40d4fc <usart_serial_putchar+0x84>
		while (usart_write(p_usart, c)!=0);
  40d4e6:	bf00      	nop
  40d4e8:	78fb      	ldrb	r3, [r7, #3]
  40d4ea:	4619      	mov	r1, r3
  40d4ec:	6878      	ldr	r0, [r7, #4]
  40d4ee:	4b25      	ldr	r3, [pc, #148]	; (40d584 <usart_serial_putchar+0x10c>)
  40d4f0:	4798      	blx	r3
  40d4f2:	4603      	mov	r3, r0
  40d4f4:	2b00      	cmp	r3, #0
  40d4f6:	d1f7      	bne.n	40d4e8 <usart_serial_putchar+0x70>
		return 1;
  40d4f8:	2301      	movs	r3, #1
  40d4fa:	e03c      	b.n	40d576 <usart_serial_putchar+0xfe>
	if (USART4 == p_usart) {
  40d4fc:	687b      	ldr	r3, [r7, #4]
  40d4fe:	4a25      	ldr	r2, [pc, #148]	; (40d594 <usart_serial_putchar+0x11c>)
  40d500:	4293      	cmp	r3, r2
  40d502:	d10a      	bne.n	40d51a <usart_serial_putchar+0xa2>
		while (usart_write(p_usart, c)!=0);
  40d504:	bf00      	nop
  40d506:	78fb      	ldrb	r3, [r7, #3]
  40d508:	4619      	mov	r1, r3
  40d50a:	6878      	ldr	r0, [r7, #4]
  40d50c:	4b1d      	ldr	r3, [pc, #116]	; (40d584 <usart_serial_putchar+0x10c>)
  40d50e:	4798      	blx	r3
  40d510:	4603      	mov	r3, r0
  40d512:	2b00      	cmp	r3, #0
  40d514:	d1f7      	bne.n	40d506 <usart_serial_putchar+0x8e>
		return 1;
  40d516:	2301      	movs	r3, #1
  40d518:	e02d      	b.n	40d576 <usart_serial_putchar+0xfe>
	if (USART5 == p_usart) {
  40d51a:	687b      	ldr	r3, [r7, #4]
  40d51c:	4a1e      	ldr	r2, [pc, #120]	; (40d598 <usart_serial_putchar+0x120>)
  40d51e:	4293      	cmp	r3, r2
  40d520:	d10a      	bne.n	40d538 <usart_serial_putchar+0xc0>
		while (usart_write(p_usart, c)!=0);
  40d522:	bf00      	nop
  40d524:	78fb      	ldrb	r3, [r7, #3]
  40d526:	4619      	mov	r1, r3
  40d528:	6878      	ldr	r0, [r7, #4]
  40d52a:	4b16      	ldr	r3, [pc, #88]	; (40d584 <usart_serial_putchar+0x10c>)
  40d52c:	4798      	blx	r3
  40d52e:	4603      	mov	r3, r0
  40d530:	2b00      	cmp	r3, #0
  40d532:	d1f7      	bne.n	40d524 <usart_serial_putchar+0xac>
		return 1;
  40d534:	2301      	movs	r3, #1
  40d536:	e01e      	b.n	40d576 <usart_serial_putchar+0xfe>
	if (USART6 == p_usart) {
  40d538:	687b      	ldr	r3, [r7, #4]
  40d53a:	4a18      	ldr	r2, [pc, #96]	; (40d59c <usart_serial_putchar+0x124>)
  40d53c:	4293      	cmp	r3, r2
  40d53e:	d10a      	bne.n	40d556 <usart_serial_putchar+0xde>
		while (usart_write(p_usart, c)!=0);
  40d540:	bf00      	nop
  40d542:	78fb      	ldrb	r3, [r7, #3]
  40d544:	4619      	mov	r1, r3
  40d546:	6878      	ldr	r0, [r7, #4]
  40d548:	4b0e      	ldr	r3, [pc, #56]	; (40d584 <usart_serial_putchar+0x10c>)
  40d54a:	4798      	blx	r3
  40d54c:	4603      	mov	r3, r0
  40d54e:	2b00      	cmp	r3, #0
  40d550:	d1f7      	bne.n	40d542 <usart_serial_putchar+0xca>
		return 1;
  40d552:	2301      	movs	r3, #1
  40d554:	e00f      	b.n	40d576 <usart_serial_putchar+0xfe>
	if (USART7 == p_usart) {
  40d556:	687b      	ldr	r3, [r7, #4]
  40d558:	4a11      	ldr	r2, [pc, #68]	; (40d5a0 <usart_serial_putchar+0x128>)
  40d55a:	4293      	cmp	r3, r2
  40d55c:	d10a      	bne.n	40d574 <usart_serial_putchar+0xfc>
		while (usart_write(p_usart, c)!=0);
  40d55e:	bf00      	nop
  40d560:	78fb      	ldrb	r3, [r7, #3]
  40d562:	4619      	mov	r1, r3
  40d564:	6878      	ldr	r0, [r7, #4]
  40d566:	4b07      	ldr	r3, [pc, #28]	; (40d584 <usart_serial_putchar+0x10c>)
  40d568:	4798      	blx	r3
  40d56a:	4603      	mov	r3, r0
  40d56c:	2b00      	cmp	r3, #0
  40d56e:	d1f7      	bne.n	40d560 <usart_serial_putchar+0xe8>
		return 1;
  40d570:	2301      	movs	r3, #1
  40d572:	e000      	b.n	40d576 <usart_serial_putchar+0xfe>
	return 0;
  40d574:	2300      	movs	r3, #0
}
  40d576:	4618      	mov	r0, r3
  40d578:	3708      	adds	r7, #8
  40d57a:	46bd      	mov	sp, r7
  40d57c:	bd80      	pop	{r7, pc}
  40d57e:	bf00      	nop
  40d580:	4000c200 	.word	0x4000c200
  40d584:	004098fd 	.word	0x004098fd
  40d588:	40020200 	.word	0x40020200
  40d58c:	40024200 	.word	0x40024200
  40d590:	40018200 	.word	0x40018200
  40d594:	4001c200 	.word	0x4001c200
  40d598:	40008200 	.word	0x40008200
  40d59c:	40040200 	.word	0x40040200
  40d5a0:	40034200 	.word	0x40034200

0040d5a4 <usart_serial_getchar>:
{
  40d5a4:	b580      	push	{r7, lr}
  40d5a6:	b084      	sub	sp, #16
  40d5a8:	af00      	add	r7, sp, #0
  40d5aa:	6078      	str	r0, [r7, #4]
  40d5ac:	6039      	str	r1, [r7, #0]
	uint32_t val = 0;
  40d5ae:	2300      	movs	r3, #0
  40d5b0:	60fb      	str	r3, [r7, #12]
	if (USART0 == p_usart) {
  40d5b2:	687b      	ldr	r3, [r7, #4]
  40d5b4:	4a49      	ldr	r2, [pc, #292]	; (40d6dc <usart_serial_getchar+0x138>)
  40d5b6:	4293      	cmp	r3, r2
  40d5b8:	d10d      	bne.n	40d5d6 <usart_serial_getchar+0x32>
		while (usart_read(p_usart, &val));
  40d5ba:	bf00      	nop
  40d5bc:	f107 030c 	add.w	r3, r7, #12
  40d5c0:	4619      	mov	r1, r3
  40d5c2:	6878      	ldr	r0, [r7, #4]
  40d5c4:	4b46      	ldr	r3, [pc, #280]	; (40d6e0 <usart_serial_getchar+0x13c>)
  40d5c6:	4798      	blx	r3
  40d5c8:	4603      	mov	r3, r0
  40d5ca:	2b00      	cmp	r3, #0
  40d5cc:	d1f6      	bne.n	40d5bc <usart_serial_getchar+0x18>
		*data = (uint8_t)(val & 0xFF);
  40d5ce:	68fb      	ldr	r3, [r7, #12]
  40d5d0:	b2da      	uxtb	r2, r3
  40d5d2:	683b      	ldr	r3, [r7, #0]
  40d5d4:	701a      	strb	r2, [r3, #0]
	if (USART1 == p_usart) {
  40d5d6:	687b      	ldr	r3, [r7, #4]
  40d5d8:	4a42      	ldr	r2, [pc, #264]	; (40d6e4 <usart_serial_getchar+0x140>)
  40d5da:	4293      	cmp	r3, r2
  40d5dc:	d10d      	bne.n	40d5fa <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
  40d5de:	bf00      	nop
  40d5e0:	f107 030c 	add.w	r3, r7, #12
  40d5e4:	4619      	mov	r1, r3
  40d5e6:	6878      	ldr	r0, [r7, #4]
  40d5e8:	4b3d      	ldr	r3, [pc, #244]	; (40d6e0 <usart_serial_getchar+0x13c>)
  40d5ea:	4798      	blx	r3
  40d5ec:	4603      	mov	r3, r0
  40d5ee:	2b00      	cmp	r3, #0
  40d5f0:	d1f6      	bne.n	40d5e0 <usart_serial_getchar+0x3c>
		*data = (uint8_t)(val & 0xFF);
  40d5f2:	68fb      	ldr	r3, [r7, #12]
  40d5f4:	b2da      	uxtb	r2, r3
  40d5f6:	683b      	ldr	r3, [r7, #0]
  40d5f8:	701a      	strb	r2, [r3, #0]
	if (USART2 == p_usart) {
  40d5fa:	687b      	ldr	r3, [r7, #4]
  40d5fc:	4a3a      	ldr	r2, [pc, #232]	; (40d6e8 <usart_serial_getchar+0x144>)
  40d5fe:	4293      	cmp	r3, r2
  40d600:	d10d      	bne.n	40d61e <usart_serial_getchar+0x7a>
		while (usart_read(p_usart, &val));
  40d602:	bf00      	nop
  40d604:	f107 030c 	add.w	r3, r7, #12
  40d608:	4619      	mov	r1, r3
  40d60a:	6878      	ldr	r0, [r7, #4]
  40d60c:	4b34      	ldr	r3, [pc, #208]	; (40d6e0 <usart_serial_getchar+0x13c>)
  40d60e:	4798      	blx	r3
  40d610:	4603      	mov	r3, r0
  40d612:	2b00      	cmp	r3, #0
  40d614:	d1f6      	bne.n	40d604 <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
  40d616:	68fb      	ldr	r3, [r7, #12]
  40d618:	b2da      	uxtb	r2, r3
  40d61a:	683b      	ldr	r3, [r7, #0]
  40d61c:	701a      	strb	r2, [r3, #0]
	if (USART3 == p_usart) {
  40d61e:	687b      	ldr	r3, [r7, #4]
  40d620:	4a32      	ldr	r2, [pc, #200]	; (40d6ec <usart_serial_getchar+0x148>)
  40d622:	4293      	cmp	r3, r2
  40d624:	d10d      	bne.n	40d642 <usart_serial_getchar+0x9e>
		while (usart_read(p_usart, &val));
  40d626:	bf00      	nop
  40d628:	f107 030c 	add.w	r3, r7, #12
  40d62c:	4619      	mov	r1, r3
  40d62e:	6878      	ldr	r0, [r7, #4]
  40d630:	4b2b      	ldr	r3, [pc, #172]	; (40d6e0 <usart_serial_getchar+0x13c>)
  40d632:	4798      	blx	r3
  40d634:	4603      	mov	r3, r0
  40d636:	2b00      	cmp	r3, #0
  40d638:	d1f6      	bne.n	40d628 <usart_serial_getchar+0x84>
		*data = (uint8_t)(val & 0xFF);
  40d63a:	68fb      	ldr	r3, [r7, #12]
  40d63c:	b2da      	uxtb	r2, r3
  40d63e:	683b      	ldr	r3, [r7, #0]
  40d640:	701a      	strb	r2, [r3, #0]
	if (USART4 == p_usart) {
  40d642:	687b      	ldr	r3, [r7, #4]
  40d644:	4a2a      	ldr	r2, [pc, #168]	; (40d6f0 <usart_serial_getchar+0x14c>)
  40d646:	4293      	cmp	r3, r2
  40d648:	d10d      	bne.n	40d666 <usart_serial_getchar+0xc2>
		while (usart_read(p_usart, &val));
  40d64a:	bf00      	nop
  40d64c:	f107 030c 	add.w	r3, r7, #12
  40d650:	4619      	mov	r1, r3
  40d652:	6878      	ldr	r0, [r7, #4]
  40d654:	4b22      	ldr	r3, [pc, #136]	; (40d6e0 <usart_serial_getchar+0x13c>)
  40d656:	4798      	blx	r3
  40d658:	4603      	mov	r3, r0
  40d65a:	2b00      	cmp	r3, #0
  40d65c:	d1f6      	bne.n	40d64c <usart_serial_getchar+0xa8>
		*data = (uint8_t)(val & 0xFF);
  40d65e:	68fb      	ldr	r3, [r7, #12]
  40d660:	b2da      	uxtb	r2, r3
  40d662:	683b      	ldr	r3, [r7, #0]
  40d664:	701a      	strb	r2, [r3, #0]
	if (USART5 == p_usart) {
  40d666:	687b      	ldr	r3, [r7, #4]
  40d668:	4a22      	ldr	r2, [pc, #136]	; (40d6f4 <usart_serial_getchar+0x150>)
  40d66a:	4293      	cmp	r3, r2
  40d66c:	d10d      	bne.n	40d68a <usart_serial_getchar+0xe6>
		while (usart_read(p_usart, &val));
  40d66e:	bf00      	nop
  40d670:	f107 030c 	add.w	r3, r7, #12
  40d674:	4619      	mov	r1, r3
  40d676:	6878      	ldr	r0, [r7, #4]
  40d678:	4b19      	ldr	r3, [pc, #100]	; (40d6e0 <usart_serial_getchar+0x13c>)
  40d67a:	4798      	blx	r3
  40d67c:	4603      	mov	r3, r0
  40d67e:	2b00      	cmp	r3, #0
  40d680:	d1f6      	bne.n	40d670 <usart_serial_getchar+0xcc>
		*data = (uint8_t)(val & 0xFF);
  40d682:	68fb      	ldr	r3, [r7, #12]
  40d684:	b2da      	uxtb	r2, r3
  40d686:	683b      	ldr	r3, [r7, #0]
  40d688:	701a      	strb	r2, [r3, #0]
	if (USART6 == p_usart) {
  40d68a:	687b      	ldr	r3, [r7, #4]
  40d68c:	4a1a      	ldr	r2, [pc, #104]	; (40d6f8 <usart_serial_getchar+0x154>)
  40d68e:	4293      	cmp	r3, r2
  40d690:	d10d      	bne.n	40d6ae <usart_serial_getchar+0x10a>
		while (usart_read(p_usart, &val));
  40d692:	bf00      	nop
  40d694:	f107 030c 	add.w	r3, r7, #12
  40d698:	4619      	mov	r1, r3
  40d69a:	6878      	ldr	r0, [r7, #4]
  40d69c:	4b10      	ldr	r3, [pc, #64]	; (40d6e0 <usart_serial_getchar+0x13c>)
  40d69e:	4798      	blx	r3
  40d6a0:	4603      	mov	r3, r0
  40d6a2:	2b00      	cmp	r3, #0
  40d6a4:	d1f6      	bne.n	40d694 <usart_serial_getchar+0xf0>
		*data = (uint8_t)(val & 0xFF);
  40d6a6:	68fb      	ldr	r3, [r7, #12]
  40d6a8:	b2da      	uxtb	r2, r3
  40d6aa:	683b      	ldr	r3, [r7, #0]
  40d6ac:	701a      	strb	r2, [r3, #0]
	if (USART7 == p_usart) {
  40d6ae:	687b      	ldr	r3, [r7, #4]
  40d6b0:	4a12      	ldr	r2, [pc, #72]	; (40d6fc <usart_serial_getchar+0x158>)
  40d6b2:	4293      	cmp	r3, r2
  40d6b4:	d10d      	bne.n	40d6d2 <usart_serial_getchar+0x12e>
		while (usart_read(p_usart, &val));
  40d6b6:	bf00      	nop
  40d6b8:	f107 030c 	add.w	r3, r7, #12
  40d6bc:	4619      	mov	r1, r3
  40d6be:	6878      	ldr	r0, [r7, #4]
  40d6c0:	4b07      	ldr	r3, [pc, #28]	; (40d6e0 <usart_serial_getchar+0x13c>)
  40d6c2:	4798      	blx	r3
  40d6c4:	4603      	mov	r3, r0
  40d6c6:	2b00      	cmp	r3, #0
  40d6c8:	d1f6      	bne.n	40d6b8 <usart_serial_getchar+0x114>
		*data = (uint8_t)(val & 0xFF);
  40d6ca:	68fb      	ldr	r3, [r7, #12]
  40d6cc:	b2da      	uxtb	r2, r3
  40d6ce:	683b      	ldr	r3, [r7, #0]
  40d6d0:	701a      	strb	r2, [r3, #0]
}
  40d6d2:	bf00      	nop
  40d6d4:	3710      	adds	r7, #16
  40d6d6:	46bd      	mov	sp, r7
  40d6d8:	bd80      	pop	{r7, pc}
  40d6da:	bf00      	nop
  40d6dc:	4000c200 	.word	0x4000c200
  40d6e0:	0040992f 	.word	0x0040992f
  40d6e4:	40020200 	.word	0x40020200
  40d6e8:	40024200 	.word	0x40024200
  40d6ec:	40018200 	.word	0x40018200
  40d6f0:	4001c200 	.word	0x4001c200
  40d6f4:	40008200 	.word	0x40008200
  40d6f8:	40040200 	.word	0x40040200
  40d6fc:	40034200 	.word	0x40034200

0040d700 <stdio_serial_init>:
 * \param usart       Base address of the USART instance.
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
  40d700:	b580      	push	{r7, lr}
  40d702:	b082      	sub	sp, #8
  40d704:	af00      	add	r7, sp, #0
  40d706:	6078      	str	r0, [r7, #4]
  40d708:	6039      	str	r1, [r7, #0]
	stdio_base = (void *)usart;
  40d70a:	4a0f      	ldr	r2, [pc, #60]	; (40d748 <stdio_serial_init+0x48>)
  40d70c:	687b      	ldr	r3, [r7, #4]
  40d70e:	6013      	str	r3, [r2, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  40d710:	4b0e      	ldr	r3, [pc, #56]	; (40d74c <stdio_serial_init+0x4c>)
  40d712:	4a0f      	ldr	r2, [pc, #60]	; (40d750 <stdio_serial_init+0x50>)
  40d714:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  40d716:	4b0f      	ldr	r3, [pc, #60]	; (40d754 <stdio_serial_init+0x54>)
  40d718:	4a0f      	ldr	r2, [pc, #60]	; (40d758 <stdio_serial_init+0x58>)
  40d71a:	601a      	str	r2, [r3, #0]
# if (XMEGA || MEGA_RF)
	usart_serial_init((USART_t *)usart,opt);
# elif UC3
	usart_serial_init(usart,(usart_serial_options_t *)opt);
# elif SAM
	usart_serial_init((Usart *)usart,(usart_serial_options_t *)opt);
  40d71c:	6839      	ldr	r1, [r7, #0]
  40d71e:	6878      	ldr	r0, [r7, #4]
  40d720:	4b0e      	ldr	r3, [pc, #56]	; (40d75c <stdio_serial_init+0x5c>)
  40d722:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  40d724:	4b0e      	ldr	r3, [pc, #56]	; (40d760 <stdio_serial_init+0x60>)
  40d726:	681b      	ldr	r3, [r3, #0]
  40d728:	689b      	ldr	r3, [r3, #8]
  40d72a:	2100      	movs	r1, #0
  40d72c:	4618      	mov	r0, r3
  40d72e:	4b0d      	ldr	r3, [pc, #52]	; (40d764 <stdio_serial_init+0x64>)
  40d730:	4798      	blx	r3
	setbuf(stdin, NULL);
  40d732:	4b0b      	ldr	r3, [pc, #44]	; (40d760 <stdio_serial_init+0x60>)
  40d734:	681b      	ldr	r3, [r3, #0]
  40d736:	685b      	ldr	r3, [r3, #4]
  40d738:	2100      	movs	r1, #0
  40d73a:	4618      	mov	r0, r3
  40d73c:	4b09      	ldr	r3, [pc, #36]	; (40d764 <stdio_serial_init+0x64>)
  40d73e:	4798      	blx	r3
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
# endif
}
  40d740:	bf00      	nop
  40d742:	3708      	adds	r7, #8
  40d744:	46bd      	mov	sp, r7
  40d746:	bd80      	pop	{r7, pc}
  40d748:	2001aba4 	.word	0x2001aba4
  40d74c:	2001aba0 	.word	0x2001aba0
  40d750:	0040d479 	.word	0x0040d479
  40d754:	2001ab9c 	.word	0x2001ab9c
  40d758:	0040d5a5 	.word	0x0040d5a5
  40d75c:	0040d251 	.word	0x0040d251
  40d760:	200002a0 	.word	0x200002a0
  40d764:	0040e2fd 	.word	0x0040e2fd

0040d768 <configure_console>:

//static void cdc_read_callback(struct usart_module *const usart_module);
static void cdc_read_callback(void);

void configure_console(void)
{
  40d768:	b590      	push	{r4, r7, lr}
  40d76a:	b085      	sub	sp, #20
  40d76c:	af00      	add	r7, sp, #0
	#if (DEBUG_CONSOLE_INTERFACE == INTERFACE_USB_CDC)
	stdio_usb_init();
	//stdio_usb_enable();
	#elif (DEBUG_CONSOLE_INTERFACE == INTERFACE_UART)
	const usart_serial_options_t uart_serial_options = {
  40d76e:	4b11      	ldr	r3, [pc, #68]	; (40d7b4 <configure_console+0x4c>)
  40d770:	463c      	mov	r4, r7
  40d772:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  40d774:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		.charlength =	CONSOLE_UART_CHAR_LENGTH,
		.paritytype =	CONSOLE_UART_PARITY,
		.stopbits =		CONSOLE_UART_STOP_BITS,
	};
	
	pio_configure_pin(CONSOLE_UART_TXD_PIN, CONSOLE_UART_TXD_FLAG);
  40d778:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40d77c:	201c      	movs	r0, #28
  40d77e:	4b0e      	ldr	r3, [pc, #56]	; (40d7b8 <configure_console+0x50>)
  40d780:	4798      	blx	r3
	pio_configure_pin(CONSOLE_UART_RXD_PIN, CONSOLE_UART_RXD_FLAG);
  40d782:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40d786:	201b      	movs	r0, #27
  40d788:	4b0b      	ldr	r3, [pc, #44]	; (40d7b8 <configure_console+0x50>)
  40d78a:	4798      	blx	r3

	/* Configure UART console. */
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
  40d78c:	2007      	movs	r0, #7
  40d78e:	4b0b      	ldr	r3, [pc, #44]	; (40d7bc <configure_console+0x54>)
  40d790:	4798      	blx	r3
	stdio_serial_init(CONSOLE_UART, &uart_serial_options);
  40d792:	463b      	mov	r3, r7
  40d794:	4619      	mov	r1, r3
  40d796:	480a      	ldr	r0, [pc, #40]	; (40d7c0 <configure_console+0x58>)
  40d798:	4b0a      	ldr	r3, [pc, #40]	; (40d7c4 <configure_console+0x5c>)
  40d79a:	4798      	blx	r3
	
		#if (USE_SCANF != true)
	usart_enable_interrupt(CONSOLE_UART, US_IER_RXRDY);
  40d79c:	2101      	movs	r1, #1
  40d79e:	4808      	ldr	r0, [pc, #32]	; (40d7c0 <configure_console+0x58>)
  40d7a0:	4b09      	ldr	r3, [pc, #36]	; (40d7c8 <configure_console+0x60>)
  40d7a2:	4798      	blx	r3
	NVIC_EnableIRQ(CONSOLE_UART_IRQN);
  40d7a4:	2007      	movs	r0, #7
  40d7a6:	4b09      	ldr	r3, [pc, #36]	; (40d7cc <configure_console+0x64>)
  40d7a8:	4798      	blx	r3
		#endif
	#endif
}
  40d7aa:	bf00      	nop
  40d7ac:	3714      	adds	r7, #20
  40d7ae:	46bd      	mov	sp, r7
  40d7b0:	bd90      	pop	{r4, r7, pc}
  40d7b2:	bf00      	nop
  40d7b4:	004116a4 	.word	0x004116a4
  40d7b8:	0040637d 	.word	0x0040637d
  40d7bc:	0040d235 	.word	0x0040d235
  40d7c0:	40034200 	.word	0x40034200
  40d7c4:	0040d701 	.word	0x0040d701
  40d7c8:	004098a9 	.word	0x004098a9
  40d7cc:	0040d155 	.word	0x0040d155

0040d7d0 <cdc_read_callback>:
	}
	return false;
}

static void cdc_read_callback(void)
{
  40d7d0:	b480      	push	{r7}
  40d7d2:	af00      	add	r7, sp, #0
	cdcRxBuffer[cdcRxBufferIndex] = cdcRxData;
  40d7d4:	4b0d      	ldr	r3, [pc, #52]	; (40d80c <cdc_read_callback+0x3c>)
  40d7d6:	881b      	ldrh	r3, [r3, #0]
  40d7d8:	461a      	mov	r2, r3
  40d7da:	4b0d      	ldr	r3, [pc, #52]	; (40d810 <cdc_read_callback+0x40>)
  40d7dc:	881b      	ldrh	r3, [r3, #0]
  40d7de:	b2d9      	uxtb	r1, r3
  40d7e0:	4b0c      	ldr	r3, [pc, #48]	; (40d814 <cdc_read_callback+0x44>)
  40d7e2:	5499      	strb	r1, [r3, r2]
	if((++ cdcRxBufferIndex) >= sizeof(cdcRxBuffer))
  40d7e4:	4b09      	ldr	r3, [pc, #36]	; (40d80c <cdc_read_callback+0x3c>)
  40d7e6:	881b      	ldrh	r3, [r3, #0]
  40d7e8:	3301      	adds	r3, #1
  40d7ea:	b29a      	uxth	r2, r3
  40d7ec:	4b07      	ldr	r3, [pc, #28]	; (40d80c <cdc_read_callback+0x3c>)
  40d7ee:	801a      	strh	r2, [r3, #0]
  40d7f0:	4b06      	ldr	r3, [pc, #24]	; (40d80c <cdc_read_callback+0x3c>)
  40d7f2:	881b      	ldrh	r3, [r3, #0]
  40d7f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
  40d7f8:	d302      	bcc.n	40d800 <cdc_read_callback+0x30>
	{
		cdcRxBufferIndex = 0;
  40d7fa:	4b04      	ldr	r3, [pc, #16]	; (40d80c <cdc_read_callback+0x3c>)
  40d7fc:	2200      	movs	r2, #0
  40d7fe:	801a      	strh	r2, [r3, #0]
	}
}
  40d800:	bf00      	nop
  40d802:	46bd      	mov	sp, r7
  40d804:	f85d 7b04 	ldr.w	r7, [sp], #4
  40d808:	4770      	bx	lr
  40d80a:	bf00      	nop
  40d80c:	2001a758 	.word	0x2001a758
  40d810:	2001a75a 	.word	0x2001a75a
  40d814:	2001a358 	.word	0x2001a358

0040d818 <FLEXCOM7_Handler>:

void CONSOLE_UART_HANDLER(void)
{
  40d818:	b580      	push	{r7, lr}
  40d81a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
  40d81c:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  40d81e:	f3bf 8f5f 	dmb	sy
	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
  40d822:	4b09      	ldr	r3, [pc, #36]	; (40d848 <FLEXCOM7_Handler+0x30>)
  40d824:	2200      	movs	r2, #0
  40d826:	701a      	strb	r2, [r3, #0]
	usart_serial_read_packet(CONSOLE_UART, &cdcRxData, 1);
  40d828:	2201      	movs	r2, #1
  40d82a:	4908      	ldr	r1, [pc, #32]	; (40d84c <FLEXCOM7_Handler+0x34>)
  40d82c:	4808      	ldr	r0, [pc, #32]	; (40d850 <FLEXCOM7_Handler+0x38>)
  40d82e:	4b09      	ldr	r3, [pc, #36]	; (40d854 <FLEXCOM7_Handler+0x3c>)
  40d830:	4798      	blx	r3
	cdc_read_callback();
  40d832:	4b09      	ldr	r3, [pc, #36]	; (40d858 <FLEXCOM7_Handler+0x40>)
  40d834:	4798      	blx	r3
	cpu_irq_enable();
  40d836:	4b04      	ldr	r3, [pc, #16]	; (40d848 <FLEXCOM7_Handler+0x30>)
  40d838:	2201      	movs	r2, #1
  40d83a:	701a      	strb	r2, [r3, #0]
  40d83c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40d840:	b662      	cpsie	i
  40d842:	bf00      	nop
  40d844:	bd80      	pop	{r7, pc}
  40d846:	bf00      	nop
  40d848:	2000025e 	.word	0x2000025e
  40d84c:	2001a75a 	.word	0x2001a75a
  40d850:	40034200 	.word	0x40034200
  40d854:	0040254d 	.word	0x0040254d
  40d858:	0040d7d1 	.word	0x0040d7d1

0040d85c <sleepmgr_init>:
{
  40d85c:	b480      	push	{r7}
  40d85e:	b083      	sub	sp, #12
  40d860:	af00      	add	r7, sp, #0
	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
  40d862:	2300      	movs	r3, #0
  40d864:	71fb      	strb	r3, [r7, #7]
  40d866:	e006      	b.n	40d876 <sleepmgr_init+0x1a>
		sleepmgr_locks[i] = 0;
  40d868:	79fb      	ldrb	r3, [r7, #7]
  40d86a:	4a09      	ldr	r2, [pc, #36]	; (40d890 <sleepmgr_init+0x34>)
  40d86c:	2100      	movs	r1, #0
  40d86e:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
  40d870:	79fb      	ldrb	r3, [r7, #7]
  40d872:	3301      	adds	r3, #1
  40d874:	71fb      	strb	r3, [r7, #7]
  40d876:	79fb      	ldrb	r3, [r7, #7]
  40d878:	2b04      	cmp	r3, #4
  40d87a:	d9f5      	bls.n	40d868 <sleepmgr_init+0xc>
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
  40d87c:	4b04      	ldr	r3, [pc, #16]	; (40d890 <sleepmgr_init+0x34>)
  40d87e:	2201      	movs	r2, #1
  40d880:	715a      	strb	r2, [r3, #5]
}
  40d882:	bf00      	nop
  40d884:	370c      	adds	r7, #12
  40d886:	46bd      	mov	sp, r7
  40d888:	f85d 7b04 	ldr.w	r7, [sp], #4
  40d88c:	4770      	bx	lr
  40d88e:	bf00      	nop
  40d890:	2001ab94 	.word	0x2001ab94

0040d894 <main>:
static volatile bool main_b_cdc_enable = false;

/*! \brief Main function. Execution starts here.
 */
int main(void)
{
  40d894:	b5b0      	push	{r4, r5, r7, lr}
  40d896:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
  40d89a:	af00      	add	r7, sp, #0
	bool MSCEnableStatus = false;
  40d89c:	2300      	movs	r3, #0
  40d89e:	f887 346f 	strb.w	r3, [r7, #1135]	; 0x46f
	uint32_t MSCEnableCount = 0;
  40d8a2:	2300      	movs	r3, #0
  40d8a4:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
	
	char test_file_name[] = "0:sd_mmc_test.txt";
  40d8a8:	4b9c      	ldr	r3, [pc, #624]	; (40db1c <main+0x288>)
  40d8aa:	f207 4454 	addw	r4, r7, #1108	; 0x454
  40d8ae:	461d      	mov	r5, r3
  40d8b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  40d8b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  40d8b4:	682b      	ldr	r3, [r5, #0]
  40d8b6:	8023      	strh	r3, [r4, #0]
	FRESULT res;
	FATFS fs;
	FIL file_object;
	
	irq_initialize_vectors();
	cpu_irq_enable();
  40d8b8:	4b99      	ldr	r3, [pc, #612]	; (40db20 <main+0x28c>)
  40d8ba:	2201      	movs	r2, #1
  40d8bc:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
  40d8be:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40d8c2:	b662      	cpsie	i

	// Initialize the sleep manager
	sleepmgr_init();
  40d8c4:	4b97      	ldr	r3, [pc, #604]	; (40db24 <main+0x290>)
  40d8c6:	4798      	blx	r3
#if !SAM0
	sysclk_init();
  40d8c8:	4b97      	ldr	r3, [pc, #604]	; (40db28 <main+0x294>)
  40d8ca:	4798      	blx	r3
	board_init();
  40d8cc:	4b97      	ldr	r3, [pc, #604]	; (40db2c <main+0x298>)
  40d8ce:	4798      	blx	r3
#else
	system_init();
#endif

	//Set PA17 as PCK1 output pin, peripheral B
	pio_configure_pin(PIO_PA17_IDX, (PIO_PERIPH_B | PIO_DEFAULT));
  40d8d0:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40d8d4:	2011      	movs	r0, #17
  40d8d6:	4b96      	ldr	r3, [pc, #600]	; (40db30 <main+0x29c>)
  40d8d8:	4798      	blx	r3
	
	pmc_enable_pck(1);
  40d8da:	2001      	movs	r0, #1
  40d8dc:	4b95      	ldr	r3, [pc, #596]	; (40db34 <main+0x2a0>)
  40d8de:	4798      	blx	r3
	pmc_pck_set_source(1, PMC_PCK_CSS_PLLB_CLK);
  40d8e0:	2103      	movs	r1, #3
  40d8e2:	2001      	movs	r0, #1
  40d8e4:	4b94      	ldr	r3, [pc, #592]	; (40db38 <main+0x2a4>)
  40d8e6:	4798      	blx	r3
	
	configure_console();
  40d8e8:	4b94      	ldr	r3, [pc, #592]	; (40db3c <main+0x2a8>)
  40d8ea:	4798      	blx	r3
	
	DBG_MSG_PRINT(STRING_HEADER);
  40d8ec:	4894      	ldr	r0, [pc, #592]	; (40db40 <main+0x2ac>)
  40d8ee:	4b95      	ldr	r3, [pc, #596]	; (40db44 <main+0x2b0>)
  40d8f0:	4798      	blx	r3
	
	ui_init();
  40d8f2:	4b95      	ldr	r3, [pc, #596]	; (40db48 <main+0x2b4>)
  40d8f4:	4798      	blx	r3
	ui_powerdown();
  40d8f6:	4b95      	ldr	r3, [pc, #596]	; (40db4c <main+0x2b8>)
  40d8f8:	4798      	blx	r3
	
	memories_initialization();
  40d8fa:	4b95      	ldr	r3, [pc, #596]	; (40db50 <main+0x2bc>)
  40d8fc:	4798      	blx	r3
	/* Initialize SD MMC stack */
	sd_mmc_init();
  40d8fe:	4b95      	ldr	r3, [pc, #596]	; (40db54 <main+0x2c0>)
  40d900:	4798      	blx	r3
	MATRIX->CCFG_USBMR |= (1 << 4);
  40d902:	4a95      	ldr	r2, [pc, #596]	; (40db58 <main+0x2c4>)
  40d904:	4b94      	ldr	r3, [pc, #592]	; (40db58 <main+0x2c4>)
  40d906:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
  40d90a:	f043 0310 	orr.w	r3, r3, #16
  40d90e:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	// Start USB stack to authorize VBus monitoring
	udc_start();
  40d912:	4b92      	ldr	r3, [pc, #584]	; (40db5c <main+0x2c8>)
  40d914:	4798      	blx	r3
	
	/* Insert application code here, after the board has been initialized. */
	DBG_MSG_PRINT("Mount disk (f_mount)...\r\n");
  40d916:	4892      	ldr	r0, [pc, #584]	; (40db60 <main+0x2cc>)
  40d918:	4b8a      	ldr	r3, [pc, #552]	; (40db44 <main+0x2b0>)
  40d91a:	4798      	blx	r3
	memset(&fs, 0, sizeof(FATFS));
  40d91c:	f507 7309 	add.w	r3, r7, #548	; 0x224
  40d920:	f44f 720c 	mov.w	r2, #560	; 0x230
  40d924:	2100      	movs	r1, #0
  40d926:	4618      	mov	r0, r3
  40d928:	4b8e      	ldr	r3, [pc, #568]	; (40db64 <main+0x2d0>)
  40d92a:	4798      	blx	r3
	res = f_mount(LUN_ID_VIRTUAL_MEM, &fs);
  40d92c:	f507 7309 	add.w	r3, r7, #548	; 0x224
  40d930:	4619      	mov	r1, r3
  40d932:	2000      	movs	r0, #0
  40d934:	4b8c      	ldr	r3, [pc, #560]	; (40db68 <main+0x2d4>)
  40d936:	4798      	blx	r3
  40d938:	4603      	mov	r3, r0
  40d93a:	f887 3467 	strb.w	r3, [r7, #1127]	; 0x467
	if (FR_INVALID_DRIVE == res)
  40d93e:	f897 3467 	ldrb.w	r3, [r7, #1127]	; 0x467
  40d942:	2b0b      	cmp	r3, #11
  40d944:	d106      	bne.n	40d954 <main+0xc0>
	{
		DBG_MSG_PRINT("[FAIL] res %d\r\n", res);
  40d946:	f897 3467 	ldrb.w	r3, [r7, #1127]	; 0x467
  40d94a:	4619      	mov	r1, r3
  40d94c:	4887      	ldr	r0, [pc, #540]	; (40db6c <main+0x2d8>)
  40d94e:	4b7d      	ldr	r3, [pc, #500]	; (40db44 <main+0x2b0>)
  40d950:	4798      	blx	r3
		goto main_end_of_test;
  40d952:	e0d3      	b.n	40dafc <main+0x268>
	}
	DBG_MSG_PRINT("[OK]\r\n");
  40d954:	4886      	ldr	r0, [pc, #536]	; (40db70 <main+0x2dc>)
  40d956:	4b7b      	ldr	r3, [pc, #492]	; (40db44 <main+0x2b0>)
  40d958:	4798      	blx	r3
	
	DBG_MSG_PRINT("Format the virtual disk\r\n");
  40d95a:	4886      	ldr	r0, [pc, #536]	; (40db74 <main+0x2e0>)
  40d95c:	4b79      	ldr	r3, [pc, #484]	; (40db44 <main+0x2b0>)
  40d95e:	4798      	blx	r3
	res = f_mkfs(LUN_ID_VIRTUAL_MEM, /* Drv */
  40d960:	f44f 7200 	mov.w	r2, #512	; 0x200
  40d964:	2100      	movs	r1, #0
  40d966:	2000      	movs	r0, #0
  40d968:	4b83      	ldr	r3, [pc, #524]	; (40db78 <main+0x2e4>)
  40d96a:	4798      	blx	r3
  40d96c:	4603      	mov	r3, r0
  40d96e:	f887 3467 	strb.w	r3, [r7, #1127]	; 0x467
					0, /* FDISK partition */
					512); /* AllocSize */
	if (res != FR_OK)
  40d972:	f897 3467 	ldrb.w	r3, [r7, #1127]	; 0x467
  40d976:	2b00      	cmp	r3, #0
  40d978:	d006      	beq.n	40d988 <main+0xf4>
	{
		DBG_MSG_PRINT("[FAIL] res %d\r\n", res);
  40d97a:	f897 3467 	ldrb.w	r3, [r7, #1127]	; 0x467
  40d97e:	4619      	mov	r1, r3
  40d980:	487a      	ldr	r0, [pc, #488]	; (40db6c <main+0x2d8>)
  40d982:	4b70      	ldr	r3, [pc, #448]	; (40db44 <main+0x2b0>)
  40d984:	4798      	blx	r3
		goto main_end_of_test;
  40d986:	e0b9      	b.n	40dafc <main+0x268>
	}
	
	#if 1
	DBG_MSG_PRINT("Please plug an SD, MMC or SDIO card in slot.\n\r");
  40d988:	487c      	ldr	r0, [pc, #496]	; (40db7c <main+0x2e8>)
  40d98a:	4b6e      	ldr	r3, [pc, #440]	; (40db44 <main+0x2b0>)
  40d98c:	4798      	blx	r3
	/* Wait card present and ready */
	do
	{
		status = sd_mmc_test_unit_ready(0);
  40d98e:	2000      	movs	r0, #0
  40d990:	4b7b      	ldr	r3, [pc, #492]	; (40db80 <main+0x2ec>)
  40d992:	4798      	blx	r3
  40d994:	4603      	mov	r3, r0
  40d996:	f887 3466 	strb.w	r3, [r7, #1126]	; 0x466
		if (CTRL_FAIL == status)
  40d99a:	f897 3466 	ldrb.w	r3, [r7, #1126]	; 0x466
  40d99e:	2b01      	cmp	r3, #1
  40d9a0:	d10c      	bne.n	40d9bc <main+0x128>
		{
			DBG_MSG_PRINT("Card install FAIL\n\r");
  40d9a2:	4878      	ldr	r0, [pc, #480]	; (40db84 <main+0x2f0>)
  40d9a4:	4b67      	ldr	r3, [pc, #412]	; (40db44 <main+0x2b0>)
  40d9a6:	4798      	blx	r3
			DBG_MSG_PRINT("Please unplug and re-plug the card.\n\r");
  40d9a8:	4877      	ldr	r0, [pc, #476]	; (40db88 <main+0x2f4>)
  40d9aa:	4b66      	ldr	r3, [pc, #408]	; (40db44 <main+0x2b0>)
  40d9ac:	4798      	blx	r3
			while (CTRL_NO_PRESENT != sd_mmc_check(0))
  40d9ae:	bf00      	nop
  40d9b0:	2000      	movs	r0, #0
  40d9b2:	4b76      	ldr	r3, [pc, #472]	; (40db8c <main+0x2f8>)
  40d9b4:	4798      	blx	r3
  40d9b6:	4603      	mov	r3, r0
  40d9b8:	2b02      	cmp	r3, #2
  40d9ba:	d1f9      	bne.n	40d9b0 <main+0x11c>
			{
			}
		}
	}while (CTRL_GOOD != status);
  40d9bc:	f897 3466 	ldrb.w	r3, [r7, #1126]	; 0x466
  40d9c0:	2b00      	cmp	r3, #0
  40d9c2:	d1e4      	bne.n	40d98e <main+0xfa>
	DBG_MSG_PRINT("SD, MMC or SDIO card is in the slot\n\r");
  40d9c4:	4872      	ldr	r0, [pc, #456]	; (40db90 <main+0x2fc>)
  40d9c6:	4b5f      	ldr	r3, [pc, #380]	; (40db44 <main+0x2b0>)
  40d9c8:	4798      	blx	r3
	#endif
	
	DBG_MSG_PRINT("Mount disk (f_mount)...\r\n");
  40d9ca:	4865      	ldr	r0, [pc, #404]	; (40db60 <main+0x2cc>)
  40d9cc:	4b5d      	ldr	r3, [pc, #372]	; (40db44 <main+0x2b0>)
  40d9ce:	4798      	blx	r3
	memset(&fs, 0, sizeof(FATFS));
  40d9d0:	f507 7309 	add.w	r3, r7, #548	; 0x224
  40d9d4:	f44f 720c 	mov.w	r2, #560	; 0x230
  40d9d8:	2100      	movs	r1, #0
  40d9da:	4618      	mov	r0, r3
  40d9dc:	4b61      	ldr	r3, [pc, #388]	; (40db64 <main+0x2d0>)
  40d9de:	4798      	blx	r3
	res = f_mount(LUN_ID_SD_MMC_0_MEM, &fs);
  40d9e0:	f507 7309 	add.w	r3, r7, #548	; 0x224
  40d9e4:	4619      	mov	r1, r3
  40d9e6:	2001      	movs	r0, #1
  40d9e8:	4b5f      	ldr	r3, [pc, #380]	; (40db68 <main+0x2d4>)
  40d9ea:	4798      	blx	r3
  40d9ec:	4603      	mov	r3, r0
  40d9ee:	f887 3467 	strb.w	r3, [r7, #1127]	; 0x467
	if (FR_INVALID_DRIVE == res)
  40d9f2:	f897 3467 	ldrb.w	r3, [r7, #1127]	; 0x467
  40d9f6:	2b0b      	cmp	r3, #11
  40d9f8:	d106      	bne.n	40da08 <main+0x174>
	{
		DBG_MSG_PRINT("[FAIL] res %d\r\n", res);
  40d9fa:	f897 3467 	ldrb.w	r3, [r7, #1127]	; 0x467
  40d9fe:	4619      	mov	r1, r3
  40da00:	485a      	ldr	r0, [pc, #360]	; (40db6c <main+0x2d8>)
  40da02:	4b50      	ldr	r3, [pc, #320]	; (40db44 <main+0x2b0>)
  40da04:	4798      	blx	r3
		goto main_end_of_test;
  40da06:	e079      	b.n	40dafc <main+0x268>
	}
	DBG_MSG_PRINT("[OK]\r\n");
  40da08:	4859      	ldr	r0, [pc, #356]	; (40db70 <main+0x2dc>)
  40da0a:	4b4e      	ldr	r3, [pc, #312]	; (40db44 <main+0x2b0>)
  40da0c:	4798      	blx	r3

	DBG_MSG_PRINT("Create a file (f_open)...\r\n");
  40da0e:	4861      	ldr	r0, [pc, #388]	; (40db94 <main+0x300>)
  40da10:	4b4c      	ldr	r3, [pc, #304]	; (40db44 <main+0x2b0>)
  40da12:	4798      	blx	r3
	test_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
  40da14:	2331      	movs	r3, #49	; 0x31
  40da16:	f887 3454 	strb.w	r3, [r7, #1108]	; 0x454
	res = f_open(&file_object, (char const *)test_file_name, FA_CREATE_ALWAYS | FA_WRITE);
  40da1a:	f207 4154 	addw	r1, r7, #1108	; 0x454
  40da1e:	463b      	mov	r3, r7
  40da20:	220a      	movs	r2, #10
  40da22:	4618      	mov	r0, r3
  40da24:	4b5c      	ldr	r3, [pc, #368]	; (40db98 <main+0x304>)
  40da26:	4798      	blx	r3
  40da28:	4603      	mov	r3, r0
  40da2a:	f887 3467 	strb.w	r3, [r7, #1127]	; 0x467
	if (res != FR_OK)
  40da2e:	f897 3467 	ldrb.w	r3, [r7, #1127]	; 0x467
  40da32:	2b00      	cmp	r3, #0
  40da34:	d020      	beq.n	40da78 <main+0x1e4>
	{
		DBG_MSG_PRINT("[FAIL] res %d\r\n", res);
  40da36:	f897 3467 	ldrb.w	r3, [r7, #1127]	; 0x467
  40da3a:	4619      	mov	r1, r3
  40da3c:	484b      	ldr	r0, [pc, #300]	; (40db6c <main+0x2d8>)
  40da3e:	4b41      	ldr	r3, [pc, #260]	; (40db44 <main+0x2b0>)
  40da40:	4798      	blx	r3
		if(res == FR_NO_FILESYSTEM)
  40da42:	f897 3467 	ldrb.w	r3, [r7, #1127]	; 0x467
  40da46:	2b0d      	cmp	r3, #13
  40da48:	d157      	bne.n	40dafa <main+0x266>
		{
			DBG_MSG_PRINT("No file system, format the disk\r\n");
  40da4a:	4854      	ldr	r0, [pc, #336]	; (40db9c <main+0x308>)
  40da4c:	4b3d      	ldr	r3, [pc, #244]	; (40db44 <main+0x2b0>)
  40da4e:	4798      	blx	r3
			res = f_mkfs(LUN_ID_SD_MMC_0_MEM, /* Drv */
  40da50:	f44f 7200 	mov.w	r2, #512	; 0x200
  40da54:	2100      	movs	r1, #0
  40da56:	2001      	movs	r0, #1
  40da58:	4b47      	ldr	r3, [pc, #284]	; (40db78 <main+0x2e4>)
  40da5a:	4798      	blx	r3
  40da5c:	4603      	mov	r3, r0
  40da5e:	f887 3467 	strb.w	r3, [r7, #1127]	; 0x467
							0, /* FDISK partition */
							512); /* AllocSize */
			if (res != FR_OK)
  40da62:	f897 3467 	ldrb.w	r3, [r7, #1127]	; 0x467
  40da66:	2b00      	cmp	r3, #0
  40da68:	d006      	beq.n	40da78 <main+0x1e4>
			{
				DBG_MSG_PRINT("[FAIL] res %d\r\n", res);
  40da6a:	f897 3467 	ldrb.w	r3, [r7, #1127]	; 0x467
  40da6e:	4619      	mov	r1, r3
  40da70:	483e      	ldr	r0, [pc, #248]	; (40db6c <main+0x2d8>)
  40da72:	4b34      	ldr	r3, [pc, #208]	; (40db44 <main+0x2b0>)
  40da74:	4798      	blx	r3
				goto main_end_of_test;
  40da76:	e041      	b.n	40dafc <main+0x268>
		
	}
	//DBG_MSG_PRINT("[OK]\r\n");

	//DBG_MSG_PRINT("Write to test file (f_puts)...\r\n");
	if (0 == f_puts("Test SD/MMC stack\n", &file_object))
  40da78:	463b      	mov	r3, r7
  40da7a:	4619      	mov	r1, r3
  40da7c:	4848      	ldr	r0, [pc, #288]	; (40dba0 <main+0x30c>)
  40da7e:	4b49      	ldr	r3, [pc, #292]	; (40dba4 <main+0x310>)
  40da80:	4798      	blx	r3
  40da82:	4603      	mov	r3, r0
  40da84:	2b00      	cmp	r3, #0
  40da86:	d107      	bne.n	40da98 <main+0x204>
	{
		f_close(&file_object);
  40da88:	463b      	mov	r3, r7
  40da8a:	4618      	mov	r0, r3
  40da8c:	4b46      	ldr	r3, [pc, #280]	; (40dba8 <main+0x314>)
  40da8e:	4798      	blx	r3
		DBG_MSG_PRINT("[FAIL]\r\n");
  40da90:	4846      	ldr	r0, [pc, #280]	; (40dbac <main+0x318>)
  40da92:	4b2c      	ldr	r3, [pc, #176]	; (40db44 <main+0x2b0>)
  40da94:	4798      	blx	r3
		goto main_end_of_test;
  40da96:	e031      	b.n	40dafc <main+0x268>
	}
	DBG_MSG_PRINT("[OK]\r\n");
  40da98:	4835      	ldr	r0, [pc, #212]	; (40db70 <main+0x2dc>)
  40da9a:	4b2a      	ldr	r3, [pc, #168]	; (40db44 <main+0x2b0>)
  40da9c:	4798      	blx	r3
	f_close(&file_object);
  40da9e:	463b      	mov	r3, r7
  40daa0:	4618      	mov	r0, r3
  40daa2:	4b41      	ldr	r3, [pc, #260]	; (40dba8 <main+0x314>)
  40daa4:	4798      	blx	r3
	DBG_MSG_PRINT("Test is successful.\n\r");
  40daa6:	4842      	ldr	r0, [pc, #264]	; (40dbb0 <main+0x31c>)
  40daa8:	4b26      	ldr	r3, [pc, #152]	; (40db44 <main+0x2b0>)
  40daaa:	4798      	blx	r3

	// The main loop manages only the power mode
	// because the USB management is done by interrupt
	while (true) {

		if (main_b_msc_enable) {
  40daac:	4b41      	ldr	r3, [pc, #260]	; (40dbb4 <main+0x320>)
  40daae:	781b      	ldrb	r3, [r3, #0]
  40dab0:	b2db      	uxtb	r3, r3
  40dab2:	2b00      	cmp	r3, #0
  40dab4:	d016      	beq.n	40dae4 <main+0x250>
			if(MSCEnableStatus == false)
  40dab6:	f897 346f 	ldrb.w	r3, [r7, #1135]	; 0x46f
  40daba:	f083 0301 	eor.w	r3, r3, #1
  40dabe:	b2db      	uxtb	r3, r3
  40dac0:	2b00      	cmp	r3, #0
  40dac2:	d00c      	beq.n	40dade <main+0x24a>
			{
				MSCEnableStatus = true;
  40dac4:	2301      	movs	r3, #1
  40dac6:	f887 346f 	strb.w	r3, [r7, #1135]	; 0x46f
				MSCEnableCount ++;
  40daca:	f8d7 3468 	ldr.w	r3, [r7, #1128]	; 0x468
  40dace:	3301      	adds	r3, #1
  40dad0:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
				DBG_MSG_PRINT("\r\nMSC Enabled! Count %d\r\n", MSCEnableCount);
  40dad4:	f8d7 1468 	ldr.w	r1, [r7, #1128]	; 0x468
  40dad8:	4837      	ldr	r0, [pc, #220]	; (40dbb8 <main+0x324>)
  40dada:	4b1a      	ldr	r3, [pc, #104]	; (40db44 <main+0x2b0>)
  40dadc:	4798      	blx	r3
			}
			if (!udi_msc_process_trans()) {
  40dade:	4b37      	ldr	r3, [pc, #220]	; (40dbbc <main+0x328>)
  40dae0:	4798      	blx	r3
  40dae2:	e7e3      	b.n	40daac <main+0x218>
				//sleepmgr_enter_sleep();
			}
		}else{
			//sleepmgr_enter_sleep();
			if(MSCEnableStatus == true)
  40dae4:	f897 346f 	ldrb.w	r3, [r7, #1135]	; 0x46f
  40dae8:	2b00      	cmp	r3, #0
  40daea:	d0df      	beq.n	40daac <main+0x218>
			{
				MSCEnableStatus = false;
  40daec:	2300      	movs	r3, #0
  40daee:	f887 346f 	strb.w	r3, [r7, #1135]	; 0x46f
				DBG_MSG_PRINT("\r\nMSC Disabled!\r\n");
  40daf2:	4833      	ldr	r0, [pc, #204]	; (40dbc0 <main+0x32c>)
  40daf4:	4b13      	ldr	r3, [pc, #76]	; (40db44 <main+0x2b0>)
  40daf6:	4798      	blx	r3
		if (main_b_msc_enable) {
  40daf8:	e7d8      	b.n	40daac <main+0x218>
			goto main_end_of_test;
  40dafa:	bf00      	nop
			}
		}
	}
	
main_end_of_test:
	DBG_MSG_PRINT("Please unplug the card.\n\r");
  40dafc:	4831      	ldr	r0, [pc, #196]	; (40dbc4 <main+0x330>)
  40dafe:	4b11      	ldr	r3, [pc, #68]	; (40db44 <main+0x2b0>)
  40db00:	4798      	blx	r3
	while (CTRL_NO_PRESENT != sd_mmc_check(0))
  40db02:	bf00      	nop
  40db04:	2000      	movs	r0, #0
  40db06:	4b21      	ldr	r3, [pc, #132]	; (40db8c <main+0x2f8>)
  40db08:	4798      	blx	r3
  40db0a:	4603      	mov	r3, r0
  40db0c:	2b02      	cmp	r3, #2
  40db0e:	d1f9      	bne.n	40db04 <main+0x270>
  40db10:	2300      	movs	r3, #0
	{
	
	}
}
  40db12:	4618      	mov	r0, r3
  40db14:	f507 678e 	add.w	r7, r7, #1136	; 0x470
  40db18:	46bd      	mov	sp, r7
  40db1a:	bdb0      	pop	{r4, r5, r7, pc}
  40db1c:	00411910 	.word	0x00411910
  40db20:	2000025e 	.word	0x2000025e
  40db24:	0040d85d 	.word	0x0040d85d
  40db28:	0040319d 	.word	0x0040319d
  40db2c:	00405de1 	.word	0x00405de1
  40db30:	0040637d 	.word	0x0040637d
  40db34:	004069dd 	.word	0x004069dd
  40db38:	00406925 	.word	0x00406925
  40db3c:	0040d769 	.word	0x0040d769
  40db40:	004116dc 	.word	0x004116dc
  40db44:	0040e105 	.word	0x0040e105
  40db48:	00402b71 	.word	0x00402b71
  40db4c:	00402b85 	.word	0x00402b85
  40db50:	0040dd95 	.word	0x0040dd95
  40db54:	00401279 	.word	0x00401279
  40db58:	400e0200 	.word	0x400e0200
  40db5c:	00404fdd 	.word	0x00404fdd
  40db60:	00411768 	.word	0x00411768
  40db64:	0040e261 	.word	0x0040e261
  40db68:	0040bda9 	.word	0x0040bda9
  40db6c:	00411784 	.word	0x00411784
  40db70:	00411794 	.word	0x00411794
  40db74:	0041179c 	.word	0x0041179c
  40db78:	0040c69d 	.word	0x0040c69d
  40db7c:	004117b8 	.word	0x004117b8
  40db80:	004016e1 	.word	0x004016e1
  40db84:	004117e8 	.word	0x004117e8
  40db88:	004117fc 	.word	0x004117fc
  40db8c:	004012cd 	.word	0x004012cd
  40db90:	00411824 	.word	0x00411824
  40db94:	0041184c 	.word	0x0041184c
  40db98:	0040bdfd 	.word	0x0040bdfd
  40db9c:	00411868 	.word	0x00411868
  40dba0:	0041188c 	.word	0x0041188c
  40dba4:	0040d035 	.word	0x0040d035
  40dba8:	0040c671 	.word	0x0040c671
  40dbac:	004118a0 	.word	0x004118a0
  40dbb0:	004118ac 	.word	0x004118ac
  40dbb4:	2001a75c 	.word	0x2001a75c
  40dbb8:	004118c4 	.word	0x004118c4
  40dbbc:	00404b81 	.word	0x00404b81
  40dbc0:	004118e0 	.word	0x004118e0
  40dbc4:	004118f4 	.word	0x004118f4

0040dbc8 <main_suspend_action>:

void main_suspend_action(void)
{
  40dbc8:	b580      	push	{r7, lr}
  40dbca:	af00      	add	r7, sp, #0
	ui_powerdown();
  40dbcc:	4b01      	ldr	r3, [pc, #4]	; (40dbd4 <main_suspend_action+0xc>)
  40dbce:	4798      	blx	r3
}
  40dbd0:	bf00      	nop
  40dbd2:	bd80      	pop	{r7, pc}
  40dbd4:	00402b85 	.word	0x00402b85

0040dbd8 <main_resume_action>:

void main_resume_action(void)
{
  40dbd8:	b580      	push	{r7, lr}
  40dbda:	af00      	add	r7, sp, #0
	ui_wakeup();
  40dbdc:	4b01      	ldr	r3, [pc, #4]	; (40dbe4 <main_resume_action+0xc>)
  40dbde:	4798      	blx	r3
}
  40dbe0:	bf00      	nop
  40dbe2:	bd80      	pop	{r7, pc}
  40dbe4:	00402b99 	.word	0x00402b99

0040dbe8 <main_sof_action>:

void main_sof_action(void)
{
  40dbe8:	b580      	push	{r7, lr}
  40dbea:	af00      	add	r7, sp, #0
	if ((!main_b_msc_enable) ||
  40dbec:	4b0c      	ldr	r3, [pc, #48]	; (40dc20 <main_sof_action+0x38>)
  40dbee:	781b      	ldrb	r3, [r3, #0]
  40dbf0:	b2db      	uxtb	r3, r3
  40dbf2:	f083 0301 	eor.w	r3, r3, #1
  40dbf6:	b2db      	uxtb	r3, r3
  40dbf8:	2b00      	cmp	r3, #0
  40dbfa:	d10e      	bne.n	40dc1a <main_sof_action+0x32>
		(!main_b_cdc_enable))
  40dbfc:	4b09      	ldr	r3, [pc, #36]	; (40dc24 <main_sof_action+0x3c>)
  40dbfe:	781b      	ldrb	r3, [r3, #0]
  40dc00:	b2db      	uxtb	r3, r3
  40dc02:	f083 0301 	eor.w	r3, r3, #1
  40dc06:	b2db      	uxtb	r3, r3
	if ((!main_b_msc_enable) ||
  40dc08:	2b00      	cmp	r3, #0
  40dc0a:	d106      	bne.n	40dc1a <main_sof_action+0x32>
		return;
	ui_process(udd_get_frame_number());
  40dc0c:	4b06      	ldr	r3, [pc, #24]	; (40dc28 <main_sof_action+0x40>)
  40dc0e:	4798      	blx	r3
  40dc10:	4603      	mov	r3, r0
  40dc12:	4618      	mov	r0, r3
  40dc14:	4b05      	ldr	r3, [pc, #20]	; (40dc2c <main_sof_action+0x44>)
  40dc16:	4798      	blx	r3
  40dc18:	e000      	b.n	40dc1c <main_sof_action+0x34>
		return;
  40dc1a:	bf00      	nop
}
  40dc1c:	bd80      	pop	{r7, pc}
  40dc1e:	bf00      	nop
  40dc20:	2001a75c 	.word	0x2001a75c
  40dc24:	2001a75d 	.word	0x2001a75d
  40dc28:	00407515 	.word	0x00407515
  40dc2c:	00402c11 	.word	0x00402c11

0040dc30 <main_extra_string>:
 * Manufacture, Product and serial number ID.
 *
 * return true, if the string ID requested is know and managed by this functions
 */
bool main_extra_string(void)
{
  40dc30:	b480      	push	{r7}
  40dc32:	b085      	sub	sp, #20
  40dc34:	af00      	add	r7, sp, #0
		.header.bDescriptorType = USB_DT_STRING
	};

	uint8_t i;
	uint8_t *str;
	uint8_t str_lgt=0;
  40dc36:	2300      	movs	r3, #0
  40dc38:	71fb      	strb	r3, [r7, #7]

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
  40dc3a:	4b26      	ldr	r3, [pc, #152]	; (40dcd4 <main_extra_string+0xa4>)
  40dc3c:	885b      	ldrh	r3, [r3, #2]
  40dc3e:	b2db      	uxtb	r3, r3
  40dc40:	2b04      	cmp	r3, #4
  40dc42:	d002      	beq.n	40dc4a <main_extra_string+0x1a>
  40dc44:	2b05      	cmp	r3, #5
  40dc46:	d005      	beq.n	40dc54 <main_extra_string+0x24>
  40dc48:	e009      	b.n	40dc5e <main_extra_string+0x2e>
	case UDI_CDC_IAD_STRING_ID:
		str_lgt = sizeof(udi_cdc_name)-1;
  40dc4a:	230d      	movs	r3, #13
  40dc4c:	71fb      	strb	r3, [r7, #7]
		str = udi_cdc_name;
  40dc4e:	4b22      	ldr	r3, [pc, #136]	; (40dcd8 <main_extra_string+0xa8>)
  40dc50:	60bb      	str	r3, [r7, #8]
		break;
  40dc52:	e006      	b.n	40dc62 <main_extra_string+0x32>
	case UDI_MSC_STRING_ID:
		str_lgt = sizeof(udi_msc_name)-1;
  40dc54:	230d      	movs	r3, #13
  40dc56:	71fb      	strb	r3, [r7, #7]
		str = udi_msc_name;
  40dc58:	4b20      	ldr	r3, [pc, #128]	; (40dcdc <main_extra_string+0xac>)
  40dc5a:	60bb      	str	r3, [r7, #8]
		break;
  40dc5c:	e001      	b.n	40dc62 <main_extra_string+0x32>
	default:
		return false;
  40dc5e:	2300      	movs	r3, #0
  40dc60:	e031      	b.n	40dcc6 <main_extra_string+0x96>
	}

	if (str_lgt!=0) {
  40dc62:	79fb      	ldrb	r3, [r7, #7]
  40dc64:	2b00      	cmp	r3, #0
  40dc66:	d023      	beq.n	40dcb0 <main_extra_string+0x80>
		for( i=0; i<str_lgt; i++) {
  40dc68:	2300      	movs	r3, #0
  40dc6a:	73fb      	strb	r3, [r7, #15]
  40dc6c:	e00d      	b.n	40dc8a <main_extra_string+0x5a>
			extra_strings_desc.string[i] = cpu_to_le16((le16_t)str[i]);
  40dc6e:	7bfb      	ldrb	r3, [r7, #15]
  40dc70:	7bfa      	ldrb	r2, [r7, #15]
  40dc72:	68b9      	ldr	r1, [r7, #8]
  40dc74:	440a      	add	r2, r1
  40dc76:	7812      	ldrb	r2, [r2, #0]
  40dc78:	b291      	uxth	r1, r2
  40dc7a:	4a19      	ldr	r2, [pc, #100]	; (40dce0 <main_extra_string+0xb0>)
  40dc7c:	005b      	lsls	r3, r3, #1
  40dc7e:	4413      	add	r3, r2
  40dc80:	460a      	mov	r2, r1
  40dc82:	805a      	strh	r2, [r3, #2]
		for( i=0; i<str_lgt; i++) {
  40dc84:	7bfb      	ldrb	r3, [r7, #15]
  40dc86:	3301      	adds	r3, #1
  40dc88:	73fb      	strb	r3, [r7, #15]
  40dc8a:	7bfa      	ldrb	r2, [r7, #15]
  40dc8c:	79fb      	ldrb	r3, [r7, #7]
  40dc8e:	429a      	cmp	r2, r3
  40dc90:	d3ed      	bcc.n	40dc6e <main_extra_string+0x3e>
		}
		extra_strings_desc.header.bLength = 2+ (str_lgt)*2;
  40dc92:	79fb      	ldrb	r3, [r7, #7]
  40dc94:	3301      	adds	r3, #1
  40dc96:	b2db      	uxtb	r3, r3
  40dc98:	005b      	lsls	r3, r3, #1
  40dc9a:	b2da      	uxtb	r2, r3
  40dc9c:	4b10      	ldr	r3, [pc, #64]	; (40dce0 <main_extra_string+0xb0>)
  40dc9e:	701a      	strb	r2, [r3, #0]
		udd_g_ctrlreq.payload_size = extra_strings_desc.header.bLength;
  40dca0:	4b0f      	ldr	r3, [pc, #60]	; (40dce0 <main_extra_string+0xb0>)
  40dca2:	781b      	ldrb	r3, [r3, #0]
  40dca4:	b29a      	uxth	r2, r3
  40dca6:	4b0b      	ldr	r3, [pc, #44]	; (40dcd4 <main_extra_string+0xa4>)
  40dca8:	819a      	strh	r2, [r3, #12]
		udd_g_ctrlreq.payload = (uint8_t *) &extra_strings_desc;
  40dcaa:	4b0a      	ldr	r3, [pc, #40]	; (40dcd4 <main_extra_string+0xa4>)
  40dcac:	4a0c      	ldr	r2, [pc, #48]	; (40dce0 <main_extra_string+0xb0>)
  40dcae:	609a      	str	r2, [r3, #8]
	}

	// if the string is larger than request length, then cut it
	if (udd_g_ctrlreq.payload_size > udd_g_ctrlreq.req.wLength) {
  40dcb0:	4b08      	ldr	r3, [pc, #32]	; (40dcd4 <main_extra_string+0xa4>)
  40dcb2:	899a      	ldrh	r2, [r3, #12]
  40dcb4:	4b07      	ldr	r3, [pc, #28]	; (40dcd4 <main_extra_string+0xa4>)
  40dcb6:	88db      	ldrh	r3, [r3, #6]
  40dcb8:	429a      	cmp	r2, r3
  40dcba:	d903      	bls.n	40dcc4 <main_extra_string+0x94>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
  40dcbc:	4b05      	ldr	r3, [pc, #20]	; (40dcd4 <main_extra_string+0xa4>)
  40dcbe:	88da      	ldrh	r2, [r3, #6]
  40dcc0:	4b04      	ldr	r3, [pc, #16]	; (40dcd4 <main_extra_string+0xa4>)
  40dcc2:	819a      	strh	r2, [r3, #12]
	}
	return true;
  40dcc4:	2301      	movs	r3, #1
}
  40dcc6:	4618      	mov	r0, r3
  40dcc8:	3714      	adds	r7, #20
  40dcca:	46bd      	mov	sp, r7
  40dccc:	f85d 7b04 	ldr.w	r7, [sp], #4
  40dcd0:	4770      	bx	lr
  40dcd2:	bf00      	nop
  40dcd4:	2001aba8 	.word	0x2001aba8
  40dcd8:	20000264 	.word	0x20000264
  40dcdc:	20000274 	.word	0x20000274
  40dce0:	20000284 	.word	0x20000284

0040dce4 <main_msc_enable>:

bool main_msc_enable(void)
{
  40dce4:	b480      	push	{r7}
  40dce6:	af00      	add	r7, sp, #0
	main_b_msc_enable = true;
  40dce8:	4b04      	ldr	r3, [pc, #16]	; (40dcfc <main_msc_enable+0x18>)
  40dcea:	2201      	movs	r2, #1
  40dcec:	701a      	strb	r2, [r3, #0]
	return true;
  40dcee:	2301      	movs	r3, #1
}
  40dcf0:	4618      	mov	r0, r3
  40dcf2:	46bd      	mov	sp, r7
  40dcf4:	f85d 7b04 	ldr.w	r7, [sp], #4
  40dcf8:	4770      	bx	lr
  40dcfa:	bf00      	nop
  40dcfc:	2001a75c 	.word	0x2001a75c

0040dd00 <main_msc_disable>:

void main_msc_disable(void)
{
  40dd00:	b480      	push	{r7}
  40dd02:	af00      	add	r7, sp, #0
	main_b_msc_enable = false;
  40dd04:	4b03      	ldr	r3, [pc, #12]	; (40dd14 <main_msc_disable+0x14>)
  40dd06:	2200      	movs	r2, #0
  40dd08:	701a      	strb	r2, [r3, #0]
}
  40dd0a:	bf00      	nop
  40dd0c:	46bd      	mov	sp, r7
  40dd0e:	f85d 7b04 	ldr.w	r7, [sp], #4
  40dd12:	4770      	bx	lr
  40dd14:	2001a75c 	.word	0x2001a75c

0040dd18 <main_cdc_enable>:

bool main_cdc_enable(uint8_t port)
{
  40dd18:	b480      	push	{r7}
  40dd1a:	b083      	sub	sp, #12
  40dd1c:	af00      	add	r7, sp, #0
  40dd1e:	4603      	mov	r3, r0
  40dd20:	71fb      	strb	r3, [r7, #7]
	main_b_cdc_enable = true;
  40dd22:	4b05      	ldr	r3, [pc, #20]	; (40dd38 <main_cdc_enable+0x20>)
  40dd24:	2201      	movs	r2, #1
  40dd26:	701a      	strb	r2, [r3, #0]
	// Open communication
	//uart_open(port);
	return true;
  40dd28:	2301      	movs	r3, #1
}
  40dd2a:	4618      	mov	r0, r3
  40dd2c:	370c      	adds	r7, #12
  40dd2e:	46bd      	mov	sp, r7
  40dd30:	f85d 7b04 	ldr.w	r7, [sp], #4
  40dd34:	4770      	bx	lr
  40dd36:	bf00      	nop
  40dd38:	2001a75d 	.word	0x2001a75d

0040dd3c <main_cdc_disable>:

void main_cdc_disable(uint8_t port)
{
  40dd3c:	b480      	push	{r7}
  40dd3e:	b083      	sub	sp, #12
  40dd40:	af00      	add	r7, sp, #0
  40dd42:	4603      	mov	r3, r0
  40dd44:	71fb      	strb	r3, [r7, #7]
	main_b_cdc_enable = false;
  40dd46:	4b04      	ldr	r3, [pc, #16]	; (40dd58 <main_cdc_disable+0x1c>)
  40dd48:	2200      	movs	r2, #0
  40dd4a:	701a      	strb	r2, [r3, #0]
	// Close communication
	//uart_close(port);
}
  40dd4c:	bf00      	nop
  40dd4e:	370c      	adds	r7, #12
  40dd50:	46bd      	mov	sp, r7
  40dd52:	f85d 7b04 	ldr.w	r7, [sp], #4
  40dd56:	4770      	bx	lr
  40dd58:	2001a75d 	.word	0x2001a75d

0040dd5c <main_cdc_set_dtr>:

void main_cdc_set_dtr(uint8_t port, bool b_enable)
{
  40dd5c:	b580      	push	{r7, lr}
  40dd5e:	b082      	sub	sp, #8
  40dd60:	af00      	add	r7, sp, #0
  40dd62:	4603      	mov	r3, r0
  40dd64:	460a      	mov	r2, r1
  40dd66:	71fb      	strb	r3, [r7, #7]
  40dd68:	4613      	mov	r3, r2
  40dd6a:	71bb      	strb	r3, [r7, #6]
	if (b_enable) {
  40dd6c:	79bb      	ldrb	r3, [r7, #6]
  40dd6e:	2b00      	cmp	r3, #0
  40dd70:	d004      	beq.n	40dd7c <main_cdc_set_dtr+0x20>
		// Host terminal has open COM
		ui_com_open(port);
  40dd72:	79fb      	ldrb	r3, [r7, #7]
  40dd74:	4618      	mov	r0, r3
  40dd76:	4b05      	ldr	r3, [pc, #20]	; (40dd8c <main_cdc_set_dtr+0x30>)
  40dd78:	4798      	blx	r3
	}else{
		// Host terminal has close COM
		ui_com_close(port);
	}
}
  40dd7a:	e003      	b.n	40dd84 <main_cdc_set_dtr+0x28>
		ui_com_close(port);
  40dd7c:	79fb      	ldrb	r3, [r7, #7]
  40dd7e:	4618      	mov	r0, r3
  40dd80:	4b03      	ldr	r3, [pc, #12]	; (40dd90 <main_cdc_set_dtr+0x34>)
  40dd82:	4798      	blx	r3
}
  40dd84:	bf00      	nop
  40dd86:	3708      	adds	r7, #8
  40dd88:	46bd      	mov	sp, r7
  40dd8a:	bd80      	pop	{r7, pc}
  40dd8c:	00402bad 	.word	0x00402bad
  40dd90:	00402bc3 	.word	0x00402bc3

0040dd94 <memories_initialization>:
	pio_set_pin_low(PIN_EBI_NLB);
}
#endif

void memories_initialization(void)
{
  40dd94:	b480      	push	{r7}
  40dd96:	af00      	add	r7, sp, #0
	psram_init();
#endif
#ifdef CONF_BOARD_SRAM
	ext_sram_init();
#endif
}
  40dd98:	bf00      	nop
  40dd9a:	46bd      	mov	sp, r7
  40dd9c:	f85d 7b04 	ldr.w	r7, [sp], #4
  40dda0:	4770      	bx	lr
	...

0040dda4 <__aeabi_uldivmod>:
  40dda4:	b953      	cbnz	r3, 40ddbc <__aeabi_uldivmod+0x18>
  40dda6:	b94a      	cbnz	r2, 40ddbc <__aeabi_uldivmod+0x18>
  40dda8:	2900      	cmp	r1, #0
  40ddaa:	bf08      	it	eq
  40ddac:	2800      	cmpeq	r0, #0
  40ddae:	bf1c      	itt	ne
  40ddb0:	f04f 31ff 	movne.w	r1, #4294967295
  40ddb4:	f04f 30ff 	movne.w	r0, #4294967295
  40ddb8:	f000 b97a 	b.w	40e0b0 <__aeabi_idiv0>
  40ddbc:	f1ad 0c08 	sub.w	ip, sp, #8
  40ddc0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  40ddc4:	f000 f806 	bl	40ddd4 <__udivmoddi4>
  40ddc8:	f8dd e004 	ldr.w	lr, [sp, #4]
  40ddcc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40ddd0:	b004      	add	sp, #16
  40ddd2:	4770      	bx	lr

0040ddd4 <__udivmoddi4>:
  40ddd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40ddd8:	468c      	mov	ip, r1
  40ddda:	460d      	mov	r5, r1
  40dddc:	4604      	mov	r4, r0
  40ddde:	9e08      	ldr	r6, [sp, #32]
  40dde0:	2b00      	cmp	r3, #0
  40dde2:	d151      	bne.n	40de88 <__udivmoddi4+0xb4>
  40dde4:	428a      	cmp	r2, r1
  40dde6:	4617      	mov	r7, r2
  40dde8:	d96d      	bls.n	40dec6 <__udivmoddi4+0xf2>
  40ddea:	fab2 fe82 	clz	lr, r2
  40ddee:	f1be 0f00 	cmp.w	lr, #0
  40ddf2:	d00b      	beq.n	40de0c <__udivmoddi4+0x38>
  40ddf4:	f1ce 0c20 	rsb	ip, lr, #32
  40ddf8:	fa01 f50e 	lsl.w	r5, r1, lr
  40ddfc:	fa20 fc0c 	lsr.w	ip, r0, ip
  40de00:	fa02 f70e 	lsl.w	r7, r2, lr
  40de04:	ea4c 0c05 	orr.w	ip, ip, r5
  40de08:	fa00 f40e 	lsl.w	r4, r0, lr
  40de0c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  40de10:	0c25      	lsrs	r5, r4, #16
  40de12:	fbbc f8fa 	udiv	r8, ip, sl
  40de16:	fa1f f987 	uxth.w	r9, r7
  40de1a:	fb0a cc18 	mls	ip, sl, r8, ip
  40de1e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  40de22:	fb08 f309 	mul.w	r3, r8, r9
  40de26:	42ab      	cmp	r3, r5
  40de28:	d90a      	bls.n	40de40 <__udivmoddi4+0x6c>
  40de2a:	19ed      	adds	r5, r5, r7
  40de2c:	f108 32ff 	add.w	r2, r8, #4294967295
  40de30:	f080 8123 	bcs.w	40e07a <__udivmoddi4+0x2a6>
  40de34:	42ab      	cmp	r3, r5
  40de36:	f240 8120 	bls.w	40e07a <__udivmoddi4+0x2a6>
  40de3a:	f1a8 0802 	sub.w	r8, r8, #2
  40de3e:	443d      	add	r5, r7
  40de40:	1aed      	subs	r5, r5, r3
  40de42:	b2a4      	uxth	r4, r4
  40de44:	fbb5 f0fa 	udiv	r0, r5, sl
  40de48:	fb0a 5510 	mls	r5, sl, r0, r5
  40de4c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  40de50:	fb00 f909 	mul.w	r9, r0, r9
  40de54:	45a1      	cmp	r9, r4
  40de56:	d909      	bls.n	40de6c <__udivmoddi4+0x98>
  40de58:	19e4      	adds	r4, r4, r7
  40de5a:	f100 33ff 	add.w	r3, r0, #4294967295
  40de5e:	f080 810a 	bcs.w	40e076 <__udivmoddi4+0x2a2>
  40de62:	45a1      	cmp	r9, r4
  40de64:	f240 8107 	bls.w	40e076 <__udivmoddi4+0x2a2>
  40de68:	3802      	subs	r0, #2
  40de6a:	443c      	add	r4, r7
  40de6c:	eba4 0409 	sub.w	r4, r4, r9
  40de70:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40de74:	2100      	movs	r1, #0
  40de76:	2e00      	cmp	r6, #0
  40de78:	d061      	beq.n	40df3e <__udivmoddi4+0x16a>
  40de7a:	fa24 f40e 	lsr.w	r4, r4, lr
  40de7e:	2300      	movs	r3, #0
  40de80:	6034      	str	r4, [r6, #0]
  40de82:	6073      	str	r3, [r6, #4]
  40de84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40de88:	428b      	cmp	r3, r1
  40de8a:	d907      	bls.n	40de9c <__udivmoddi4+0xc8>
  40de8c:	2e00      	cmp	r6, #0
  40de8e:	d054      	beq.n	40df3a <__udivmoddi4+0x166>
  40de90:	2100      	movs	r1, #0
  40de92:	e886 0021 	stmia.w	r6, {r0, r5}
  40de96:	4608      	mov	r0, r1
  40de98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40de9c:	fab3 f183 	clz	r1, r3
  40dea0:	2900      	cmp	r1, #0
  40dea2:	f040 808e 	bne.w	40dfc2 <__udivmoddi4+0x1ee>
  40dea6:	42ab      	cmp	r3, r5
  40dea8:	d302      	bcc.n	40deb0 <__udivmoddi4+0xdc>
  40deaa:	4282      	cmp	r2, r0
  40deac:	f200 80fa 	bhi.w	40e0a4 <__udivmoddi4+0x2d0>
  40deb0:	1a84      	subs	r4, r0, r2
  40deb2:	eb65 0503 	sbc.w	r5, r5, r3
  40deb6:	2001      	movs	r0, #1
  40deb8:	46ac      	mov	ip, r5
  40deba:	2e00      	cmp	r6, #0
  40debc:	d03f      	beq.n	40df3e <__udivmoddi4+0x16a>
  40debe:	e886 1010 	stmia.w	r6, {r4, ip}
  40dec2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40dec6:	b912      	cbnz	r2, 40dece <__udivmoddi4+0xfa>
  40dec8:	2701      	movs	r7, #1
  40deca:	fbb7 f7f2 	udiv	r7, r7, r2
  40dece:	fab7 fe87 	clz	lr, r7
  40ded2:	f1be 0f00 	cmp.w	lr, #0
  40ded6:	d134      	bne.n	40df42 <__udivmoddi4+0x16e>
  40ded8:	1beb      	subs	r3, r5, r7
  40deda:	0c3a      	lsrs	r2, r7, #16
  40dedc:	fa1f fc87 	uxth.w	ip, r7
  40dee0:	2101      	movs	r1, #1
  40dee2:	fbb3 f8f2 	udiv	r8, r3, r2
  40dee6:	0c25      	lsrs	r5, r4, #16
  40dee8:	fb02 3318 	mls	r3, r2, r8, r3
  40deec:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40def0:	fb0c f308 	mul.w	r3, ip, r8
  40def4:	42ab      	cmp	r3, r5
  40def6:	d907      	bls.n	40df08 <__udivmoddi4+0x134>
  40def8:	19ed      	adds	r5, r5, r7
  40defa:	f108 30ff 	add.w	r0, r8, #4294967295
  40defe:	d202      	bcs.n	40df06 <__udivmoddi4+0x132>
  40df00:	42ab      	cmp	r3, r5
  40df02:	f200 80d1 	bhi.w	40e0a8 <__udivmoddi4+0x2d4>
  40df06:	4680      	mov	r8, r0
  40df08:	1aed      	subs	r5, r5, r3
  40df0a:	b2a3      	uxth	r3, r4
  40df0c:	fbb5 f0f2 	udiv	r0, r5, r2
  40df10:	fb02 5510 	mls	r5, r2, r0, r5
  40df14:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  40df18:	fb0c fc00 	mul.w	ip, ip, r0
  40df1c:	45a4      	cmp	ip, r4
  40df1e:	d907      	bls.n	40df30 <__udivmoddi4+0x15c>
  40df20:	19e4      	adds	r4, r4, r7
  40df22:	f100 33ff 	add.w	r3, r0, #4294967295
  40df26:	d202      	bcs.n	40df2e <__udivmoddi4+0x15a>
  40df28:	45a4      	cmp	ip, r4
  40df2a:	f200 80b8 	bhi.w	40e09e <__udivmoddi4+0x2ca>
  40df2e:	4618      	mov	r0, r3
  40df30:	eba4 040c 	sub.w	r4, r4, ip
  40df34:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40df38:	e79d      	b.n	40de76 <__udivmoddi4+0xa2>
  40df3a:	4631      	mov	r1, r6
  40df3c:	4630      	mov	r0, r6
  40df3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40df42:	f1ce 0420 	rsb	r4, lr, #32
  40df46:	fa05 f30e 	lsl.w	r3, r5, lr
  40df4a:	fa07 f70e 	lsl.w	r7, r7, lr
  40df4e:	fa20 f804 	lsr.w	r8, r0, r4
  40df52:	0c3a      	lsrs	r2, r7, #16
  40df54:	fa25 f404 	lsr.w	r4, r5, r4
  40df58:	ea48 0803 	orr.w	r8, r8, r3
  40df5c:	fbb4 f1f2 	udiv	r1, r4, r2
  40df60:	ea4f 4518 	mov.w	r5, r8, lsr #16
  40df64:	fb02 4411 	mls	r4, r2, r1, r4
  40df68:	fa1f fc87 	uxth.w	ip, r7
  40df6c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  40df70:	fb01 f30c 	mul.w	r3, r1, ip
  40df74:	42ab      	cmp	r3, r5
  40df76:	fa00 f40e 	lsl.w	r4, r0, lr
  40df7a:	d909      	bls.n	40df90 <__udivmoddi4+0x1bc>
  40df7c:	19ed      	adds	r5, r5, r7
  40df7e:	f101 30ff 	add.w	r0, r1, #4294967295
  40df82:	f080 808a 	bcs.w	40e09a <__udivmoddi4+0x2c6>
  40df86:	42ab      	cmp	r3, r5
  40df88:	f240 8087 	bls.w	40e09a <__udivmoddi4+0x2c6>
  40df8c:	3902      	subs	r1, #2
  40df8e:	443d      	add	r5, r7
  40df90:	1aeb      	subs	r3, r5, r3
  40df92:	fa1f f588 	uxth.w	r5, r8
  40df96:	fbb3 f0f2 	udiv	r0, r3, r2
  40df9a:	fb02 3310 	mls	r3, r2, r0, r3
  40df9e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40dfa2:	fb00 f30c 	mul.w	r3, r0, ip
  40dfa6:	42ab      	cmp	r3, r5
  40dfa8:	d907      	bls.n	40dfba <__udivmoddi4+0x1e6>
  40dfaa:	19ed      	adds	r5, r5, r7
  40dfac:	f100 38ff 	add.w	r8, r0, #4294967295
  40dfb0:	d26f      	bcs.n	40e092 <__udivmoddi4+0x2be>
  40dfb2:	42ab      	cmp	r3, r5
  40dfb4:	d96d      	bls.n	40e092 <__udivmoddi4+0x2be>
  40dfb6:	3802      	subs	r0, #2
  40dfb8:	443d      	add	r5, r7
  40dfba:	1aeb      	subs	r3, r5, r3
  40dfbc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  40dfc0:	e78f      	b.n	40dee2 <__udivmoddi4+0x10e>
  40dfc2:	f1c1 0720 	rsb	r7, r1, #32
  40dfc6:	fa22 f807 	lsr.w	r8, r2, r7
  40dfca:	408b      	lsls	r3, r1
  40dfcc:	fa05 f401 	lsl.w	r4, r5, r1
  40dfd0:	ea48 0303 	orr.w	r3, r8, r3
  40dfd4:	fa20 fe07 	lsr.w	lr, r0, r7
  40dfd8:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  40dfdc:	40fd      	lsrs	r5, r7
  40dfde:	ea4e 0e04 	orr.w	lr, lr, r4
  40dfe2:	fbb5 f9fc 	udiv	r9, r5, ip
  40dfe6:	ea4f 441e 	mov.w	r4, lr, lsr #16
  40dfea:	fb0c 5519 	mls	r5, ip, r9, r5
  40dfee:	fa1f f883 	uxth.w	r8, r3
  40dff2:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  40dff6:	fb09 f408 	mul.w	r4, r9, r8
  40dffa:	42ac      	cmp	r4, r5
  40dffc:	fa02 f201 	lsl.w	r2, r2, r1
  40e000:	fa00 fa01 	lsl.w	sl, r0, r1
  40e004:	d908      	bls.n	40e018 <__udivmoddi4+0x244>
  40e006:	18ed      	adds	r5, r5, r3
  40e008:	f109 30ff 	add.w	r0, r9, #4294967295
  40e00c:	d243      	bcs.n	40e096 <__udivmoddi4+0x2c2>
  40e00e:	42ac      	cmp	r4, r5
  40e010:	d941      	bls.n	40e096 <__udivmoddi4+0x2c2>
  40e012:	f1a9 0902 	sub.w	r9, r9, #2
  40e016:	441d      	add	r5, r3
  40e018:	1b2d      	subs	r5, r5, r4
  40e01a:	fa1f fe8e 	uxth.w	lr, lr
  40e01e:	fbb5 f0fc 	udiv	r0, r5, ip
  40e022:	fb0c 5510 	mls	r5, ip, r0, r5
  40e026:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  40e02a:	fb00 f808 	mul.w	r8, r0, r8
  40e02e:	45a0      	cmp	r8, r4
  40e030:	d907      	bls.n	40e042 <__udivmoddi4+0x26e>
  40e032:	18e4      	adds	r4, r4, r3
  40e034:	f100 35ff 	add.w	r5, r0, #4294967295
  40e038:	d229      	bcs.n	40e08e <__udivmoddi4+0x2ba>
  40e03a:	45a0      	cmp	r8, r4
  40e03c:	d927      	bls.n	40e08e <__udivmoddi4+0x2ba>
  40e03e:	3802      	subs	r0, #2
  40e040:	441c      	add	r4, r3
  40e042:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  40e046:	eba4 0408 	sub.w	r4, r4, r8
  40e04a:	fba0 8902 	umull	r8, r9, r0, r2
  40e04e:	454c      	cmp	r4, r9
  40e050:	46c6      	mov	lr, r8
  40e052:	464d      	mov	r5, r9
  40e054:	d315      	bcc.n	40e082 <__udivmoddi4+0x2ae>
  40e056:	d012      	beq.n	40e07e <__udivmoddi4+0x2aa>
  40e058:	b156      	cbz	r6, 40e070 <__udivmoddi4+0x29c>
  40e05a:	ebba 030e 	subs.w	r3, sl, lr
  40e05e:	eb64 0405 	sbc.w	r4, r4, r5
  40e062:	fa04 f707 	lsl.w	r7, r4, r7
  40e066:	40cb      	lsrs	r3, r1
  40e068:	431f      	orrs	r7, r3
  40e06a:	40cc      	lsrs	r4, r1
  40e06c:	6037      	str	r7, [r6, #0]
  40e06e:	6074      	str	r4, [r6, #4]
  40e070:	2100      	movs	r1, #0
  40e072:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40e076:	4618      	mov	r0, r3
  40e078:	e6f8      	b.n	40de6c <__udivmoddi4+0x98>
  40e07a:	4690      	mov	r8, r2
  40e07c:	e6e0      	b.n	40de40 <__udivmoddi4+0x6c>
  40e07e:	45c2      	cmp	sl, r8
  40e080:	d2ea      	bcs.n	40e058 <__udivmoddi4+0x284>
  40e082:	ebb8 0e02 	subs.w	lr, r8, r2
  40e086:	eb69 0503 	sbc.w	r5, r9, r3
  40e08a:	3801      	subs	r0, #1
  40e08c:	e7e4      	b.n	40e058 <__udivmoddi4+0x284>
  40e08e:	4628      	mov	r0, r5
  40e090:	e7d7      	b.n	40e042 <__udivmoddi4+0x26e>
  40e092:	4640      	mov	r0, r8
  40e094:	e791      	b.n	40dfba <__udivmoddi4+0x1e6>
  40e096:	4681      	mov	r9, r0
  40e098:	e7be      	b.n	40e018 <__udivmoddi4+0x244>
  40e09a:	4601      	mov	r1, r0
  40e09c:	e778      	b.n	40df90 <__udivmoddi4+0x1bc>
  40e09e:	3802      	subs	r0, #2
  40e0a0:	443c      	add	r4, r7
  40e0a2:	e745      	b.n	40df30 <__udivmoddi4+0x15c>
  40e0a4:	4608      	mov	r0, r1
  40e0a6:	e708      	b.n	40deba <__udivmoddi4+0xe6>
  40e0a8:	f1a8 0802 	sub.w	r8, r8, #2
  40e0ac:	443d      	add	r5, r7
  40e0ae:	e72b      	b.n	40df08 <__udivmoddi4+0x134>

0040e0b0 <__aeabi_idiv0>:
  40e0b0:	4770      	bx	lr
  40e0b2:	bf00      	nop

0040e0b4 <__libc_init_array>:
  40e0b4:	b570      	push	{r4, r5, r6, lr}
  40e0b6:	4e0f      	ldr	r6, [pc, #60]	; (40e0f4 <__libc_init_array+0x40>)
  40e0b8:	4d0f      	ldr	r5, [pc, #60]	; (40e0f8 <__libc_init_array+0x44>)
  40e0ba:	1b76      	subs	r6, r6, r5
  40e0bc:	10b6      	asrs	r6, r6, #2
  40e0be:	bf18      	it	ne
  40e0c0:	2400      	movne	r4, #0
  40e0c2:	d005      	beq.n	40e0d0 <__libc_init_array+0x1c>
  40e0c4:	3401      	adds	r4, #1
  40e0c6:	f855 3b04 	ldr.w	r3, [r5], #4
  40e0ca:	4798      	blx	r3
  40e0cc:	42a6      	cmp	r6, r4
  40e0ce:	d1f9      	bne.n	40e0c4 <__libc_init_array+0x10>
  40e0d0:	4e0a      	ldr	r6, [pc, #40]	; (40e0fc <__libc_init_array+0x48>)
  40e0d2:	4d0b      	ldr	r5, [pc, #44]	; (40e100 <__libc_init_array+0x4c>)
  40e0d4:	1b76      	subs	r6, r6, r5
  40e0d6:	f003 fcd9 	bl	411a8c <_init>
  40e0da:	10b6      	asrs	r6, r6, #2
  40e0dc:	bf18      	it	ne
  40e0de:	2400      	movne	r4, #0
  40e0e0:	d006      	beq.n	40e0f0 <__libc_init_array+0x3c>
  40e0e2:	3401      	adds	r4, #1
  40e0e4:	f855 3b04 	ldr.w	r3, [r5], #4
  40e0e8:	4798      	blx	r3
  40e0ea:	42a6      	cmp	r6, r4
  40e0ec:	d1f9      	bne.n	40e0e2 <__libc_init_array+0x2e>
  40e0ee:	bd70      	pop	{r4, r5, r6, pc}
  40e0f0:	bd70      	pop	{r4, r5, r6, pc}
  40e0f2:	bf00      	nop
  40e0f4:	00411a98 	.word	0x00411a98
  40e0f8:	00411a98 	.word	0x00411a98
  40e0fc:	00411aa0 	.word	0x00411aa0
  40e100:	00411a98 	.word	0x00411a98

0040e104 <iprintf>:
  40e104:	b40f      	push	{r0, r1, r2, r3}
  40e106:	b500      	push	{lr}
  40e108:	4907      	ldr	r1, [pc, #28]	; (40e128 <iprintf+0x24>)
  40e10a:	b083      	sub	sp, #12
  40e10c:	ab04      	add	r3, sp, #16
  40e10e:	6808      	ldr	r0, [r1, #0]
  40e110:	f853 2b04 	ldr.w	r2, [r3], #4
  40e114:	6881      	ldr	r1, [r0, #8]
  40e116:	9301      	str	r3, [sp, #4]
  40e118:	f000 fa00 	bl	40e51c <_vfiprintf_r>
  40e11c:	b003      	add	sp, #12
  40e11e:	f85d eb04 	ldr.w	lr, [sp], #4
  40e122:	b004      	add	sp, #16
  40e124:	4770      	bx	lr
  40e126:	bf00      	nop
  40e128:	200002a0 	.word	0x200002a0

0040e12c <memcpy>:
  40e12c:	4684      	mov	ip, r0
  40e12e:	ea41 0300 	orr.w	r3, r1, r0
  40e132:	f013 0303 	ands.w	r3, r3, #3
  40e136:	d16d      	bne.n	40e214 <memcpy+0xe8>
  40e138:	3a40      	subs	r2, #64	; 0x40
  40e13a:	d341      	bcc.n	40e1c0 <memcpy+0x94>
  40e13c:	f851 3b04 	ldr.w	r3, [r1], #4
  40e140:	f840 3b04 	str.w	r3, [r0], #4
  40e144:	f851 3b04 	ldr.w	r3, [r1], #4
  40e148:	f840 3b04 	str.w	r3, [r0], #4
  40e14c:	f851 3b04 	ldr.w	r3, [r1], #4
  40e150:	f840 3b04 	str.w	r3, [r0], #4
  40e154:	f851 3b04 	ldr.w	r3, [r1], #4
  40e158:	f840 3b04 	str.w	r3, [r0], #4
  40e15c:	f851 3b04 	ldr.w	r3, [r1], #4
  40e160:	f840 3b04 	str.w	r3, [r0], #4
  40e164:	f851 3b04 	ldr.w	r3, [r1], #4
  40e168:	f840 3b04 	str.w	r3, [r0], #4
  40e16c:	f851 3b04 	ldr.w	r3, [r1], #4
  40e170:	f840 3b04 	str.w	r3, [r0], #4
  40e174:	f851 3b04 	ldr.w	r3, [r1], #4
  40e178:	f840 3b04 	str.w	r3, [r0], #4
  40e17c:	f851 3b04 	ldr.w	r3, [r1], #4
  40e180:	f840 3b04 	str.w	r3, [r0], #4
  40e184:	f851 3b04 	ldr.w	r3, [r1], #4
  40e188:	f840 3b04 	str.w	r3, [r0], #4
  40e18c:	f851 3b04 	ldr.w	r3, [r1], #4
  40e190:	f840 3b04 	str.w	r3, [r0], #4
  40e194:	f851 3b04 	ldr.w	r3, [r1], #4
  40e198:	f840 3b04 	str.w	r3, [r0], #4
  40e19c:	f851 3b04 	ldr.w	r3, [r1], #4
  40e1a0:	f840 3b04 	str.w	r3, [r0], #4
  40e1a4:	f851 3b04 	ldr.w	r3, [r1], #4
  40e1a8:	f840 3b04 	str.w	r3, [r0], #4
  40e1ac:	f851 3b04 	ldr.w	r3, [r1], #4
  40e1b0:	f840 3b04 	str.w	r3, [r0], #4
  40e1b4:	f851 3b04 	ldr.w	r3, [r1], #4
  40e1b8:	f840 3b04 	str.w	r3, [r0], #4
  40e1bc:	3a40      	subs	r2, #64	; 0x40
  40e1be:	d2bd      	bcs.n	40e13c <memcpy+0x10>
  40e1c0:	3230      	adds	r2, #48	; 0x30
  40e1c2:	d311      	bcc.n	40e1e8 <memcpy+0xbc>
  40e1c4:	f851 3b04 	ldr.w	r3, [r1], #4
  40e1c8:	f840 3b04 	str.w	r3, [r0], #4
  40e1cc:	f851 3b04 	ldr.w	r3, [r1], #4
  40e1d0:	f840 3b04 	str.w	r3, [r0], #4
  40e1d4:	f851 3b04 	ldr.w	r3, [r1], #4
  40e1d8:	f840 3b04 	str.w	r3, [r0], #4
  40e1dc:	f851 3b04 	ldr.w	r3, [r1], #4
  40e1e0:	f840 3b04 	str.w	r3, [r0], #4
  40e1e4:	3a10      	subs	r2, #16
  40e1e6:	d2ed      	bcs.n	40e1c4 <memcpy+0x98>
  40e1e8:	320c      	adds	r2, #12
  40e1ea:	d305      	bcc.n	40e1f8 <memcpy+0xcc>
  40e1ec:	f851 3b04 	ldr.w	r3, [r1], #4
  40e1f0:	f840 3b04 	str.w	r3, [r0], #4
  40e1f4:	3a04      	subs	r2, #4
  40e1f6:	d2f9      	bcs.n	40e1ec <memcpy+0xc0>
  40e1f8:	3204      	adds	r2, #4
  40e1fa:	d008      	beq.n	40e20e <memcpy+0xe2>
  40e1fc:	07d2      	lsls	r2, r2, #31
  40e1fe:	bf1c      	itt	ne
  40e200:	f811 3b01 	ldrbne.w	r3, [r1], #1
  40e204:	f800 3b01 	strbne.w	r3, [r0], #1
  40e208:	d301      	bcc.n	40e20e <memcpy+0xe2>
  40e20a:	880b      	ldrh	r3, [r1, #0]
  40e20c:	8003      	strh	r3, [r0, #0]
  40e20e:	4660      	mov	r0, ip
  40e210:	4770      	bx	lr
  40e212:	bf00      	nop
  40e214:	2a08      	cmp	r2, #8
  40e216:	d313      	bcc.n	40e240 <memcpy+0x114>
  40e218:	078b      	lsls	r3, r1, #30
  40e21a:	d08d      	beq.n	40e138 <memcpy+0xc>
  40e21c:	f010 0303 	ands.w	r3, r0, #3
  40e220:	d08a      	beq.n	40e138 <memcpy+0xc>
  40e222:	f1c3 0304 	rsb	r3, r3, #4
  40e226:	1ad2      	subs	r2, r2, r3
  40e228:	07db      	lsls	r3, r3, #31
  40e22a:	bf1c      	itt	ne
  40e22c:	f811 3b01 	ldrbne.w	r3, [r1], #1
  40e230:	f800 3b01 	strbne.w	r3, [r0], #1
  40e234:	d380      	bcc.n	40e138 <memcpy+0xc>
  40e236:	f831 3b02 	ldrh.w	r3, [r1], #2
  40e23a:	f820 3b02 	strh.w	r3, [r0], #2
  40e23e:	e77b      	b.n	40e138 <memcpy+0xc>
  40e240:	3a04      	subs	r2, #4
  40e242:	d3d9      	bcc.n	40e1f8 <memcpy+0xcc>
  40e244:	3a01      	subs	r2, #1
  40e246:	f811 3b01 	ldrb.w	r3, [r1], #1
  40e24a:	f800 3b01 	strb.w	r3, [r0], #1
  40e24e:	d2f9      	bcs.n	40e244 <memcpy+0x118>
  40e250:	780b      	ldrb	r3, [r1, #0]
  40e252:	7003      	strb	r3, [r0, #0]
  40e254:	784b      	ldrb	r3, [r1, #1]
  40e256:	7043      	strb	r3, [r0, #1]
  40e258:	788b      	ldrb	r3, [r1, #2]
  40e25a:	7083      	strb	r3, [r0, #2]
  40e25c:	4660      	mov	r0, ip
  40e25e:	4770      	bx	lr

0040e260 <memset>:
  40e260:	b470      	push	{r4, r5, r6}
  40e262:	0786      	lsls	r6, r0, #30
  40e264:	d046      	beq.n	40e2f4 <memset+0x94>
  40e266:	1e54      	subs	r4, r2, #1
  40e268:	2a00      	cmp	r2, #0
  40e26a:	d041      	beq.n	40e2f0 <memset+0x90>
  40e26c:	b2ca      	uxtb	r2, r1
  40e26e:	4603      	mov	r3, r0
  40e270:	e002      	b.n	40e278 <memset+0x18>
  40e272:	f114 34ff 	adds.w	r4, r4, #4294967295
  40e276:	d33b      	bcc.n	40e2f0 <memset+0x90>
  40e278:	f803 2b01 	strb.w	r2, [r3], #1
  40e27c:	079d      	lsls	r5, r3, #30
  40e27e:	d1f8      	bne.n	40e272 <memset+0x12>
  40e280:	2c03      	cmp	r4, #3
  40e282:	d92e      	bls.n	40e2e2 <memset+0x82>
  40e284:	b2cd      	uxtb	r5, r1
  40e286:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  40e28a:	2c0f      	cmp	r4, #15
  40e28c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  40e290:	d919      	bls.n	40e2c6 <memset+0x66>
  40e292:	f103 0210 	add.w	r2, r3, #16
  40e296:	4626      	mov	r6, r4
  40e298:	3e10      	subs	r6, #16
  40e29a:	2e0f      	cmp	r6, #15
  40e29c:	f842 5c10 	str.w	r5, [r2, #-16]
  40e2a0:	f842 5c0c 	str.w	r5, [r2, #-12]
  40e2a4:	f842 5c08 	str.w	r5, [r2, #-8]
  40e2a8:	f842 5c04 	str.w	r5, [r2, #-4]
  40e2ac:	f102 0210 	add.w	r2, r2, #16
  40e2b0:	d8f2      	bhi.n	40e298 <memset+0x38>
  40e2b2:	f1a4 0210 	sub.w	r2, r4, #16
  40e2b6:	f022 020f 	bic.w	r2, r2, #15
  40e2ba:	f004 040f 	and.w	r4, r4, #15
  40e2be:	3210      	adds	r2, #16
  40e2c0:	2c03      	cmp	r4, #3
  40e2c2:	4413      	add	r3, r2
  40e2c4:	d90d      	bls.n	40e2e2 <memset+0x82>
  40e2c6:	461e      	mov	r6, r3
  40e2c8:	4622      	mov	r2, r4
  40e2ca:	3a04      	subs	r2, #4
  40e2cc:	2a03      	cmp	r2, #3
  40e2ce:	f846 5b04 	str.w	r5, [r6], #4
  40e2d2:	d8fa      	bhi.n	40e2ca <memset+0x6a>
  40e2d4:	1f22      	subs	r2, r4, #4
  40e2d6:	f022 0203 	bic.w	r2, r2, #3
  40e2da:	3204      	adds	r2, #4
  40e2dc:	4413      	add	r3, r2
  40e2de:	f004 0403 	and.w	r4, r4, #3
  40e2e2:	b12c      	cbz	r4, 40e2f0 <memset+0x90>
  40e2e4:	b2c9      	uxtb	r1, r1
  40e2e6:	441c      	add	r4, r3
  40e2e8:	f803 1b01 	strb.w	r1, [r3], #1
  40e2ec:	429c      	cmp	r4, r3
  40e2ee:	d1fb      	bne.n	40e2e8 <memset+0x88>
  40e2f0:	bc70      	pop	{r4, r5, r6}
  40e2f2:	4770      	bx	lr
  40e2f4:	4614      	mov	r4, r2
  40e2f6:	4603      	mov	r3, r0
  40e2f8:	e7c2      	b.n	40e280 <memset+0x20>
  40e2fa:	bf00      	nop

0040e2fc <setbuf>:
  40e2fc:	2900      	cmp	r1, #0
  40e2fe:	bf0c      	ite	eq
  40e300:	2202      	moveq	r2, #2
  40e302:	2200      	movne	r2, #0
  40e304:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40e308:	f000 b800 	b.w	40e30c <setvbuf>

0040e30c <setvbuf>:
  40e30c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40e310:	4c61      	ldr	r4, [pc, #388]	; (40e498 <setvbuf+0x18c>)
  40e312:	6825      	ldr	r5, [r4, #0]
  40e314:	b083      	sub	sp, #12
  40e316:	4604      	mov	r4, r0
  40e318:	460f      	mov	r7, r1
  40e31a:	4690      	mov	r8, r2
  40e31c:	461e      	mov	r6, r3
  40e31e:	b115      	cbz	r5, 40e326 <setvbuf+0x1a>
  40e320:	6bab      	ldr	r3, [r5, #56]	; 0x38
  40e322:	2b00      	cmp	r3, #0
  40e324:	d064      	beq.n	40e3f0 <setvbuf+0xe4>
  40e326:	f1b8 0f02 	cmp.w	r8, #2
  40e32a:	d006      	beq.n	40e33a <setvbuf+0x2e>
  40e32c:	f1b8 0f01 	cmp.w	r8, #1
  40e330:	f200 809f 	bhi.w	40e472 <setvbuf+0x166>
  40e334:	2e00      	cmp	r6, #0
  40e336:	f2c0 809c 	blt.w	40e472 <setvbuf+0x166>
  40e33a:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40e33c:	07d8      	lsls	r0, r3, #31
  40e33e:	d534      	bpl.n	40e3aa <setvbuf+0x9e>
  40e340:	4621      	mov	r1, r4
  40e342:	4628      	mov	r0, r5
  40e344:	f001 f888 	bl	40f458 <_fflush_r>
  40e348:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40e34a:	b141      	cbz	r1, 40e35e <setvbuf+0x52>
  40e34c:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40e350:	4299      	cmp	r1, r3
  40e352:	d002      	beq.n	40e35a <setvbuf+0x4e>
  40e354:	4628      	mov	r0, r5
  40e356:	f001 f9fd 	bl	40f754 <_free_r>
  40e35a:	2300      	movs	r3, #0
  40e35c:	6323      	str	r3, [r4, #48]	; 0x30
  40e35e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40e362:	2200      	movs	r2, #0
  40e364:	61a2      	str	r2, [r4, #24]
  40e366:	6062      	str	r2, [r4, #4]
  40e368:	061a      	lsls	r2, r3, #24
  40e36a:	d43a      	bmi.n	40e3e2 <setvbuf+0xd6>
  40e36c:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  40e370:	f023 0303 	bic.w	r3, r3, #3
  40e374:	f1b8 0f02 	cmp.w	r8, #2
  40e378:	81a3      	strh	r3, [r4, #12]
  40e37a:	d01d      	beq.n	40e3b8 <setvbuf+0xac>
  40e37c:	ab01      	add	r3, sp, #4
  40e37e:	466a      	mov	r2, sp
  40e380:	4621      	mov	r1, r4
  40e382:	4628      	mov	r0, r5
  40e384:	f001 fc84 	bl	40fc90 <__swhatbuf_r>
  40e388:	89a3      	ldrh	r3, [r4, #12]
  40e38a:	4318      	orrs	r0, r3
  40e38c:	81a0      	strh	r0, [r4, #12]
  40e38e:	2e00      	cmp	r6, #0
  40e390:	d132      	bne.n	40e3f8 <setvbuf+0xec>
  40e392:	9e00      	ldr	r6, [sp, #0]
  40e394:	4630      	mov	r0, r6
  40e396:	f001 fcf3 	bl	40fd80 <malloc>
  40e39a:	4607      	mov	r7, r0
  40e39c:	2800      	cmp	r0, #0
  40e39e:	d06b      	beq.n	40e478 <setvbuf+0x16c>
  40e3a0:	89a3      	ldrh	r3, [r4, #12]
  40e3a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40e3a6:	81a3      	strh	r3, [r4, #12]
  40e3a8:	e028      	b.n	40e3fc <setvbuf+0xf0>
  40e3aa:	89a3      	ldrh	r3, [r4, #12]
  40e3ac:	0599      	lsls	r1, r3, #22
  40e3ae:	d4c7      	bmi.n	40e340 <setvbuf+0x34>
  40e3b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40e3b2:	f001 fc69 	bl	40fc88 <__retarget_lock_acquire_recursive>
  40e3b6:	e7c3      	b.n	40e340 <setvbuf+0x34>
  40e3b8:	2500      	movs	r5, #0
  40e3ba:	6e61      	ldr	r1, [r4, #100]	; 0x64
  40e3bc:	2600      	movs	r6, #0
  40e3be:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40e3c2:	f043 0302 	orr.w	r3, r3, #2
  40e3c6:	2001      	movs	r0, #1
  40e3c8:	60a6      	str	r6, [r4, #8]
  40e3ca:	07ce      	lsls	r6, r1, #31
  40e3cc:	81a3      	strh	r3, [r4, #12]
  40e3ce:	6022      	str	r2, [r4, #0]
  40e3d0:	6122      	str	r2, [r4, #16]
  40e3d2:	6160      	str	r0, [r4, #20]
  40e3d4:	d401      	bmi.n	40e3da <setvbuf+0xce>
  40e3d6:	0598      	lsls	r0, r3, #22
  40e3d8:	d53e      	bpl.n	40e458 <setvbuf+0x14c>
  40e3da:	4628      	mov	r0, r5
  40e3dc:	b003      	add	sp, #12
  40e3de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40e3e2:	6921      	ldr	r1, [r4, #16]
  40e3e4:	4628      	mov	r0, r5
  40e3e6:	f001 f9b5 	bl	40f754 <_free_r>
  40e3ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40e3ee:	e7bd      	b.n	40e36c <setvbuf+0x60>
  40e3f0:	4628      	mov	r0, r5
  40e3f2:	f001 f889 	bl	40f508 <__sinit>
  40e3f6:	e796      	b.n	40e326 <setvbuf+0x1a>
  40e3f8:	2f00      	cmp	r7, #0
  40e3fa:	d0cb      	beq.n	40e394 <setvbuf+0x88>
  40e3fc:	6bab      	ldr	r3, [r5, #56]	; 0x38
  40e3fe:	2b00      	cmp	r3, #0
  40e400:	d033      	beq.n	40e46a <setvbuf+0x15e>
  40e402:	9b00      	ldr	r3, [sp, #0]
  40e404:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40e408:	6027      	str	r7, [r4, #0]
  40e40a:	429e      	cmp	r6, r3
  40e40c:	bf1c      	itt	ne
  40e40e:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  40e412:	81a2      	strhne	r2, [r4, #12]
  40e414:	f1b8 0f01 	cmp.w	r8, #1
  40e418:	bf04      	itt	eq
  40e41a:	f042 0201 	orreq.w	r2, r2, #1
  40e41e:	81a2      	strheq	r2, [r4, #12]
  40e420:	b292      	uxth	r2, r2
  40e422:	f012 0308 	ands.w	r3, r2, #8
  40e426:	6127      	str	r7, [r4, #16]
  40e428:	6166      	str	r6, [r4, #20]
  40e42a:	d00e      	beq.n	40e44a <setvbuf+0x13e>
  40e42c:	07d1      	lsls	r1, r2, #31
  40e42e:	d51a      	bpl.n	40e466 <setvbuf+0x15a>
  40e430:	6e65      	ldr	r5, [r4, #100]	; 0x64
  40e432:	4276      	negs	r6, r6
  40e434:	2300      	movs	r3, #0
  40e436:	f015 0501 	ands.w	r5, r5, #1
  40e43a:	61a6      	str	r6, [r4, #24]
  40e43c:	60a3      	str	r3, [r4, #8]
  40e43e:	d009      	beq.n	40e454 <setvbuf+0x148>
  40e440:	2500      	movs	r5, #0
  40e442:	4628      	mov	r0, r5
  40e444:	b003      	add	sp, #12
  40e446:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40e44a:	60a3      	str	r3, [r4, #8]
  40e44c:	6e65      	ldr	r5, [r4, #100]	; 0x64
  40e44e:	f015 0501 	ands.w	r5, r5, #1
  40e452:	d1f5      	bne.n	40e440 <setvbuf+0x134>
  40e454:	0593      	lsls	r3, r2, #22
  40e456:	d4c0      	bmi.n	40e3da <setvbuf+0xce>
  40e458:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40e45a:	f001 fc17 	bl	40fc8c <__retarget_lock_release_recursive>
  40e45e:	4628      	mov	r0, r5
  40e460:	b003      	add	sp, #12
  40e462:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40e466:	60a6      	str	r6, [r4, #8]
  40e468:	e7f0      	b.n	40e44c <setvbuf+0x140>
  40e46a:	4628      	mov	r0, r5
  40e46c:	f001 f84c 	bl	40f508 <__sinit>
  40e470:	e7c7      	b.n	40e402 <setvbuf+0xf6>
  40e472:	f04f 35ff 	mov.w	r5, #4294967295
  40e476:	e7b0      	b.n	40e3da <setvbuf+0xce>
  40e478:	f8dd 9000 	ldr.w	r9, [sp]
  40e47c:	45b1      	cmp	r9, r6
  40e47e:	d004      	beq.n	40e48a <setvbuf+0x17e>
  40e480:	4648      	mov	r0, r9
  40e482:	f001 fc7d 	bl	40fd80 <malloc>
  40e486:	4607      	mov	r7, r0
  40e488:	b920      	cbnz	r0, 40e494 <setvbuf+0x188>
  40e48a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40e48e:	f04f 35ff 	mov.w	r5, #4294967295
  40e492:	e792      	b.n	40e3ba <setvbuf+0xae>
  40e494:	464e      	mov	r6, r9
  40e496:	e783      	b.n	40e3a0 <setvbuf+0x94>
  40e498:	200002a0 	.word	0x200002a0

0040e49c <__sprint_r.part.0>:
  40e49c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40e4a0:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  40e4a2:	049c      	lsls	r4, r3, #18
  40e4a4:	4693      	mov	fp, r2
  40e4a6:	d52f      	bpl.n	40e508 <__sprint_r.part.0+0x6c>
  40e4a8:	6893      	ldr	r3, [r2, #8]
  40e4aa:	6812      	ldr	r2, [r2, #0]
  40e4ac:	b353      	cbz	r3, 40e504 <__sprint_r.part.0+0x68>
  40e4ae:	460e      	mov	r6, r1
  40e4b0:	4607      	mov	r7, r0
  40e4b2:	f102 0908 	add.w	r9, r2, #8
  40e4b6:	e919 0420 	ldmdb	r9, {r5, sl}
  40e4ba:	ea5f 089a 	movs.w	r8, sl, lsr #2
  40e4be:	d017      	beq.n	40e4f0 <__sprint_r.part.0+0x54>
  40e4c0:	3d04      	subs	r5, #4
  40e4c2:	2400      	movs	r4, #0
  40e4c4:	e001      	b.n	40e4ca <__sprint_r.part.0+0x2e>
  40e4c6:	45a0      	cmp	r8, r4
  40e4c8:	d010      	beq.n	40e4ec <__sprint_r.part.0+0x50>
  40e4ca:	4632      	mov	r2, r6
  40e4cc:	f855 1f04 	ldr.w	r1, [r5, #4]!
  40e4d0:	4638      	mov	r0, r7
  40e4d2:	f001 f8bb 	bl	40f64c <_fputwc_r>
  40e4d6:	1c43      	adds	r3, r0, #1
  40e4d8:	f104 0401 	add.w	r4, r4, #1
  40e4dc:	d1f3      	bne.n	40e4c6 <__sprint_r.part.0+0x2a>
  40e4de:	2300      	movs	r3, #0
  40e4e0:	f8cb 3008 	str.w	r3, [fp, #8]
  40e4e4:	f8cb 3004 	str.w	r3, [fp, #4]
  40e4e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40e4ec:	f8db 3008 	ldr.w	r3, [fp, #8]
  40e4f0:	f02a 0a03 	bic.w	sl, sl, #3
  40e4f4:	eba3 030a 	sub.w	r3, r3, sl
  40e4f8:	f8cb 3008 	str.w	r3, [fp, #8]
  40e4fc:	f109 0908 	add.w	r9, r9, #8
  40e500:	2b00      	cmp	r3, #0
  40e502:	d1d8      	bne.n	40e4b6 <__sprint_r.part.0+0x1a>
  40e504:	2000      	movs	r0, #0
  40e506:	e7ea      	b.n	40e4de <__sprint_r.part.0+0x42>
  40e508:	f001 fa0a 	bl	40f920 <__sfvwrite_r>
  40e50c:	2300      	movs	r3, #0
  40e50e:	f8cb 3008 	str.w	r3, [fp, #8]
  40e512:	f8cb 3004 	str.w	r3, [fp, #4]
  40e516:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40e51a:	bf00      	nop

0040e51c <_vfiprintf_r>:
  40e51c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40e520:	b0ad      	sub	sp, #180	; 0xb4
  40e522:	461d      	mov	r5, r3
  40e524:	468b      	mov	fp, r1
  40e526:	4690      	mov	r8, r2
  40e528:	9307      	str	r3, [sp, #28]
  40e52a:	9006      	str	r0, [sp, #24]
  40e52c:	b118      	cbz	r0, 40e536 <_vfiprintf_r+0x1a>
  40e52e:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40e530:	2b00      	cmp	r3, #0
  40e532:	f000 80f3 	beq.w	40e71c <_vfiprintf_r+0x200>
  40e536:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40e53a:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  40e53e:	07df      	lsls	r7, r3, #31
  40e540:	b281      	uxth	r1, r0
  40e542:	d402      	bmi.n	40e54a <_vfiprintf_r+0x2e>
  40e544:	058e      	lsls	r6, r1, #22
  40e546:	f140 80fc 	bpl.w	40e742 <_vfiprintf_r+0x226>
  40e54a:	048c      	lsls	r4, r1, #18
  40e54c:	d40a      	bmi.n	40e564 <_vfiprintf_r+0x48>
  40e54e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40e552:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  40e556:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  40e55a:	f8ab 100c 	strh.w	r1, [fp, #12]
  40e55e:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  40e562:	b289      	uxth	r1, r1
  40e564:	0708      	lsls	r0, r1, #28
  40e566:	f140 80b3 	bpl.w	40e6d0 <_vfiprintf_r+0x1b4>
  40e56a:	f8db 3010 	ldr.w	r3, [fp, #16]
  40e56e:	2b00      	cmp	r3, #0
  40e570:	f000 80ae 	beq.w	40e6d0 <_vfiprintf_r+0x1b4>
  40e574:	f001 031a 	and.w	r3, r1, #26
  40e578:	2b0a      	cmp	r3, #10
  40e57a:	f000 80b5 	beq.w	40e6e8 <_vfiprintf_r+0x1cc>
  40e57e:	2300      	movs	r3, #0
  40e580:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  40e584:	930b      	str	r3, [sp, #44]	; 0x2c
  40e586:	9311      	str	r3, [sp, #68]	; 0x44
  40e588:	9310      	str	r3, [sp, #64]	; 0x40
  40e58a:	9303      	str	r3, [sp, #12]
  40e58c:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  40e590:	46ca      	mov	sl, r9
  40e592:	f8cd b010 	str.w	fp, [sp, #16]
  40e596:	f898 3000 	ldrb.w	r3, [r8]
  40e59a:	4644      	mov	r4, r8
  40e59c:	b1fb      	cbz	r3, 40e5de <_vfiprintf_r+0xc2>
  40e59e:	2b25      	cmp	r3, #37	; 0x25
  40e5a0:	d102      	bne.n	40e5a8 <_vfiprintf_r+0x8c>
  40e5a2:	e01c      	b.n	40e5de <_vfiprintf_r+0xc2>
  40e5a4:	2b25      	cmp	r3, #37	; 0x25
  40e5a6:	d003      	beq.n	40e5b0 <_vfiprintf_r+0x94>
  40e5a8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  40e5ac:	2b00      	cmp	r3, #0
  40e5ae:	d1f9      	bne.n	40e5a4 <_vfiprintf_r+0x88>
  40e5b0:	eba4 0508 	sub.w	r5, r4, r8
  40e5b4:	b19d      	cbz	r5, 40e5de <_vfiprintf_r+0xc2>
  40e5b6:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40e5b8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40e5ba:	f8ca 8000 	str.w	r8, [sl]
  40e5be:	3301      	adds	r3, #1
  40e5c0:	442a      	add	r2, r5
  40e5c2:	2b07      	cmp	r3, #7
  40e5c4:	f8ca 5004 	str.w	r5, [sl, #4]
  40e5c8:	9211      	str	r2, [sp, #68]	; 0x44
  40e5ca:	9310      	str	r3, [sp, #64]	; 0x40
  40e5cc:	dd7a      	ble.n	40e6c4 <_vfiprintf_r+0x1a8>
  40e5ce:	2a00      	cmp	r2, #0
  40e5d0:	f040 84b0 	bne.w	40ef34 <_vfiprintf_r+0xa18>
  40e5d4:	9b03      	ldr	r3, [sp, #12]
  40e5d6:	9210      	str	r2, [sp, #64]	; 0x40
  40e5d8:	442b      	add	r3, r5
  40e5da:	46ca      	mov	sl, r9
  40e5dc:	9303      	str	r3, [sp, #12]
  40e5de:	7823      	ldrb	r3, [r4, #0]
  40e5e0:	2b00      	cmp	r3, #0
  40e5e2:	f000 83e0 	beq.w	40eda6 <_vfiprintf_r+0x88a>
  40e5e6:	2000      	movs	r0, #0
  40e5e8:	f04f 0300 	mov.w	r3, #0
  40e5ec:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  40e5f0:	f104 0801 	add.w	r8, r4, #1
  40e5f4:	7862      	ldrb	r2, [r4, #1]
  40e5f6:	4605      	mov	r5, r0
  40e5f8:	4606      	mov	r6, r0
  40e5fa:	4603      	mov	r3, r0
  40e5fc:	f04f 34ff 	mov.w	r4, #4294967295
  40e600:	f108 0801 	add.w	r8, r8, #1
  40e604:	f1a2 0120 	sub.w	r1, r2, #32
  40e608:	2958      	cmp	r1, #88	; 0x58
  40e60a:	f200 82de 	bhi.w	40ebca <_vfiprintf_r+0x6ae>
  40e60e:	e8df f011 	tbh	[pc, r1, lsl #1]
  40e612:	0221      	.short	0x0221
  40e614:	02dc02dc 	.word	0x02dc02dc
  40e618:	02dc0229 	.word	0x02dc0229
  40e61c:	02dc02dc 	.word	0x02dc02dc
  40e620:	02dc02dc 	.word	0x02dc02dc
  40e624:	028902dc 	.word	0x028902dc
  40e628:	02dc0295 	.word	0x02dc0295
  40e62c:	02bd00a2 	.word	0x02bd00a2
  40e630:	019f02dc 	.word	0x019f02dc
  40e634:	01a401a4 	.word	0x01a401a4
  40e638:	01a401a4 	.word	0x01a401a4
  40e63c:	01a401a4 	.word	0x01a401a4
  40e640:	01a401a4 	.word	0x01a401a4
  40e644:	02dc01a4 	.word	0x02dc01a4
  40e648:	02dc02dc 	.word	0x02dc02dc
  40e64c:	02dc02dc 	.word	0x02dc02dc
  40e650:	02dc02dc 	.word	0x02dc02dc
  40e654:	02dc02dc 	.word	0x02dc02dc
  40e658:	01b202dc 	.word	0x01b202dc
  40e65c:	02dc02dc 	.word	0x02dc02dc
  40e660:	02dc02dc 	.word	0x02dc02dc
  40e664:	02dc02dc 	.word	0x02dc02dc
  40e668:	02dc02dc 	.word	0x02dc02dc
  40e66c:	02dc02dc 	.word	0x02dc02dc
  40e670:	02dc0197 	.word	0x02dc0197
  40e674:	02dc02dc 	.word	0x02dc02dc
  40e678:	02dc02dc 	.word	0x02dc02dc
  40e67c:	02dc019b 	.word	0x02dc019b
  40e680:	025302dc 	.word	0x025302dc
  40e684:	02dc02dc 	.word	0x02dc02dc
  40e688:	02dc02dc 	.word	0x02dc02dc
  40e68c:	02dc02dc 	.word	0x02dc02dc
  40e690:	02dc02dc 	.word	0x02dc02dc
  40e694:	02dc02dc 	.word	0x02dc02dc
  40e698:	021b025a 	.word	0x021b025a
  40e69c:	02dc02dc 	.word	0x02dc02dc
  40e6a0:	026e02dc 	.word	0x026e02dc
  40e6a4:	02dc021b 	.word	0x02dc021b
  40e6a8:	027302dc 	.word	0x027302dc
  40e6ac:	01f502dc 	.word	0x01f502dc
  40e6b0:	02090182 	.word	0x02090182
  40e6b4:	02dc02d7 	.word	0x02dc02d7
  40e6b8:	02dc029a 	.word	0x02dc029a
  40e6bc:	02dc00a7 	.word	0x02dc00a7
  40e6c0:	022e02dc 	.word	0x022e02dc
  40e6c4:	f10a 0a08 	add.w	sl, sl, #8
  40e6c8:	9b03      	ldr	r3, [sp, #12]
  40e6ca:	442b      	add	r3, r5
  40e6cc:	9303      	str	r3, [sp, #12]
  40e6ce:	e786      	b.n	40e5de <_vfiprintf_r+0xc2>
  40e6d0:	4659      	mov	r1, fp
  40e6d2:	9806      	ldr	r0, [sp, #24]
  40e6d4:	f000 fdac 	bl	40f230 <__swsetup_r>
  40e6d8:	bb18      	cbnz	r0, 40e722 <_vfiprintf_r+0x206>
  40e6da:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  40e6de:	f001 031a 	and.w	r3, r1, #26
  40e6e2:	2b0a      	cmp	r3, #10
  40e6e4:	f47f af4b 	bne.w	40e57e <_vfiprintf_r+0x62>
  40e6e8:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  40e6ec:	2b00      	cmp	r3, #0
  40e6ee:	f6ff af46 	blt.w	40e57e <_vfiprintf_r+0x62>
  40e6f2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40e6f6:	07db      	lsls	r3, r3, #31
  40e6f8:	d405      	bmi.n	40e706 <_vfiprintf_r+0x1ea>
  40e6fa:	058f      	lsls	r7, r1, #22
  40e6fc:	d403      	bmi.n	40e706 <_vfiprintf_r+0x1ea>
  40e6fe:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40e702:	f001 fac3 	bl	40fc8c <__retarget_lock_release_recursive>
  40e706:	462b      	mov	r3, r5
  40e708:	4642      	mov	r2, r8
  40e70a:	4659      	mov	r1, fp
  40e70c:	9806      	ldr	r0, [sp, #24]
  40e70e:	f000 fd4d 	bl	40f1ac <__sbprintf>
  40e712:	9003      	str	r0, [sp, #12]
  40e714:	9803      	ldr	r0, [sp, #12]
  40e716:	b02d      	add	sp, #180	; 0xb4
  40e718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40e71c:	f000 fef4 	bl	40f508 <__sinit>
  40e720:	e709      	b.n	40e536 <_vfiprintf_r+0x1a>
  40e722:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40e726:	07d9      	lsls	r1, r3, #31
  40e728:	d404      	bmi.n	40e734 <_vfiprintf_r+0x218>
  40e72a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  40e72e:	059a      	lsls	r2, r3, #22
  40e730:	f140 84aa 	bpl.w	40f088 <_vfiprintf_r+0xb6c>
  40e734:	f04f 33ff 	mov.w	r3, #4294967295
  40e738:	9303      	str	r3, [sp, #12]
  40e73a:	9803      	ldr	r0, [sp, #12]
  40e73c:	b02d      	add	sp, #180	; 0xb4
  40e73e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40e742:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40e746:	f001 fa9f 	bl	40fc88 <__retarget_lock_acquire_recursive>
  40e74a:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  40e74e:	b281      	uxth	r1, r0
  40e750:	e6fb      	b.n	40e54a <_vfiprintf_r+0x2e>
  40e752:	4276      	negs	r6, r6
  40e754:	9207      	str	r2, [sp, #28]
  40e756:	f043 0304 	orr.w	r3, r3, #4
  40e75a:	f898 2000 	ldrb.w	r2, [r8]
  40e75e:	e74f      	b.n	40e600 <_vfiprintf_r+0xe4>
  40e760:	9608      	str	r6, [sp, #32]
  40e762:	069e      	lsls	r6, r3, #26
  40e764:	f100 8450 	bmi.w	40f008 <_vfiprintf_r+0xaec>
  40e768:	9907      	ldr	r1, [sp, #28]
  40e76a:	06dd      	lsls	r5, r3, #27
  40e76c:	460a      	mov	r2, r1
  40e76e:	f100 83ef 	bmi.w	40ef50 <_vfiprintf_r+0xa34>
  40e772:	0658      	lsls	r0, r3, #25
  40e774:	f140 83ec 	bpl.w	40ef50 <_vfiprintf_r+0xa34>
  40e778:	880e      	ldrh	r6, [r1, #0]
  40e77a:	3104      	adds	r1, #4
  40e77c:	2700      	movs	r7, #0
  40e77e:	2201      	movs	r2, #1
  40e780:	9107      	str	r1, [sp, #28]
  40e782:	f04f 0100 	mov.w	r1, #0
  40e786:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  40e78a:	2500      	movs	r5, #0
  40e78c:	1c61      	adds	r1, r4, #1
  40e78e:	f000 8116 	beq.w	40e9be <_vfiprintf_r+0x4a2>
  40e792:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  40e796:	9102      	str	r1, [sp, #8]
  40e798:	ea56 0107 	orrs.w	r1, r6, r7
  40e79c:	f040 8114 	bne.w	40e9c8 <_vfiprintf_r+0x4ac>
  40e7a0:	2c00      	cmp	r4, #0
  40e7a2:	f040 835c 	bne.w	40ee5e <_vfiprintf_r+0x942>
  40e7a6:	2a00      	cmp	r2, #0
  40e7a8:	f040 83b7 	bne.w	40ef1a <_vfiprintf_r+0x9fe>
  40e7ac:	f013 0301 	ands.w	r3, r3, #1
  40e7b0:	9305      	str	r3, [sp, #20]
  40e7b2:	f000 8457 	beq.w	40f064 <_vfiprintf_r+0xb48>
  40e7b6:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  40e7ba:	2330      	movs	r3, #48	; 0x30
  40e7bc:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  40e7c0:	9b05      	ldr	r3, [sp, #20]
  40e7c2:	42a3      	cmp	r3, r4
  40e7c4:	bfb8      	it	lt
  40e7c6:	4623      	movlt	r3, r4
  40e7c8:	9301      	str	r3, [sp, #4]
  40e7ca:	b10d      	cbz	r5, 40e7d0 <_vfiprintf_r+0x2b4>
  40e7cc:	3301      	adds	r3, #1
  40e7ce:	9301      	str	r3, [sp, #4]
  40e7d0:	9b02      	ldr	r3, [sp, #8]
  40e7d2:	f013 0302 	ands.w	r3, r3, #2
  40e7d6:	9309      	str	r3, [sp, #36]	; 0x24
  40e7d8:	d002      	beq.n	40e7e0 <_vfiprintf_r+0x2c4>
  40e7da:	9b01      	ldr	r3, [sp, #4]
  40e7dc:	3302      	adds	r3, #2
  40e7de:	9301      	str	r3, [sp, #4]
  40e7e0:	9b02      	ldr	r3, [sp, #8]
  40e7e2:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  40e7e6:	930a      	str	r3, [sp, #40]	; 0x28
  40e7e8:	f040 8217 	bne.w	40ec1a <_vfiprintf_r+0x6fe>
  40e7ec:	9b08      	ldr	r3, [sp, #32]
  40e7ee:	9a01      	ldr	r2, [sp, #4]
  40e7f0:	1a9d      	subs	r5, r3, r2
  40e7f2:	2d00      	cmp	r5, #0
  40e7f4:	f340 8211 	ble.w	40ec1a <_vfiprintf_r+0x6fe>
  40e7f8:	2d10      	cmp	r5, #16
  40e7fa:	f340 8490 	ble.w	40f11e <_vfiprintf_r+0xc02>
  40e7fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40e800:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40e802:	4ec4      	ldr	r6, [pc, #784]	; (40eb14 <_vfiprintf_r+0x5f8>)
  40e804:	46d6      	mov	lr, sl
  40e806:	2710      	movs	r7, #16
  40e808:	46a2      	mov	sl, r4
  40e80a:	4619      	mov	r1, r3
  40e80c:	9c06      	ldr	r4, [sp, #24]
  40e80e:	e007      	b.n	40e820 <_vfiprintf_r+0x304>
  40e810:	f101 0c02 	add.w	ip, r1, #2
  40e814:	f10e 0e08 	add.w	lr, lr, #8
  40e818:	4601      	mov	r1, r0
  40e81a:	3d10      	subs	r5, #16
  40e81c:	2d10      	cmp	r5, #16
  40e81e:	dd11      	ble.n	40e844 <_vfiprintf_r+0x328>
  40e820:	1c48      	adds	r0, r1, #1
  40e822:	3210      	adds	r2, #16
  40e824:	2807      	cmp	r0, #7
  40e826:	9211      	str	r2, [sp, #68]	; 0x44
  40e828:	e88e 00c0 	stmia.w	lr, {r6, r7}
  40e82c:	9010      	str	r0, [sp, #64]	; 0x40
  40e82e:	ddef      	ble.n	40e810 <_vfiprintf_r+0x2f4>
  40e830:	2a00      	cmp	r2, #0
  40e832:	f040 81e4 	bne.w	40ebfe <_vfiprintf_r+0x6e2>
  40e836:	3d10      	subs	r5, #16
  40e838:	2d10      	cmp	r5, #16
  40e83a:	4611      	mov	r1, r2
  40e83c:	f04f 0c01 	mov.w	ip, #1
  40e840:	46ce      	mov	lr, r9
  40e842:	dced      	bgt.n	40e820 <_vfiprintf_r+0x304>
  40e844:	4654      	mov	r4, sl
  40e846:	4661      	mov	r1, ip
  40e848:	46f2      	mov	sl, lr
  40e84a:	442a      	add	r2, r5
  40e84c:	2907      	cmp	r1, #7
  40e84e:	9211      	str	r2, [sp, #68]	; 0x44
  40e850:	f8ca 6000 	str.w	r6, [sl]
  40e854:	f8ca 5004 	str.w	r5, [sl, #4]
  40e858:	9110      	str	r1, [sp, #64]	; 0x40
  40e85a:	f300 82ec 	bgt.w	40ee36 <_vfiprintf_r+0x91a>
  40e85e:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40e862:	f10a 0a08 	add.w	sl, sl, #8
  40e866:	1c48      	adds	r0, r1, #1
  40e868:	2d00      	cmp	r5, #0
  40e86a:	f040 81de 	bne.w	40ec2a <_vfiprintf_r+0x70e>
  40e86e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40e870:	2b00      	cmp	r3, #0
  40e872:	f000 81f8 	beq.w	40ec66 <_vfiprintf_r+0x74a>
  40e876:	3202      	adds	r2, #2
  40e878:	a90e      	add	r1, sp, #56	; 0x38
  40e87a:	2302      	movs	r3, #2
  40e87c:	2807      	cmp	r0, #7
  40e87e:	9211      	str	r2, [sp, #68]	; 0x44
  40e880:	9010      	str	r0, [sp, #64]	; 0x40
  40e882:	e88a 000a 	stmia.w	sl, {r1, r3}
  40e886:	f340 81ea 	ble.w	40ec5e <_vfiprintf_r+0x742>
  40e88a:	2a00      	cmp	r2, #0
  40e88c:	f040 838c 	bne.w	40efa8 <_vfiprintf_r+0xa8c>
  40e890:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40e892:	2b80      	cmp	r3, #128	; 0x80
  40e894:	f04f 0001 	mov.w	r0, #1
  40e898:	4611      	mov	r1, r2
  40e89a:	46ca      	mov	sl, r9
  40e89c:	f040 81e7 	bne.w	40ec6e <_vfiprintf_r+0x752>
  40e8a0:	9b08      	ldr	r3, [sp, #32]
  40e8a2:	9d01      	ldr	r5, [sp, #4]
  40e8a4:	1b5e      	subs	r6, r3, r5
  40e8a6:	2e00      	cmp	r6, #0
  40e8a8:	f340 81e1 	ble.w	40ec6e <_vfiprintf_r+0x752>
  40e8ac:	2e10      	cmp	r6, #16
  40e8ae:	4d9a      	ldr	r5, [pc, #616]	; (40eb18 <_vfiprintf_r+0x5fc>)
  40e8b0:	f340 8450 	ble.w	40f154 <_vfiprintf_r+0xc38>
  40e8b4:	46d4      	mov	ip, sl
  40e8b6:	2710      	movs	r7, #16
  40e8b8:	46a2      	mov	sl, r4
  40e8ba:	9c06      	ldr	r4, [sp, #24]
  40e8bc:	e007      	b.n	40e8ce <_vfiprintf_r+0x3b2>
  40e8be:	f101 0e02 	add.w	lr, r1, #2
  40e8c2:	f10c 0c08 	add.w	ip, ip, #8
  40e8c6:	4601      	mov	r1, r0
  40e8c8:	3e10      	subs	r6, #16
  40e8ca:	2e10      	cmp	r6, #16
  40e8cc:	dd11      	ble.n	40e8f2 <_vfiprintf_r+0x3d6>
  40e8ce:	1c48      	adds	r0, r1, #1
  40e8d0:	3210      	adds	r2, #16
  40e8d2:	2807      	cmp	r0, #7
  40e8d4:	9211      	str	r2, [sp, #68]	; 0x44
  40e8d6:	e88c 00a0 	stmia.w	ip, {r5, r7}
  40e8da:	9010      	str	r0, [sp, #64]	; 0x40
  40e8dc:	ddef      	ble.n	40e8be <_vfiprintf_r+0x3a2>
  40e8de:	2a00      	cmp	r2, #0
  40e8e0:	f040 829d 	bne.w	40ee1e <_vfiprintf_r+0x902>
  40e8e4:	3e10      	subs	r6, #16
  40e8e6:	2e10      	cmp	r6, #16
  40e8e8:	f04f 0e01 	mov.w	lr, #1
  40e8ec:	4611      	mov	r1, r2
  40e8ee:	46cc      	mov	ip, r9
  40e8f0:	dced      	bgt.n	40e8ce <_vfiprintf_r+0x3b2>
  40e8f2:	4654      	mov	r4, sl
  40e8f4:	46e2      	mov	sl, ip
  40e8f6:	4432      	add	r2, r6
  40e8f8:	f1be 0f07 	cmp.w	lr, #7
  40e8fc:	9211      	str	r2, [sp, #68]	; 0x44
  40e8fe:	e88a 0060 	stmia.w	sl, {r5, r6}
  40e902:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  40e906:	f300 8369 	bgt.w	40efdc <_vfiprintf_r+0xac0>
  40e90a:	f10a 0a08 	add.w	sl, sl, #8
  40e90e:	f10e 0001 	add.w	r0, lr, #1
  40e912:	4671      	mov	r1, lr
  40e914:	e1ab      	b.n	40ec6e <_vfiprintf_r+0x752>
  40e916:	9608      	str	r6, [sp, #32]
  40e918:	f013 0220 	ands.w	r2, r3, #32
  40e91c:	f040 838c 	bne.w	40f038 <_vfiprintf_r+0xb1c>
  40e920:	f013 0110 	ands.w	r1, r3, #16
  40e924:	f040 831a 	bne.w	40ef5c <_vfiprintf_r+0xa40>
  40e928:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  40e92c:	f000 8316 	beq.w	40ef5c <_vfiprintf_r+0xa40>
  40e930:	9807      	ldr	r0, [sp, #28]
  40e932:	460a      	mov	r2, r1
  40e934:	4601      	mov	r1, r0
  40e936:	3104      	adds	r1, #4
  40e938:	8806      	ldrh	r6, [r0, #0]
  40e93a:	9107      	str	r1, [sp, #28]
  40e93c:	2700      	movs	r7, #0
  40e93e:	e720      	b.n	40e782 <_vfiprintf_r+0x266>
  40e940:	9608      	str	r6, [sp, #32]
  40e942:	f043 0310 	orr.w	r3, r3, #16
  40e946:	e7e7      	b.n	40e918 <_vfiprintf_r+0x3fc>
  40e948:	9608      	str	r6, [sp, #32]
  40e94a:	f043 0310 	orr.w	r3, r3, #16
  40e94e:	e708      	b.n	40e762 <_vfiprintf_r+0x246>
  40e950:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40e954:	f898 2000 	ldrb.w	r2, [r8]
  40e958:	e652      	b.n	40e600 <_vfiprintf_r+0xe4>
  40e95a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40e95e:	2600      	movs	r6, #0
  40e960:	f818 2b01 	ldrb.w	r2, [r8], #1
  40e964:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  40e968:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  40e96c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40e970:	2909      	cmp	r1, #9
  40e972:	d9f5      	bls.n	40e960 <_vfiprintf_r+0x444>
  40e974:	e646      	b.n	40e604 <_vfiprintf_r+0xe8>
  40e976:	9608      	str	r6, [sp, #32]
  40e978:	2800      	cmp	r0, #0
  40e97a:	f040 8408 	bne.w	40f18e <_vfiprintf_r+0xc72>
  40e97e:	f043 0310 	orr.w	r3, r3, #16
  40e982:	069e      	lsls	r6, r3, #26
  40e984:	f100 834c 	bmi.w	40f020 <_vfiprintf_r+0xb04>
  40e988:	06dd      	lsls	r5, r3, #27
  40e98a:	f100 82f3 	bmi.w	40ef74 <_vfiprintf_r+0xa58>
  40e98e:	0658      	lsls	r0, r3, #25
  40e990:	f140 82f0 	bpl.w	40ef74 <_vfiprintf_r+0xa58>
  40e994:	9d07      	ldr	r5, [sp, #28]
  40e996:	f9b5 6000 	ldrsh.w	r6, [r5]
  40e99a:	462a      	mov	r2, r5
  40e99c:	17f7      	asrs	r7, r6, #31
  40e99e:	3204      	adds	r2, #4
  40e9a0:	4630      	mov	r0, r6
  40e9a2:	4639      	mov	r1, r7
  40e9a4:	9207      	str	r2, [sp, #28]
  40e9a6:	2800      	cmp	r0, #0
  40e9a8:	f171 0200 	sbcs.w	r2, r1, #0
  40e9ac:	f2c0 835d 	blt.w	40f06a <_vfiprintf_r+0xb4e>
  40e9b0:	1c61      	adds	r1, r4, #1
  40e9b2:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40e9b6:	f04f 0201 	mov.w	r2, #1
  40e9ba:	f47f aeea 	bne.w	40e792 <_vfiprintf_r+0x276>
  40e9be:	ea56 0107 	orrs.w	r1, r6, r7
  40e9c2:	f000 824d 	beq.w	40ee60 <_vfiprintf_r+0x944>
  40e9c6:	9302      	str	r3, [sp, #8]
  40e9c8:	2a01      	cmp	r2, #1
  40e9ca:	f000 828c 	beq.w	40eee6 <_vfiprintf_r+0x9ca>
  40e9ce:	2a02      	cmp	r2, #2
  40e9d0:	f040 825c 	bne.w	40ee8c <_vfiprintf_r+0x970>
  40e9d4:	980b      	ldr	r0, [sp, #44]	; 0x2c
  40e9d6:	46cb      	mov	fp, r9
  40e9d8:	0933      	lsrs	r3, r6, #4
  40e9da:	f006 010f 	and.w	r1, r6, #15
  40e9de:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  40e9e2:	093a      	lsrs	r2, r7, #4
  40e9e4:	461e      	mov	r6, r3
  40e9e6:	4617      	mov	r7, r2
  40e9e8:	5c43      	ldrb	r3, [r0, r1]
  40e9ea:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  40e9ee:	ea56 0307 	orrs.w	r3, r6, r7
  40e9f2:	d1f1      	bne.n	40e9d8 <_vfiprintf_r+0x4bc>
  40e9f4:	eba9 030b 	sub.w	r3, r9, fp
  40e9f8:	9305      	str	r3, [sp, #20]
  40e9fa:	e6e1      	b.n	40e7c0 <_vfiprintf_r+0x2a4>
  40e9fc:	2800      	cmp	r0, #0
  40e9fe:	f040 83c0 	bne.w	40f182 <_vfiprintf_r+0xc66>
  40ea02:	0699      	lsls	r1, r3, #26
  40ea04:	f100 8367 	bmi.w	40f0d6 <_vfiprintf_r+0xbba>
  40ea08:	06da      	lsls	r2, r3, #27
  40ea0a:	f100 80f1 	bmi.w	40ebf0 <_vfiprintf_r+0x6d4>
  40ea0e:	065b      	lsls	r3, r3, #25
  40ea10:	f140 80ee 	bpl.w	40ebf0 <_vfiprintf_r+0x6d4>
  40ea14:	9a07      	ldr	r2, [sp, #28]
  40ea16:	6813      	ldr	r3, [r2, #0]
  40ea18:	3204      	adds	r2, #4
  40ea1a:	9207      	str	r2, [sp, #28]
  40ea1c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  40ea20:	801a      	strh	r2, [r3, #0]
  40ea22:	e5b8      	b.n	40e596 <_vfiprintf_r+0x7a>
  40ea24:	9807      	ldr	r0, [sp, #28]
  40ea26:	4a3d      	ldr	r2, [pc, #244]	; (40eb1c <_vfiprintf_r+0x600>)
  40ea28:	9608      	str	r6, [sp, #32]
  40ea2a:	920b      	str	r2, [sp, #44]	; 0x2c
  40ea2c:	6806      	ldr	r6, [r0, #0]
  40ea2e:	2278      	movs	r2, #120	; 0x78
  40ea30:	2130      	movs	r1, #48	; 0x30
  40ea32:	3004      	adds	r0, #4
  40ea34:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  40ea38:	f043 0302 	orr.w	r3, r3, #2
  40ea3c:	9007      	str	r0, [sp, #28]
  40ea3e:	2700      	movs	r7, #0
  40ea40:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  40ea44:	2202      	movs	r2, #2
  40ea46:	e69c      	b.n	40e782 <_vfiprintf_r+0x266>
  40ea48:	9608      	str	r6, [sp, #32]
  40ea4a:	2800      	cmp	r0, #0
  40ea4c:	d099      	beq.n	40e982 <_vfiprintf_r+0x466>
  40ea4e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40ea52:	e796      	b.n	40e982 <_vfiprintf_r+0x466>
  40ea54:	f898 2000 	ldrb.w	r2, [r8]
  40ea58:	2d00      	cmp	r5, #0
  40ea5a:	f47f add1 	bne.w	40e600 <_vfiprintf_r+0xe4>
  40ea5e:	2001      	movs	r0, #1
  40ea60:	2520      	movs	r5, #32
  40ea62:	e5cd      	b.n	40e600 <_vfiprintf_r+0xe4>
  40ea64:	f043 0301 	orr.w	r3, r3, #1
  40ea68:	f898 2000 	ldrb.w	r2, [r8]
  40ea6c:	e5c8      	b.n	40e600 <_vfiprintf_r+0xe4>
  40ea6e:	9608      	str	r6, [sp, #32]
  40ea70:	2800      	cmp	r0, #0
  40ea72:	f040 8393 	bne.w	40f19c <_vfiprintf_r+0xc80>
  40ea76:	4929      	ldr	r1, [pc, #164]	; (40eb1c <_vfiprintf_r+0x600>)
  40ea78:	910b      	str	r1, [sp, #44]	; 0x2c
  40ea7a:	069f      	lsls	r7, r3, #26
  40ea7c:	f100 82e8 	bmi.w	40f050 <_vfiprintf_r+0xb34>
  40ea80:	9807      	ldr	r0, [sp, #28]
  40ea82:	06de      	lsls	r6, r3, #27
  40ea84:	4601      	mov	r1, r0
  40ea86:	f100 8270 	bmi.w	40ef6a <_vfiprintf_r+0xa4e>
  40ea8a:	065d      	lsls	r5, r3, #25
  40ea8c:	f140 826d 	bpl.w	40ef6a <_vfiprintf_r+0xa4e>
  40ea90:	3104      	adds	r1, #4
  40ea92:	8806      	ldrh	r6, [r0, #0]
  40ea94:	9107      	str	r1, [sp, #28]
  40ea96:	2700      	movs	r7, #0
  40ea98:	07d8      	lsls	r0, r3, #31
  40ea9a:	f140 8222 	bpl.w	40eee2 <_vfiprintf_r+0x9c6>
  40ea9e:	ea56 0107 	orrs.w	r1, r6, r7
  40eaa2:	f000 821e 	beq.w	40eee2 <_vfiprintf_r+0x9c6>
  40eaa6:	2130      	movs	r1, #48	; 0x30
  40eaa8:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  40eaac:	f043 0302 	orr.w	r3, r3, #2
  40eab0:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  40eab4:	2202      	movs	r2, #2
  40eab6:	e664      	b.n	40e782 <_vfiprintf_r+0x266>
  40eab8:	9608      	str	r6, [sp, #32]
  40eaba:	2800      	cmp	r0, #0
  40eabc:	f040 836b 	bne.w	40f196 <_vfiprintf_r+0xc7a>
  40eac0:	4917      	ldr	r1, [pc, #92]	; (40eb20 <_vfiprintf_r+0x604>)
  40eac2:	910b      	str	r1, [sp, #44]	; 0x2c
  40eac4:	e7d9      	b.n	40ea7a <_vfiprintf_r+0x55e>
  40eac6:	9907      	ldr	r1, [sp, #28]
  40eac8:	9608      	str	r6, [sp, #32]
  40eaca:	680a      	ldr	r2, [r1, #0]
  40eacc:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  40ead0:	f04f 0000 	mov.w	r0, #0
  40ead4:	460a      	mov	r2, r1
  40ead6:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  40eada:	3204      	adds	r2, #4
  40eadc:	2001      	movs	r0, #1
  40eade:	9001      	str	r0, [sp, #4]
  40eae0:	9207      	str	r2, [sp, #28]
  40eae2:	9005      	str	r0, [sp, #20]
  40eae4:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  40eae8:	9302      	str	r3, [sp, #8]
  40eaea:	2400      	movs	r4, #0
  40eaec:	e670      	b.n	40e7d0 <_vfiprintf_r+0x2b4>
  40eaee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40eaf2:	f898 2000 	ldrb.w	r2, [r8]
  40eaf6:	e583      	b.n	40e600 <_vfiprintf_r+0xe4>
  40eaf8:	f898 2000 	ldrb.w	r2, [r8]
  40eafc:	2a6c      	cmp	r2, #108	; 0x6c
  40eafe:	bf03      	ittte	eq
  40eb00:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  40eb04:	f043 0320 	orreq.w	r3, r3, #32
  40eb08:	f108 0801 	addeq.w	r8, r8, #1
  40eb0c:	f043 0310 	orrne.w	r3, r3, #16
  40eb10:	e576      	b.n	40e600 <_vfiprintf_r+0xe4>
  40eb12:	bf00      	nop
  40eb14:	00411958 	.word	0x00411958
  40eb18:	00411968 	.word	0x00411968
  40eb1c:	0041193c 	.word	0x0041193c
  40eb20:	00411928 	.word	0x00411928
  40eb24:	9907      	ldr	r1, [sp, #28]
  40eb26:	680e      	ldr	r6, [r1, #0]
  40eb28:	460a      	mov	r2, r1
  40eb2a:	2e00      	cmp	r6, #0
  40eb2c:	f102 0204 	add.w	r2, r2, #4
  40eb30:	f6ff ae0f 	blt.w	40e752 <_vfiprintf_r+0x236>
  40eb34:	9207      	str	r2, [sp, #28]
  40eb36:	f898 2000 	ldrb.w	r2, [r8]
  40eb3a:	e561      	b.n	40e600 <_vfiprintf_r+0xe4>
  40eb3c:	f898 2000 	ldrb.w	r2, [r8]
  40eb40:	2001      	movs	r0, #1
  40eb42:	252b      	movs	r5, #43	; 0x2b
  40eb44:	e55c      	b.n	40e600 <_vfiprintf_r+0xe4>
  40eb46:	9907      	ldr	r1, [sp, #28]
  40eb48:	9608      	str	r6, [sp, #32]
  40eb4a:	f8d1 b000 	ldr.w	fp, [r1]
  40eb4e:	f04f 0200 	mov.w	r2, #0
  40eb52:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  40eb56:	1d0e      	adds	r6, r1, #4
  40eb58:	f1bb 0f00 	cmp.w	fp, #0
  40eb5c:	f000 82e5 	beq.w	40f12a <_vfiprintf_r+0xc0e>
  40eb60:	1c67      	adds	r7, r4, #1
  40eb62:	f000 82c4 	beq.w	40f0ee <_vfiprintf_r+0xbd2>
  40eb66:	4622      	mov	r2, r4
  40eb68:	2100      	movs	r1, #0
  40eb6a:	4658      	mov	r0, fp
  40eb6c:	9301      	str	r3, [sp, #4]
  40eb6e:	f001 fbd7 	bl	410320 <memchr>
  40eb72:	9b01      	ldr	r3, [sp, #4]
  40eb74:	2800      	cmp	r0, #0
  40eb76:	f000 82e5 	beq.w	40f144 <_vfiprintf_r+0xc28>
  40eb7a:	eba0 020b 	sub.w	r2, r0, fp
  40eb7e:	9205      	str	r2, [sp, #20]
  40eb80:	9607      	str	r6, [sp, #28]
  40eb82:	9302      	str	r3, [sp, #8]
  40eb84:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40eb88:	2400      	movs	r4, #0
  40eb8a:	e619      	b.n	40e7c0 <_vfiprintf_r+0x2a4>
  40eb8c:	f898 2000 	ldrb.w	r2, [r8]
  40eb90:	2a2a      	cmp	r2, #42	; 0x2a
  40eb92:	f108 0701 	add.w	r7, r8, #1
  40eb96:	f000 82e9 	beq.w	40f16c <_vfiprintf_r+0xc50>
  40eb9a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40eb9e:	2909      	cmp	r1, #9
  40eba0:	46b8      	mov	r8, r7
  40eba2:	f04f 0400 	mov.w	r4, #0
  40eba6:	f63f ad2d 	bhi.w	40e604 <_vfiprintf_r+0xe8>
  40ebaa:	f818 2b01 	ldrb.w	r2, [r8], #1
  40ebae:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  40ebb2:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  40ebb6:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40ebba:	2909      	cmp	r1, #9
  40ebbc:	d9f5      	bls.n	40ebaa <_vfiprintf_r+0x68e>
  40ebbe:	e521      	b.n	40e604 <_vfiprintf_r+0xe8>
  40ebc0:	f043 0320 	orr.w	r3, r3, #32
  40ebc4:	f898 2000 	ldrb.w	r2, [r8]
  40ebc8:	e51a      	b.n	40e600 <_vfiprintf_r+0xe4>
  40ebca:	9608      	str	r6, [sp, #32]
  40ebcc:	2800      	cmp	r0, #0
  40ebce:	f040 82db 	bne.w	40f188 <_vfiprintf_r+0xc6c>
  40ebd2:	2a00      	cmp	r2, #0
  40ebd4:	f000 80e7 	beq.w	40eda6 <_vfiprintf_r+0x88a>
  40ebd8:	2101      	movs	r1, #1
  40ebda:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  40ebde:	f04f 0200 	mov.w	r2, #0
  40ebe2:	9101      	str	r1, [sp, #4]
  40ebe4:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  40ebe8:	9105      	str	r1, [sp, #20]
  40ebea:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  40ebee:	e77b      	b.n	40eae8 <_vfiprintf_r+0x5cc>
  40ebf0:	9a07      	ldr	r2, [sp, #28]
  40ebf2:	6813      	ldr	r3, [r2, #0]
  40ebf4:	3204      	adds	r2, #4
  40ebf6:	9207      	str	r2, [sp, #28]
  40ebf8:	9a03      	ldr	r2, [sp, #12]
  40ebfa:	601a      	str	r2, [r3, #0]
  40ebfc:	e4cb      	b.n	40e596 <_vfiprintf_r+0x7a>
  40ebfe:	aa0f      	add	r2, sp, #60	; 0x3c
  40ec00:	9904      	ldr	r1, [sp, #16]
  40ec02:	4620      	mov	r0, r4
  40ec04:	f7ff fc4a 	bl	40e49c <__sprint_r.part.0>
  40ec08:	2800      	cmp	r0, #0
  40ec0a:	f040 8139 	bne.w	40ee80 <_vfiprintf_r+0x964>
  40ec0e:	9910      	ldr	r1, [sp, #64]	; 0x40
  40ec10:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40ec12:	f101 0c01 	add.w	ip, r1, #1
  40ec16:	46ce      	mov	lr, r9
  40ec18:	e5ff      	b.n	40e81a <_vfiprintf_r+0x2fe>
  40ec1a:	9910      	ldr	r1, [sp, #64]	; 0x40
  40ec1c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40ec1e:	1c48      	adds	r0, r1, #1
  40ec20:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40ec24:	2d00      	cmp	r5, #0
  40ec26:	f43f ae22 	beq.w	40e86e <_vfiprintf_r+0x352>
  40ec2a:	3201      	adds	r2, #1
  40ec2c:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  40ec30:	2101      	movs	r1, #1
  40ec32:	2807      	cmp	r0, #7
  40ec34:	9211      	str	r2, [sp, #68]	; 0x44
  40ec36:	9010      	str	r0, [sp, #64]	; 0x40
  40ec38:	f8ca 5000 	str.w	r5, [sl]
  40ec3c:	f8ca 1004 	str.w	r1, [sl, #4]
  40ec40:	f340 8108 	ble.w	40ee54 <_vfiprintf_r+0x938>
  40ec44:	2a00      	cmp	r2, #0
  40ec46:	f040 81bc 	bne.w	40efc2 <_vfiprintf_r+0xaa6>
  40ec4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40ec4c:	2b00      	cmp	r3, #0
  40ec4e:	f43f ae1f 	beq.w	40e890 <_vfiprintf_r+0x374>
  40ec52:	ab0e      	add	r3, sp, #56	; 0x38
  40ec54:	2202      	movs	r2, #2
  40ec56:	4608      	mov	r0, r1
  40ec58:	931c      	str	r3, [sp, #112]	; 0x70
  40ec5a:	921d      	str	r2, [sp, #116]	; 0x74
  40ec5c:	46ca      	mov	sl, r9
  40ec5e:	4601      	mov	r1, r0
  40ec60:	f10a 0a08 	add.w	sl, sl, #8
  40ec64:	3001      	adds	r0, #1
  40ec66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40ec68:	2b80      	cmp	r3, #128	; 0x80
  40ec6a:	f43f ae19 	beq.w	40e8a0 <_vfiprintf_r+0x384>
  40ec6e:	9b05      	ldr	r3, [sp, #20]
  40ec70:	1ae4      	subs	r4, r4, r3
  40ec72:	2c00      	cmp	r4, #0
  40ec74:	dd2e      	ble.n	40ecd4 <_vfiprintf_r+0x7b8>
  40ec76:	2c10      	cmp	r4, #16
  40ec78:	4db3      	ldr	r5, [pc, #716]	; (40ef48 <_vfiprintf_r+0xa2c>)
  40ec7a:	dd1e      	ble.n	40ecba <_vfiprintf_r+0x79e>
  40ec7c:	46d6      	mov	lr, sl
  40ec7e:	2610      	movs	r6, #16
  40ec80:	9f06      	ldr	r7, [sp, #24]
  40ec82:	f8dd a010 	ldr.w	sl, [sp, #16]
  40ec86:	e006      	b.n	40ec96 <_vfiprintf_r+0x77a>
  40ec88:	1c88      	adds	r0, r1, #2
  40ec8a:	f10e 0e08 	add.w	lr, lr, #8
  40ec8e:	4619      	mov	r1, r3
  40ec90:	3c10      	subs	r4, #16
  40ec92:	2c10      	cmp	r4, #16
  40ec94:	dd10      	ble.n	40ecb8 <_vfiprintf_r+0x79c>
  40ec96:	1c4b      	adds	r3, r1, #1
  40ec98:	3210      	adds	r2, #16
  40ec9a:	2b07      	cmp	r3, #7
  40ec9c:	9211      	str	r2, [sp, #68]	; 0x44
  40ec9e:	e88e 0060 	stmia.w	lr, {r5, r6}
  40eca2:	9310      	str	r3, [sp, #64]	; 0x40
  40eca4:	ddf0      	ble.n	40ec88 <_vfiprintf_r+0x76c>
  40eca6:	2a00      	cmp	r2, #0
  40eca8:	d165      	bne.n	40ed76 <_vfiprintf_r+0x85a>
  40ecaa:	3c10      	subs	r4, #16
  40ecac:	2c10      	cmp	r4, #16
  40ecae:	f04f 0001 	mov.w	r0, #1
  40ecb2:	4611      	mov	r1, r2
  40ecb4:	46ce      	mov	lr, r9
  40ecb6:	dcee      	bgt.n	40ec96 <_vfiprintf_r+0x77a>
  40ecb8:	46f2      	mov	sl, lr
  40ecba:	4422      	add	r2, r4
  40ecbc:	2807      	cmp	r0, #7
  40ecbe:	9211      	str	r2, [sp, #68]	; 0x44
  40ecc0:	f8ca 5000 	str.w	r5, [sl]
  40ecc4:	f8ca 4004 	str.w	r4, [sl, #4]
  40ecc8:	9010      	str	r0, [sp, #64]	; 0x40
  40ecca:	f300 8085 	bgt.w	40edd8 <_vfiprintf_r+0x8bc>
  40ecce:	f10a 0a08 	add.w	sl, sl, #8
  40ecd2:	3001      	adds	r0, #1
  40ecd4:	9905      	ldr	r1, [sp, #20]
  40ecd6:	f8ca b000 	str.w	fp, [sl]
  40ecda:	440a      	add	r2, r1
  40ecdc:	2807      	cmp	r0, #7
  40ecde:	9211      	str	r2, [sp, #68]	; 0x44
  40ece0:	f8ca 1004 	str.w	r1, [sl, #4]
  40ece4:	9010      	str	r0, [sp, #64]	; 0x40
  40ece6:	f340 8082 	ble.w	40edee <_vfiprintf_r+0x8d2>
  40ecea:	2a00      	cmp	r2, #0
  40ecec:	f040 8118 	bne.w	40ef20 <_vfiprintf_r+0xa04>
  40ecf0:	9b02      	ldr	r3, [sp, #8]
  40ecf2:	9210      	str	r2, [sp, #64]	; 0x40
  40ecf4:	0758      	lsls	r0, r3, #29
  40ecf6:	d535      	bpl.n	40ed64 <_vfiprintf_r+0x848>
  40ecf8:	9b08      	ldr	r3, [sp, #32]
  40ecfa:	9901      	ldr	r1, [sp, #4]
  40ecfc:	1a5c      	subs	r4, r3, r1
  40ecfe:	2c00      	cmp	r4, #0
  40ed00:	f340 80e7 	ble.w	40eed2 <_vfiprintf_r+0x9b6>
  40ed04:	46ca      	mov	sl, r9
  40ed06:	2c10      	cmp	r4, #16
  40ed08:	f340 8218 	ble.w	40f13c <_vfiprintf_r+0xc20>
  40ed0c:	9910      	ldr	r1, [sp, #64]	; 0x40
  40ed0e:	4e8f      	ldr	r6, [pc, #572]	; (40ef4c <_vfiprintf_r+0xa30>)
  40ed10:	9f06      	ldr	r7, [sp, #24]
  40ed12:	f8dd b010 	ldr.w	fp, [sp, #16]
  40ed16:	2510      	movs	r5, #16
  40ed18:	e006      	b.n	40ed28 <_vfiprintf_r+0x80c>
  40ed1a:	1c88      	adds	r0, r1, #2
  40ed1c:	f10a 0a08 	add.w	sl, sl, #8
  40ed20:	4619      	mov	r1, r3
  40ed22:	3c10      	subs	r4, #16
  40ed24:	2c10      	cmp	r4, #16
  40ed26:	dd11      	ble.n	40ed4c <_vfiprintf_r+0x830>
  40ed28:	1c4b      	adds	r3, r1, #1
  40ed2a:	3210      	adds	r2, #16
  40ed2c:	2b07      	cmp	r3, #7
  40ed2e:	9211      	str	r2, [sp, #68]	; 0x44
  40ed30:	f8ca 6000 	str.w	r6, [sl]
  40ed34:	f8ca 5004 	str.w	r5, [sl, #4]
  40ed38:	9310      	str	r3, [sp, #64]	; 0x40
  40ed3a:	ddee      	ble.n	40ed1a <_vfiprintf_r+0x7fe>
  40ed3c:	bb42      	cbnz	r2, 40ed90 <_vfiprintf_r+0x874>
  40ed3e:	3c10      	subs	r4, #16
  40ed40:	2c10      	cmp	r4, #16
  40ed42:	f04f 0001 	mov.w	r0, #1
  40ed46:	4611      	mov	r1, r2
  40ed48:	46ca      	mov	sl, r9
  40ed4a:	dced      	bgt.n	40ed28 <_vfiprintf_r+0x80c>
  40ed4c:	4422      	add	r2, r4
  40ed4e:	2807      	cmp	r0, #7
  40ed50:	9211      	str	r2, [sp, #68]	; 0x44
  40ed52:	f8ca 6000 	str.w	r6, [sl]
  40ed56:	f8ca 4004 	str.w	r4, [sl, #4]
  40ed5a:	9010      	str	r0, [sp, #64]	; 0x40
  40ed5c:	dd51      	ble.n	40ee02 <_vfiprintf_r+0x8e6>
  40ed5e:	2a00      	cmp	r2, #0
  40ed60:	f040 819b 	bne.w	40f09a <_vfiprintf_r+0xb7e>
  40ed64:	9b03      	ldr	r3, [sp, #12]
  40ed66:	9a08      	ldr	r2, [sp, #32]
  40ed68:	9901      	ldr	r1, [sp, #4]
  40ed6a:	428a      	cmp	r2, r1
  40ed6c:	bfac      	ite	ge
  40ed6e:	189b      	addge	r3, r3, r2
  40ed70:	185b      	addlt	r3, r3, r1
  40ed72:	9303      	str	r3, [sp, #12]
  40ed74:	e04e      	b.n	40ee14 <_vfiprintf_r+0x8f8>
  40ed76:	aa0f      	add	r2, sp, #60	; 0x3c
  40ed78:	4651      	mov	r1, sl
  40ed7a:	4638      	mov	r0, r7
  40ed7c:	f7ff fb8e 	bl	40e49c <__sprint_r.part.0>
  40ed80:	2800      	cmp	r0, #0
  40ed82:	f040 813f 	bne.w	40f004 <_vfiprintf_r+0xae8>
  40ed86:	9910      	ldr	r1, [sp, #64]	; 0x40
  40ed88:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40ed8a:	1c48      	adds	r0, r1, #1
  40ed8c:	46ce      	mov	lr, r9
  40ed8e:	e77f      	b.n	40ec90 <_vfiprintf_r+0x774>
  40ed90:	aa0f      	add	r2, sp, #60	; 0x3c
  40ed92:	4659      	mov	r1, fp
  40ed94:	4638      	mov	r0, r7
  40ed96:	f7ff fb81 	bl	40e49c <__sprint_r.part.0>
  40ed9a:	b960      	cbnz	r0, 40edb6 <_vfiprintf_r+0x89a>
  40ed9c:	9910      	ldr	r1, [sp, #64]	; 0x40
  40ed9e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40eda0:	1c48      	adds	r0, r1, #1
  40eda2:	46ca      	mov	sl, r9
  40eda4:	e7bd      	b.n	40ed22 <_vfiprintf_r+0x806>
  40eda6:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40eda8:	f8dd b010 	ldr.w	fp, [sp, #16]
  40edac:	2b00      	cmp	r3, #0
  40edae:	f040 81d4 	bne.w	40f15a <_vfiprintf_r+0xc3e>
  40edb2:	2300      	movs	r3, #0
  40edb4:	9310      	str	r3, [sp, #64]	; 0x40
  40edb6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40edba:	f013 0f01 	tst.w	r3, #1
  40edbe:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  40edc2:	d102      	bne.n	40edca <_vfiprintf_r+0x8ae>
  40edc4:	059a      	lsls	r2, r3, #22
  40edc6:	f140 80de 	bpl.w	40ef86 <_vfiprintf_r+0xa6a>
  40edca:	065b      	lsls	r3, r3, #25
  40edcc:	f53f acb2 	bmi.w	40e734 <_vfiprintf_r+0x218>
  40edd0:	9803      	ldr	r0, [sp, #12]
  40edd2:	b02d      	add	sp, #180	; 0xb4
  40edd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40edd8:	2a00      	cmp	r2, #0
  40edda:	f040 8106 	bne.w	40efea <_vfiprintf_r+0xace>
  40edde:	9a05      	ldr	r2, [sp, #20]
  40ede0:	921d      	str	r2, [sp, #116]	; 0x74
  40ede2:	2301      	movs	r3, #1
  40ede4:	9211      	str	r2, [sp, #68]	; 0x44
  40ede6:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  40edea:	9310      	str	r3, [sp, #64]	; 0x40
  40edec:	46ca      	mov	sl, r9
  40edee:	f10a 0a08 	add.w	sl, sl, #8
  40edf2:	9b02      	ldr	r3, [sp, #8]
  40edf4:	0759      	lsls	r1, r3, #29
  40edf6:	d504      	bpl.n	40ee02 <_vfiprintf_r+0x8e6>
  40edf8:	9b08      	ldr	r3, [sp, #32]
  40edfa:	9901      	ldr	r1, [sp, #4]
  40edfc:	1a5c      	subs	r4, r3, r1
  40edfe:	2c00      	cmp	r4, #0
  40ee00:	dc81      	bgt.n	40ed06 <_vfiprintf_r+0x7ea>
  40ee02:	9b03      	ldr	r3, [sp, #12]
  40ee04:	9908      	ldr	r1, [sp, #32]
  40ee06:	9801      	ldr	r0, [sp, #4]
  40ee08:	4281      	cmp	r1, r0
  40ee0a:	bfac      	ite	ge
  40ee0c:	185b      	addge	r3, r3, r1
  40ee0e:	181b      	addlt	r3, r3, r0
  40ee10:	9303      	str	r3, [sp, #12]
  40ee12:	bb72      	cbnz	r2, 40ee72 <_vfiprintf_r+0x956>
  40ee14:	2300      	movs	r3, #0
  40ee16:	9310      	str	r3, [sp, #64]	; 0x40
  40ee18:	46ca      	mov	sl, r9
  40ee1a:	f7ff bbbc 	b.w	40e596 <_vfiprintf_r+0x7a>
  40ee1e:	aa0f      	add	r2, sp, #60	; 0x3c
  40ee20:	9904      	ldr	r1, [sp, #16]
  40ee22:	4620      	mov	r0, r4
  40ee24:	f7ff fb3a 	bl	40e49c <__sprint_r.part.0>
  40ee28:	bb50      	cbnz	r0, 40ee80 <_vfiprintf_r+0x964>
  40ee2a:	9910      	ldr	r1, [sp, #64]	; 0x40
  40ee2c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40ee2e:	f101 0e01 	add.w	lr, r1, #1
  40ee32:	46cc      	mov	ip, r9
  40ee34:	e548      	b.n	40e8c8 <_vfiprintf_r+0x3ac>
  40ee36:	2a00      	cmp	r2, #0
  40ee38:	f040 8140 	bne.w	40f0bc <_vfiprintf_r+0xba0>
  40ee3c:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  40ee40:	2900      	cmp	r1, #0
  40ee42:	f000 811b 	beq.w	40f07c <_vfiprintf_r+0xb60>
  40ee46:	2201      	movs	r2, #1
  40ee48:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  40ee4c:	4610      	mov	r0, r2
  40ee4e:	921d      	str	r2, [sp, #116]	; 0x74
  40ee50:	911c      	str	r1, [sp, #112]	; 0x70
  40ee52:	46ca      	mov	sl, r9
  40ee54:	4601      	mov	r1, r0
  40ee56:	f10a 0a08 	add.w	sl, sl, #8
  40ee5a:	3001      	adds	r0, #1
  40ee5c:	e507      	b.n	40e86e <_vfiprintf_r+0x352>
  40ee5e:	9b02      	ldr	r3, [sp, #8]
  40ee60:	2a01      	cmp	r2, #1
  40ee62:	f000 8098 	beq.w	40ef96 <_vfiprintf_r+0xa7a>
  40ee66:	2a02      	cmp	r2, #2
  40ee68:	d10d      	bne.n	40ee86 <_vfiprintf_r+0x96a>
  40ee6a:	9302      	str	r3, [sp, #8]
  40ee6c:	2600      	movs	r6, #0
  40ee6e:	2700      	movs	r7, #0
  40ee70:	e5b0      	b.n	40e9d4 <_vfiprintf_r+0x4b8>
  40ee72:	aa0f      	add	r2, sp, #60	; 0x3c
  40ee74:	9904      	ldr	r1, [sp, #16]
  40ee76:	9806      	ldr	r0, [sp, #24]
  40ee78:	f7ff fb10 	bl	40e49c <__sprint_r.part.0>
  40ee7c:	2800      	cmp	r0, #0
  40ee7e:	d0c9      	beq.n	40ee14 <_vfiprintf_r+0x8f8>
  40ee80:	f8dd b010 	ldr.w	fp, [sp, #16]
  40ee84:	e797      	b.n	40edb6 <_vfiprintf_r+0x89a>
  40ee86:	9302      	str	r3, [sp, #8]
  40ee88:	2600      	movs	r6, #0
  40ee8a:	2700      	movs	r7, #0
  40ee8c:	4649      	mov	r1, r9
  40ee8e:	e000      	b.n	40ee92 <_vfiprintf_r+0x976>
  40ee90:	4659      	mov	r1, fp
  40ee92:	08f2      	lsrs	r2, r6, #3
  40ee94:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  40ee98:	08f8      	lsrs	r0, r7, #3
  40ee9a:	f006 0307 	and.w	r3, r6, #7
  40ee9e:	4607      	mov	r7, r0
  40eea0:	4616      	mov	r6, r2
  40eea2:	3330      	adds	r3, #48	; 0x30
  40eea4:	ea56 0207 	orrs.w	r2, r6, r7
  40eea8:	f801 3c01 	strb.w	r3, [r1, #-1]
  40eeac:	f101 3bff 	add.w	fp, r1, #4294967295
  40eeb0:	d1ee      	bne.n	40ee90 <_vfiprintf_r+0x974>
  40eeb2:	9a02      	ldr	r2, [sp, #8]
  40eeb4:	07d6      	lsls	r6, r2, #31
  40eeb6:	f57f ad9d 	bpl.w	40e9f4 <_vfiprintf_r+0x4d8>
  40eeba:	2b30      	cmp	r3, #48	; 0x30
  40eebc:	f43f ad9a 	beq.w	40e9f4 <_vfiprintf_r+0x4d8>
  40eec0:	3902      	subs	r1, #2
  40eec2:	2330      	movs	r3, #48	; 0x30
  40eec4:	f80b 3c01 	strb.w	r3, [fp, #-1]
  40eec8:	eba9 0301 	sub.w	r3, r9, r1
  40eecc:	9305      	str	r3, [sp, #20]
  40eece:	468b      	mov	fp, r1
  40eed0:	e476      	b.n	40e7c0 <_vfiprintf_r+0x2a4>
  40eed2:	9b03      	ldr	r3, [sp, #12]
  40eed4:	9a08      	ldr	r2, [sp, #32]
  40eed6:	428a      	cmp	r2, r1
  40eed8:	bfac      	ite	ge
  40eeda:	189b      	addge	r3, r3, r2
  40eedc:	185b      	addlt	r3, r3, r1
  40eede:	9303      	str	r3, [sp, #12]
  40eee0:	e798      	b.n	40ee14 <_vfiprintf_r+0x8f8>
  40eee2:	2202      	movs	r2, #2
  40eee4:	e44d      	b.n	40e782 <_vfiprintf_r+0x266>
  40eee6:	2f00      	cmp	r7, #0
  40eee8:	bf08      	it	eq
  40eeea:	2e0a      	cmpeq	r6, #10
  40eeec:	d352      	bcc.n	40ef94 <_vfiprintf_r+0xa78>
  40eeee:	46cb      	mov	fp, r9
  40eef0:	4630      	mov	r0, r6
  40eef2:	4639      	mov	r1, r7
  40eef4:	220a      	movs	r2, #10
  40eef6:	2300      	movs	r3, #0
  40eef8:	f7fe ff54 	bl	40dda4 <__aeabi_uldivmod>
  40eefc:	3230      	adds	r2, #48	; 0x30
  40eefe:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  40ef02:	4630      	mov	r0, r6
  40ef04:	4639      	mov	r1, r7
  40ef06:	2300      	movs	r3, #0
  40ef08:	220a      	movs	r2, #10
  40ef0a:	f7fe ff4b 	bl	40dda4 <__aeabi_uldivmod>
  40ef0e:	4606      	mov	r6, r0
  40ef10:	460f      	mov	r7, r1
  40ef12:	ea56 0307 	orrs.w	r3, r6, r7
  40ef16:	d1eb      	bne.n	40eef0 <_vfiprintf_r+0x9d4>
  40ef18:	e56c      	b.n	40e9f4 <_vfiprintf_r+0x4d8>
  40ef1a:	9405      	str	r4, [sp, #20]
  40ef1c:	46cb      	mov	fp, r9
  40ef1e:	e44f      	b.n	40e7c0 <_vfiprintf_r+0x2a4>
  40ef20:	aa0f      	add	r2, sp, #60	; 0x3c
  40ef22:	9904      	ldr	r1, [sp, #16]
  40ef24:	9806      	ldr	r0, [sp, #24]
  40ef26:	f7ff fab9 	bl	40e49c <__sprint_r.part.0>
  40ef2a:	2800      	cmp	r0, #0
  40ef2c:	d1a8      	bne.n	40ee80 <_vfiprintf_r+0x964>
  40ef2e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40ef30:	46ca      	mov	sl, r9
  40ef32:	e75e      	b.n	40edf2 <_vfiprintf_r+0x8d6>
  40ef34:	aa0f      	add	r2, sp, #60	; 0x3c
  40ef36:	9904      	ldr	r1, [sp, #16]
  40ef38:	9806      	ldr	r0, [sp, #24]
  40ef3a:	f7ff faaf 	bl	40e49c <__sprint_r.part.0>
  40ef3e:	2800      	cmp	r0, #0
  40ef40:	d19e      	bne.n	40ee80 <_vfiprintf_r+0x964>
  40ef42:	46ca      	mov	sl, r9
  40ef44:	f7ff bbc0 	b.w	40e6c8 <_vfiprintf_r+0x1ac>
  40ef48:	00411968 	.word	0x00411968
  40ef4c:	00411958 	.word	0x00411958
  40ef50:	3104      	adds	r1, #4
  40ef52:	6816      	ldr	r6, [r2, #0]
  40ef54:	9107      	str	r1, [sp, #28]
  40ef56:	2201      	movs	r2, #1
  40ef58:	2700      	movs	r7, #0
  40ef5a:	e412      	b.n	40e782 <_vfiprintf_r+0x266>
  40ef5c:	9807      	ldr	r0, [sp, #28]
  40ef5e:	4601      	mov	r1, r0
  40ef60:	3104      	adds	r1, #4
  40ef62:	6806      	ldr	r6, [r0, #0]
  40ef64:	9107      	str	r1, [sp, #28]
  40ef66:	2700      	movs	r7, #0
  40ef68:	e40b      	b.n	40e782 <_vfiprintf_r+0x266>
  40ef6a:	680e      	ldr	r6, [r1, #0]
  40ef6c:	3104      	adds	r1, #4
  40ef6e:	9107      	str	r1, [sp, #28]
  40ef70:	2700      	movs	r7, #0
  40ef72:	e591      	b.n	40ea98 <_vfiprintf_r+0x57c>
  40ef74:	9907      	ldr	r1, [sp, #28]
  40ef76:	680e      	ldr	r6, [r1, #0]
  40ef78:	460a      	mov	r2, r1
  40ef7a:	17f7      	asrs	r7, r6, #31
  40ef7c:	3204      	adds	r2, #4
  40ef7e:	9207      	str	r2, [sp, #28]
  40ef80:	4630      	mov	r0, r6
  40ef82:	4639      	mov	r1, r7
  40ef84:	e50f      	b.n	40e9a6 <_vfiprintf_r+0x48a>
  40ef86:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40ef8a:	f000 fe7f 	bl	40fc8c <__retarget_lock_release_recursive>
  40ef8e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  40ef92:	e71a      	b.n	40edca <_vfiprintf_r+0x8ae>
  40ef94:	9b02      	ldr	r3, [sp, #8]
  40ef96:	9302      	str	r3, [sp, #8]
  40ef98:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  40ef9c:	3630      	adds	r6, #48	; 0x30
  40ef9e:	2301      	movs	r3, #1
  40efa0:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  40efa4:	9305      	str	r3, [sp, #20]
  40efa6:	e40b      	b.n	40e7c0 <_vfiprintf_r+0x2a4>
  40efa8:	aa0f      	add	r2, sp, #60	; 0x3c
  40efaa:	9904      	ldr	r1, [sp, #16]
  40efac:	9806      	ldr	r0, [sp, #24]
  40efae:	f7ff fa75 	bl	40e49c <__sprint_r.part.0>
  40efb2:	2800      	cmp	r0, #0
  40efb4:	f47f af64 	bne.w	40ee80 <_vfiprintf_r+0x964>
  40efb8:	9910      	ldr	r1, [sp, #64]	; 0x40
  40efba:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40efbc:	1c48      	adds	r0, r1, #1
  40efbe:	46ca      	mov	sl, r9
  40efc0:	e651      	b.n	40ec66 <_vfiprintf_r+0x74a>
  40efc2:	aa0f      	add	r2, sp, #60	; 0x3c
  40efc4:	9904      	ldr	r1, [sp, #16]
  40efc6:	9806      	ldr	r0, [sp, #24]
  40efc8:	f7ff fa68 	bl	40e49c <__sprint_r.part.0>
  40efcc:	2800      	cmp	r0, #0
  40efce:	f47f af57 	bne.w	40ee80 <_vfiprintf_r+0x964>
  40efd2:	9910      	ldr	r1, [sp, #64]	; 0x40
  40efd4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40efd6:	1c48      	adds	r0, r1, #1
  40efd8:	46ca      	mov	sl, r9
  40efda:	e448      	b.n	40e86e <_vfiprintf_r+0x352>
  40efdc:	2a00      	cmp	r2, #0
  40efde:	f040 8091 	bne.w	40f104 <_vfiprintf_r+0xbe8>
  40efe2:	2001      	movs	r0, #1
  40efe4:	4611      	mov	r1, r2
  40efe6:	46ca      	mov	sl, r9
  40efe8:	e641      	b.n	40ec6e <_vfiprintf_r+0x752>
  40efea:	aa0f      	add	r2, sp, #60	; 0x3c
  40efec:	9904      	ldr	r1, [sp, #16]
  40efee:	9806      	ldr	r0, [sp, #24]
  40eff0:	f7ff fa54 	bl	40e49c <__sprint_r.part.0>
  40eff4:	2800      	cmp	r0, #0
  40eff6:	f47f af43 	bne.w	40ee80 <_vfiprintf_r+0x964>
  40effa:	9810      	ldr	r0, [sp, #64]	; 0x40
  40effc:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40effe:	3001      	adds	r0, #1
  40f000:	46ca      	mov	sl, r9
  40f002:	e667      	b.n	40ecd4 <_vfiprintf_r+0x7b8>
  40f004:	46d3      	mov	fp, sl
  40f006:	e6d6      	b.n	40edb6 <_vfiprintf_r+0x89a>
  40f008:	9e07      	ldr	r6, [sp, #28]
  40f00a:	3607      	adds	r6, #7
  40f00c:	f026 0207 	bic.w	r2, r6, #7
  40f010:	f102 0108 	add.w	r1, r2, #8
  40f014:	e9d2 6700 	ldrd	r6, r7, [r2]
  40f018:	9107      	str	r1, [sp, #28]
  40f01a:	2201      	movs	r2, #1
  40f01c:	f7ff bbb1 	b.w	40e782 <_vfiprintf_r+0x266>
  40f020:	9e07      	ldr	r6, [sp, #28]
  40f022:	3607      	adds	r6, #7
  40f024:	f026 0607 	bic.w	r6, r6, #7
  40f028:	e9d6 0100 	ldrd	r0, r1, [r6]
  40f02c:	f106 0208 	add.w	r2, r6, #8
  40f030:	9207      	str	r2, [sp, #28]
  40f032:	4606      	mov	r6, r0
  40f034:	460f      	mov	r7, r1
  40f036:	e4b6      	b.n	40e9a6 <_vfiprintf_r+0x48a>
  40f038:	9e07      	ldr	r6, [sp, #28]
  40f03a:	3607      	adds	r6, #7
  40f03c:	f026 0207 	bic.w	r2, r6, #7
  40f040:	f102 0108 	add.w	r1, r2, #8
  40f044:	e9d2 6700 	ldrd	r6, r7, [r2]
  40f048:	9107      	str	r1, [sp, #28]
  40f04a:	2200      	movs	r2, #0
  40f04c:	f7ff bb99 	b.w	40e782 <_vfiprintf_r+0x266>
  40f050:	9e07      	ldr	r6, [sp, #28]
  40f052:	3607      	adds	r6, #7
  40f054:	f026 0107 	bic.w	r1, r6, #7
  40f058:	f101 0008 	add.w	r0, r1, #8
  40f05c:	9007      	str	r0, [sp, #28]
  40f05e:	e9d1 6700 	ldrd	r6, r7, [r1]
  40f062:	e519      	b.n	40ea98 <_vfiprintf_r+0x57c>
  40f064:	46cb      	mov	fp, r9
  40f066:	f7ff bbab 	b.w	40e7c0 <_vfiprintf_r+0x2a4>
  40f06a:	252d      	movs	r5, #45	; 0x2d
  40f06c:	4276      	negs	r6, r6
  40f06e:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  40f072:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40f076:	2201      	movs	r2, #1
  40f078:	f7ff bb88 	b.w	40e78c <_vfiprintf_r+0x270>
  40f07c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40f07e:	b9b3      	cbnz	r3, 40f0ae <_vfiprintf_r+0xb92>
  40f080:	4611      	mov	r1, r2
  40f082:	2001      	movs	r0, #1
  40f084:	46ca      	mov	sl, r9
  40f086:	e5f2      	b.n	40ec6e <_vfiprintf_r+0x752>
  40f088:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40f08c:	f000 fdfe 	bl	40fc8c <__retarget_lock_release_recursive>
  40f090:	f04f 33ff 	mov.w	r3, #4294967295
  40f094:	9303      	str	r3, [sp, #12]
  40f096:	f7ff bb50 	b.w	40e73a <_vfiprintf_r+0x21e>
  40f09a:	aa0f      	add	r2, sp, #60	; 0x3c
  40f09c:	9904      	ldr	r1, [sp, #16]
  40f09e:	9806      	ldr	r0, [sp, #24]
  40f0a0:	f7ff f9fc 	bl	40e49c <__sprint_r.part.0>
  40f0a4:	2800      	cmp	r0, #0
  40f0a6:	f47f aeeb 	bne.w	40ee80 <_vfiprintf_r+0x964>
  40f0aa:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40f0ac:	e6a9      	b.n	40ee02 <_vfiprintf_r+0x8e6>
  40f0ae:	ab0e      	add	r3, sp, #56	; 0x38
  40f0b0:	2202      	movs	r2, #2
  40f0b2:	931c      	str	r3, [sp, #112]	; 0x70
  40f0b4:	921d      	str	r2, [sp, #116]	; 0x74
  40f0b6:	2001      	movs	r0, #1
  40f0b8:	46ca      	mov	sl, r9
  40f0ba:	e5d0      	b.n	40ec5e <_vfiprintf_r+0x742>
  40f0bc:	aa0f      	add	r2, sp, #60	; 0x3c
  40f0be:	9904      	ldr	r1, [sp, #16]
  40f0c0:	9806      	ldr	r0, [sp, #24]
  40f0c2:	f7ff f9eb 	bl	40e49c <__sprint_r.part.0>
  40f0c6:	2800      	cmp	r0, #0
  40f0c8:	f47f aeda 	bne.w	40ee80 <_vfiprintf_r+0x964>
  40f0cc:	9910      	ldr	r1, [sp, #64]	; 0x40
  40f0ce:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40f0d0:	1c48      	adds	r0, r1, #1
  40f0d2:	46ca      	mov	sl, r9
  40f0d4:	e5a4      	b.n	40ec20 <_vfiprintf_r+0x704>
  40f0d6:	9a07      	ldr	r2, [sp, #28]
  40f0d8:	9903      	ldr	r1, [sp, #12]
  40f0da:	6813      	ldr	r3, [r2, #0]
  40f0dc:	17cd      	asrs	r5, r1, #31
  40f0de:	4608      	mov	r0, r1
  40f0e0:	3204      	adds	r2, #4
  40f0e2:	4629      	mov	r1, r5
  40f0e4:	9207      	str	r2, [sp, #28]
  40f0e6:	e9c3 0100 	strd	r0, r1, [r3]
  40f0ea:	f7ff ba54 	b.w	40e596 <_vfiprintf_r+0x7a>
  40f0ee:	4658      	mov	r0, fp
  40f0f0:	9607      	str	r6, [sp, #28]
  40f0f2:	9302      	str	r3, [sp, #8]
  40f0f4:	f001 fbe4 	bl	4108c0 <strlen>
  40f0f8:	2400      	movs	r4, #0
  40f0fa:	9005      	str	r0, [sp, #20]
  40f0fc:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40f100:	f7ff bb5e 	b.w	40e7c0 <_vfiprintf_r+0x2a4>
  40f104:	aa0f      	add	r2, sp, #60	; 0x3c
  40f106:	9904      	ldr	r1, [sp, #16]
  40f108:	9806      	ldr	r0, [sp, #24]
  40f10a:	f7ff f9c7 	bl	40e49c <__sprint_r.part.0>
  40f10e:	2800      	cmp	r0, #0
  40f110:	f47f aeb6 	bne.w	40ee80 <_vfiprintf_r+0x964>
  40f114:	9910      	ldr	r1, [sp, #64]	; 0x40
  40f116:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40f118:	1c48      	adds	r0, r1, #1
  40f11a:	46ca      	mov	sl, r9
  40f11c:	e5a7      	b.n	40ec6e <_vfiprintf_r+0x752>
  40f11e:	9910      	ldr	r1, [sp, #64]	; 0x40
  40f120:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40f122:	4e20      	ldr	r6, [pc, #128]	; (40f1a4 <_vfiprintf_r+0xc88>)
  40f124:	3101      	adds	r1, #1
  40f126:	f7ff bb90 	b.w	40e84a <_vfiprintf_r+0x32e>
  40f12a:	2c06      	cmp	r4, #6
  40f12c:	bf28      	it	cs
  40f12e:	2406      	movcs	r4, #6
  40f130:	9405      	str	r4, [sp, #20]
  40f132:	9607      	str	r6, [sp, #28]
  40f134:	9401      	str	r4, [sp, #4]
  40f136:	f8df b070 	ldr.w	fp, [pc, #112]	; 40f1a8 <_vfiprintf_r+0xc8c>
  40f13a:	e4d5      	b.n	40eae8 <_vfiprintf_r+0x5cc>
  40f13c:	9810      	ldr	r0, [sp, #64]	; 0x40
  40f13e:	4e19      	ldr	r6, [pc, #100]	; (40f1a4 <_vfiprintf_r+0xc88>)
  40f140:	3001      	adds	r0, #1
  40f142:	e603      	b.n	40ed4c <_vfiprintf_r+0x830>
  40f144:	9405      	str	r4, [sp, #20]
  40f146:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40f14a:	9607      	str	r6, [sp, #28]
  40f14c:	9302      	str	r3, [sp, #8]
  40f14e:	4604      	mov	r4, r0
  40f150:	f7ff bb36 	b.w	40e7c0 <_vfiprintf_r+0x2a4>
  40f154:	4686      	mov	lr, r0
  40f156:	f7ff bbce 	b.w	40e8f6 <_vfiprintf_r+0x3da>
  40f15a:	9806      	ldr	r0, [sp, #24]
  40f15c:	aa0f      	add	r2, sp, #60	; 0x3c
  40f15e:	4659      	mov	r1, fp
  40f160:	f7ff f99c 	bl	40e49c <__sprint_r.part.0>
  40f164:	2800      	cmp	r0, #0
  40f166:	f43f ae24 	beq.w	40edb2 <_vfiprintf_r+0x896>
  40f16a:	e624      	b.n	40edb6 <_vfiprintf_r+0x89a>
  40f16c:	9907      	ldr	r1, [sp, #28]
  40f16e:	f898 2001 	ldrb.w	r2, [r8, #1]
  40f172:	680c      	ldr	r4, [r1, #0]
  40f174:	3104      	adds	r1, #4
  40f176:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  40f17a:	46b8      	mov	r8, r7
  40f17c:	9107      	str	r1, [sp, #28]
  40f17e:	f7ff ba3f 	b.w	40e600 <_vfiprintf_r+0xe4>
  40f182:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40f186:	e43c      	b.n	40ea02 <_vfiprintf_r+0x4e6>
  40f188:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40f18c:	e521      	b.n	40ebd2 <_vfiprintf_r+0x6b6>
  40f18e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40f192:	f7ff bbf4 	b.w	40e97e <_vfiprintf_r+0x462>
  40f196:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40f19a:	e491      	b.n	40eac0 <_vfiprintf_r+0x5a4>
  40f19c:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40f1a0:	e469      	b.n	40ea76 <_vfiprintf_r+0x55a>
  40f1a2:	bf00      	nop
  40f1a4:	00411958 	.word	0x00411958
  40f1a8:	00411950 	.word	0x00411950

0040f1ac <__sbprintf>:
  40f1ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40f1b0:	460c      	mov	r4, r1
  40f1b2:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  40f1b6:	8989      	ldrh	r1, [r1, #12]
  40f1b8:	6e66      	ldr	r6, [r4, #100]	; 0x64
  40f1ba:	89e5      	ldrh	r5, [r4, #14]
  40f1bc:	9619      	str	r6, [sp, #100]	; 0x64
  40f1be:	f021 0102 	bic.w	r1, r1, #2
  40f1c2:	4606      	mov	r6, r0
  40f1c4:	69e0      	ldr	r0, [r4, #28]
  40f1c6:	f8ad 100c 	strh.w	r1, [sp, #12]
  40f1ca:	4617      	mov	r7, r2
  40f1cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
  40f1d0:	6a62      	ldr	r2, [r4, #36]	; 0x24
  40f1d2:	f8ad 500e 	strh.w	r5, [sp, #14]
  40f1d6:	4698      	mov	r8, r3
  40f1d8:	ad1a      	add	r5, sp, #104	; 0x68
  40f1da:	2300      	movs	r3, #0
  40f1dc:	9007      	str	r0, [sp, #28]
  40f1de:	a816      	add	r0, sp, #88	; 0x58
  40f1e0:	9209      	str	r2, [sp, #36]	; 0x24
  40f1e2:	9306      	str	r3, [sp, #24]
  40f1e4:	9500      	str	r5, [sp, #0]
  40f1e6:	9504      	str	r5, [sp, #16]
  40f1e8:	9102      	str	r1, [sp, #8]
  40f1ea:	9105      	str	r1, [sp, #20]
  40f1ec:	f000 fd48 	bl	40fc80 <__retarget_lock_init_recursive>
  40f1f0:	4643      	mov	r3, r8
  40f1f2:	463a      	mov	r2, r7
  40f1f4:	4669      	mov	r1, sp
  40f1f6:	4630      	mov	r0, r6
  40f1f8:	f7ff f990 	bl	40e51c <_vfiprintf_r>
  40f1fc:	1e05      	subs	r5, r0, #0
  40f1fe:	db07      	blt.n	40f210 <__sbprintf+0x64>
  40f200:	4630      	mov	r0, r6
  40f202:	4669      	mov	r1, sp
  40f204:	f000 f928 	bl	40f458 <_fflush_r>
  40f208:	2800      	cmp	r0, #0
  40f20a:	bf18      	it	ne
  40f20c:	f04f 35ff 	movne.w	r5, #4294967295
  40f210:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  40f214:	065b      	lsls	r3, r3, #25
  40f216:	d503      	bpl.n	40f220 <__sbprintf+0x74>
  40f218:	89a3      	ldrh	r3, [r4, #12]
  40f21a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40f21e:	81a3      	strh	r3, [r4, #12]
  40f220:	9816      	ldr	r0, [sp, #88]	; 0x58
  40f222:	f000 fd2f 	bl	40fc84 <__retarget_lock_close_recursive>
  40f226:	4628      	mov	r0, r5
  40f228:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  40f22c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0040f230 <__swsetup_r>:
  40f230:	b538      	push	{r3, r4, r5, lr}
  40f232:	4b30      	ldr	r3, [pc, #192]	; (40f2f4 <__swsetup_r+0xc4>)
  40f234:	681b      	ldr	r3, [r3, #0]
  40f236:	4605      	mov	r5, r0
  40f238:	460c      	mov	r4, r1
  40f23a:	b113      	cbz	r3, 40f242 <__swsetup_r+0x12>
  40f23c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  40f23e:	2a00      	cmp	r2, #0
  40f240:	d038      	beq.n	40f2b4 <__swsetup_r+0x84>
  40f242:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40f246:	b293      	uxth	r3, r2
  40f248:	0718      	lsls	r0, r3, #28
  40f24a:	d50c      	bpl.n	40f266 <__swsetup_r+0x36>
  40f24c:	6920      	ldr	r0, [r4, #16]
  40f24e:	b1a8      	cbz	r0, 40f27c <__swsetup_r+0x4c>
  40f250:	f013 0201 	ands.w	r2, r3, #1
  40f254:	d01e      	beq.n	40f294 <__swsetup_r+0x64>
  40f256:	6963      	ldr	r3, [r4, #20]
  40f258:	2200      	movs	r2, #0
  40f25a:	425b      	negs	r3, r3
  40f25c:	61a3      	str	r3, [r4, #24]
  40f25e:	60a2      	str	r2, [r4, #8]
  40f260:	b1f0      	cbz	r0, 40f2a0 <__swsetup_r+0x70>
  40f262:	2000      	movs	r0, #0
  40f264:	bd38      	pop	{r3, r4, r5, pc}
  40f266:	06d9      	lsls	r1, r3, #27
  40f268:	d53c      	bpl.n	40f2e4 <__swsetup_r+0xb4>
  40f26a:	0758      	lsls	r0, r3, #29
  40f26c:	d426      	bmi.n	40f2bc <__swsetup_r+0x8c>
  40f26e:	6920      	ldr	r0, [r4, #16]
  40f270:	f042 0308 	orr.w	r3, r2, #8
  40f274:	81a3      	strh	r3, [r4, #12]
  40f276:	b29b      	uxth	r3, r3
  40f278:	2800      	cmp	r0, #0
  40f27a:	d1e9      	bne.n	40f250 <__swsetup_r+0x20>
  40f27c:	f403 7220 	and.w	r2, r3, #640	; 0x280
  40f280:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  40f284:	d0e4      	beq.n	40f250 <__swsetup_r+0x20>
  40f286:	4628      	mov	r0, r5
  40f288:	4621      	mov	r1, r4
  40f28a:	f000 fd2f 	bl	40fcec <__smakebuf_r>
  40f28e:	89a3      	ldrh	r3, [r4, #12]
  40f290:	6920      	ldr	r0, [r4, #16]
  40f292:	e7dd      	b.n	40f250 <__swsetup_r+0x20>
  40f294:	0799      	lsls	r1, r3, #30
  40f296:	bf58      	it	pl
  40f298:	6962      	ldrpl	r2, [r4, #20]
  40f29a:	60a2      	str	r2, [r4, #8]
  40f29c:	2800      	cmp	r0, #0
  40f29e:	d1e0      	bne.n	40f262 <__swsetup_r+0x32>
  40f2a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40f2a4:	061a      	lsls	r2, r3, #24
  40f2a6:	d5dd      	bpl.n	40f264 <__swsetup_r+0x34>
  40f2a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40f2ac:	81a3      	strh	r3, [r4, #12]
  40f2ae:	f04f 30ff 	mov.w	r0, #4294967295
  40f2b2:	bd38      	pop	{r3, r4, r5, pc}
  40f2b4:	4618      	mov	r0, r3
  40f2b6:	f000 f927 	bl	40f508 <__sinit>
  40f2ba:	e7c2      	b.n	40f242 <__swsetup_r+0x12>
  40f2bc:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40f2be:	b151      	cbz	r1, 40f2d6 <__swsetup_r+0xa6>
  40f2c0:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40f2c4:	4299      	cmp	r1, r3
  40f2c6:	d004      	beq.n	40f2d2 <__swsetup_r+0xa2>
  40f2c8:	4628      	mov	r0, r5
  40f2ca:	f000 fa43 	bl	40f754 <_free_r>
  40f2ce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40f2d2:	2300      	movs	r3, #0
  40f2d4:	6323      	str	r3, [r4, #48]	; 0x30
  40f2d6:	2300      	movs	r3, #0
  40f2d8:	6920      	ldr	r0, [r4, #16]
  40f2da:	6063      	str	r3, [r4, #4]
  40f2dc:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  40f2e0:	6020      	str	r0, [r4, #0]
  40f2e2:	e7c5      	b.n	40f270 <__swsetup_r+0x40>
  40f2e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  40f2e8:	2309      	movs	r3, #9
  40f2ea:	602b      	str	r3, [r5, #0]
  40f2ec:	f04f 30ff 	mov.w	r0, #4294967295
  40f2f0:	81a2      	strh	r2, [r4, #12]
  40f2f2:	bd38      	pop	{r3, r4, r5, pc}
  40f2f4:	200002a0 	.word	0x200002a0

0040f2f8 <register_fini>:
  40f2f8:	4b02      	ldr	r3, [pc, #8]	; (40f304 <register_fini+0xc>)
  40f2fa:	b113      	cbz	r3, 40f302 <register_fini+0xa>
  40f2fc:	4802      	ldr	r0, [pc, #8]	; (40f308 <register_fini+0x10>)
  40f2fe:	f000 b805 	b.w	40f30c <atexit>
  40f302:	4770      	bx	lr
  40f304:	00000000 	.word	0x00000000
  40f308:	0040f579 	.word	0x0040f579

0040f30c <atexit>:
  40f30c:	2300      	movs	r3, #0
  40f30e:	4601      	mov	r1, r0
  40f310:	461a      	mov	r2, r3
  40f312:	4618      	mov	r0, r3
  40f314:	f001 bbe8 	b.w	410ae8 <__register_exitproc>

0040f318 <__sflush_r>:
  40f318:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  40f31c:	b29a      	uxth	r2, r3
  40f31e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40f322:	460d      	mov	r5, r1
  40f324:	0711      	lsls	r1, r2, #28
  40f326:	4680      	mov	r8, r0
  40f328:	d43a      	bmi.n	40f3a0 <__sflush_r+0x88>
  40f32a:	686a      	ldr	r2, [r5, #4]
  40f32c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  40f330:	2a00      	cmp	r2, #0
  40f332:	81ab      	strh	r3, [r5, #12]
  40f334:	dd6f      	ble.n	40f416 <__sflush_r+0xfe>
  40f336:	6aac      	ldr	r4, [r5, #40]	; 0x28
  40f338:	2c00      	cmp	r4, #0
  40f33a:	d049      	beq.n	40f3d0 <__sflush_r+0xb8>
  40f33c:	2200      	movs	r2, #0
  40f33e:	b29b      	uxth	r3, r3
  40f340:	f8d8 6000 	ldr.w	r6, [r8]
  40f344:	f8c8 2000 	str.w	r2, [r8]
  40f348:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  40f34c:	d067      	beq.n	40f41e <__sflush_r+0x106>
  40f34e:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  40f350:	075f      	lsls	r7, r3, #29
  40f352:	d505      	bpl.n	40f360 <__sflush_r+0x48>
  40f354:	6869      	ldr	r1, [r5, #4]
  40f356:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  40f358:	1a52      	subs	r2, r2, r1
  40f35a:	b10b      	cbz	r3, 40f360 <__sflush_r+0x48>
  40f35c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  40f35e:	1ad2      	subs	r2, r2, r3
  40f360:	2300      	movs	r3, #0
  40f362:	69e9      	ldr	r1, [r5, #28]
  40f364:	4640      	mov	r0, r8
  40f366:	47a0      	blx	r4
  40f368:	1c44      	adds	r4, r0, #1
  40f36a:	d03c      	beq.n	40f3e6 <__sflush_r+0xce>
  40f36c:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  40f370:	692a      	ldr	r2, [r5, #16]
  40f372:	602a      	str	r2, [r5, #0]
  40f374:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  40f378:	2200      	movs	r2, #0
  40f37a:	81ab      	strh	r3, [r5, #12]
  40f37c:	04db      	lsls	r3, r3, #19
  40f37e:	606a      	str	r2, [r5, #4]
  40f380:	d447      	bmi.n	40f412 <__sflush_r+0xfa>
  40f382:	6b29      	ldr	r1, [r5, #48]	; 0x30
  40f384:	f8c8 6000 	str.w	r6, [r8]
  40f388:	b311      	cbz	r1, 40f3d0 <__sflush_r+0xb8>
  40f38a:	f105 0340 	add.w	r3, r5, #64	; 0x40
  40f38e:	4299      	cmp	r1, r3
  40f390:	d002      	beq.n	40f398 <__sflush_r+0x80>
  40f392:	4640      	mov	r0, r8
  40f394:	f000 f9de 	bl	40f754 <_free_r>
  40f398:	2000      	movs	r0, #0
  40f39a:	6328      	str	r0, [r5, #48]	; 0x30
  40f39c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40f3a0:	692e      	ldr	r6, [r5, #16]
  40f3a2:	b1ae      	cbz	r6, 40f3d0 <__sflush_r+0xb8>
  40f3a4:	682c      	ldr	r4, [r5, #0]
  40f3a6:	602e      	str	r6, [r5, #0]
  40f3a8:	0791      	lsls	r1, r2, #30
  40f3aa:	bf0c      	ite	eq
  40f3ac:	696b      	ldreq	r3, [r5, #20]
  40f3ae:	2300      	movne	r3, #0
  40f3b0:	1ba4      	subs	r4, r4, r6
  40f3b2:	60ab      	str	r3, [r5, #8]
  40f3b4:	e00a      	b.n	40f3cc <__sflush_r+0xb4>
  40f3b6:	4623      	mov	r3, r4
  40f3b8:	4632      	mov	r2, r6
  40f3ba:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  40f3bc:	69e9      	ldr	r1, [r5, #28]
  40f3be:	4640      	mov	r0, r8
  40f3c0:	47b8      	blx	r7
  40f3c2:	2800      	cmp	r0, #0
  40f3c4:	eba4 0400 	sub.w	r4, r4, r0
  40f3c8:	4406      	add	r6, r0
  40f3ca:	dd04      	ble.n	40f3d6 <__sflush_r+0xbe>
  40f3cc:	2c00      	cmp	r4, #0
  40f3ce:	dcf2      	bgt.n	40f3b6 <__sflush_r+0x9e>
  40f3d0:	2000      	movs	r0, #0
  40f3d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40f3d6:	89ab      	ldrh	r3, [r5, #12]
  40f3d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40f3dc:	81ab      	strh	r3, [r5, #12]
  40f3de:	f04f 30ff 	mov.w	r0, #4294967295
  40f3e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40f3e6:	f8d8 4000 	ldr.w	r4, [r8]
  40f3ea:	2c1d      	cmp	r4, #29
  40f3ec:	d8f3      	bhi.n	40f3d6 <__sflush_r+0xbe>
  40f3ee:	4b19      	ldr	r3, [pc, #100]	; (40f454 <__sflush_r+0x13c>)
  40f3f0:	40e3      	lsrs	r3, r4
  40f3f2:	43db      	mvns	r3, r3
  40f3f4:	f013 0301 	ands.w	r3, r3, #1
  40f3f8:	d1ed      	bne.n	40f3d6 <__sflush_r+0xbe>
  40f3fa:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  40f3fe:	606b      	str	r3, [r5, #4]
  40f400:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  40f404:	6929      	ldr	r1, [r5, #16]
  40f406:	81ab      	strh	r3, [r5, #12]
  40f408:	04da      	lsls	r2, r3, #19
  40f40a:	6029      	str	r1, [r5, #0]
  40f40c:	d5b9      	bpl.n	40f382 <__sflush_r+0x6a>
  40f40e:	2c00      	cmp	r4, #0
  40f410:	d1b7      	bne.n	40f382 <__sflush_r+0x6a>
  40f412:	6528      	str	r0, [r5, #80]	; 0x50
  40f414:	e7b5      	b.n	40f382 <__sflush_r+0x6a>
  40f416:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  40f418:	2a00      	cmp	r2, #0
  40f41a:	dc8c      	bgt.n	40f336 <__sflush_r+0x1e>
  40f41c:	e7d8      	b.n	40f3d0 <__sflush_r+0xb8>
  40f41e:	2301      	movs	r3, #1
  40f420:	69e9      	ldr	r1, [r5, #28]
  40f422:	4640      	mov	r0, r8
  40f424:	47a0      	blx	r4
  40f426:	1c43      	adds	r3, r0, #1
  40f428:	4602      	mov	r2, r0
  40f42a:	d002      	beq.n	40f432 <__sflush_r+0x11a>
  40f42c:	89ab      	ldrh	r3, [r5, #12]
  40f42e:	6aac      	ldr	r4, [r5, #40]	; 0x28
  40f430:	e78e      	b.n	40f350 <__sflush_r+0x38>
  40f432:	f8d8 3000 	ldr.w	r3, [r8]
  40f436:	2b00      	cmp	r3, #0
  40f438:	d0f8      	beq.n	40f42c <__sflush_r+0x114>
  40f43a:	2b1d      	cmp	r3, #29
  40f43c:	d001      	beq.n	40f442 <__sflush_r+0x12a>
  40f43e:	2b16      	cmp	r3, #22
  40f440:	d102      	bne.n	40f448 <__sflush_r+0x130>
  40f442:	f8c8 6000 	str.w	r6, [r8]
  40f446:	e7c3      	b.n	40f3d0 <__sflush_r+0xb8>
  40f448:	89ab      	ldrh	r3, [r5, #12]
  40f44a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40f44e:	81ab      	strh	r3, [r5, #12]
  40f450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40f454:	20400001 	.word	0x20400001

0040f458 <_fflush_r>:
  40f458:	b538      	push	{r3, r4, r5, lr}
  40f45a:	460d      	mov	r5, r1
  40f45c:	4604      	mov	r4, r0
  40f45e:	b108      	cbz	r0, 40f464 <_fflush_r+0xc>
  40f460:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40f462:	b1bb      	cbz	r3, 40f494 <_fflush_r+0x3c>
  40f464:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  40f468:	b188      	cbz	r0, 40f48e <_fflush_r+0x36>
  40f46a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  40f46c:	07db      	lsls	r3, r3, #31
  40f46e:	d401      	bmi.n	40f474 <_fflush_r+0x1c>
  40f470:	0581      	lsls	r1, r0, #22
  40f472:	d517      	bpl.n	40f4a4 <_fflush_r+0x4c>
  40f474:	4620      	mov	r0, r4
  40f476:	4629      	mov	r1, r5
  40f478:	f7ff ff4e 	bl	40f318 <__sflush_r>
  40f47c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  40f47e:	07da      	lsls	r2, r3, #31
  40f480:	4604      	mov	r4, r0
  40f482:	d402      	bmi.n	40f48a <_fflush_r+0x32>
  40f484:	89ab      	ldrh	r3, [r5, #12]
  40f486:	059b      	lsls	r3, r3, #22
  40f488:	d507      	bpl.n	40f49a <_fflush_r+0x42>
  40f48a:	4620      	mov	r0, r4
  40f48c:	bd38      	pop	{r3, r4, r5, pc}
  40f48e:	4604      	mov	r4, r0
  40f490:	4620      	mov	r0, r4
  40f492:	bd38      	pop	{r3, r4, r5, pc}
  40f494:	f000 f838 	bl	40f508 <__sinit>
  40f498:	e7e4      	b.n	40f464 <_fflush_r+0xc>
  40f49a:	6da8      	ldr	r0, [r5, #88]	; 0x58
  40f49c:	f000 fbf6 	bl	40fc8c <__retarget_lock_release_recursive>
  40f4a0:	4620      	mov	r0, r4
  40f4a2:	bd38      	pop	{r3, r4, r5, pc}
  40f4a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
  40f4a6:	f000 fbef 	bl	40fc88 <__retarget_lock_acquire_recursive>
  40f4aa:	e7e3      	b.n	40f474 <_fflush_r+0x1c>

0040f4ac <_cleanup_r>:
  40f4ac:	4901      	ldr	r1, [pc, #4]	; (40f4b4 <_cleanup_r+0x8>)
  40f4ae:	f000 bbaf 	b.w	40fc10 <_fwalk_reent>
  40f4b2:	bf00      	nop
  40f4b4:	00410bd1 	.word	0x00410bd1

0040f4b8 <std.isra.0>:
  40f4b8:	b510      	push	{r4, lr}
  40f4ba:	2300      	movs	r3, #0
  40f4bc:	4604      	mov	r4, r0
  40f4be:	8181      	strh	r1, [r0, #12]
  40f4c0:	81c2      	strh	r2, [r0, #14]
  40f4c2:	6003      	str	r3, [r0, #0]
  40f4c4:	6043      	str	r3, [r0, #4]
  40f4c6:	6083      	str	r3, [r0, #8]
  40f4c8:	6643      	str	r3, [r0, #100]	; 0x64
  40f4ca:	6103      	str	r3, [r0, #16]
  40f4cc:	6143      	str	r3, [r0, #20]
  40f4ce:	6183      	str	r3, [r0, #24]
  40f4d0:	4619      	mov	r1, r3
  40f4d2:	2208      	movs	r2, #8
  40f4d4:	305c      	adds	r0, #92	; 0x5c
  40f4d6:	f7fe fec3 	bl	40e260 <memset>
  40f4da:	4807      	ldr	r0, [pc, #28]	; (40f4f8 <std.isra.0+0x40>)
  40f4dc:	4907      	ldr	r1, [pc, #28]	; (40f4fc <std.isra.0+0x44>)
  40f4de:	4a08      	ldr	r2, [pc, #32]	; (40f500 <std.isra.0+0x48>)
  40f4e0:	4b08      	ldr	r3, [pc, #32]	; (40f504 <std.isra.0+0x4c>)
  40f4e2:	6220      	str	r0, [r4, #32]
  40f4e4:	61e4      	str	r4, [r4, #28]
  40f4e6:	6261      	str	r1, [r4, #36]	; 0x24
  40f4e8:	62a2      	str	r2, [r4, #40]	; 0x28
  40f4ea:	62e3      	str	r3, [r4, #44]	; 0x2c
  40f4ec:	f104 0058 	add.w	r0, r4, #88	; 0x58
  40f4f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40f4f4:	f000 bbc4 	b.w	40fc80 <__retarget_lock_init_recursive>
  40f4f8:	00410811 	.word	0x00410811
  40f4fc:	00410835 	.word	0x00410835
  40f500:	00410871 	.word	0x00410871
  40f504:	00410891 	.word	0x00410891

0040f508 <__sinit>:
  40f508:	b510      	push	{r4, lr}
  40f50a:	4604      	mov	r4, r0
  40f50c:	4812      	ldr	r0, [pc, #72]	; (40f558 <__sinit+0x50>)
  40f50e:	f000 fbbb 	bl	40fc88 <__retarget_lock_acquire_recursive>
  40f512:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  40f514:	b9d2      	cbnz	r2, 40f54c <__sinit+0x44>
  40f516:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  40f51a:	4810      	ldr	r0, [pc, #64]	; (40f55c <__sinit+0x54>)
  40f51c:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  40f520:	2103      	movs	r1, #3
  40f522:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  40f526:	63e0      	str	r0, [r4, #60]	; 0x3c
  40f528:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  40f52c:	6860      	ldr	r0, [r4, #4]
  40f52e:	2104      	movs	r1, #4
  40f530:	f7ff ffc2 	bl	40f4b8 <std.isra.0>
  40f534:	2201      	movs	r2, #1
  40f536:	2109      	movs	r1, #9
  40f538:	68a0      	ldr	r0, [r4, #8]
  40f53a:	f7ff ffbd 	bl	40f4b8 <std.isra.0>
  40f53e:	2202      	movs	r2, #2
  40f540:	2112      	movs	r1, #18
  40f542:	68e0      	ldr	r0, [r4, #12]
  40f544:	f7ff ffb8 	bl	40f4b8 <std.isra.0>
  40f548:	2301      	movs	r3, #1
  40f54a:	63a3      	str	r3, [r4, #56]	; 0x38
  40f54c:	4802      	ldr	r0, [pc, #8]	; (40f558 <__sinit+0x50>)
  40f54e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40f552:	f000 bb9b 	b.w	40fc8c <__retarget_lock_release_recursive>
  40f556:	bf00      	nop
  40f558:	2001abcc 	.word	0x2001abcc
  40f55c:	0040f4ad 	.word	0x0040f4ad

0040f560 <__sfp_lock_acquire>:
  40f560:	4801      	ldr	r0, [pc, #4]	; (40f568 <__sfp_lock_acquire+0x8>)
  40f562:	f000 bb91 	b.w	40fc88 <__retarget_lock_acquire_recursive>
  40f566:	bf00      	nop
  40f568:	2001abe0 	.word	0x2001abe0

0040f56c <__sfp_lock_release>:
  40f56c:	4801      	ldr	r0, [pc, #4]	; (40f574 <__sfp_lock_release+0x8>)
  40f56e:	f000 bb8d 	b.w	40fc8c <__retarget_lock_release_recursive>
  40f572:	bf00      	nop
  40f574:	2001abe0 	.word	0x2001abe0

0040f578 <__libc_fini_array>:
  40f578:	b538      	push	{r3, r4, r5, lr}
  40f57a:	4c0a      	ldr	r4, [pc, #40]	; (40f5a4 <__libc_fini_array+0x2c>)
  40f57c:	4d0a      	ldr	r5, [pc, #40]	; (40f5a8 <__libc_fini_array+0x30>)
  40f57e:	1b64      	subs	r4, r4, r5
  40f580:	10a4      	asrs	r4, r4, #2
  40f582:	d00a      	beq.n	40f59a <__libc_fini_array+0x22>
  40f584:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  40f588:	3b01      	subs	r3, #1
  40f58a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  40f58e:	3c01      	subs	r4, #1
  40f590:	f855 3904 	ldr.w	r3, [r5], #-4
  40f594:	4798      	blx	r3
  40f596:	2c00      	cmp	r4, #0
  40f598:	d1f9      	bne.n	40f58e <__libc_fini_array+0x16>
  40f59a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40f59e:	f002 ba7f 	b.w	411aa0 <_fini>
  40f5a2:	bf00      	nop
  40f5a4:	00411ab0 	.word	0x00411ab0
  40f5a8:	00411aac 	.word	0x00411aac

0040f5ac <__fputwc>:
  40f5ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40f5b0:	b082      	sub	sp, #8
  40f5b2:	4680      	mov	r8, r0
  40f5b4:	4689      	mov	r9, r1
  40f5b6:	4614      	mov	r4, r2
  40f5b8:	f000 fb54 	bl	40fc64 <__locale_mb_cur_max>
  40f5bc:	2801      	cmp	r0, #1
  40f5be:	d036      	beq.n	40f62e <__fputwc+0x82>
  40f5c0:	464a      	mov	r2, r9
  40f5c2:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  40f5c6:	a901      	add	r1, sp, #4
  40f5c8:	4640      	mov	r0, r8
  40f5ca:	f001 fa3f 	bl	410a4c <_wcrtomb_r>
  40f5ce:	1c42      	adds	r2, r0, #1
  40f5d0:	4606      	mov	r6, r0
  40f5d2:	d025      	beq.n	40f620 <__fputwc+0x74>
  40f5d4:	b3a8      	cbz	r0, 40f642 <__fputwc+0x96>
  40f5d6:	f89d e004 	ldrb.w	lr, [sp, #4]
  40f5da:	2500      	movs	r5, #0
  40f5dc:	f10d 0a04 	add.w	sl, sp, #4
  40f5e0:	e009      	b.n	40f5f6 <__fputwc+0x4a>
  40f5e2:	6823      	ldr	r3, [r4, #0]
  40f5e4:	1c5a      	adds	r2, r3, #1
  40f5e6:	6022      	str	r2, [r4, #0]
  40f5e8:	f883 e000 	strb.w	lr, [r3]
  40f5ec:	3501      	adds	r5, #1
  40f5ee:	42b5      	cmp	r5, r6
  40f5f0:	d227      	bcs.n	40f642 <__fputwc+0x96>
  40f5f2:	f815 e00a 	ldrb.w	lr, [r5, sl]
  40f5f6:	68a3      	ldr	r3, [r4, #8]
  40f5f8:	3b01      	subs	r3, #1
  40f5fa:	2b00      	cmp	r3, #0
  40f5fc:	60a3      	str	r3, [r4, #8]
  40f5fe:	daf0      	bge.n	40f5e2 <__fputwc+0x36>
  40f600:	69a7      	ldr	r7, [r4, #24]
  40f602:	42bb      	cmp	r3, r7
  40f604:	4671      	mov	r1, lr
  40f606:	4622      	mov	r2, r4
  40f608:	4640      	mov	r0, r8
  40f60a:	db02      	blt.n	40f612 <__fputwc+0x66>
  40f60c:	f1be 0f0a 	cmp.w	lr, #10
  40f610:	d1e7      	bne.n	40f5e2 <__fputwc+0x36>
  40f612:	f001 f9c3 	bl	41099c <__swbuf_r>
  40f616:	1c43      	adds	r3, r0, #1
  40f618:	d1e8      	bne.n	40f5ec <__fputwc+0x40>
  40f61a:	b002      	add	sp, #8
  40f61c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40f620:	89a3      	ldrh	r3, [r4, #12]
  40f622:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40f626:	81a3      	strh	r3, [r4, #12]
  40f628:	b002      	add	sp, #8
  40f62a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40f62e:	f109 33ff 	add.w	r3, r9, #4294967295
  40f632:	2bfe      	cmp	r3, #254	; 0xfe
  40f634:	d8c4      	bhi.n	40f5c0 <__fputwc+0x14>
  40f636:	fa5f fe89 	uxtb.w	lr, r9
  40f63a:	4606      	mov	r6, r0
  40f63c:	f88d e004 	strb.w	lr, [sp, #4]
  40f640:	e7cb      	b.n	40f5da <__fputwc+0x2e>
  40f642:	4648      	mov	r0, r9
  40f644:	b002      	add	sp, #8
  40f646:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40f64a:	bf00      	nop

0040f64c <_fputwc_r>:
  40f64c:	b530      	push	{r4, r5, lr}
  40f64e:	6e53      	ldr	r3, [r2, #100]	; 0x64
  40f650:	f013 0f01 	tst.w	r3, #1
  40f654:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  40f658:	4614      	mov	r4, r2
  40f65a:	b083      	sub	sp, #12
  40f65c:	4605      	mov	r5, r0
  40f65e:	b29a      	uxth	r2, r3
  40f660:	d101      	bne.n	40f666 <_fputwc_r+0x1a>
  40f662:	0590      	lsls	r0, r2, #22
  40f664:	d51c      	bpl.n	40f6a0 <_fputwc_r+0x54>
  40f666:	0490      	lsls	r0, r2, #18
  40f668:	d406      	bmi.n	40f678 <_fputwc_r+0x2c>
  40f66a:	6e62      	ldr	r2, [r4, #100]	; 0x64
  40f66c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  40f670:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40f674:	81a3      	strh	r3, [r4, #12]
  40f676:	6662      	str	r2, [r4, #100]	; 0x64
  40f678:	4628      	mov	r0, r5
  40f67a:	4622      	mov	r2, r4
  40f67c:	f7ff ff96 	bl	40f5ac <__fputwc>
  40f680:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40f682:	07da      	lsls	r2, r3, #31
  40f684:	4605      	mov	r5, r0
  40f686:	d402      	bmi.n	40f68e <_fputwc_r+0x42>
  40f688:	89a3      	ldrh	r3, [r4, #12]
  40f68a:	059b      	lsls	r3, r3, #22
  40f68c:	d502      	bpl.n	40f694 <_fputwc_r+0x48>
  40f68e:	4628      	mov	r0, r5
  40f690:	b003      	add	sp, #12
  40f692:	bd30      	pop	{r4, r5, pc}
  40f694:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40f696:	f000 faf9 	bl	40fc8c <__retarget_lock_release_recursive>
  40f69a:	4628      	mov	r0, r5
  40f69c:	b003      	add	sp, #12
  40f69e:	bd30      	pop	{r4, r5, pc}
  40f6a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40f6a2:	9101      	str	r1, [sp, #4]
  40f6a4:	f000 faf0 	bl	40fc88 <__retarget_lock_acquire_recursive>
  40f6a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40f6ac:	9901      	ldr	r1, [sp, #4]
  40f6ae:	b29a      	uxth	r2, r3
  40f6b0:	e7d9      	b.n	40f666 <_fputwc_r+0x1a>
  40f6b2:	bf00      	nop

0040f6b4 <_malloc_trim_r>:
  40f6b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40f6b6:	4f24      	ldr	r7, [pc, #144]	; (40f748 <_malloc_trim_r+0x94>)
  40f6b8:	460c      	mov	r4, r1
  40f6ba:	4606      	mov	r6, r0
  40f6bc:	f000 fee4 	bl	410488 <__malloc_lock>
  40f6c0:	68bb      	ldr	r3, [r7, #8]
  40f6c2:	685d      	ldr	r5, [r3, #4]
  40f6c4:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  40f6c8:	310f      	adds	r1, #15
  40f6ca:	f025 0503 	bic.w	r5, r5, #3
  40f6ce:	4429      	add	r1, r5
  40f6d0:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  40f6d4:	f021 010f 	bic.w	r1, r1, #15
  40f6d8:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  40f6dc:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  40f6e0:	db07      	blt.n	40f6f2 <_malloc_trim_r+0x3e>
  40f6e2:	2100      	movs	r1, #0
  40f6e4:	4630      	mov	r0, r6
  40f6e6:	f001 f881 	bl	4107ec <_sbrk_r>
  40f6ea:	68bb      	ldr	r3, [r7, #8]
  40f6ec:	442b      	add	r3, r5
  40f6ee:	4298      	cmp	r0, r3
  40f6f0:	d004      	beq.n	40f6fc <_malloc_trim_r+0x48>
  40f6f2:	4630      	mov	r0, r6
  40f6f4:	f000 fece 	bl	410494 <__malloc_unlock>
  40f6f8:	2000      	movs	r0, #0
  40f6fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40f6fc:	4261      	negs	r1, r4
  40f6fe:	4630      	mov	r0, r6
  40f700:	f001 f874 	bl	4107ec <_sbrk_r>
  40f704:	3001      	adds	r0, #1
  40f706:	d00d      	beq.n	40f724 <_malloc_trim_r+0x70>
  40f708:	4b10      	ldr	r3, [pc, #64]	; (40f74c <_malloc_trim_r+0x98>)
  40f70a:	68ba      	ldr	r2, [r7, #8]
  40f70c:	6819      	ldr	r1, [r3, #0]
  40f70e:	1b2d      	subs	r5, r5, r4
  40f710:	f045 0501 	orr.w	r5, r5, #1
  40f714:	4630      	mov	r0, r6
  40f716:	1b09      	subs	r1, r1, r4
  40f718:	6055      	str	r5, [r2, #4]
  40f71a:	6019      	str	r1, [r3, #0]
  40f71c:	f000 feba 	bl	410494 <__malloc_unlock>
  40f720:	2001      	movs	r0, #1
  40f722:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40f724:	2100      	movs	r1, #0
  40f726:	4630      	mov	r0, r6
  40f728:	f001 f860 	bl	4107ec <_sbrk_r>
  40f72c:	68ba      	ldr	r2, [r7, #8]
  40f72e:	1a83      	subs	r3, r0, r2
  40f730:	2b0f      	cmp	r3, #15
  40f732:	ddde      	ble.n	40f6f2 <_malloc_trim_r+0x3e>
  40f734:	4c06      	ldr	r4, [pc, #24]	; (40f750 <_malloc_trim_r+0x9c>)
  40f736:	4905      	ldr	r1, [pc, #20]	; (40f74c <_malloc_trim_r+0x98>)
  40f738:	6824      	ldr	r4, [r4, #0]
  40f73a:	f043 0301 	orr.w	r3, r3, #1
  40f73e:	1b00      	subs	r0, r0, r4
  40f740:	6053      	str	r3, [r2, #4]
  40f742:	6008      	str	r0, [r1, #0]
  40f744:	e7d5      	b.n	40f6f2 <_malloc_trim_r+0x3e>
  40f746:	bf00      	nop
  40f748:	20000840 	.word	0x20000840
  40f74c:	2001a760 	.word	0x2001a760
  40f750:	20000c48 	.word	0x20000c48

0040f754 <_free_r>:
  40f754:	2900      	cmp	r1, #0
  40f756:	d044      	beq.n	40f7e2 <_free_r+0x8e>
  40f758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40f75c:	460d      	mov	r5, r1
  40f75e:	4680      	mov	r8, r0
  40f760:	f000 fe92 	bl	410488 <__malloc_lock>
  40f764:	f855 7c04 	ldr.w	r7, [r5, #-4]
  40f768:	4969      	ldr	r1, [pc, #420]	; (40f910 <_free_r+0x1bc>)
  40f76a:	f027 0301 	bic.w	r3, r7, #1
  40f76e:	f1a5 0408 	sub.w	r4, r5, #8
  40f772:	18e2      	adds	r2, r4, r3
  40f774:	688e      	ldr	r6, [r1, #8]
  40f776:	6850      	ldr	r0, [r2, #4]
  40f778:	42b2      	cmp	r2, r6
  40f77a:	f020 0003 	bic.w	r0, r0, #3
  40f77e:	d05e      	beq.n	40f83e <_free_r+0xea>
  40f780:	07fe      	lsls	r6, r7, #31
  40f782:	6050      	str	r0, [r2, #4]
  40f784:	d40b      	bmi.n	40f79e <_free_r+0x4a>
  40f786:	f855 7c08 	ldr.w	r7, [r5, #-8]
  40f78a:	1be4      	subs	r4, r4, r7
  40f78c:	f101 0e08 	add.w	lr, r1, #8
  40f790:	68a5      	ldr	r5, [r4, #8]
  40f792:	4575      	cmp	r5, lr
  40f794:	443b      	add	r3, r7
  40f796:	d06d      	beq.n	40f874 <_free_r+0x120>
  40f798:	68e7      	ldr	r7, [r4, #12]
  40f79a:	60ef      	str	r7, [r5, #12]
  40f79c:	60bd      	str	r5, [r7, #8]
  40f79e:	1815      	adds	r5, r2, r0
  40f7a0:	686d      	ldr	r5, [r5, #4]
  40f7a2:	07ed      	lsls	r5, r5, #31
  40f7a4:	d53e      	bpl.n	40f824 <_free_r+0xd0>
  40f7a6:	f043 0201 	orr.w	r2, r3, #1
  40f7aa:	6062      	str	r2, [r4, #4]
  40f7ac:	50e3      	str	r3, [r4, r3]
  40f7ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40f7b2:	d217      	bcs.n	40f7e4 <_free_r+0x90>
  40f7b4:	08db      	lsrs	r3, r3, #3
  40f7b6:	1c58      	adds	r0, r3, #1
  40f7b8:	109a      	asrs	r2, r3, #2
  40f7ba:	684d      	ldr	r5, [r1, #4]
  40f7bc:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  40f7c0:	60a7      	str	r7, [r4, #8]
  40f7c2:	2301      	movs	r3, #1
  40f7c4:	4093      	lsls	r3, r2
  40f7c6:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  40f7ca:	432b      	orrs	r3, r5
  40f7cc:	3a08      	subs	r2, #8
  40f7ce:	60e2      	str	r2, [r4, #12]
  40f7d0:	604b      	str	r3, [r1, #4]
  40f7d2:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  40f7d6:	60fc      	str	r4, [r7, #12]
  40f7d8:	4640      	mov	r0, r8
  40f7da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40f7de:	f000 be59 	b.w	410494 <__malloc_unlock>
  40f7e2:	4770      	bx	lr
  40f7e4:	0a5a      	lsrs	r2, r3, #9
  40f7e6:	2a04      	cmp	r2, #4
  40f7e8:	d852      	bhi.n	40f890 <_free_r+0x13c>
  40f7ea:	099a      	lsrs	r2, r3, #6
  40f7ec:	f102 0739 	add.w	r7, r2, #57	; 0x39
  40f7f0:	00ff      	lsls	r7, r7, #3
  40f7f2:	f102 0538 	add.w	r5, r2, #56	; 0x38
  40f7f6:	19c8      	adds	r0, r1, r7
  40f7f8:	59ca      	ldr	r2, [r1, r7]
  40f7fa:	3808      	subs	r0, #8
  40f7fc:	4290      	cmp	r0, r2
  40f7fe:	d04f      	beq.n	40f8a0 <_free_r+0x14c>
  40f800:	6851      	ldr	r1, [r2, #4]
  40f802:	f021 0103 	bic.w	r1, r1, #3
  40f806:	428b      	cmp	r3, r1
  40f808:	d232      	bcs.n	40f870 <_free_r+0x11c>
  40f80a:	6892      	ldr	r2, [r2, #8]
  40f80c:	4290      	cmp	r0, r2
  40f80e:	d1f7      	bne.n	40f800 <_free_r+0xac>
  40f810:	68c3      	ldr	r3, [r0, #12]
  40f812:	60a0      	str	r0, [r4, #8]
  40f814:	60e3      	str	r3, [r4, #12]
  40f816:	609c      	str	r4, [r3, #8]
  40f818:	60c4      	str	r4, [r0, #12]
  40f81a:	4640      	mov	r0, r8
  40f81c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40f820:	f000 be38 	b.w	410494 <__malloc_unlock>
  40f824:	6895      	ldr	r5, [r2, #8]
  40f826:	4f3b      	ldr	r7, [pc, #236]	; (40f914 <_free_r+0x1c0>)
  40f828:	42bd      	cmp	r5, r7
  40f82a:	4403      	add	r3, r0
  40f82c:	d040      	beq.n	40f8b0 <_free_r+0x15c>
  40f82e:	68d0      	ldr	r0, [r2, #12]
  40f830:	60e8      	str	r0, [r5, #12]
  40f832:	f043 0201 	orr.w	r2, r3, #1
  40f836:	6085      	str	r5, [r0, #8]
  40f838:	6062      	str	r2, [r4, #4]
  40f83a:	50e3      	str	r3, [r4, r3]
  40f83c:	e7b7      	b.n	40f7ae <_free_r+0x5a>
  40f83e:	07ff      	lsls	r7, r7, #31
  40f840:	4403      	add	r3, r0
  40f842:	d407      	bmi.n	40f854 <_free_r+0x100>
  40f844:	f855 2c08 	ldr.w	r2, [r5, #-8]
  40f848:	1aa4      	subs	r4, r4, r2
  40f84a:	4413      	add	r3, r2
  40f84c:	68a0      	ldr	r0, [r4, #8]
  40f84e:	68e2      	ldr	r2, [r4, #12]
  40f850:	60c2      	str	r2, [r0, #12]
  40f852:	6090      	str	r0, [r2, #8]
  40f854:	4a30      	ldr	r2, [pc, #192]	; (40f918 <_free_r+0x1c4>)
  40f856:	6812      	ldr	r2, [r2, #0]
  40f858:	f043 0001 	orr.w	r0, r3, #1
  40f85c:	4293      	cmp	r3, r2
  40f85e:	6060      	str	r0, [r4, #4]
  40f860:	608c      	str	r4, [r1, #8]
  40f862:	d3b9      	bcc.n	40f7d8 <_free_r+0x84>
  40f864:	4b2d      	ldr	r3, [pc, #180]	; (40f91c <_free_r+0x1c8>)
  40f866:	4640      	mov	r0, r8
  40f868:	6819      	ldr	r1, [r3, #0]
  40f86a:	f7ff ff23 	bl	40f6b4 <_malloc_trim_r>
  40f86e:	e7b3      	b.n	40f7d8 <_free_r+0x84>
  40f870:	4610      	mov	r0, r2
  40f872:	e7cd      	b.n	40f810 <_free_r+0xbc>
  40f874:	1811      	adds	r1, r2, r0
  40f876:	6849      	ldr	r1, [r1, #4]
  40f878:	07c9      	lsls	r1, r1, #31
  40f87a:	d444      	bmi.n	40f906 <_free_r+0x1b2>
  40f87c:	6891      	ldr	r1, [r2, #8]
  40f87e:	68d2      	ldr	r2, [r2, #12]
  40f880:	60ca      	str	r2, [r1, #12]
  40f882:	4403      	add	r3, r0
  40f884:	f043 0001 	orr.w	r0, r3, #1
  40f888:	6091      	str	r1, [r2, #8]
  40f88a:	6060      	str	r0, [r4, #4]
  40f88c:	50e3      	str	r3, [r4, r3]
  40f88e:	e7a3      	b.n	40f7d8 <_free_r+0x84>
  40f890:	2a14      	cmp	r2, #20
  40f892:	d816      	bhi.n	40f8c2 <_free_r+0x16e>
  40f894:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  40f898:	00ff      	lsls	r7, r7, #3
  40f89a:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  40f89e:	e7aa      	b.n	40f7f6 <_free_r+0xa2>
  40f8a0:	10aa      	asrs	r2, r5, #2
  40f8a2:	2301      	movs	r3, #1
  40f8a4:	684d      	ldr	r5, [r1, #4]
  40f8a6:	4093      	lsls	r3, r2
  40f8a8:	432b      	orrs	r3, r5
  40f8aa:	604b      	str	r3, [r1, #4]
  40f8ac:	4603      	mov	r3, r0
  40f8ae:	e7b0      	b.n	40f812 <_free_r+0xbe>
  40f8b0:	f043 0201 	orr.w	r2, r3, #1
  40f8b4:	614c      	str	r4, [r1, #20]
  40f8b6:	610c      	str	r4, [r1, #16]
  40f8b8:	60e5      	str	r5, [r4, #12]
  40f8ba:	60a5      	str	r5, [r4, #8]
  40f8bc:	6062      	str	r2, [r4, #4]
  40f8be:	50e3      	str	r3, [r4, r3]
  40f8c0:	e78a      	b.n	40f7d8 <_free_r+0x84>
  40f8c2:	2a54      	cmp	r2, #84	; 0x54
  40f8c4:	d806      	bhi.n	40f8d4 <_free_r+0x180>
  40f8c6:	0b1a      	lsrs	r2, r3, #12
  40f8c8:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  40f8cc:	00ff      	lsls	r7, r7, #3
  40f8ce:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  40f8d2:	e790      	b.n	40f7f6 <_free_r+0xa2>
  40f8d4:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40f8d8:	d806      	bhi.n	40f8e8 <_free_r+0x194>
  40f8da:	0bda      	lsrs	r2, r3, #15
  40f8dc:	f102 0778 	add.w	r7, r2, #120	; 0x78
  40f8e0:	00ff      	lsls	r7, r7, #3
  40f8e2:	f102 0577 	add.w	r5, r2, #119	; 0x77
  40f8e6:	e786      	b.n	40f7f6 <_free_r+0xa2>
  40f8e8:	f240 5054 	movw	r0, #1364	; 0x554
  40f8ec:	4282      	cmp	r2, r0
  40f8ee:	d806      	bhi.n	40f8fe <_free_r+0x1aa>
  40f8f0:	0c9a      	lsrs	r2, r3, #18
  40f8f2:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  40f8f6:	00ff      	lsls	r7, r7, #3
  40f8f8:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  40f8fc:	e77b      	b.n	40f7f6 <_free_r+0xa2>
  40f8fe:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  40f902:	257e      	movs	r5, #126	; 0x7e
  40f904:	e777      	b.n	40f7f6 <_free_r+0xa2>
  40f906:	f043 0101 	orr.w	r1, r3, #1
  40f90a:	6061      	str	r1, [r4, #4]
  40f90c:	6013      	str	r3, [r2, #0]
  40f90e:	e763      	b.n	40f7d8 <_free_r+0x84>
  40f910:	20000840 	.word	0x20000840
  40f914:	20000848 	.word	0x20000848
  40f918:	20000c4c 	.word	0x20000c4c
  40f91c:	2001a790 	.word	0x2001a790

0040f920 <__sfvwrite_r>:
  40f920:	6893      	ldr	r3, [r2, #8]
  40f922:	2b00      	cmp	r3, #0
  40f924:	d073      	beq.n	40fa0e <__sfvwrite_r+0xee>
  40f926:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40f92a:	898b      	ldrh	r3, [r1, #12]
  40f92c:	b083      	sub	sp, #12
  40f92e:	460c      	mov	r4, r1
  40f930:	0719      	lsls	r1, r3, #28
  40f932:	9000      	str	r0, [sp, #0]
  40f934:	4616      	mov	r6, r2
  40f936:	d526      	bpl.n	40f986 <__sfvwrite_r+0x66>
  40f938:	6922      	ldr	r2, [r4, #16]
  40f93a:	b322      	cbz	r2, 40f986 <__sfvwrite_r+0x66>
  40f93c:	f013 0002 	ands.w	r0, r3, #2
  40f940:	6835      	ldr	r5, [r6, #0]
  40f942:	d02c      	beq.n	40f99e <__sfvwrite_r+0x7e>
  40f944:	f04f 0900 	mov.w	r9, #0
  40f948:	4fb0      	ldr	r7, [pc, #704]	; (40fc0c <__sfvwrite_r+0x2ec>)
  40f94a:	46c8      	mov	r8, r9
  40f94c:	46b2      	mov	sl, r6
  40f94e:	45b8      	cmp	r8, r7
  40f950:	4643      	mov	r3, r8
  40f952:	464a      	mov	r2, r9
  40f954:	bf28      	it	cs
  40f956:	463b      	movcs	r3, r7
  40f958:	9800      	ldr	r0, [sp, #0]
  40f95a:	f1b8 0f00 	cmp.w	r8, #0
  40f95e:	d050      	beq.n	40fa02 <__sfvwrite_r+0xe2>
  40f960:	69e1      	ldr	r1, [r4, #28]
  40f962:	6a66      	ldr	r6, [r4, #36]	; 0x24
  40f964:	47b0      	blx	r6
  40f966:	2800      	cmp	r0, #0
  40f968:	dd58      	ble.n	40fa1c <__sfvwrite_r+0xfc>
  40f96a:	f8da 3008 	ldr.w	r3, [sl, #8]
  40f96e:	1a1b      	subs	r3, r3, r0
  40f970:	4481      	add	r9, r0
  40f972:	eba8 0800 	sub.w	r8, r8, r0
  40f976:	f8ca 3008 	str.w	r3, [sl, #8]
  40f97a:	2b00      	cmp	r3, #0
  40f97c:	d1e7      	bne.n	40f94e <__sfvwrite_r+0x2e>
  40f97e:	2000      	movs	r0, #0
  40f980:	b003      	add	sp, #12
  40f982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40f986:	4621      	mov	r1, r4
  40f988:	9800      	ldr	r0, [sp, #0]
  40f98a:	f7ff fc51 	bl	40f230 <__swsetup_r>
  40f98e:	2800      	cmp	r0, #0
  40f990:	f040 8133 	bne.w	40fbfa <__sfvwrite_r+0x2da>
  40f994:	89a3      	ldrh	r3, [r4, #12]
  40f996:	6835      	ldr	r5, [r6, #0]
  40f998:	f013 0002 	ands.w	r0, r3, #2
  40f99c:	d1d2      	bne.n	40f944 <__sfvwrite_r+0x24>
  40f99e:	f013 0901 	ands.w	r9, r3, #1
  40f9a2:	d145      	bne.n	40fa30 <__sfvwrite_r+0x110>
  40f9a4:	464f      	mov	r7, r9
  40f9a6:	9601      	str	r6, [sp, #4]
  40f9a8:	b337      	cbz	r7, 40f9f8 <__sfvwrite_r+0xd8>
  40f9aa:	059a      	lsls	r2, r3, #22
  40f9ac:	f8d4 8008 	ldr.w	r8, [r4, #8]
  40f9b0:	f140 8083 	bpl.w	40faba <__sfvwrite_r+0x19a>
  40f9b4:	4547      	cmp	r7, r8
  40f9b6:	46c3      	mov	fp, r8
  40f9b8:	f0c0 80ab 	bcc.w	40fb12 <__sfvwrite_r+0x1f2>
  40f9bc:	f413 6f90 	tst.w	r3, #1152	; 0x480
  40f9c0:	f040 80ac 	bne.w	40fb1c <__sfvwrite_r+0x1fc>
  40f9c4:	6820      	ldr	r0, [r4, #0]
  40f9c6:	46ba      	mov	sl, r7
  40f9c8:	465a      	mov	r2, fp
  40f9ca:	4649      	mov	r1, r9
  40f9cc:	f000 fcf8 	bl	4103c0 <memmove>
  40f9d0:	68a2      	ldr	r2, [r4, #8]
  40f9d2:	6823      	ldr	r3, [r4, #0]
  40f9d4:	eba2 0208 	sub.w	r2, r2, r8
  40f9d8:	445b      	add	r3, fp
  40f9da:	60a2      	str	r2, [r4, #8]
  40f9dc:	6023      	str	r3, [r4, #0]
  40f9de:	9a01      	ldr	r2, [sp, #4]
  40f9e0:	6893      	ldr	r3, [r2, #8]
  40f9e2:	eba3 030a 	sub.w	r3, r3, sl
  40f9e6:	44d1      	add	r9, sl
  40f9e8:	eba7 070a 	sub.w	r7, r7, sl
  40f9ec:	6093      	str	r3, [r2, #8]
  40f9ee:	2b00      	cmp	r3, #0
  40f9f0:	d0c5      	beq.n	40f97e <__sfvwrite_r+0x5e>
  40f9f2:	89a3      	ldrh	r3, [r4, #12]
  40f9f4:	2f00      	cmp	r7, #0
  40f9f6:	d1d8      	bne.n	40f9aa <__sfvwrite_r+0x8a>
  40f9f8:	f8d5 9000 	ldr.w	r9, [r5]
  40f9fc:	686f      	ldr	r7, [r5, #4]
  40f9fe:	3508      	adds	r5, #8
  40fa00:	e7d2      	b.n	40f9a8 <__sfvwrite_r+0x88>
  40fa02:	f8d5 9000 	ldr.w	r9, [r5]
  40fa06:	f8d5 8004 	ldr.w	r8, [r5, #4]
  40fa0a:	3508      	adds	r5, #8
  40fa0c:	e79f      	b.n	40f94e <__sfvwrite_r+0x2e>
  40fa0e:	2000      	movs	r0, #0
  40fa10:	4770      	bx	lr
  40fa12:	4621      	mov	r1, r4
  40fa14:	9800      	ldr	r0, [sp, #0]
  40fa16:	f7ff fd1f 	bl	40f458 <_fflush_r>
  40fa1a:	b370      	cbz	r0, 40fa7a <__sfvwrite_r+0x15a>
  40fa1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40fa20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40fa24:	f04f 30ff 	mov.w	r0, #4294967295
  40fa28:	81a3      	strh	r3, [r4, #12]
  40fa2a:	b003      	add	sp, #12
  40fa2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40fa30:	4681      	mov	r9, r0
  40fa32:	4633      	mov	r3, r6
  40fa34:	464e      	mov	r6, r9
  40fa36:	46a8      	mov	r8, r5
  40fa38:	469a      	mov	sl, r3
  40fa3a:	464d      	mov	r5, r9
  40fa3c:	b34e      	cbz	r6, 40fa92 <__sfvwrite_r+0x172>
  40fa3e:	b380      	cbz	r0, 40faa2 <__sfvwrite_r+0x182>
  40fa40:	6820      	ldr	r0, [r4, #0]
  40fa42:	6923      	ldr	r3, [r4, #16]
  40fa44:	6962      	ldr	r2, [r4, #20]
  40fa46:	45b1      	cmp	r9, r6
  40fa48:	46cb      	mov	fp, r9
  40fa4a:	bf28      	it	cs
  40fa4c:	46b3      	movcs	fp, r6
  40fa4e:	4298      	cmp	r0, r3
  40fa50:	465f      	mov	r7, fp
  40fa52:	d904      	bls.n	40fa5e <__sfvwrite_r+0x13e>
  40fa54:	68a3      	ldr	r3, [r4, #8]
  40fa56:	4413      	add	r3, r2
  40fa58:	459b      	cmp	fp, r3
  40fa5a:	f300 80a6 	bgt.w	40fbaa <__sfvwrite_r+0x28a>
  40fa5e:	4593      	cmp	fp, r2
  40fa60:	db4b      	blt.n	40fafa <__sfvwrite_r+0x1da>
  40fa62:	4613      	mov	r3, r2
  40fa64:	6a67      	ldr	r7, [r4, #36]	; 0x24
  40fa66:	69e1      	ldr	r1, [r4, #28]
  40fa68:	9800      	ldr	r0, [sp, #0]
  40fa6a:	462a      	mov	r2, r5
  40fa6c:	47b8      	blx	r7
  40fa6e:	1e07      	subs	r7, r0, #0
  40fa70:	ddd4      	ble.n	40fa1c <__sfvwrite_r+0xfc>
  40fa72:	ebb9 0907 	subs.w	r9, r9, r7
  40fa76:	d0cc      	beq.n	40fa12 <__sfvwrite_r+0xf2>
  40fa78:	2001      	movs	r0, #1
  40fa7a:	f8da 3008 	ldr.w	r3, [sl, #8]
  40fa7e:	1bdb      	subs	r3, r3, r7
  40fa80:	443d      	add	r5, r7
  40fa82:	1bf6      	subs	r6, r6, r7
  40fa84:	f8ca 3008 	str.w	r3, [sl, #8]
  40fa88:	2b00      	cmp	r3, #0
  40fa8a:	f43f af78 	beq.w	40f97e <__sfvwrite_r+0x5e>
  40fa8e:	2e00      	cmp	r6, #0
  40fa90:	d1d5      	bne.n	40fa3e <__sfvwrite_r+0x11e>
  40fa92:	f108 0308 	add.w	r3, r8, #8
  40fa96:	e913 0060 	ldmdb	r3, {r5, r6}
  40fa9a:	4698      	mov	r8, r3
  40fa9c:	3308      	adds	r3, #8
  40fa9e:	2e00      	cmp	r6, #0
  40faa0:	d0f9      	beq.n	40fa96 <__sfvwrite_r+0x176>
  40faa2:	4632      	mov	r2, r6
  40faa4:	210a      	movs	r1, #10
  40faa6:	4628      	mov	r0, r5
  40faa8:	f000 fc3a 	bl	410320 <memchr>
  40faac:	2800      	cmp	r0, #0
  40faae:	f000 80a1 	beq.w	40fbf4 <__sfvwrite_r+0x2d4>
  40fab2:	3001      	adds	r0, #1
  40fab4:	eba0 0905 	sub.w	r9, r0, r5
  40fab8:	e7c2      	b.n	40fa40 <__sfvwrite_r+0x120>
  40faba:	6820      	ldr	r0, [r4, #0]
  40fabc:	6923      	ldr	r3, [r4, #16]
  40fabe:	4298      	cmp	r0, r3
  40fac0:	d802      	bhi.n	40fac8 <__sfvwrite_r+0x1a8>
  40fac2:	6963      	ldr	r3, [r4, #20]
  40fac4:	429f      	cmp	r7, r3
  40fac6:	d25d      	bcs.n	40fb84 <__sfvwrite_r+0x264>
  40fac8:	45b8      	cmp	r8, r7
  40faca:	bf28      	it	cs
  40facc:	46b8      	movcs	r8, r7
  40face:	4642      	mov	r2, r8
  40fad0:	4649      	mov	r1, r9
  40fad2:	f000 fc75 	bl	4103c0 <memmove>
  40fad6:	68a3      	ldr	r3, [r4, #8]
  40fad8:	6822      	ldr	r2, [r4, #0]
  40fada:	eba3 0308 	sub.w	r3, r3, r8
  40fade:	4442      	add	r2, r8
  40fae0:	60a3      	str	r3, [r4, #8]
  40fae2:	6022      	str	r2, [r4, #0]
  40fae4:	b10b      	cbz	r3, 40faea <__sfvwrite_r+0x1ca>
  40fae6:	46c2      	mov	sl, r8
  40fae8:	e779      	b.n	40f9de <__sfvwrite_r+0xbe>
  40faea:	4621      	mov	r1, r4
  40faec:	9800      	ldr	r0, [sp, #0]
  40faee:	f7ff fcb3 	bl	40f458 <_fflush_r>
  40faf2:	2800      	cmp	r0, #0
  40faf4:	d192      	bne.n	40fa1c <__sfvwrite_r+0xfc>
  40faf6:	46c2      	mov	sl, r8
  40faf8:	e771      	b.n	40f9de <__sfvwrite_r+0xbe>
  40fafa:	465a      	mov	r2, fp
  40fafc:	4629      	mov	r1, r5
  40fafe:	f000 fc5f 	bl	4103c0 <memmove>
  40fb02:	68a2      	ldr	r2, [r4, #8]
  40fb04:	6823      	ldr	r3, [r4, #0]
  40fb06:	eba2 020b 	sub.w	r2, r2, fp
  40fb0a:	445b      	add	r3, fp
  40fb0c:	60a2      	str	r2, [r4, #8]
  40fb0e:	6023      	str	r3, [r4, #0]
  40fb10:	e7af      	b.n	40fa72 <__sfvwrite_r+0x152>
  40fb12:	6820      	ldr	r0, [r4, #0]
  40fb14:	46b8      	mov	r8, r7
  40fb16:	46ba      	mov	sl, r7
  40fb18:	46bb      	mov	fp, r7
  40fb1a:	e755      	b.n	40f9c8 <__sfvwrite_r+0xa8>
  40fb1c:	6962      	ldr	r2, [r4, #20]
  40fb1e:	6820      	ldr	r0, [r4, #0]
  40fb20:	6921      	ldr	r1, [r4, #16]
  40fb22:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  40fb26:	eba0 0a01 	sub.w	sl, r0, r1
  40fb2a:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  40fb2e:	f10a 0001 	add.w	r0, sl, #1
  40fb32:	ea4f 0868 	mov.w	r8, r8, asr #1
  40fb36:	4438      	add	r0, r7
  40fb38:	4540      	cmp	r0, r8
  40fb3a:	4642      	mov	r2, r8
  40fb3c:	bf84      	itt	hi
  40fb3e:	4680      	movhi	r8, r0
  40fb40:	4642      	movhi	r2, r8
  40fb42:	055b      	lsls	r3, r3, #21
  40fb44:	d544      	bpl.n	40fbd0 <__sfvwrite_r+0x2b0>
  40fb46:	4611      	mov	r1, r2
  40fb48:	9800      	ldr	r0, [sp, #0]
  40fb4a:	f000 f921 	bl	40fd90 <_malloc_r>
  40fb4e:	4683      	mov	fp, r0
  40fb50:	2800      	cmp	r0, #0
  40fb52:	d055      	beq.n	40fc00 <__sfvwrite_r+0x2e0>
  40fb54:	4652      	mov	r2, sl
  40fb56:	6921      	ldr	r1, [r4, #16]
  40fb58:	f7fe fae8 	bl	40e12c <memcpy>
  40fb5c:	89a3      	ldrh	r3, [r4, #12]
  40fb5e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  40fb62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40fb66:	81a3      	strh	r3, [r4, #12]
  40fb68:	eb0b 000a 	add.w	r0, fp, sl
  40fb6c:	eba8 030a 	sub.w	r3, r8, sl
  40fb70:	f8c4 b010 	str.w	fp, [r4, #16]
  40fb74:	f8c4 8014 	str.w	r8, [r4, #20]
  40fb78:	6020      	str	r0, [r4, #0]
  40fb7a:	60a3      	str	r3, [r4, #8]
  40fb7c:	46b8      	mov	r8, r7
  40fb7e:	46ba      	mov	sl, r7
  40fb80:	46bb      	mov	fp, r7
  40fb82:	e721      	b.n	40f9c8 <__sfvwrite_r+0xa8>
  40fb84:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  40fb88:	42b9      	cmp	r1, r7
  40fb8a:	bf28      	it	cs
  40fb8c:	4639      	movcs	r1, r7
  40fb8e:	464a      	mov	r2, r9
  40fb90:	fb91 f1f3 	sdiv	r1, r1, r3
  40fb94:	9800      	ldr	r0, [sp, #0]
  40fb96:	6a66      	ldr	r6, [r4, #36]	; 0x24
  40fb98:	fb03 f301 	mul.w	r3, r3, r1
  40fb9c:	69e1      	ldr	r1, [r4, #28]
  40fb9e:	47b0      	blx	r6
  40fba0:	f1b0 0a00 	subs.w	sl, r0, #0
  40fba4:	f73f af1b 	bgt.w	40f9de <__sfvwrite_r+0xbe>
  40fba8:	e738      	b.n	40fa1c <__sfvwrite_r+0xfc>
  40fbaa:	461a      	mov	r2, r3
  40fbac:	4629      	mov	r1, r5
  40fbae:	9301      	str	r3, [sp, #4]
  40fbb0:	f000 fc06 	bl	4103c0 <memmove>
  40fbb4:	6822      	ldr	r2, [r4, #0]
  40fbb6:	9b01      	ldr	r3, [sp, #4]
  40fbb8:	9800      	ldr	r0, [sp, #0]
  40fbba:	441a      	add	r2, r3
  40fbbc:	6022      	str	r2, [r4, #0]
  40fbbe:	4621      	mov	r1, r4
  40fbc0:	f7ff fc4a 	bl	40f458 <_fflush_r>
  40fbc4:	9b01      	ldr	r3, [sp, #4]
  40fbc6:	2800      	cmp	r0, #0
  40fbc8:	f47f af28 	bne.w	40fa1c <__sfvwrite_r+0xfc>
  40fbcc:	461f      	mov	r7, r3
  40fbce:	e750      	b.n	40fa72 <__sfvwrite_r+0x152>
  40fbd0:	9800      	ldr	r0, [sp, #0]
  40fbd2:	f000 fc65 	bl	4104a0 <_realloc_r>
  40fbd6:	4683      	mov	fp, r0
  40fbd8:	2800      	cmp	r0, #0
  40fbda:	d1c5      	bne.n	40fb68 <__sfvwrite_r+0x248>
  40fbdc:	9d00      	ldr	r5, [sp, #0]
  40fbde:	6921      	ldr	r1, [r4, #16]
  40fbe0:	4628      	mov	r0, r5
  40fbe2:	f7ff fdb7 	bl	40f754 <_free_r>
  40fbe6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40fbea:	220c      	movs	r2, #12
  40fbec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  40fbf0:	602a      	str	r2, [r5, #0]
  40fbf2:	e715      	b.n	40fa20 <__sfvwrite_r+0x100>
  40fbf4:	f106 0901 	add.w	r9, r6, #1
  40fbf8:	e722      	b.n	40fa40 <__sfvwrite_r+0x120>
  40fbfa:	f04f 30ff 	mov.w	r0, #4294967295
  40fbfe:	e6bf      	b.n	40f980 <__sfvwrite_r+0x60>
  40fc00:	9a00      	ldr	r2, [sp, #0]
  40fc02:	230c      	movs	r3, #12
  40fc04:	6013      	str	r3, [r2, #0]
  40fc06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40fc0a:	e709      	b.n	40fa20 <__sfvwrite_r+0x100>
  40fc0c:	7ffffc00 	.word	0x7ffffc00

0040fc10 <_fwalk_reent>:
  40fc10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40fc14:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  40fc18:	d01f      	beq.n	40fc5a <_fwalk_reent+0x4a>
  40fc1a:	4688      	mov	r8, r1
  40fc1c:	4606      	mov	r6, r0
  40fc1e:	f04f 0900 	mov.w	r9, #0
  40fc22:	687d      	ldr	r5, [r7, #4]
  40fc24:	68bc      	ldr	r4, [r7, #8]
  40fc26:	3d01      	subs	r5, #1
  40fc28:	d411      	bmi.n	40fc4e <_fwalk_reent+0x3e>
  40fc2a:	89a3      	ldrh	r3, [r4, #12]
  40fc2c:	2b01      	cmp	r3, #1
  40fc2e:	f105 35ff 	add.w	r5, r5, #4294967295
  40fc32:	d908      	bls.n	40fc46 <_fwalk_reent+0x36>
  40fc34:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  40fc38:	3301      	adds	r3, #1
  40fc3a:	4621      	mov	r1, r4
  40fc3c:	4630      	mov	r0, r6
  40fc3e:	d002      	beq.n	40fc46 <_fwalk_reent+0x36>
  40fc40:	47c0      	blx	r8
  40fc42:	ea49 0900 	orr.w	r9, r9, r0
  40fc46:	1c6b      	adds	r3, r5, #1
  40fc48:	f104 0468 	add.w	r4, r4, #104	; 0x68
  40fc4c:	d1ed      	bne.n	40fc2a <_fwalk_reent+0x1a>
  40fc4e:	683f      	ldr	r7, [r7, #0]
  40fc50:	2f00      	cmp	r7, #0
  40fc52:	d1e6      	bne.n	40fc22 <_fwalk_reent+0x12>
  40fc54:	4648      	mov	r0, r9
  40fc56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40fc5a:	46b9      	mov	r9, r7
  40fc5c:	4648      	mov	r0, r9
  40fc5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40fc62:	bf00      	nop

0040fc64 <__locale_mb_cur_max>:
  40fc64:	4b04      	ldr	r3, [pc, #16]	; (40fc78 <__locale_mb_cur_max+0x14>)
  40fc66:	4a05      	ldr	r2, [pc, #20]	; (40fc7c <__locale_mb_cur_max+0x18>)
  40fc68:	681b      	ldr	r3, [r3, #0]
  40fc6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  40fc6c:	2b00      	cmp	r3, #0
  40fc6e:	bf08      	it	eq
  40fc70:	4613      	moveq	r3, r2
  40fc72:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  40fc76:	4770      	bx	lr
  40fc78:	200002a0 	.word	0x200002a0
  40fc7c:	200006d4 	.word	0x200006d4

0040fc80 <__retarget_lock_init_recursive>:
  40fc80:	4770      	bx	lr
  40fc82:	bf00      	nop

0040fc84 <__retarget_lock_close_recursive>:
  40fc84:	4770      	bx	lr
  40fc86:	bf00      	nop

0040fc88 <__retarget_lock_acquire_recursive>:
  40fc88:	4770      	bx	lr
  40fc8a:	bf00      	nop

0040fc8c <__retarget_lock_release_recursive>:
  40fc8c:	4770      	bx	lr
  40fc8e:	bf00      	nop

0040fc90 <__swhatbuf_r>:
  40fc90:	b570      	push	{r4, r5, r6, lr}
  40fc92:	460c      	mov	r4, r1
  40fc94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40fc98:	2900      	cmp	r1, #0
  40fc9a:	b090      	sub	sp, #64	; 0x40
  40fc9c:	4615      	mov	r5, r2
  40fc9e:	461e      	mov	r6, r3
  40fca0:	db14      	blt.n	40fccc <__swhatbuf_r+0x3c>
  40fca2:	aa01      	add	r2, sp, #4
  40fca4:	f000 fff6 	bl	410c94 <_fstat_r>
  40fca8:	2800      	cmp	r0, #0
  40fcaa:	db0f      	blt.n	40fccc <__swhatbuf_r+0x3c>
  40fcac:	9a02      	ldr	r2, [sp, #8]
  40fcae:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  40fcb2:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  40fcb6:	fab2 f282 	clz	r2, r2
  40fcba:	0952      	lsrs	r2, r2, #5
  40fcbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40fcc0:	f44f 6000 	mov.w	r0, #2048	; 0x800
  40fcc4:	6032      	str	r2, [r6, #0]
  40fcc6:	602b      	str	r3, [r5, #0]
  40fcc8:	b010      	add	sp, #64	; 0x40
  40fcca:	bd70      	pop	{r4, r5, r6, pc}
  40fccc:	89a2      	ldrh	r2, [r4, #12]
  40fcce:	2300      	movs	r3, #0
  40fcd0:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  40fcd4:	6033      	str	r3, [r6, #0]
  40fcd6:	d004      	beq.n	40fce2 <__swhatbuf_r+0x52>
  40fcd8:	2240      	movs	r2, #64	; 0x40
  40fcda:	4618      	mov	r0, r3
  40fcdc:	602a      	str	r2, [r5, #0]
  40fcde:	b010      	add	sp, #64	; 0x40
  40fce0:	bd70      	pop	{r4, r5, r6, pc}
  40fce2:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40fce6:	602b      	str	r3, [r5, #0]
  40fce8:	b010      	add	sp, #64	; 0x40
  40fcea:	bd70      	pop	{r4, r5, r6, pc}

0040fcec <__smakebuf_r>:
  40fcec:	898a      	ldrh	r2, [r1, #12]
  40fcee:	0792      	lsls	r2, r2, #30
  40fcf0:	460b      	mov	r3, r1
  40fcf2:	d506      	bpl.n	40fd02 <__smakebuf_r+0x16>
  40fcf4:	f101 0243 	add.w	r2, r1, #67	; 0x43
  40fcf8:	2101      	movs	r1, #1
  40fcfa:	601a      	str	r2, [r3, #0]
  40fcfc:	611a      	str	r2, [r3, #16]
  40fcfe:	6159      	str	r1, [r3, #20]
  40fd00:	4770      	bx	lr
  40fd02:	b5f0      	push	{r4, r5, r6, r7, lr}
  40fd04:	b083      	sub	sp, #12
  40fd06:	ab01      	add	r3, sp, #4
  40fd08:	466a      	mov	r2, sp
  40fd0a:	460c      	mov	r4, r1
  40fd0c:	4606      	mov	r6, r0
  40fd0e:	f7ff ffbf 	bl	40fc90 <__swhatbuf_r>
  40fd12:	9900      	ldr	r1, [sp, #0]
  40fd14:	4605      	mov	r5, r0
  40fd16:	4630      	mov	r0, r6
  40fd18:	f000 f83a 	bl	40fd90 <_malloc_r>
  40fd1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40fd20:	b1d8      	cbz	r0, 40fd5a <__smakebuf_r+0x6e>
  40fd22:	9a01      	ldr	r2, [sp, #4]
  40fd24:	4f15      	ldr	r7, [pc, #84]	; (40fd7c <__smakebuf_r+0x90>)
  40fd26:	9900      	ldr	r1, [sp, #0]
  40fd28:	63f7      	str	r7, [r6, #60]	; 0x3c
  40fd2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40fd2e:	81a3      	strh	r3, [r4, #12]
  40fd30:	6020      	str	r0, [r4, #0]
  40fd32:	6120      	str	r0, [r4, #16]
  40fd34:	6161      	str	r1, [r4, #20]
  40fd36:	b91a      	cbnz	r2, 40fd40 <__smakebuf_r+0x54>
  40fd38:	432b      	orrs	r3, r5
  40fd3a:	81a3      	strh	r3, [r4, #12]
  40fd3c:	b003      	add	sp, #12
  40fd3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40fd40:	4630      	mov	r0, r6
  40fd42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40fd46:	f000 ffb9 	bl	410cbc <_isatty_r>
  40fd4a:	b1a0      	cbz	r0, 40fd76 <__smakebuf_r+0x8a>
  40fd4c:	89a3      	ldrh	r3, [r4, #12]
  40fd4e:	f023 0303 	bic.w	r3, r3, #3
  40fd52:	f043 0301 	orr.w	r3, r3, #1
  40fd56:	b21b      	sxth	r3, r3
  40fd58:	e7ee      	b.n	40fd38 <__smakebuf_r+0x4c>
  40fd5a:	059a      	lsls	r2, r3, #22
  40fd5c:	d4ee      	bmi.n	40fd3c <__smakebuf_r+0x50>
  40fd5e:	f023 0303 	bic.w	r3, r3, #3
  40fd62:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40fd66:	f043 0302 	orr.w	r3, r3, #2
  40fd6a:	2101      	movs	r1, #1
  40fd6c:	81a3      	strh	r3, [r4, #12]
  40fd6e:	6022      	str	r2, [r4, #0]
  40fd70:	6122      	str	r2, [r4, #16]
  40fd72:	6161      	str	r1, [r4, #20]
  40fd74:	e7e2      	b.n	40fd3c <__smakebuf_r+0x50>
  40fd76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40fd7a:	e7dd      	b.n	40fd38 <__smakebuf_r+0x4c>
  40fd7c:	0040f4ad 	.word	0x0040f4ad

0040fd80 <malloc>:
  40fd80:	4b02      	ldr	r3, [pc, #8]	; (40fd8c <malloc+0xc>)
  40fd82:	4601      	mov	r1, r0
  40fd84:	6818      	ldr	r0, [r3, #0]
  40fd86:	f000 b803 	b.w	40fd90 <_malloc_r>
  40fd8a:	bf00      	nop
  40fd8c:	200002a0 	.word	0x200002a0

0040fd90 <_malloc_r>:
  40fd90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40fd94:	f101 060b 	add.w	r6, r1, #11
  40fd98:	2e16      	cmp	r6, #22
  40fd9a:	b083      	sub	sp, #12
  40fd9c:	4605      	mov	r5, r0
  40fd9e:	f240 809e 	bls.w	40fede <_malloc_r+0x14e>
  40fda2:	f036 0607 	bics.w	r6, r6, #7
  40fda6:	f100 80bd 	bmi.w	40ff24 <_malloc_r+0x194>
  40fdaa:	42b1      	cmp	r1, r6
  40fdac:	f200 80ba 	bhi.w	40ff24 <_malloc_r+0x194>
  40fdb0:	f000 fb6a 	bl	410488 <__malloc_lock>
  40fdb4:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  40fdb8:	f0c0 8293 	bcc.w	4102e2 <_malloc_r+0x552>
  40fdbc:	0a73      	lsrs	r3, r6, #9
  40fdbe:	f000 80b8 	beq.w	40ff32 <_malloc_r+0x1a2>
  40fdc2:	2b04      	cmp	r3, #4
  40fdc4:	f200 8179 	bhi.w	4100ba <_malloc_r+0x32a>
  40fdc8:	09b3      	lsrs	r3, r6, #6
  40fdca:	f103 0039 	add.w	r0, r3, #57	; 0x39
  40fdce:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  40fdd2:	00c3      	lsls	r3, r0, #3
  40fdd4:	4fbf      	ldr	r7, [pc, #764]	; (4100d4 <_malloc_r+0x344>)
  40fdd6:	443b      	add	r3, r7
  40fdd8:	f1a3 0108 	sub.w	r1, r3, #8
  40fddc:	685c      	ldr	r4, [r3, #4]
  40fdde:	42a1      	cmp	r1, r4
  40fde0:	d106      	bne.n	40fdf0 <_malloc_r+0x60>
  40fde2:	e00c      	b.n	40fdfe <_malloc_r+0x6e>
  40fde4:	2a00      	cmp	r2, #0
  40fde6:	f280 80aa 	bge.w	40ff3e <_malloc_r+0x1ae>
  40fdea:	68e4      	ldr	r4, [r4, #12]
  40fdec:	42a1      	cmp	r1, r4
  40fdee:	d006      	beq.n	40fdfe <_malloc_r+0x6e>
  40fdf0:	6863      	ldr	r3, [r4, #4]
  40fdf2:	f023 0303 	bic.w	r3, r3, #3
  40fdf6:	1b9a      	subs	r2, r3, r6
  40fdf8:	2a0f      	cmp	r2, #15
  40fdfa:	ddf3      	ble.n	40fde4 <_malloc_r+0x54>
  40fdfc:	4670      	mov	r0, lr
  40fdfe:	693c      	ldr	r4, [r7, #16]
  40fe00:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 4100e8 <_malloc_r+0x358>
  40fe04:	4574      	cmp	r4, lr
  40fe06:	f000 81ab 	beq.w	410160 <_malloc_r+0x3d0>
  40fe0a:	6863      	ldr	r3, [r4, #4]
  40fe0c:	f023 0303 	bic.w	r3, r3, #3
  40fe10:	1b9a      	subs	r2, r3, r6
  40fe12:	2a0f      	cmp	r2, #15
  40fe14:	f300 8190 	bgt.w	410138 <_malloc_r+0x3a8>
  40fe18:	2a00      	cmp	r2, #0
  40fe1a:	f8c7 e014 	str.w	lr, [r7, #20]
  40fe1e:	f8c7 e010 	str.w	lr, [r7, #16]
  40fe22:	f280 809d 	bge.w	40ff60 <_malloc_r+0x1d0>
  40fe26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40fe2a:	f080 8161 	bcs.w	4100f0 <_malloc_r+0x360>
  40fe2e:	08db      	lsrs	r3, r3, #3
  40fe30:	f103 0c01 	add.w	ip, r3, #1
  40fe34:	1099      	asrs	r1, r3, #2
  40fe36:	687a      	ldr	r2, [r7, #4]
  40fe38:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  40fe3c:	f8c4 8008 	str.w	r8, [r4, #8]
  40fe40:	2301      	movs	r3, #1
  40fe42:	408b      	lsls	r3, r1
  40fe44:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  40fe48:	4313      	orrs	r3, r2
  40fe4a:	3908      	subs	r1, #8
  40fe4c:	60e1      	str	r1, [r4, #12]
  40fe4e:	607b      	str	r3, [r7, #4]
  40fe50:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  40fe54:	f8c8 400c 	str.w	r4, [r8, #12]
  40fe58:	1082      	asrs	r2, r0, #2
  40fe5a:	2401      	movs	r4, #1
  40fe5c:	4094      	lsls	r4, r2
  40fe5e:	429c      	cmp	r4, r3
  40fe60:	f200 808b 	bhi.w	40ff7a <_malloc_r+0x1ea>
  40fe64:	421c      	tst	r4, r3
  40fe66:	d106      	bne.n	40fe76 <_malloc_r+0xe6>
  40fe68:	f020 0003 	bic.w	r0, r0, #3
  40fe6c:	0064      	lsls	r4, r4, #1
  40fe6e:	421c      	tst	r4, r3
  40fe70:	f100 0004 	add.w	r0, r0, #4
  40fe74:	d0fa      	beq.n	40fe6c <_malloc_r+0xdc>
  40fe76:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  40fe7a:	46cc      	mov	ip, r9
  40fe7c:	4680      	mov	r8, r0
  40fe7e:	f8dc 300c 	ldr.w	r3, [ip, #12]
  40fe82:	459c      	cmp	ip, r3
  40fe84:	d107      	bne.n	40fe96 <_malloc_r+0x106>
  40fe86:	e16d      	b.n	410164 <_malloc_r+0x3d4>
  40fe88:	2a00      	cmp	r2, #0
  40fe8a:	f280 817b 	bge.w	410184 <_malloc_r+0x3f4>
  40fe8e:	68db      	ldr	r3, [r3, #12]
  40fe90:	459c      	cmp	ip, r3
  40fe92:	f000 8167 	beq.w	410164 <_malloc_r+0x3d4>
  40fe96:	6859      	ldr	r1, [r3, #4]
  40fe98:	f021 0103 	bic.w	r1, r1, #3
  40fe9c:	1b8a      	subs	r2, r1, r6
  40fe9e:	2a0f      	cmp	r2, #15
  40fea0:	ddf2      	ble.n	40fe88 <_malloc_r+0xf8>
  40fea2:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  40fea6:	f8d3 8008 	ldr.w	r8, [r3, #8]
  40feaa:	9300      	str	r3, [sp, #0]
  40feac:	199c      	adds	r4, r3, r6
  40feae:	4628      	mov	r0, r5
  40feb0:	f046 0601 	orr.w	r6, r6, #1
  40feb4:	f042 0501 	orr.w	r5, r2, #1
  40feb8:	605e      	str	r6, [r3, #4]
  40feba:	f8c8 c00c 	str.w	ip, [r8, #12]
  40febe:	f8cc 8008 	str.w	r8, [ip, #8]
  40fec2:	617c      	str	r4, [r7, #20]
  40fec4:	613c      	str	r4, [r7, #16]
  40fec6:	f8c4 e00c 	str.w	lr, [r4, #12]
  40feca:	f8c4 e008 	str.w	lr, [r4, #8]
  40fece:	6065      	str	r5, [r4, #4]
  40fed0:	505a      	str	r2, [r3, r1]
  40fed2:	f000 fadf 	bl	410494 <__malloc_unlock>
  40fed6:	9b00      	ldr	r3, [sp, #0]
  40fed8:	f103 0408 	add.w	r4, r3, #8
  40fedc:	e01e      	b.n	40ff1c <_malloc_r+0x18c>
  40fede:	2910      	cmp	r1, #16
  40fee0:	d820      	bhi.n	40ff24 <_malloc_r+0x194>
  40fee2:	f000 fad1 	bl	410488 <__malloc_lock>
  40fee6:	2610      	movs	r6, #16
  40fee8:	2318      	movs	r3, #24
  40feea:	2002      	movs	r0, #2
  40feec:	4f79      	ldr	r7, [pc, #484]	; (4100d4 <_malloc_r+0x344>)
  40feee:	443b      	add	r3, r7
  40fef0:	f1a3 0208 	sub.w	r2, r3, #8
  40fef4:	685c      	ldr	r4, [r3, #4]
  40fef6:	4294      	cmp	r4, r2
  40fef8:	f000 813d 	beq.w	410176 <_malloc_r+0x3e6>
  40fefc:	6863      	ldr	r3, [r4, #4]
  40fefe:	68e1      	ldr	r1, [r4, #12]
  40ff00:	68a6      	ldr	r6, [r4, #8]
  40ff02:	f023 0303 	bic.w	r3, r3, #3
  40ff06:	4423      	add	r3, r4
  40ff08:	4628      	mov	r0, r5
  40ff0a:	685a      	ldr	r2, [r3, #4]
  40ff0c:	60f1      	str	r1, [r6, #12]
  40ff0e:	f042 0201 	orr.w	r2, r2, #1
  40ff12:	608e      	str	r6, [r1, #8]
  40ff14:	605a      	str	r2, [r3, #4]
  40ff16:	f000 fabd 	bl	410494 <__malloc_unlock>
  40ff1a:	3408      	adds	r4, #8
  40ff1c:	4620      	mov	r0, r4
  40ff1e:	b003      	add	sp, #12
  40ff20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40ff24:	2400      	movs	r4, #0
  40ff26:	230c      	movs	r3, #12
  40ff28:	4620      	mov	r0, r4
  40ff2a:	602b      	str	r3, [r5, #0]
  40ff2c:	b003      	add	sp, #12
  40ff2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40ff32:	2040      	movs	r0, #64	; 0x40
  40ff34:	f44f 7300 	mov.w	r3, #512	; 0x200
  40ff38:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  40ff3c:	e74a      	b.n	40fdd4 <_malloc_r+0x44>
  40ff3e:	4423      	add	r3, r4
  40ff40:	68e1      	ldr	r1, [r4, #12]
  40ff42:	685a      	ldr	r2, [r3, #4]
  40ff44:	68a6      	ldr	r6, [r4, #8]
  40ff46:	f042 0201 	orr.w	r2, r2, #1
  40ff4a:	60f1      	str	r1, [r6, #12]
  40ff4c:	4628      	mov	r0, r5
  40ff4e:	608e      	str	r6, [r1, #8]
  40ff50:	605a      	str	r2, [r3, #4]
  40ff52:	f000 fa9f 	bl	410494 <__malloc_unlock>
  40ff56:	3408      	adds	r4, #8
  40ff58:	4620      	mov	r0, r4
  40ff5a:	b003      	add	sp, #12
  40ff5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40ff60:	4423      	add	r3, r4
  40ff62:	4628      	mov	r0, r5
  40ff64:	685a      	ldr	r2, [r3, #4]
  40ff66:	f042 0201 	orr.w	r2, r2, #1
  40ff6a:	605a      	str	r2, [r3, #4]
  40ff6c:	f000 fa92 	bl	410494 <__malloc_unlock>
  40ff70:	3408      	adds	r4, #8
  40ff72:	4620      	mov	r0, r4
  40ff74:	b003      	add	sp, #12
  40ff76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40ff7a:	68bc      	ldr	r4, [r7, #8]
  40ff7c:	6863      	ldr	r3, [r4, #4]
  40ff7e:	f023 0803 	bic.w	r8, r3, #3
  40ff82:	45b0      	cmp	r8, r6
  40ff84:	d304      	bcc.n	40ff90 <_malloc_r+0x200>
  40ff86:	eba8 0306 	sub.w	r3, r8, r6
  40ff8a:	2b0f      	cmp	r3, #15
  40ff8c:	f300 8085 	bgt.w	41009a <_malloc_r+0x30a>
  40ff90:	f8df 9158 	ldr.w	r9, [pc, #344]	; 4100ec <_malloc_r+0x35c>
  40ff94:	4b50      	ldr	r3, [pc, #320]	; (4100d8 <_malloc_r+0x348>)
  40ff96:	f8d9 2000 	ldr.w	r2, [r9]
  40ff9a:	681b      	ldr	r3, [r3, #0]
  40ff9c:	3201      	adds	r2, #1
  40ff9e:	4433      	add	r3, r6
  40ffa0:	eb04 0a08 	add.w	sl, r4, r8
  40ffa4:	f000 8155 	beq.w	410252 <_malloc_r+0x4c2>
  40ffa8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  40ffac:	330f      	adds	r3, #15
  40ffae:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  40ffb2:	f02b 0b0f 	bic.w	fp, fp, #15
  40ffb6:	4659      	mov	r1, fp
  40ffb8:	4628      	mov	r0, r5
  40ffba:	f000 fc17 	bl	4107ec <_sbrk_r>
  40ffbe:	1c41      	adds	r1, r0, #1
  40ffc0:	4602      	mov	r2, r0
  40ffc2:	f000 80fc 	beq.w	4101be <_malloc_r+0x42e>
  40ffc6:	4582      	cmp	sl, r0
  40ffc8:	f200 80f7 	bhi.w	4101ba <_malloc_r+0x42a>
  40ffcc:	4b43      	ldr	r3, [pc, #268]	; (4100dc <_malloc_r+0x34c>)
  40ffce:	6819      	ldr	r1, [r3, #0]
  40ffd0:	4459      	add	r1, fp
  40ffd2:	6019      	str	r1, [r3, #0]
  40ffd4:	f000 814d 	beq.w	410272 <_malloc_r+0x4e2>
  40ffd8:	f8d9 0000 	ldr.w	r0, [r9]
  40ffdc:	3001      	adds	r0, #1
  40ffde:	bf1b      	ittet	ne
  40ffe0:	eba2 0a0a 	subne.w	sl, r2, sl
  40ffe4:	4451      	addne	r1, sl
  40ffe6:	f8c9 2000 	streq.w	r2, [r9]
  40ffea:	6019      	strne	r1, [r3, #0]
  40ffec:	f012 0107 	ands.w	r1, r2, #7
  40fff0:	f000 8115 	beq.w	41021e <_malloc_r+0x48e>
  40fff4:	f1c1 0008 	rsb	r0, r1, #8
  40fff8:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  40fffc:	4402      	add	r2, r0
  40fffe:	3108      	adds	r1, #8
  410000:	eb02 090b 	add.w	r9, r2, fp
  410004:	f3c9 090b 	ubfx	r9, r9, #0, #12
  410008:	eba1 0909 	sub.w	r9, r1, r9
  41000c:	4649      	mov	r1, r9
  41000e:	4628      	mov	r0, r5
  410010:	9301      	str	r3, [sp, #4]
  410012:	9200      	str	r2, [sp, #0]
  410014:	f000 fbea 	bl	4107ec <_sbrk_r>
  410018:	1c43      	adds	r3, r0, #1
  41001a:	e89d 000c 	ldmia.w	sp, {r2, r3}
  41001e:	f000 8143 	beq.w	4102a8 <_malloc_r+0x518>
  410022:	1a80      	subs	r0, r0, r2
  410024:	4448      	add	r0, r9
  410026:	f040 0001 	orr.w	r0, r0, #1
  41002a:	6819      	ldr	r1, [r3, #0]
  41002c:	60ba      	str	r2, [r7, #8]
  41002e:	4449      	add	r1, r9
  410030:	42bc      	cmp	r4, r7
  410032:	6050      	str	r0, [r2, #4]
  410034:	6019      	str	r1, [r3, #0]
  410036:	d017      	beq.n	410068 <_malloc_r+0x2d8>
  410038:	f1b8 0f0f 	cmp.w	r8, #15
  41003c:	f240 80fb 	bls.w	410236 <_malloc_r+0x4a6>
  410040:	6860      	ldr	r0, [r4, #4]
  410042:	f1a8 020c 	sub.w	r2, r8, #12
  410046:	f022 0207 	bic.w	r2, r2, #7
  41004a:	eb04 0e02 	add.w	lr, r4, r2
  41004e:	f000 0001 	and.w	r0, r0, #1
  410052:	f04f 0c05 	mov.w	ip, #5
  410056:	4310      	orrs	r0, r2
  410058:	2a0f      	cmp	r2, #15
  41005a:	6060      	str	r0, [r4, #4]
  41005c:	f8ce c004 	str.w	ip, [lr, #4]
  410060:	f8ce c008 	str.w	ip, [lr, #8]
  410064:	f200 8117 	bhi.w	410296 <_malloc_r+0x506>
  410068:	4b1d      	ldr	r3, [pc, #116]	; (4100e0 <_malloc_r+0x350>)
  41006a:	68bc      	ldr	r4, [r7, #8]
  41006c:	681a      	ldr	r2, [r3, #0]
  41006e:	4291      	cmp	r1, r2
  410070:	bf88      	it	hi
  410072:	6019      	strhi	r1, [r3, #0]
  410074:	4b1b      	ldr	r3, [pc, #108]	; (4100e4 <_malloc_r+0x354>)
  410076:	681a      	ldr	r2, [r3, #0]
  410078:	4291      	cmp	r1, r2
  41007a:	6862      	ldr	r2, [r4, #4]
  41007c:	bf88      	it	hi
  41007e:	6019      	strhi	r1, [r3, #0]
  410080:	f022 0203 	bic.w	r2, r2, #3
  410084:	4296      	cmp	r6, r2
  410086:	eba2 0306 	sub.w	r3, r2, r6
  41008a:	d801      	bhi.n	410090 <_malloc_r+0x300>
  41008c:	2b0f      	cmp	r3, #15
  41008e:	dc04      	bgt.n	41009a <_malloc_r+0x30a>
  410090:	4628      	mov	r0, r5
  410092:	f000 f9ff 	bl	410494 <__malloc_unlock>
  410096:	2400      	movs	r4, #0
  410098:	e740      	b.n	40ff1c <_malloc_r+0x18c>
  41009a:	19a2      	adds	r2, r4, r6
  41009c:	f043 0301 	orr.w	r3, r3, #1
  4100a0:	f046 0601 	orr.w	r6, r6, #1
  4100a4:	6066      	str	r6, [r4, #4]
  4100a6:	4628      	mov	r0, r5
  4100a8:	60ba      	str	r2, [r7, #8]
  4100aa:	6053      	str	r3, [r2, #4]
  4100ac:	f000 f9f2 	bl	410494 <__malloc_unlock>
  4100b0:	3408      	adds	r4, #8
  4100b2:	4620      	mov	r0, r4
  4100b4:	b003      	add	sp, #12
  4100b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4100ba:	2b14      	cmp	r3, #20
  4100bc:	d971      	bls.n	4101a2 <_malloc_r+0x412>
  4100be:	2b54      	cmp	r3, #84	; 0x54
  4100c0:	f200 80a3 	bhi.w	41020a <_malloc_r+0x47a>
  4100c4:	0b33      	lsrs	r3, r6, #12
  4100c6:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  4100ca:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  4100ce:	00c3      	lsls	r3, r0, #3
  4100d0:	e680      	b.n	40fdd4 <_malloc_r+0x44>
  4100d2:	bf00      	nop
  4100d4:	20000840 	.word	0x20000840
  4100d8:	2001a790 	.word	0x2001a790
  4100dc:	2001a760 	.word	0x2001a760
  4100e0:	2001a788 	.word	0x2001a788
  4100e4:	2001a78c 	.word	0x2001a78c
  4100e8:	20000848 	.word	0x20000848
  4100ec:	20000c48 	.word	0x20000c48
  4100f0:	0a5a      	lsrs	r2, r3, #9
  4100f2:	2a04      	cmp	r2, #4
  4100f4:	d95b      	bls.n	4101ae <_malloc_r+0x41e>
  4100f6:	2a14      	cmp	r2, #20
  4100f8:	f200 80ae 	bhi.w	410258 <_malloc_r+0x4c8>
  4100fc:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  410100:	00c9      	lsls	r1, r1, #3
  410102:	325b      	adds	r2, #91	; 0x5b
  410104:	eb07 0c01 	add.w	ip, r7, r1
  410108:	5879      	ldr	r1, [r7, r1]
  41010a:	f1ac 0c08 	sub.w	ip, ip, #8
  41010e:	458c      	cmp	ip, r1
  410110:	f000 8088 	beq.w	410224 <_malloc_r+0x494>
  410114:	684a      	ldr	r2, [r1, #4]
  410116:	f022 0203 	bic.w	r2, r2, #3
  41011a:	4293      	cmp	r3, r2
  41011c:	d273      	bcs.n	410206 <_malloc_r+0x476>
  41011e:	6889      	ldr	r1, [r1, #8]
  410120:	458c      	cmp	ip, r1
  410122:	d1f7      	bne.n	410114 <_malloc_r+0x384>
  410124:	f8dc 200c 	ldr.w	r2, [ip, #12]
  410128:	687b      	ldr	r3, [r7, #4]
  41012a:	60e2      	str	r2, [r4, #12]
  41012c:	f8c4 c008 	str.w	ip, [r4, #8]
  410130:	6094      	str	r4, [r2, #8]
  410132:	f8cc 400c 	str.w	r4, [ip, #12]
  410136:	e68f      	b.n	40fe58 <_malloc_r+0xc8>
  410138:	19a1      	adds	r1, r4, r6
  41013a:	f046 0c01 	orr.w	ip, r6, #1
  41013e:	f042 0601 	orr.w	r6, r2, #1
  410142:	f8c4 c004 	str.w	ip, [r4, #4]
  410146:	4628      	mov	r0, r5
  410148:	6179      	str	r1, [r7, #20]
  41014a:	6139      	str	r1, [r7, #16]
  41014c:	f8c1 e00c 	str.w	lr, [r1, #12]
  410150:	f8c1 e008 	str.w	lr, [r1, #8]
  410154:	604e      	str	r6, [r1, #4]
  410156:	50e2      	str	r2, [r4, r3]
  410158:	f000 f99c 	bl	410494 <__malloc_unlock>
  41015c:	3408      	adds	r4, #8
  41015e:	e6dd      	b.n	40ff1c <_malloc_r+0x18c>
  410160:	687b      	ldr	r3, [r7, #4]
  410162:	e679      	b.n	40fe58 <_malloc_r+0xc8>
  410164:	f108 0801 	add.w	r8, r8, #1
  410168:	f018 0f03 	tst.w	r8, #3
  41016c:	f10c 0c08 	add.w	ip, ip, #8
  410170:	f47f ae85 	bne.w	40fe7e <_malloc_r+0xee>
  410174:	e02d      	b.n	4101d2 <_malloc_r+0x442>
  410176:	68dc      	ldr	r4, [r3, #12]
  410178:	42a3      	cmp	r3, r4
  41017a:	bf08      	it	eq
  41017c:	3002      	addeq	r0, #2
  41017e:	f43f ae3e 	beq.w	40fdfe <_malloc_r+0x6e>
  410182:	e6bb      	b.n	40fefc <_malloc_r+0x16c>
  410184:	4419      	add	r1, r3
  410186:	461c      	mov	r4, r3
  410188:	684a      	ldr	r2, [r1, #4]
  41018a:	68db      	ldr	r3, [r3, #12]
  41018c:	f854 6f08 	ldr.w	r6, [r4, #8]!
  410190:	f042 0201 	orr.w	r2, r2, #1
  410194:	604a      	str	r2, [r1, #4]
  410196:	4628      	mov	r0, r5
  410198:	60f3      	str	r3, [r6, #12]
  41019a:	609e      	str	r6, [r3, #8]
  41019c:	f000 f97a 	bl	410494 <__malloc_unlock>
  4101a0:	e6bc      	b.n	40ff1c <_malloc_r+0x18c>
  4101a2:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  4101a6:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  4101aa:	00c3      	lsls	r3, r0, #3
  4101ac:	e612      	b.n	40fdd4 <_malloc_r+0x44>
  4101ae:	099a      	lsrs	r2, r3, #6
  4101b0:	f102 0139 	add.w	r1, r2, #57	; 0x39
  4101b4:	00c9      	lsls	r1, r1, #3
  4101b6:	3238      	adds	r2, #56	; 0x38
  4101b8:	e7a4      	b.n	410104 <_malloc_r+0x374>
  4101ba:	42bc      	cmp	r4, r7
  4101bc:	d054      	beq.n	410268 <_malloc_r+0x4d8>
  4101be:	68bc      	ldr	r4, [r7, #8]
  4101c0:	6862      	ldr	r2, [r4, #4]
  4101c2:	f022 0203 	bic.w	r2, r2, #3
  4101c6:	e75d      	b.n	410084 <_malloc_r+0x2f4>
  4101c8:	f859 3908 	ldr.w	r3, [r9], #-8
  4101cc:	4599      	cmp	r9, r3
  4101ce:	f040 8086 	bne.w	4102de <_malloc_r+0x54e>
  4101d2:	f010 0f03 	tst.w	r0, #3
  4101d6:	f100 30ff 	add.w	r0, r0, #4294967295
  4101da:	d1f5      	bne.n	4101c8 <_malloc_r+0x438>
  4101dc:	687b      	ldr	r3, [r7, #4]
  4101de:	ea23 0304 	bic.w	r3, r3, r4
  4101e2:	607b      	str	r3, [r7, #4]
  4101e4:	0064      	lsls	r4, r4, #1
  4101e6:	429c      	cmp	r4, r3
  4101e8:	f63f aec7 	bhi.w	40ff7a <_malloc_r+0x1ea>
  4101ec:	2c00      	cmp	r4, #0
  4101ee:	f43f aec4 	beq.w	40ff7a <_malloc_r+0x1ea>
  4101f2:	421c      	tst	r4, r3
  4101f4:	4640      	mov	r0, r8
  4101f6:	f47f ae3e 	bne.w	40fe76 <_malloc_r+0xe6>
  4101fa:	0064      	lsls	r4, r4, #1
  4101fc:	421c      	tst	r4, r3
  4101fe:	f100 0004 	add.w	r0, r0, #4
  410202:	d0fa      	beq.n	4101fa <_malloc_r+0x46a>
  410204:	e637      	b.n	40fe76 <_malloc_r+0xe6>
  410206:	468c      	mov	ip, r1
  410208:	e78c      	b.n	410124 <_malloc_r+0x394>
  41020a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  41020e:	d815      	bhi.n	41023c <_malloc_r+0x4ac>
  410210:	0bf3      	lsrs	r3, r6, #15
  410212:	f103 0078 	add.w	r0, r3, #120	; 0x78
  410216:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  41021a:	00c3      	lsls	r3, r0, #3
  41021c:	e5da      	b.n	40fdd4 <_malloc_r+0x44>
  41021e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  410222:	e6ed      	b.n	410000 <_malloc_r+0x270>
  410224:	687b      	ldr	r3, [r7, #4]
  410226:	1092      	asrs	r2, r2, #2
  410228:	2101      	movs	r1, #1
  41022a:	fa01 f202 	lsl.w	r2, r1, r2
  41022e:	4313      	orrs	r3, r2
  410230:	607b      	str	r3, [r7, #4]
  410232:	4662      	mov	r2, ip
  410234:	e779      	b.n	41012a <_malloc_r+0x39a>
  410236:	2301      	movs	r3, #1
  410238:	6053      	str	r3, [r2, #4]
  41023a:	e729      	b.n	410090 <_malloc_r+0x300>
  41023c:	f240 5254 	movw	r2, #1364	; 0x554
  410240:	4293      	cmp	r3, r2
  410242:	d822      	bhi.n	41028a <_malloc_r+0x4fa>
  410244:	0cb3      	lsrs	r3, r6, #18
  410246:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  41024a:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  41024e:	00c3      	lsls	r3, r0, #3
  410250:	e5c0      	b.n	40fdd4 <_malloc_r+0x44>
  410252:	f103 0b10 	add.w	fp, r3, #16
  410256:	e6ae      	b.n	40ffb6 <_malloc_r+0x226>
  410258:	2a54      	cmp	r2, #84	; 0x54
  41025a:	d829      	bhi.n	4102b0 <_malloc_r+0x520>
  41025c:	0b1a      	lsrs	r2, r3, #12
  41025e:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  410262:	00c9      	lsls	r1, r1, #3
  410264:	326e      	adds	r2, #110	; 0x6e
  410266:	e74d      	b.n	410104 <_malloc_r+0x374>
  410268:	4b20      	ldr	r3, [pc, #128]	; (4102ec <_malloc_r+0x55c>)
  41026a:	6819      	ldr	r1, [r3, #0]
  41026c:	4459      	add	r1, fp
  41026e:	6019      	str	r1, [r3, #0]
  410270:	e6b2      	b.n	40ffd8 <_malloc_r+0x248>
  410272:	f3ca 000b 	ubfx	r0, sl, #0, #12
  410276:	2800      	cmp	r0, #0
  410278:	f47f aeae 	bne.w	40ffd8 <_malloc_r+0x248>
  41027c:	eb08 030b 	add.w	r3, r8, fp
  410280:	68ba      	ldr	r2, [r7, #8]
  410282:	f043 0301 	orr.w	r3, r3, #1
  410286:	6053      	str	r3, [r2, #4]
  410288:	e6ee      	b.n	410068 <_malloc_r+0x2d8>
  41028a:	207f      	movs	r0, #127	; 0x7f
  41028c:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  410290:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  410294:	e59e      	b.n	40fdd4 <_malloc_r+0x44>
  410296:	f104 0108 	add.w	r1, r4, #8
  41029a:	4628      	mov	r0, r5
  41029c:	9300      	str	r3, [sp, #0]
  41029e:	f7ff fa59 	bl	40f754 <_free_r>
  4102a2:	9b00      	ldr	r3, [sp, #0]
  4102a4:	6819      	ldr	r1, [r3, #0]
  4102a6:	e6df      	b.n	410068 <_malloc_r+0x2d8>
  4102a8:	2001      	movs	r0, #1
  4102aa:	f04f 0900 	mov.w	r9, #0
  4102ae:	e6bc      	b.n	41002a <_malloc_r+0x29a>
  4102b0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4102b4:	d805      	bhi.n	4102c2 <_malloc_r+0x532>
  4102b6:	0bda      	lsrs	r2, r3, #15
  4102b8:	f102 0178 	add.w	r1, r2, #120	; 0x78
  4102bc:	00c9      	lsls	r1, r1, #3
  4102be:	3277      	adds	r2, #119	; 0x77
  4102c0:	e720      	b.n	410104 <_malloc_r+0x374>
  4102c2:	f240 5154 	movw	r1, #1364	; 0x554
  4102c6:	428a      	cmp	r2, r1
  4102c8:	d805      	bhi.n	4102d6 <_malloc_r+0x546>
  4102ca:	0c9a      	lsrs	r2, r3, #18
  4102cc:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  4102d0:	00c9      	lsls	r1, r1, #3
  4102d2:	327c      	adds	r2, #124	; 0x7c
  4102d4:	e716      	b.n	410104 <_malloc_r+0x374>
  4102d6:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  4102da:	227e      	movs	r2, #126	; 0x7e
  4102dc:	e712      	b.n	410104 <_malloc_r+0x374>
  4102de:	687b      	ldr	r3, [r7, #4]
  4102e0:	e780      	b.n	4101e4 <_malloc_r+0x454>
  4102e2:	08f0      	lsrs	r0, r6, #3
  4102e4:	f106 0308 	add.w	r3, r6, #8
  4102e8:	e600      	b.n	40feec <_malloc_r+0x15c>
  4102ea:	bf00      	nop
  4102ec:	2001a760 	.word	0x2001a760

004102f0 <__ascii_mbtowc>:
  4102f0:	b082      	sub	sp, #8
  4102f2:	b149      	cbz	r1, 410308 <__ascii_mbtowc+0x18>
  4102f4:	b15a      	cbz	r2, 41030e <__ascii_mbtowc+0x1e>
  4102f6:	b16b      	cbz	r3, 410314 <__ascii_mbtowc+0x24>
  4102f8:	7813      	ldrb	r3, [r2, #0]
  4102fa:	600b      	str	r3, [r1, #0]
  4102fc:	7812      	ldrb	r2, [r2, #0]
  4102fe:	1c10      	adds	r0, r2, #0
  410300:	bf18      	it	ne
  410302:	2001      	movne	r0, #1
  410304:	b002      	add	sp, #8
  410306:	4770      	bx	lr
  410308:	a901      	add	r1, sp, #4
  41030a:	2a00      	cmp	r2, #0
  41030c:	d1f3      	bne.n	4102f6 <__ascii_mbtowc+0x6>
  41030e:	4610      	mov	r0, r2
  410310:	b002      	add	sp, #8
  410312:	4770      	bx	lr
  410314:	f06f 0001 	mvn.w	r0, #1
  410318:	e7f4      	b.n	410304 <__ascii_mbtowc+0x14>
  41031a:	bf00      	nop
  41031c:	0000      	movs	r0, r0
	...

00410320 <memchr>:
  410320:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  410324:	2a10      	cmp	r2, #16
  410326:	db2b      	blt.n	410380 <memchr+0x60>
  410328:	f010 0f07 	tst.w	r0, #7
  41032c:	d008      	beq.n	410340 <memchr+0x20>
  41032e:	f810 3b01 	ldrb.w	r3, [r0], #1
  410332:	3a01      	subs	r2, #1
  410334:	428b      	cmp	r3, r1
  410336:	d02d      	beq.n	410394 <memchr+0x74>
  410338:	f010 0f07 	tst.w	r0, #7
  41033c:	b342      	cbz	r2, 410390 <memchr+0x70>
  41033e:	d1f6      	bne.n	41032e <memchr+0xe>
  410340:	b4f0      	push	{r4, r5, r6, r7}
  410342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  410346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  41034a:	f022 0407 	bic.w	r4, r2, #7
  41034e:	f07f 0700 	mvns.w	r7, #0
  410352:	2300      	movs	r3, #0
  410354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  410358:	3c08      	subs	r4, #8
  41035a:	ea85 0501 	eor.w	r5, r5, r1
  41035e:	ea86 0601 	eor.w	r6, r6, r1
  410362:	fa85 f547 	uadd8	r5, r5, r7
  410366:	faa3 f587 	sel	r5, r3, r7
  41036a:	fa86 f647 	uadd8	r6, r6, r7
  41036e:	faa5 f687 	sel	r6, r5, r7
  410372:	b98e      	cbnz	r6, 410398 <memchr+0x78>
  410374:	d1ee      	bne.n	410354 <memchr+0x34>
  410376:	bcf0      	pop	{r4, r5, r6, r7}
  410378:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  41037c:	f002 0207 	and.w	r2, r2, #7
  410380:	b132      	cbz	r2, 410390 <memchr+0x70>
  410382:	f810 3b01 	ldrb.w	r3, [r0], #1
  410386:	3a01      	subs	r2, #1
  410388:	ea83 0301 	eor.w	r3, r3, r1
  41038c:	b113      	cbz	r3, 410394 <memchr+0x74>
  41038e:	d1f8      	bne.n	410382 <memchr+0x62>
  410390:	2000      	movs	r0, #0
  410392:	4770      	bx	lr
  410394:	3801      	subs	r0, #1
  410396:	4770      	bx	lr
  410398:	2d00      	cmp	r5, #0
  41039a:	bf06      	itte	eq
  41039c:	4635      	moveq	r5, r6
  41039e:	3803      	subeq	r0, #3
  4103a0:	3807      	subne	r0, #7
  4103a2:	f015 0f01 	tst.w	r5, #1
  4103a6:	d107      	bne.n	4103b8 <memchr+0x98>
  4103a8:	3001      	adds	r0, #1
  4103aa:	f415 7f80 	tst.w	r5, #256	; 0x100
  4103ae:	bf02      	ittt	eq
  4103b0:	3001      	addeq	r0, #1
  4103b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  4103b6:	3001      	addeq	r0, #1
  4103b8:	bcf0      	pop	{r4, r5, r6, r7}
  4103ba:	3801      	subs	r0, #1
  4103bc:	4770      	bx	lr
  4103be:	bf00      	nop

004103c0 <memmove>:
  4103c0:	4288      	cmp	r0, r1
  4103c2:	b5f0      	push	{r4, r5, r6, r7, lr}
  4103c4:	d90d      	bls.n	4103e2 <memmove+0x22>
  4103c6:	188b      	adds	r3, r1, r2
  4103c8:	4298      	cmp	r0, r3
  4103ca:	d20a      	bcs.n	4103e2 <memmove+0x22>
  4103cc:	1884      	adds	r4, r0, r2
  4103ce:	2a00      	cmp	r2, #0
  4103d0:	d051      	beq.n	410476 <memmove+0xb6>
  4103d2:	4622      	mov	r2, r4
  4103d4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  4103d8:	f802 4d01 	strb.w	r4, [r2, #-1]!
  4103dc:	4299      	cmp	r1, r3
  4103de:	d1f9      	bne.n	4103d4 <memmove+0x14>
  4103e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4103e2:	2a0f      	cmp	r2, #15
  4103e4:	d948      	bls.n	410478 <memmove+0xb8>
  4103e6:	ea41 0300 	orr.w	r3, r1, r0
  4103ea:	079b      	lsls	r3, r3, #30
  4103ec:	d146      	bne.n	41047c <memmove+0xbc>
  4103ee:	f100 0410 	add.w	r4, r0, #16
  4103f2:	f101 0310 	add.w	r3, r1, #16
  4103f6:	4615      	mov	r5, r2
  4103f8:	f853 6c10 	ldr.w	r6, [r3, #-16]
  4103fc:	f844 6c10 	str.w	r6, [r4, #-16]
  410400:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  410404:	f844 6c0c 	str.w	r6, [r4, #-12]
  410408:	f853 6c08 	ldr.w	r6, [r3, #-8]
  41040c:	f844 6c08 	str.w	r6, [r4, #-8]
  410410:	3d10      	subs	r5, #16
  410412:	f853 6c04 	ldr.w	r6, [r3, #-4]
  410416:	f844 6c04 	str.w	r6, [r4, #-4]
  41041a:	2d0f      	cmp	r5, #15
  41041c:	f103 0310 	add.w	r3, r3, #16
  410420:	f104 0410 	add.w	r4, r4, #16
  410424:	d8e8      	bhi.n	4103f8 <memmove+0x38>
  410426:	f1a2 0310 	sub.w	r3, r2, #16
  41042a:	f023 030f 	bic.w	r3, r3, #15
  41042e:	f002 0e0f 	and.w	lr, r2, #15
  410432:	3310      	adds	r3, #16
  410434:	f1be 0f03 	cmp.w	lr, #3
  410438:	4419      	add	r1, r3
  41043a:	4403      	add	r3, r0
  41043c:	d921      	bls.n	410482 <memmove+0xc2>
  41043e:	1f1e      	subs	r6, r3, #4
  410440:	460d      	mov	r5, r1
  410442:	4674      	mov	r4, lr
  410444:	3c04      	subs	r4, #4
  410446:	f855 7b04 	ldr.w	r7, [r5], #4
  41044a:	f846 7f04 	str.w	r7, [r6, #4]!
  41044e:	2c03      	cmp	r4, #3
  410450:	d8f8      	bhi.n	410444 <memmove+0x84>
  410452:	f1ae 0404 	sub.w	r4, lr, #4
  410456:	f024 0403 	bic.w	r4, r4, #3
  41045a:	3404      	adds	r4, #4
  41045c:	4421      	add	r1, r4
  41045e:	4423      	add	r3, r4
  410460:	f002 0203 	and.w	r2, r2, #3
  410464:	b162      	cbz	r2, 410480 <memmove+0xc0>
  410466:	3b01      	subs	r3, #1
  410468:	440a      	add	r2, r1
  41046a:	f811 4b01 	ldrb.w	r4, [r1], #1
  41046e:	f803 4f01 	strb.w	r4, [r3, #1]!
  410472:	428a      	cmp	r2, r1
  410474:	d1f9      	bne.n	41046a <memmove+0xaa>
  410476:	bdf0      	pop	{r4, r5, r6, r7, pc}
  410478:	4603      	mov	r3, r0
  41047a:	e7f3      	b.n	410464 <memmove+0xa4>
  41047c:	4603      	mov	r3, r0
  41047e:	e7f2      	b.n	410466 <memmove+0xa6>
  410480:	bdf0      	pop	{r4, r5, r6, r7, pc}
  410482:	4672      	mov	r2, lr
  410484:	e7ee      	b.n	410464 <memmove+0xa4>
  410486:	bf00      	nop

00410488 <__malloc_lock>:
  410488:	4801      	ldr	r0, [pc, #4]	; (410490 <__malloc_lock+0x8>)
  41048a:	f7ff bbfd 	b.w	40fc88 <__retarget_lock_acquire_recursive>
  41048e:	bf00      	nop
  410490:	2001abd0 	.word	0x2001abd0

00410494 <__malloc_unlock>:
  410494:	4801      	ldr	r0, [pc, #4]	; (41049c <__malloc_unlock+0x8>)
  410496:	f7ff bbf9 	b.w	40fc8c <__retarget_lock_release_recursive>
  41049a:	bf00      	nop
  41049c:	2001abd0 	.word	0x2001abd0

004104a0 <_realloc_r>:
  4104a0:	2900      	cmp	r1, #0
  4104a2:	f000 8095 	beq.w	4105d0 <_realloc_r+0x130>
  4104a6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4104aa:	460d      	mov	r5, r1
  4104ac:	4616      	mov	r6, r2
  4104ae:	b083      	sub	sp, #12
  4104b0:	4680      	mov	r8, r0
  4104b2:	f106 070b 	add.w	r7, r6, #11
  4104b6:	f7ff ffe7 	bl	410488 <__malloc_lock>
  4104ba:	f855 ec04 	ldr.w	lr, [r5, #-4]
  4104be:	2f16      	cmp	r7, #22
  4104c0:	f02e 0403 	bic.w	r4, lr, #3
  4104c4:	f1a5 0908 	sub.w	r9, r5, #8
  4104c8:	d83c      	bhi.n	410544 <_realloc_r+0xa4>
  4104ca:	2210      	movs	r2, #16
  4104cc:	4617      	mov	r7, r2
  4104ce:	42be      	cmp	r6, r7
  4104d0:	d83d      	bhi.n	41054e <_realloc_r+0xae>
  4104d2:	4294      	cmp	r4, r2
  4104d4:	da43      	bge.n	41055e <_realloc_r+0xbe>
  4104d6:	4bc4      	ldr	r3, [pc, #784]	; (4107e8 <_realloc_r+0x348>)
  4104d8:	6899      	ldr	r1, [r3, #8]
  4104da:	eb09 0004 	add.w	r0, r9, r4
  4104de:	4288      	cmp	r0, r1
  4104e0:	f000 80b4 	beq.w	41064c <_realloc_r+0x1ac>
  4104e4:	6843      	ldr	r3, [r0, #4]
  4104e6:	f023 0101 	bic.w	r1, r3, #1
  4104ea:	4401      	add	r1, r0
  4104ec:	6849      	ldr	r1, [r1, #4]
  4104ee:	07c9      	lsls	r1, r1, #31
  4104f0:	d54c      	bpl.n	41058c <_realloc_r+0xec>
  4104f2:	f01e 0f01 	tst.w	lr, #1
  4104f6:	f000 809b 	beq.w	410630 <_realloc_r+0x190>
  4104fa:	4631      	mov	r1, r6
  4104fc:	4640      	mov	r0, r8
  4104fe:	f7ff fc47 	bl	40fd90 <_malloc_r>
  410502:	4606      	mov	r6, r0
  410504:	2800      	cmp	r0, #0
  410506:	d03a      	beq.n	41057e <_realloc_r+0xde>
  410508:	f855 3c04 	ldr.w	r3, [r5, #-4]
  41050c:	f023 0301 	bic.w	r3, r3, #1
  410510:	444b      	add	r3, r9
  410512:	f1a0 0208 	sub.w	r2, r0, #8
  410516:	429a      	cmp	r2, r3
  410518:	f000 8121 	beq.w	41075e <_realloc_r+0x2be>
  41051c:	1f22      	subs	r2, r4, #4
  41051e:	2a24      	cmp	r2, #36	; 0x24
  410520:	f200 8107 	bhi.w	410732 <_realloc_r+0x292>
  410524:	2a13      	cmp	r2, #19
  410526:	f200 80db 	bhi.w	4106e0 <_realloc_r+0x240>
  41052a:	4603      	mov	r3, r0
  41052c:	462a      	mov	r2, r5
  41052e:	6811      	ldr	r1, [r2, #0]
  410530:	6019      	str	r1, [r3, #0]
  410532:	6851      	ldr	r1, [r2, #4]
  410534:	6059      	str	r1, [r3, #4]
  410536:	6892      	ldr	r2, [r2, #8]
  410538:	609a      	str	r2, [r3, #8]
  41053a:	4629      	mov	r1, r5
  41053c:	4640      	mov	r0, r8
  41053e:	f7ff f909 	bl	40f754 <_free_r>
  410542:	e01c      	b.n	41057e <_realloc_r+0xde>
  410544:	f027 0707 	bic.w	r7, r7, #7
  410548:	2f00      	cmp	r7, #0
  41054a:	463a      	mov	r2, r7
  41054c:	dabf      	bge.n	4104ce <_realloc_r+0x2e>
  41054e:	2600      	movs	r6, #0
  410550:	230c      	movs	r3, #12
  410552:	4630      	mov	r0, r6
  410554:	f8c8 3000 	str.w	r3, [r8]
  410558:	b003      	add	sp, #12
  41055a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  41055e:	462e      	mov	r6, r5
  410560:	1be3      	subs	r3, r4, r7
  410562:	2b0f      	cmp	r3, #15
  410564:	d81e      	bhi.n	4105a4 <_realloc_r+0x104>
  410566:	f8d9 3004 	ldr.w	r3, [r9, #4]
  41056a:	f003 0301 	and.w	r3, r3, #1
  41056e:	4323      	orrs	r3, r4
  410570:	444c      	add	r4, r9
  410572:	f8c9 3004 	str.w	r3, [r9, #4]
  410576:	6863      	ldr	r3, [r4, #4]
  410578:	f043 0301 	orr.w	r3, r3, #1
  41057c:	6063      	str	r3, [r4, #4]
  41057e:	4640      	mov	r0, r8
  410580:	f7ff ff88 	bl	410494 <__malloc_unlock>
  410584:	4630      	mov	r0, r6
  410586:	b003      	add	sp, #12
  410588:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  41058c:	f023 0303 	bic.w	r3, r3, #3
  410590:	18e1      	adds	r1, r4, r3
  410592:	4291      	cmp	r1, r2
  410594:	db1f      	blt.n	4105d6 <_realloc_r+0x136>
  410596:	68c3      	ldr	r3, [r0, #12]
  410598:	6882      	ldr	r2, [r0, #8]
  41059a:	462e      	mov	r6, r5
  41059c:	60d3      	str	r3, [r2, #12]
  41059e:	460c      	mov	r4, r1
  4105a0:	609a      	str	r2, [r3, #8]
  4105a2:	e7dd      	b.n	410560 <_realloc_r+0xc0>
  4105a4:	f8d9 2004 	ldr.w	r2, [r9, #4]
  4105a8:	eb09 0107 	add.w	r1, r9, r7
  4105ac:	f002 0201 	and.w	r2, r2, #1
  4105b0:	444c      	add	r4, r9
  4105b2:	f043 0301 	orr.w	r3, r3, #1
  4105b6:	4317      	orrs	r7, r2
  4105b8:	f8c9 7004 	str.w	r7, [r9, #4]
  4105bc:	604b      	str	r3, [r1, #4]
  4105be:	6863      	ldr	r3, [r4, #4]
  4105c0:	f043 0301 	orr.w	r3, r3, #1
  4105c4:	3108      	adds	r1, #8
  4105c6:	6063      	str	r3, [r4, #4]
  4105c8:	4640      	mov	r0, r8
  4105ca:	f7ff f8c3 	bl	40f754 <_free_r>
  4105ce:	e7d6      	b.n	41057e <_realloc_r+0xde>
  4105d0:	4611      	mov	r1, r2
  4105d2:	f7ff bbdd 	b.w	40fd90 <_malloc_r>
  4105d6:	f01e 0f01 	tst.w	lr, #1
  4105da:	d18e      	bne.n	4104fa <_realloc_r+0x5a>
  4105dc:	f855 1c08 	ldr.w	r1, [r5, #-8]
  4105e0:	eba9 0a01 	sub.w	sl, r9, r1
  4105e4:	f8da 1004 	ldr.w	r1, [sl, #4]
  4105e8:	f021 0103 	bic.w	r1, r1, #3
  4105ec:	440b      	add	r3, r1
  4105ee:	4423      	add	r3, r4
  4105f0:	4293      	cmp	r3, r2
  4105f2:	db25      	blt.n	410640 <_realloc_r+0x1a0>
  4105f4:	68c2      	ldr	r2, [r0, #12]
  4105f6:	6881      	ldr	r1, [r0, #8]
  4105f8:	4656      	mov	r6, sl
  4105fa:	60ca      	str	r2, [r1, #12]
  4105fc:	6091      	str	r1, [r2, #8]
  4105fe:	f8da 100c 	ldr.w	r1, [sl, #12]
  410602:	f856 0f08 	ldr.w	r0, [r6, #8]!
  410606:	1f22      	subs	r2, r4, #4
  410608:	2a24      	cmp	r2, #36	; 0x24
  41060a:	60c1      	str	r1, [r0, #12]
  41060c:	6088      	str	r0, [r1, #8]
  41060e:	f200 8094 	bhi.w	41073a <_realloc_r+0x29a>
  410612:	2a13      	cmp	r2, #19
  410614:	d96f      	bls.n	4106f6 <_realloc_r+0x256>
  410616:	6829      	ldr	r1, [r5, #0]
  410618:	f8ca 1008 	str.w	r1, [sl, #8]
  41061c:	6869      	ldr	r1, [r5, #4]
  41061e:	f8ca 100c 	str.w	r1, [sl, #12]
  410622:	2a1b      	cmp	r2, #27
  410624:	f200 80a2 	bhi.w	41076c <_realloc_r+0x2cc>
  410628:	3508      	adds	r5, #8
  41062a:	f10a 0210 	add.w	r2, sl, #16
  41062e:	e063      	b.n	4106f8 <_realloc_r+0x258>
  410630:	f855 3c08 	ldr.w	r3, [r5, #-8]
  410634:	eba9 0a03 	sub.w	sl, r9, r3
  410638:	f8da 1004 	ldr.w	r1, [sl, #4]
  41063c:	f021 0103 	bic.w	r1, r1, #3
  410640:	1863      	adds	r3, r4, r1
  410642:	4293      	cmp	r3, r2
  410644:	f6ff af59 	blt.w	4104fa <_realloc_r+0x5a>
  410648:	4656      	mov	r6, sl
  41064a:	e7d8      	b.n	4105fe <_realloc_r+0x15e>
  41064c:	6841      	ldr	r1, [r0, #4]
  41064e:	f021 0b03 	bic.w	fp, r1, #3
  410652:	44a3      	add	fp, r4
  410654:	f107 0010 	add.w	r0, r7, #16
  410658:	4583      	cmp	fp, r0
  41065a:	da56      	bge.n	41070a <_realloc_r+0x26a>
  41065c:	f01e 0f01 	tst.w	lr, #1
  410660:	f47f af4b 	bne.w	4104fa <_realloc_r+0x5a>
  410664:	f855 1c08 	ldr.w	r1, [r5, #-8]
  410668:	eba9 0a01 	sub.w	sl, r9, r1
  41066c:	f8da 1004 	ldr.w	r1, [sl, #4]
  410670:	f021 0103 	bic.w	r1, r1, #3
  410674:	448b      	add	fp, r1
  410676:	4558      	cmp	r0, fp
  410678:	dce2      	bgt.n	410640 <_realloc_r+0x1a0>
  41067a:	4656      	mov	r6, sl
  41067c:	f8da 100c 	ldr.w	r1, [sl, #12]
  410680:	f856 0f08 	ldr.w	r0, [r6, #8]!
  410684:	1f22      	subs	r2, r4, #4
  410686:	2a24      	cmp	r2, #36	; 0x24
  410688:	60c1      	str	r1, [r0, #12]
  41068a:	6088      	str	r0, [r1, #8]
  41068c:	f200 808f 	bhi.w	4107ae <_realloc_r+0x30e>
  410690:	2a13      	cmp	r2, #19
  410692:	f240 808a 	bls.w	4107aa <_realloc_r+0x30a>
  410696:	6829      	ldr	r1, [r5, #0]
  410698:	f8ca 1008 	str.w	r1, [sl, #8]
  41069c:	6869      	ldr	r1, [r5, #4]
  41069e:	f8ca 100c 	str.w	r1, [sl, #12]
  4106a2:	2a1b      	cmp	r2, #27
  4106a4:	f200 808a 	bhi.w	4107bc <_realloc_r+0x31c>
  4106a8:	3508      	adds	r5, #8
  4106aa:	f10a 0210 	add.w	r2, sl, #16
  4106ae:	6829      	ldr	r1, [r5, #0]
  4106b0:	6011      	str	r1, [r2, #0]
  4106b2:	6869      	ldr	r1, [r5, #4]
  4106b4:	6051      	str	r1, [r2, #4]
  4106b6:	68a9      	ldr	r1, [r5, #8]
  4106b8:	6091      	str	r1, [r2, #8]
  4106ba:	eb0a 0107 	add.w	r1, sl, r7
  4106be:	ebab 0207 	sub.w	r2, fp, r7
  4106c2:	f042 0201 	orr.w	r2, r2, #1
  4106c6:	6099      	str	r1, [r3, #8]
  4106c8:	604a      	str	r2, [r1, #4]
  4106ca:	f8da 3004 	ldr.w	r3, [sl, #4]
  4106ce:	f003 0301 	and.w	r3, r3, #1
  4106d2:	431f      	orrs	r7, r3
  4106d4:	4640      	mov	r0, r8
  4106d6:	f8ca 7004 	str.w	r7, [sl, #4]
  4106da:	f7ff fedb 	bl	410494 <__malloc_unlock>
  4106de:	e751      	b.n	410584 <_realloc_r+0xe4>
  4106e0:	682b      	ldr	r3, [r5, #0]
  4106e2:	6003      	str	r3, [r0, #0]
  4106e4:	686b      	ldr	r3, [r5, #4]
  4106e6:	6043      	str	r3, [r0, #4]
  4106e8:	2a1b      	cmp	r2, #27
  4106ea:	d82d      	bhi.n	410748 <_realloc_r+0x2a8>
  4106ec:	f100 0308 	add.w	r3, r0, #8
  4106f0:	f105 0208 	add.w	r2, r5, #8
  4106f4:	e71b      	b.n	41052e <_realloc_r+0x8e>
  4106f6:	4632      	mov	r2, r6
  4106f8:	6829      	ldr	r1, [r5, #0]
  4106fa:	6011      	str	r1, [r2, #0]
  4106fc:	6869      	ldr	r1, [r5, #4]
  4106fe:	6051      	str	r1, [r2, #4]
  410700:	68a9      	ldr	r1, [r5, #8]
  410702:	6091      	str	r1, [r2, #8]
  410704:	461c      	mov	r4, r3
  410706:	46d1      	mov	r9, sl
  410708:	e72a      	b.n	410560 <_realloc_r+0xc0>
  41070a:	eb09 0107 	add.w	r1, r9, r7
  41070e:	ebab 0b07 	sub.w	fp, fp, r7
  410712:	f04b 0201 	orr.w	r2, fp, #1
  410716:	6099      	str	r1, [r3, #8]
  410718:	604a      	str	r2, [r1, #4]
  41071a:	f855 3c04 	ldr.w	r3, [r5, #-4]
  41071e:	f003 0301 	and.w	r3, r3, #1
  410722:	431f      	orrs	r7, r3
  410724:	4640      	mov	r0, r8
  410726:	f845 7c04 	str.w	r7, [r5, #-4]
  41072a:	f7ff feb3 	bl	410494 <__malloc_unlock>
  41072e:	462e      	mov	r6, r5
  410730:	e728      	b.n	410584 <_realloc_r+0xe4>
  410732:	4629      	mov	r1, r5
  410734:	f7ff fe44 	bl	4103c0 <memmove>
  410738:	e6ff      	b.n	41053a <_realloc_r+0x9a>
  41073a:	4629      	mov	r1, r5
  41073c:	4630      	mov	r0, r6
  41073e:	461c      	mov	r4, r3
  410740:	46d1      	mov	r9, sl
  410742:	f7ff fe3d 	bl	4103c0 <memmove>
  410746:	e70b      	b.n	410560 <_realloc_r+0xc0>
  410748:	68ab      	ldr	r3, [r5, #8]
  41074a:	6083      	str	r3, [r0, #8]
  41074c:	68eb      	ldr	r3, [r5, #12]
  41074e:	60c3      	str	r3, [r0, #12]
  410750:	2a24      	cmp	r2, #36	; 0x24
  410752:	d017      	beq.n	410784 <_realloc_r+0x2e4>
  410754:	f100 0310 	add.w	r3, r0, #16
  410758:	f105 0210 	add.w	r2, r5, #16
  41075c:	e6e7      	b.n	41052e <_realloc_r+0x8e>
  41075e:	f850 3c04 	ldr.w	r3, [r0, #-4]
  410762:	f023 0303 	bic.w	r3, r3, #3
  410766:	441c      	add	r4, r3
  410768:	462e      	mov	r6, r5
  41076a:	e6f9      	b.n	410560 <_realloc_r+0xc0>
  41076c:	68a9      	ldr	r1, [r5, #8]
  41076e:	f8ca 1010 	str.w	r1, [sl, #16]
  410772:	68e9      	ldr	r1, [r5, #12]
  410774:	f8ca 1014 	str.w	r1, [sl, #20]
  410778:	2a24      	cmp	r2, #36	; 0x24
  41077a:	d00c      	beq.n	410796 <_realloc_r+0x2f6>
  41077c:	3510      	adds	r5, #16
  41077e:	f10a 0218 	add.w	r2, sl, #24
  410782:	e7b9      	b.n	4106f8 <_realloc_r+0x258>
  410784:	692b      	ldr	r3, [r5, #16]
  410786:	6103      	str	r3, [r0, #16]
  410788:	696b      	ldr	r3, [r5, #20]
  41078a:	6143      	str	r3, [r0, #20]
  41078c:	f105 0218 	add.w	r2, r5, #24
  410790:	f100 0318 	add.w	r3, r0, #24
  410794:	e6cb      	b.n	41052e <_realloc_r+0x8e>
  410796:	692a      	ldr	r2, [r5, #16]
  410798:	f8ca 2018 	str.w	r2, [sl, #24]
  41079c:	696a      	ldr	r2, [r5, #20]
  41079e:	f8ca 201c 	str.w	r2, [sl, #28]
  4107a2:	3518      	adds	r5, #24
  4107a4:	f10a 0220 	add.w	r2, sl, #32
  4107a8:	e7a6      	b.n	4106f8 <_realloc_r+0x258>
  4107aa:	4632      	mov	r2, r6
  4107ac:	e77f      	b.n	4106ae <_realloc_r+0x20e>
  4107ae:	4629      	mov	r1, r5
  4107b0:	4630      	mov	r0, r6
  4107b2:	9301      	str	r3, [sp, #4]
  4107b4:	f7ff fe04 	bl	4103c0 <memmove>
  4107b8:	9b01      	ldr	r3, [sp, #4]
  4107ba:	e77e      	b.n	4106ba <_realloc_r+0x21a>
  4107bc:	68a9      	ldr	r1, [r5, #8]
  4107be:	f8ca 1010 	str.w	r1, [sl, #16]
  4107c2:	68e9      	ldr	r1, [r5, #12]
  4107c4:	f8ca 1014 	str.w	r1, [sl, #20]
  4107c8:	2a24      	cmp	r2, #36	; 0x24
  4107ca:	d003      	beq.n	4107d4 <_realloc_r+0x334>
  4107cc:	3510      	adds	r5, #16
  4107ce:	f10a 0218 	add.w	r2, sl, #24
  4107d2:	e76c      	b.n	4106ae <_realloc_r+0x20e>
  4107d4:	692a      	ldr	r2, [r5, #16]
  4107d6:	f8ca 2018 	str.w	r2, [sl, #24]
  4107da:	696a      	ldr	r2, [r5, #20]
  4107dc:	f8ca 201c 	str.w	r2, [sl, #28]
  4107e0:	3518      	adds	r5, #24
  4107e2:	f10a 0220 	add.w	r2, sl, #32
  4107e6:	e762      	b.n	4106ae <_realloc_r+0x20e>
  4107e8:	20000840 	.word	0x20000840

004107ec <_sbrk_r>:
  4107ec:	b538      	push	{r3, r4, r5, lr}
  4107ee:	4c07      	ldr	r4, [pc, #28]	; (41080c <_sbrk_r+0x20>)
  4107f0:	2300      	movs	r3, #0
  4107f2:	4605      	mov	r5, r0
  4107f4:	4608      	mov	r0, r1
  4107f6:	6023      	str	r3, [r4, #0]
  4107f8:	f7f9 fa52 	bl	409ca0 <_sbrk>
  4107fc:	1c43      	adds	r3, r0, #1
  4107fe:	d000      	beq.n	410802 <_sbrk_r+0x16>
  410800:	bd38      	pop	{r3, r4, r5, pc}
  410802:	6823      	ldr	r3, [r4, #0]
  410804:	2b00      	cmp	r3, #0
  410806:	d0fb      	beq.n	410800 <_sbrk_r+0x14>
  410808:	602b      	str	r3, [r5, #0]
  41080a:	bd38      	pop	{r3, r4, r5, pc}
  41080c:	2001abe4 	.word	0x2001abe4

00410810 <__sread>:
  410810:	b510      	push	{r4, lr}
  410812:	460c      	mov	r4, r1
  410814:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  410818:	f000 fa78 	bl	410d0c <_read_r>
  41081c:	2800      	cmp	r0, #0
  41081e:	db03      	blt.n	410828 <__sread+0x18>
  410820:	6d23      	ldr	r3, [r4, #80]	; 0x50
  410822:	4403      	add	r3, r0
  410824:	6523      	str	r3, [r4, #80]	; 0x50
  410826:	bd10      	pop	{r4, pc}
  410828:	89a3      	ldrh	r3, [r4, #12]
  41082a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  41082e:	81a3      	strh	r3, [r4, #12]
  410830:	bd10      	pop	{r4, pc}
  410832:	bf00      	nop

00410834 <__swrite>:
  410834:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  410838:	4616      	mov	r6, r2
  41083a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  41083e:	461f      	mov	r7, r3
  410840:	05d3      	lsls	r3, r2, #23
  410842:	460c      	mov	r4, r1
  410844:	4605      	mov	r5, r0
  410846:	d507      	bpl.n	410858 <__swrite+0x24>
  410848:	2200      	movs	r2, #0
  41084a:	2302      	movs	r3, #2
  41084c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  410850:	f000 fa46 	bl	410ce0 <_lseek_r>
  410854:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  410858:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  41085c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  410860:	81a2      	strh	r2, [r4, #12]
  410862:	463b      	mov	r3, r7
  410864:	4632      	mov	r2, r6
  410866:	4628      	mov	r0, r5
  410868:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  41086c:	f000 b926 	b.w	410abc <_write_r>

00410870 <__sseek>:
  410870:	b510      	push	{r4, lr}
  410872:	460c      	mov	r4, r1
  410874:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  410878:	f000 fa32 	bl	410ce0 <_lseek_r>
  41087c:	89a3      	ldrh	r3, [r4, #12]
  41087e:	1c42      	adds	r2, r0, #1
  410880:	bf0e      	itee	eq
  410882:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  410886:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  41088a:	6520      	strne	r0, [r4, #80]	; 0x50
  41088c:	81a3      	strh	r3, [r4, #12]
  41088e:	bd10      	pop	{r4, pc}

00410890 <__sclose>:
  410890:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  410894:	f000 b98a 	b.w	410bac <_close_r>
	...

004108c0 <strlen>:
  4108c0:	f890 f000 	pld	[r0]
  4108c4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  4108c8:	f020 0107 	bic.w	r1, r0, #7
  4108cc:	f06f 0c00 	mvn.w	ip, #0
  4108d0:	f010 0407 	ands.w	r4, r0, #7
  4108d4:	f891 f020 	pld	[r1, #32]
  4108d8:	f040 8049 	bne.w	41096e <strlen+0xae>
  4108dc:	f04f 0400 	mov.w	r4, #0
  4108e0:	f06f 0007 	mvn.w	r0, #7
  4108e4:	e9d1 2300 	ldrd	r2, r3, [r1]
  4108e8:	f891 f040 	pld	[r1, #64]	; 0x40
  4108ec:	f100 0008 	add.w	r0, r0, #8
  4108f0:	fa82 f24c 	uadd8	r2, r2, ip
  4108f4:	faa4 f28c 	sel	r2, r4, ip
  4108f8:	fa83 f34c 	uadd8	r3, r3, ip
  4108fc:	faa2 f38c 	sel	r3, r2, ip
  410900:	bb4b      	cbnz	r3, 410956 <strlen+0x96>
  410902:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  410906:	fa82 f24c 	uadd8	r2, r2, ip
  41090a:	f100 0008 	add.w	r0, r0, #8
  41090e:	faa4 f28c 	sel	r2, r4, ip
  410912:	fa83 f34c 	uadd8	r3, r3, ip
  410916:	faa2 f38c 	sel	r3, r2, ip
  41091a:	b9e3      	cbnz	r3, 410956 <strlen+0x96>
  41091c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  410920:	fa82 f24c 	uadd8	r2, r2, ip
  410924:	f100 0008 	add.w	r0, r0, #8
  410928:	faa4 f28c 	sel	r2, r4, ip
  41092c:	fa83 f34c 	uadd8	r3, r3, ip
  410930:	faa2 f38c 	sel	r3, r2, ip
  410934:	b97b      	cbnz	r3, 410956 <strlen+0x96>
  410936:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  41093a:	f101 0120 	add.w	r1, r1, #32
  41093e:	fa82 f24c 	uadd8	r2, r2, ip
  410942:	f100 0008 	add.w	r0, r0, #8
  410946:	faa4 f28c 	sel	r2, r4, ip
  41094a:	fa83 f34c 	uadd8	r3, r3, ip
  41094e:	faa2 f38c 	sel	r3, r2, ip
  410952:	2b00      	cmp	r3, #0
  410954:	d0c6      	beq.n	4108e4 <strlen+0x24>
  410956:	2a00      	cmp	r2, #0
  410958:	bf04      	itt	eq
  41095a:	3004      	addeq	r0, #4
  41095c:	461a      	moveq	r2, r3
  41095e:	ba12      	rev	r2, r2
  410960:	fab2 f282 	clz	r2, r2
  410964:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  410968:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  41096c:	4770      	bx	lr
  41096e:	e9d1 2300 	ldrd	r2, r3, [r1]
  410972:	f004 0503 	and.w	r5, r4, #3
  410976:	f1c4 0000 	rsb	r0, r4, #0
  41097a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  41097e:	f014 0f04 	tst.w	r4, #4
  410982:	f891 f040 	pld	[r1, #64]	; 0x40
  410986:	fa0c f505 	lsl.w	r5, ip, r5
  41098a:	ea62 0205 	orn	r2, r2, r5
  41098e:	bf1c      	itt	ne
  410990:	ea63 0305 	ornne	r3, r3, r5
  410994:	4662      	movne	r2, ip
  410996:	f04f 0400 	mov.w	r4, #0
  41099a:	e7a9      	b.n	4108f0 <strlen+0x30>

0041099c <__swbuf_r>:
  41099c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  41099e:	460d      	mov	r5, r1
  4109a0:	4614      	mov	r4, r2
  4109a2:	4606      	mov	r6, r0
  4109a4:	b110      	cbz	r0, 4109ac <__swbuf_r+0x10>
  4109a6:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4109a8:	2b00      	cmp	r3, #0
  4109aa:	d04b      	beq.n	410a44 <__swbuf_r+0xa8>
  4109ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4109b0:	69a3      	ldr	r3, [r4, #24]
  4109b2:	60a3      	str	r3, [r4, #8]
  4109b4:	b291      	uxth	r1, r2
  4109b6:	0708      	lsls	r0, r1, #28
  4109b8:	d539      	bpl.n	410a2e <__swbuf_r+0x92>
  4109ba:	6923      	ldr	r3, [r4, #16]
  4109bc:	2b00      	cmp	r3, #0
  4109be:	d036      	beq.n	410a2e <__swbuf_r+0x92>
  4109c0:	b2ed      	uxtb	r5, r5
  4109c2:	0489      	lsls	r1, r1, #18
  4109c4:	462f      	mov	r7, r5
  4109c6:	d515      	bpl.n	4109f4 <__swbuf_r+0x58>
  4109c8:	6822      	ldr	r2, [r4, #0]
  4109ca:	6961      	ldr	r1, [r4, #20]
  4109cc:	1ad3      	subs	r3, r2, r3
  4109ce:	428b      	cmp	r3, r1
  4109d0:	da1c      	bge.n	410a0c <__swbuf_r+0x70>
  4109d2:	3301      	adds	r3, #1
  4109d4:	68a1      	ldr	r1, [r4, #8]
  4109d6:	1c50      	adds	r0, r2, #1
  4109d8:	3901      	subs	r1, #1
  4109da:	60a1      	str	r1, [r4, #8]
  4109dc:	6020      	str	r0, [r4, #0]
  4109de:	7015      	strb	r5, [r2, #0]
  4109e0:	6962      	ldr	r2, [r4, #20]
  4109e2:	429a      	cmp	r2, r3
  4109e4:	d01a      	beq.n	410a1c <__swbuf_r+0x80>
  4109e6:	89a3      	ldrh	r3, [r4, #12]
  4109e8:	07db      	lsls	r3, r3, #31
  4109ea:	d501      	bpl.n	4109f0 <__swbuf_r+0x54>
  4109ec:	2d0a      	cmp	r5, #10
  4109ee:	d015      	beq.n	410a1c <__swbuf_r+0x80>
  4109f0:	4638      	mov	r0, r7
  4109f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4109f4:	6e61      	ldr	r1, [r4, #100]	; 0x64
  4109f6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  4109fa:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  4109fe:	81a2      	strh	r2, [r4, #12]
  410a00:	6822      	ldr	r2, [r4, #0]
  410a02:	6661      	str	r1, [r4, #100]	; 0x64
  410a04:	6961      	ldr	r1, [r4, #20]
  410a06:	1ad3      	subs	r3, r2, r3
  410a08:	428b      	cmp	r3, r1
  410a0a:	dbe2      	blt.n	4109d2 <__swbuf_r+0x36>
  410a0c:	4621      	mov	r1, r4
  410a0e:	4630      	mov	r0, r6
  410a10:	f7fe fd22 	bl	40f458 <_fflush_r>
  410a14:	b940      	cbnz	r0, 410a28 <__swbuf_r+0x8c>
  410a16:	6822      	ldr	r2, [r4, #0]
  410a18:	2301      	movs	r3, #1
  410a1a:	e7db      	b.n	4109d4 <__swbuf_r+0x38>
  410a1c:	4621      	mov	r1, r4
  410a1e:	4630      	mov	r0, r6
  410a20:	f7fe fd1a 	bl	40f458 <_fflush_r>
  410a24:	2800      	cmp	r0, #0
  410a26:	d0e3      	beq.n	4109f0 <__swbuf_r+0x54>
  410a28:	f04f 37ff 	mov.w	r7, #4294967295
  410a2c:	e7e0      	b.n	4109f0 <__swbuf_r+0x54>
  410a2e:	4621      	mov	r1, r4
  410a30:	4630      	mov	r0, r6
  410a32:	f7fe fbfd 	bl	40f230 <__swsetup_r>
  410a36:	2800      	cmp	r0, #0
  410a38:	d1f6      	bne.n	410a28 <__swbuf_r+0x8c>
  410a3a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  410a3e:	6923      	ldr	r3, [r4, #16]
  410a40:	b291      	uxth	r1, r2
  410a42:	e7bd      	b.n	4109c0 <__swbuf_r+0x24>
  410a44:	f7fe fd60 	bl	40f508 <__sinit>
  410a48:	e7b0      	b.n	4109ac <__swbuf_r+0x10>
  410a4a:	bf00      	nop

00410a4c <_wcrtomb_r>:
  410a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
  410a4e:	4606      	mov	r6, r0
  410a50:	b085      	sub	sp, #20
  410a52:	461f      	mov	r7, r3
  410a54:	b189      	cbz	r1, 410a7a <_wcrtomb_r+0x2e>
  410a56:	4c10      	ldr	r4, [pc, #64]	; (410a98 <_wcrtomb_r+0x4c>)
  410a58:	4d10      	ldr	r5, [pc, #64]	; (410a9c <_wcrtomb_r+0x50>)
  410a5a:	6824      	ldr	r4, [r4, #0]
  410a5c:	6b64      	ldr	r4, [r4, #52]	; 0x34
  410a5e:	2c00      	cmp	r4, #0
  410a60:	bf08      	it	eq
  410a62:	462c      	moveq	r4, r5
  410a64:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  410a68:	47a0      	blx	r4
  410a6a:	1c43      	adds	r3, r0, #1
  410a6c:	d103      	bne.n	410a76 <_wcrtomb_r+0x2a>
  410a6e:	2200      	movs	r2, #0
  410a70:	238a      	movs	r3, #138	; 0x8a
  410a72:	603a      	str	r2, [r7, #0]
  410a74:	6033      	str	r3, [r6, #0]
  410a76:	b005      	add	sp, #20
  410a78:	bdf0      	pop	{r4, r5, r6, r7, pc}
  410a7a:	460c      	mov	r4, r1
  410a7c:	4906      	ldr	r1, [pc, #24]	; (410a98 <_wcrtomb_r+0x4c>)
  410a7e:	4a07      	ldr	r2, [pc, #28]	; (410a9c <_wcrtomb_r+0x50>)
  410a80:	6809      	ldr	r1, [r1, #0]
  410a82:	6b49      	ldr	r1, [r1, #52]	; 0x34
  410a84:	2900      	cmp	r1, #0
  410a86:	bf08      	it	eq
  410a88:	4611      	moveq	r1, r2
  410a8a:	4622      	mov	r2, r4
  410a8c:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  410a90:	a901      	add	r1, sp, #4
  410a92:	47a0      	blx	r4
  410a94:	e7e9      	b.n	410a6a <_wcrtomb_r+0x1e>
  410a96:	bf00      	nop
  410a98:	200002a0 	.word	0x200002a0
  410a9c:	200006d4 	.word	0x200006d4

00410aa0 <__ascii_wctomb>:
  410aa0:	b121      	cbz	r1, 410aac <__ascii_wctomb+0xc>
  410aa2:	2aff      	cmp	r2, #255	; 0xff
  410aa4:	d804      	bhi.n	410ab0 <__ascii_wctomb+0x10>
  410aa6:	700a      	strb	r2, [r1, #0]
  410aa8:	2001      	movs	r0, #1
  410aaa:	4770      	bx	lr
  410aac:	4608      	mov	r0, r1
  410aae:	4770      	bx	lr
  410ab0:	238a      	movs	r3, #138	; 0x8a
  410ab2:	6003      	str	r3, [r0, #0]
  410ab4:	f04f 30ff 	mov.w	r0, #4294967295
  410ab8:	4770      	bx	lr
  410aba:	bf00      	nop

00410abc <_write_r>:
  410abc:	b570      	push	{r4, r5, r6, lr}
  410abe:	460d      	mov	r5, r1
  410ac0:	4c08      	ldr	r4, [pc, #32]	; (410ae4 <_write_r+0x28>)
  410ac2:	4611      	mov	r1, r2
  410ac4:	4606      	mov	r6, r0
  410ac6:	461a      	mov	r2, r3
  410ac8:	4628      	mov	r0, r5
  410aca:	2300      	movs	r3, #0
  410acc:	6023      	str	r3, [r4, #0]
  410ace:	f7f4 ff6f 	bl	4059b0 <_write>
  410ad2:	1c43      	adds	r3, r0, #1
  410ad4:	d000      	beq.n	410ad8 <_write_r+0x1c>
  410ad6:	bd70      	pop	{r4, r5, r6, pc}
  410ad8:	6823      	ldr	r3, [r4, #0]
  410ada:	2b00      	cmp	r3, #0
  410adc:	d0fb      	beq.n	410ad6 <_write_r+0x1a>
  410ade:	6033      	str	r3, [r6, #0]
  410ae0:	bd70      	pop	{r4, r5, r6, pc}
  410ae2:	bf00      	nop
  410ae4:	2001abe4 	.word	0x2001abe4

00410ae8 <__register_exitproc>:
  410ae8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  410aec:	4d2c      	ldr	r5, [pc, #176]	; (410ba0 <__register_exitproc+0xb8>)
  410aee:	4606      	mov	r6, r0
  410af0:	6828      	ldr	r0, [r5, #0]
  410af2:	4698      	mov	r8, r3
  410af4:	460f      	mov	r7, r1
  410af6:	4691      	mov	r9, r2
  410af8:	f7ff f8c6 	bl	40fc88 <__retarget_lock_acquire_recursive>
  410afc:	4b29      	ldr	r3, [pc, #164]	; (410ba4 <__register_exitproc+0xbc>)
  410afe:	681c      	ldr	r4, [r3, #0]
  410b00:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  410b04:	2b00      	cmp	r3, #0
  410b06:	d03e      	beq.n	410b86 <__register_exitproc+0x9e>
  410b08:	685a      	ldr	r2, [r3, #4]
  410b0a:	2a1f      	cmp	r2, #31
  410b0c:	dc1c      	bgt.n	410b48 <__register_exitproc+0x60>
  410b0e:	f102 0e01 	add.w	lr, r2, #1
  410b12:	b176      	cbz	r6, 410b32 <__register_exitproc+0x4a>
  410b14:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  410b18:	2401      	movs	r4, #1
  410b1a:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  410b1e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  410b22:	4094      	lsls	r4, r2
  410b24:	4320      	orrs	r0, r4
  410b26:	2e02      	cmp	r6, #2
  410b28:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  410b2c:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  410b30:	d023      	beq.n	410b7a <__register_exitproc+0x92>
  410b32:	3202      	adds	r2, #2
  410b34:	f8c3 e004 	str.w	lr, [r3, #4]
  410b38:	6828      	ldr	r0, [r5, #0]
  410b3a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  410b3e:	f7ff f8a5 	bl	40fc8c <__retarget_lock_release_recursive>
  410b42:	2000      	movs	r0, #0
  410b44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  410b48:	4b17      	ldr	r3, [pc, #92]	; (410ba8 <__register_exitproc+0xc0>)
  410b4a:	b30b      	cbz	r3, 410b90 <__register_exitproc+0xa8>
  410b4c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  410b50:	f7ff f916 	bl	40fd80 <malloc>
  410b54:	4603      	mov	r3, r0
  410b56:	b1d8      	cbz	r0, 410b90 <__register_exitproc+0xa8>
  410b58:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  410b5c:	6002      	str	r2, [r0, #0]
  410b5e:	2100      	movs	r1, #0
  410b60:	6041      	str	r1, [r0, #4]
  410b62:	460a      	mov	r2, r1
  410b64:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  410b68:	f04f 0e01 	mov.w	lr, #1
  410b6c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  410b70:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  410b74:	2e00      	cmp	r6, #0
  410b76:	d0dc      	beq.n	410b32 <__register_exitproc+0x4a>
  410b78:	e7cc      	b.n	410b14 <__register_exitproc+0x2c>
  410b7a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  410b7e:	430c      	orrs	r4, r1
  410b80:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  410b84:	e7d5      	b.n	410b32 <__register_exitproc+0x4a>
  410b86:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  410b8a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  410b8e:	e7bb      	b.n	410b08 <__register_exitproc+0x20>
  410b90:	6828      	ldr	r0, [r5, #0]
  410b92:	f7ff f87b 	bl	40fc8c <__retarget_lock_release_recursive>
  410b96:	f04f 30ff 	mov.w	r0, #4294967295
  410b9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  410b9e:	bf00      	nop
  410ba0:	200006d0 	.word	0x200006d0
  410ba4:	00411924 	.word	0x00411924
  410ba8:	0040fd81 	.word	0x0040fd81

00410bac <_close_r>:
  410bac:	b538      	push	{r3, r4, r5, lr}
  410bae:	4c07      	ldr	r4, [pc, #28]	; (410bcc <_close_r+0x20>)
  410bb0:	2300      	movs	r3, #0
  410bb2:	4605      	mov	r5, r0
  410bb4:	4608      	mov	r0, r1
  410bb6:	6023      	str	r3, [r4, #0]
  410bb8:	f7f9 f89e 	bl	409cf8 <_close>
  410bbc:	1c43      	adds	r3, r0, #1
  410bbe:	d000      	beq.n	410bc2 <_close_r+0x16>
  410bc0:	bd38      	pop	{r3, r4, r5, pc}
  410bc2:	6823      	ldr	r3, [r4, #0]
  410bc4:	2b00      	cmp	r3, #0
  410bc6:	d0fb      	beq.n	410bc0 <_close_r+0x14>
  410bc8:	602b      	str	r3, [r5, #0]
  410bca:	bd38      	pop	{r3, r4, r5, pc}
  410bcc:	2001abe4 	.word	0x2001abe4

00410bd0 <_fclose_r>:
  410bd0:	b570      	push	{r4, r5, r6, lr}
  410bd2:	b159      	cbz	r1, 410bec <_fclose_r+0x1c>
  410bd4:	4605      	mov	r5, r0
  410bd6:	460c      	mov	r4, r1
  410bd8:	b110      	cbz	r0, 410be0 <_fclose_r+0x10>
  410bda:	6b83      	ldr	r3, [r0, #56]	; 0x38
  410bdc:	2b00      	cmp	r3, #0
  410bde:	d03c      	beq.n	410c5a <_fclose_r+0x8a>
  410be0:	6e63      	ldr	r3, [r4, #100]	; 0x64
  410be2:	07d8      	lsls	r0, r3, #31
  410be4:	d505      	bpl.n	410bf2 <_fclose_r+0x22>
  410be6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  410bea:	b92b      	cbnz	r3, 410bf8 <_fclose_r+0x28>
  410bec:	2600      	movs	r6, #0
  410bee:	4630      	mov	r0, r6
  410bf0:	bd70      	pop	{r4, r5, r6, pc}
  410bf2:	89a3      	ldrh	r3, [r4, #12]
  410bf4:	0599      	lsls	r1, r3, #22
  410bf6:	d53c      	bpl.n	410c72 <_fclose_r+0xa2>
  410bf8:	4621      	mov	r1, r4
  410bfa:	4628      	mov	r0, r5
  410bfc:	f7fe fb8c 	bl	40f318 <__sflush_r>
  410c00:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  410c02:	4606      	mov	r6, r0
  410c04:	b133      	cbz	r3, 410c14 <_fclose_r+0x44>
  410c06:	69e1      	ldr	r1, [r4, #28]
  410c08:	4628      	mov	r0, r5
  410c0a:	4798      	blx	r3
  410c0c:	2800      	cmp	r0, #0
  410c0e:	bfb8      	it	lt
  410c10:	f04f 36ff 	movlt.w	r6, #4294967295
  410c14:	89a3      	ldrh	r3, [r4, #12]
  410c16:	061a      	lsls	r2, r3, #24
  410c18:	d422      	bmi.n	410c60 <_fclose_r+0x90>
  410c1a:	6b21      	ldr	r1, [r4, #48]	; 0x30
  410c1c:	b141      	cbz	r1, 410c30 <_fclose_r+0x60>
  410c1e:	f104 0340 	add.w	r3, r4, #64	; 0x40
  410c22:	4299      	cmp	r1, r3
  410c24:	d002      	beq.n	410c2c <_fclose_r+0x5c>
  410c26:	4628      	mov	r0, r5
  410c28:	f7fe fd94 	bl	40f754 <_free_r>
  410c2c:	2300      	movs	r3, #0
  410c2e:	6323      	str	r3, [r4, #48]	; 0x30
  410c30:	6c61      	ldr	r1, [r4, #68]	; 0x44
  410c32:	b121      	cbz	r1, 410c3e <_fclose_r+0x6e>
  410c34:	4628      	mov	r0, r5
  410c36:	f7fe fd8d 	bl	40f754 <_free_r>
  410c3a:	2300      	movs	r3, #0
  410c3c:	6463      	str	r3, [r4, #68]	; 0x44
  410c3e:	f7fe fc8f 	bl	40f560 <__sfp_lock_acquire>
  410c42:	6e63      	ldr	r3, [r4, #100]	; 0x64
  410c44:	2200      	movs	r2, #0
  410c46:	07db      	lsls	r3, r3, #31
  410c48:	81a2      	strh	r2, [r4, #12]
  410c4a:	d50e      	bpl.n	410c6a <_fclose_r+0x9a>
  410c4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  410c4e:	f7ff f819 	bl	40fc84 <__retarget_lock_close_recursive>
  410c52:	f7fe fc8b 	bl	40f56c <__sfp_lock_release>
  410c56:	4630      	mov	r0, r6
  410c58:	bd70      	pop	{r4, r5, r6, pc}
  410c5a:	f7fe fc55 	bl	40f508 <__sinit>
  410c5e:	e7bf      	b.n	410be0 <_fclose_r+0x10>
  410c60:	6921      	ldr	r1, [r4, #16]
  410c62:	4628      	mov	r0, r5
  410c64:	f7fe fd76 	bl	40f754 <_free_r>
  410c68:	e7d7      	b.n	410c1a <_fclose_r+0x4a>
  410c6a:	6da0      	ldr	r0, [r4, #88]	; 0x58
  410c6c:	f7ff f80e 	bl	40fc8c <__retarget_lock_release_recursive>
  410c70:	e7ec      	b.n	410c4c <_fclose_r+0x7c>
  410c72:	6da0      	ldr	r0, [r4, #88]	; 0x58
  410c74:	f7ff f808 	bl	40fc88 <__retarget_lock_acquire_recursive>
  410c78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  410c7c:	2b00      	cmp	r3, #0
  410c7e:	d1bb      	bne.n	410bf8 <_fclose_r+0x28>
  410c80:	6e66      	ldr	r6, [r4, #100]	; 0x64
  410c82:	f016 0601 	ands.w	r6, r6, #1
  410c86:	d1b1      	bne.n	410bec <_fclose_r+0x1c>
  410c88:	6da0      	ldr	r0, [r4, #88]	; 0x58
  410c8a:	f7fe ffff 	bl	40fc8c <__retarget_lock_release_recursive>
  410c8e:	4630      	mov	r0, r6
  410c90:	bd70      	pop	{r4, r5, r6, pc}
  410c92:	bf00      	nop

00410c94 <_fstat_r>:
  410c94:	b538      	push	{r3, r4, r5, lr}
  410c96:	460b      	mov	r3, r1
  410c98:	4c07      	ldr	r4, [pc, #28]	; (410cb8 <_fstat_r+0x24>)
  410c9a:	4605      	mov	r5, r0
  410c9c:	4611      	mov	r1, r2
  410c9e:	4618      	mov	r0, r3
  410ca0:	2300      	movs	r3, #0
  410ca2:	6023      	str	r3, [r4, #0]
  410ca4:	f7f9 f834 	bl	409d10 <_fstat>
  410ca8:	1c43      	adds	r3, r0, #1
  410caa:	d000      	beq.n	410cae <_fstat_r+0x1a>
  410cac:	bd38      	pop	{r3, r4, r5, pc}
  410cae:	6823      	ldr	r3, [r4, #0]
  410cb0:	2b00      	cmp	r3, #0
  410cb2:	d0fb      	beq.n	410cac <_fstat_r+0x18>
  410cb4:	602b      	str	r3, [r5, #0]
  410cb6:	bd38      	pop	{r3, r4, r5, pc}
  410cb8:	2001abe4 	.word	0x2001abe4

00410cbc <_isatty_r>:
  410cbc:	b538      	push	{r3, r4, r5, lr}
  410cbe:	4c07      	ldr	r4, [pc, #28]	; (410cdc <_isatty_r+0x20>)
  410cc0:	2300      	movs	r3, #0
  410cc2:	4605      	mov	r5, r0
  410cc4:	4608      	mov	r0, r1
  410cc6:	6023      	str	r3, [r4, #0]
  410cc8:	f7f9 f832 	bl	409d30 <_isatty>
  410ccc:	1c43      	adds	r3, r0, #1
  410cce:	d000      	beq.n	410cd2 <_isatty_r+0x16>
  410cd0:	bd38      	pop	{r3, r4, r5, pc}
  410cd2:	6823      	ldr	r3, [r4, #0]
  410cd4:	2b00      	cmp	r3, #0
  410cd6:	d0fb      	beq.n	410cd0 <_isatty_r+0x14>
  410cd8:	602b      	str	r3, [r5, #0]
  410cda:	bd38      	pop	{r3, r4, r5, pc}
  410cdc:	2001abe4 	.word	0x2001abe4

00410ce0 <_lseek_r>:
  410ce0:	b570      	push	{r4, r5, r6, lr}
  410ce2:	460d      	mov	r5, r1
  410ce4:	4c08      	ldr	r4, [pc, #32]	; (410d08 <_lseek_r+0x28>)
  410ce6:	4611      	mov	r1, r2
  410ce8:	4606      	mov	r6, r0
  410cea:	461a      	mov	r2, r3
  410cec:	4628      	mov	r0, r5
  410cee:	2300      	movs	r3, #0
  410cf0:	6023      	str	r3, [r4, #0]
  410cf2:	f7f9 f828 	bl	409d46 <_lseek>
  410cf6:	1c43      	adds	r3, r0, #1
  410cf8:	d000      	beq.n	410cfc <_lseek_r+0x1c>
  410cfa:	bd70      	pop	{r4, r5, r6, pc}
  410cfc:	6823      	ldr	r3, [r4, #0]
  410cfe:	2b00      	cmp	r3, #0
  410d00:	d0fb      	beq.n	410cfa <_lseek_r+0x1a>
  410d02:	6033      	str	r3, [r6, #0]
  410d04:	bd70      	pop	{r4, r5, r6, pc}
  410d06:	bf00      	nop
  410d08:	2001abe4 	.word	0x2001abe4

00410d0c <_read_r>:
  410d0c:	b570      	push	{r4, r5, r6, lr}
  410d0e:	460d      	mov	r5, r1
  410d10:	4c08      	ldr	r4, [pc, #32]	; (410d34 <_read_r+0x28>)
  410d12:	4611      	mov	r1, r2
  410d14:	4606      	mov	r6, r0
  410d16:	461a      	mov	r2, r3
  410d18:	4628      	mov	r0, r5
  410d1a:	2300      	movs	r3, #0
  410d1c:	6023      	str	r3, [r4, #0]
  410d1e:	f7f4 fe1d 	bl	40595c <_read>
  410d22:	1c43      	adds	r3, r0, #1
  410d24:	d000      	beq.n	410d28 <_read_r+0x1c>
  410d26:	bd70      	pop	{r4, r5, r6, pc}
  410d28:	6823      	ldr	r3, [r4, #0]
  410d2a:	2b00      	cmp	r3, #0
  410d2c:	d0fb      	beq.n	410d26 <_read_r+0x1a>
  410d2e:	6033      	str	r3, [r6, #0]
  410d30:	bd70      	pop	{r4, r5, r6, pc}
  410d32:	bf00      	nop
  410d34:	2001abe4 	.word	0x2001abe4

00410d38 <sd_mmc_trans_units>:
  410d38:	0000000a 00000064 000003e8 00002710     ....d........'..
	...

00410d54 <sd_trans_multipliers>:
  410d54:	00000000 0000000a 0000000c 0000000d     ................
  410d64:	0000000f 00000014 00000019 0000001e     ................
  410d74:	00000023 00000028 0000002d 00000032     #...(...-...2...
  410d84:	00000037 0000003c 00000046 00000050     7...<...F...P...

00410d94 <mmc_trans_multipliers>:
  410d94:	00000000 0000000a 0000000c 0000000d     ................
  410da4:	0000000f 00000014 0000001a 0000001e     ................
  410db4:	00000023 00000028 0000002d 00000034     #...(...-...4...
  410dc4:	00000037 0000003c 00000046 00000050     7...<...F...P...
  410dd4:	2d6e4f22 70696843 72695620 6c617574     "On-Chip Virtual
  410de4:	6d654d20 2279726f 00000000 2f445322      Memory"...."SD/
  410df4:	20434d4d 64726143 6f6c5320 22302074     MMC Card Slot 0"
  410e04:	00000000                                ....

00410e08 <lun_desc>:
  410e08:	00402c71 00402c91 00402cdd 00402cbd     q,@..,@..,@..,@.
  410e18:	00402ccd 00402d85 00402dad 00402dd5     .,@..-@..-@..-@.
  410e28:	00402e1d 00410dd4 00401751 0040179d     ..@...A.Q.@...@.
  410e38:	004017e9 0040182d 00401859 00401969     ..@.-.@.Y.@.i.@.
  410e48:	00401a91 00401b21 00401bad 00410df0     ..@.!.@...@...A.
  410e58:	31333231 32313332 33323133 00000000     123123123123....
  410e68:	2a2a0a0d 66692a2a 5f622820 5f726964     ..****if (b_dir_
  410e78:	26206e69 49282026 64755f73 72745f64     in && (Is_udd_tr
  410e88:	6d736e61 725f7469 79646165 5f706528     ansmit_ready(ep_
  410e98:	65646e69 7c202978 7470207c 6f6a5f72     index) || ptr_jo
  410ea8:	623e2d62 206b6e61 2931203e 6c652029     b->bank > 1)) el
  410eb8:	2a2a6573 2d2d2a2a 5f70652d 65646e69     se****---ep_inde
  410ec8:	64253a78 00000a0d 2d2d0a0d 6464752d     x:%d......---udd
  410ed8:	616e655f 5f656c62 6c617473 61685f6c     _enable_stall_ha
  410ee8:	6873646e 28656b61 695f7065 7865646e     ndshake(ep_index
  410ef8:	2d2d3b29 5f70652d 65646e69 64253a78     );---ep_index:%d
  410f08:	00000a0d 6f666542 70206572 65636f72     ....Before proce
  410f18:	6e697373 2d2d2d67 2d504455 5044553e     ssing---UDP->UDP
  410f28:	5253435f 5d64255b 2578303a 0d583830     _CSR[%d]:0x%08X.
  410f38:	0000000a 65746641 72702072 7365636f     ....After proces
  410f48:	676e6973 552d2d2d 3e2d5044 5f504455     sing---UDP->UDP_
  410f58:	5b525343 3a5d6425 30257830 0a0d5838     CSR[%d]:0x%08X..
  410f68:	00000000 2a2a0a0d 78452a2a 2d207469     ......****Exit -
  410f78:	6669202d 5f622820 5f726964 26206e69     - if (b_dir_in &
  410f88:	49282026 64755f73 72745f64 6d736e61     & (Is_udd_transm
  410f98:	725f7469 79646165 5f706528 65646e69     it_ready(ep_inde
  410fa8:	7c202978 7470207c 6f6a5f72 623e2d62     x) || ptr_job->b
  410fb8:	206b6e61 2931203e 6c652029 2a2a6573     ank > 1)) else**
  410fc8:	2d2d2a2a 5f70652d 65646e69 64253a78     **---ep_index:%d
  410fd8:	00000a0d 2a2a0a0d 66692a2a 73492820     ......****if (Is
  410fe8:	6464755f 646e655f 6e696f70 74735f74     _udd_endpoint_st
  410ff8:	5f6c6c61 75716572 65747365 70652864     all_requested(ep
  411008:	2a2a2a29 2d2d2d2a 253a7065 000a0d64     )****---ep:%d...
  411018:	2d2d0a0d 6464752d 7369645f 656c6261     ..---udd_disable
  411028:	6174735f 685f6c6c 73646e61 656b6168     _stall_handshake
  411038:	29706528 2d2d2d3b 253a7065 000a0d64     (ep);---ep:%d...
  411048:	2d2d0a0d 6464752d 7365725f 655f7465     ..---udd_reset_e
  411058:	6f70646e 28746e69 3b297065 652d2d2d     ndpoint(ep);---e
  411068:	64253a70 00000a0d 2d2d0a0d 6464752d     p:%d......---udd
  411078:	6b63615f 6174735f 65286c6c 2d3b2970     _ack_stall(ep);-
  411088:	70652d2d 0d64253a 0000000a 2a2a0a0d     --ep:%d.......**
  411098:	78452a2a 2d207469 69202d2d 49282066     **Exit --- if (I
  4110a8:	64755f73 6e655f64 696f7064 735f746e     s_udd_endpoint_s
  4110b8:	6c6c6174 7165725f 74736575 65286465     tall_requested(e
  4110c8:	2a2a2970 2d2d2a2a 3a70652d 0a0d6425     p)****---ep:%d..
  4110d8:	00000000                                ....

004110dc <LfnOfs>:
  4110dc:	07050301 12100e09 1c181614 0000001e     ................
  4110ec:	3c3a2a22 7f7c3f3e 00000000 3d3b2c2b     "*:<>?|.....+,;=
  4110fc:	00005d5b 4d90feeb 534f4453 00302e35     [].....MSDOS5.0.
  41110c:	4e204f4e 20454d41 46202020 32335441     NO NAME    FAT32
  41111c:	00202020 4e204f4e 20454d41 46202020        .NO NAME    F
  41112c:	20205441 00202020                       AT     .

00411134 <excvt.5682>:
  411134:	b6909a80 808fb78e d8d4d3d2 8f8eded7     ................
  411144:	e2929290 ebeae399 9d9a9959 9f9e9d9c     ........Y.......
  411154:	e9e0d6b5 a7a6a5a5 abaaa9a8 afae21ac     .............!..
  411164:	b3b2b1b0 b7b6b5b4 bbbab9b8 bfbebdbc     ................
  411174:	c3c2c1c0 c7c7c5c4 cbcac9c8 cfcecdcc     ................
  411184:	d3d2d1d0 d7d6d5d4 dbdad9d8 dfdedddc     ................
  411194:	e3e2e1e0 e7e6e5e5 ebeae9e7 efeeeded     ................
  4111a4:	f3f2f1f0 f7f6f5f4 fbfaf9f8 fffefdfc     ................

004111b4 <vst.5948>:
  4111b4:	02000400 00800100 00200040 00080010     ........@. .....
  4111c4:	00020004 00000000                       ........

004111cc <cst.5949>:
  4111cc:	40008000 10002000 40000800 10002000     ...@. .....@. ..
  4111dc:	04000800 00000200                       ........

004111e4 <Tbl>:
  4111e4:	00fc00c7 00e200e9 00e000e4 00e700e5     ................
  4111f4:	00eb00ea 00ef00e8 00ec00ee 00c500c4     ................
  411204:	00e600c9 00f400c6 00f200f6 00f900fb     ................
  411214:	00d600ff 00f800dc 00d800a3 019200d7     ................
  411224:	00ed00e1 00fa00f3 00d100f1 00ba00aa     ................
  411234:	00ae00bf 00bd00ac 00a100bc 00bb00ab     ................
  411244:	25922591 25022593 00c12524 00c000c2     .%.%.%.%$%......
  411254:	256300a9 25572551 00a2255d 251000a5     ..c%Q%W%]%.....%
  411264:	25342514 251c252c 253c2500 00c300e3     .%4%,%.%.%<%....
  411274:	2554255a 25662569 25502560 00a4256c     Z%T%i%f%`%P%l%..
  411284:	00d000f0 00cb00ca 013100c8 00ce00cd     ..........1.....
  411294:	251800cf 2588250c 00a62584 258000cc     ...%.%.%.%.....%
  4112a4:	00df00d3 00d200d4 00d500f5 00fe00b5     ................
  4112b4:	00da00de 00d900db 00dd00fd 00b400af     ................
  4112c4:	00b100ad 00be2017 00a700b6 00b800f7     ..... ..........
  4112d4:	00a800b0 00b900b7 00b200b3 00a025a0     .............%..

004112e4 <tbl_lower.5432>:
  4112e4:	00620061 00640063 00660065 00680067     a.b.c.d.e.f.g.h.
  4112f4:	006a0069 006c006b 006e006d 0070006f     i.j.k.l.m.n.o.p.
  411304:	00720071 00740073 00760075 00780077     q.r.s.t.u.v.w.x.
  411314:	007a0079 00a200a1 00a500a3 00af00ac     y.z.............
  411324:	00e100e0 00e300e2 00e500e4 00e700e6     ................
  411334:	00e900e8 00eb00ea 00ed00ec 00ef00ee     ................
  411344:	00f100f0 00f300f2 00f500f4 00f800f6     ................
  411354:	00fa00f9 00fc00fb 00fe00fd 010100ff     ................
  411364:	01050103 01090107 010d010b 0111010f     ................
  411374:	01150113 01190117 011d011b 0121011f     ..............!.
  411384:	01250123 01290127 012d012b 0131012f     #.%.'.).+.-./.1.
  411394:	01350133 013a0137 013e013c 01420140     3.5.7.:.<.>.@.B.
  4113a4:	01460144 014b0148 014f014d 01530151     D.F.H.K.M.O.Q.S.
  4113b4:	01570155 015b0159 015f015d 01630161     U.W.Y.[.]._.a.c.
  4113c4:	01670165 016b0169 016f016d 01730171     e.g.i.k.m.o.q.s.
  4113d4:	01770175 017c017a 0192017e 03b203b1     u.w.z.|.~.......
  4113e4:	03b403b3 03b603b5 03b803b7 03ba03b9     ................
  4113f4:	03bc03bb 03be03bd 03c003bf 03c303c1     ................
  411404:	03c503c4 03c703c6 03c903c8 043003ca     ..............0.
  411414:	04320431 04340433 04360435 04380437     1.2.3.4.5.6.7.8.
  411424:	043a0439 043c043b 043e043d 0440043f     9.:.;.<.=.>.?.@.
  411434:	04420441 04440443 04460445 04480447     A.B.C.D.E.F.G.H.
  411444:	044a0449 044c044b 044e044d 0451044f     I.J.K.L.M.N.O.Q.
  411454:	04530452 04550454 04570456 04590458     R.S.T.U.V.W.X.Y.
  411464:	045b045a 045e045c 2170045f 21722171     Z.[.\.^._.p!q!r!
  411474:	21742173 21762175 21782177 217a2179     s!t!u!v!w!x!y!z!
  411484:	217c217b 217e217d ff41217f ff43ff42     {!|!}!~!.!A.B.C.
  411494:	ff45ff44 ff47ff46 ff49ff48 ff4bff4a     D.E.F.G.H.I.J.K.
  4114a4:	ff4dff4c ff4fff4e ff51ff50 ff53ff52     L.M.N.O.P.Q.R.S.
  4114b4:	ff55ff54 ff57ff56 ff59ff58 0000ff5a     T.U.V.W.X.Y.Z...

004114c4 <tbl_upper.5433>:
  4114c4:	00420041 00440043 00460045 00480047     A.B.C.D.E.F.G.H.
  4114d4:	004a0049 004c004b 004e004d 0050004f     I.J.K.L.M.N.O.P.
  4114e4:	00520051 00540053 00560055 00580057     Q.R.S.T.U.V.W.X.
  4114f4:	005a0059 ffe00021 ffe5ffe1 ffe3ffe2     Y.Z.!...........
  411504:	00c100c0 00c300c2 00c500c4 00c700c6     ................
  411514:	00c900c8 00cb00ca 00cd00cc 00cf00ce     ................
  411524:	00d100d0 00d300d2 00d500d4 00d800d6     ................
  411534:	00da00d9 00dc00db 00de00dd 01000178     ............x...
  411544:	01040102 01080106 010c010a 0110010e     ................
  411554:	01140112 01180116 011c011a 0120011e     .............. .
  411564:	01240122 01280126 012c012a 0130012e     ".$.&.(.*.,...0.
  411574:	01340132 01390136 013d013b 0141013f     2.4.6.9.;.=.?.A.
  411584:	01450143 014a0147 014e014c 01520150     C.E.G.J.L.N.P.R.
  411594:	01560154 015a0158 015e015c 01620160     T.V.X.Z.\.^.`.b.
  4115a4:	01660164 016a0168 016e016c 01720170     d.f.h.j.l.n.p.r.
  4115b4:	01760174 017b0179 0191017d 03920391     t.v.y.{.}.......
  4115c4:	03940393 03960395 03980397 039a0399     ................
  4115d4:	039c039b 039e039d 03a0039f 03a303a1     ................
  4115e4:	03a503a4 03a703a6 03a903a8 041003aa     ................
  4115f4:	04120411 04140413 04160415 04180417     ................
  411604:	041a0419 041c041b 041e041d 0420041f     .............. .
  411614:	04220421 04240423 04260425 04280427     !.".#.$.%.&.'.(.
  411624:	042a0429 042c042b 042e042d 0401042f     ).*.+.,.-.../...
  411634:	04030402 04050404 04070406 04090408     ................
  411644:	040b040a 040e040c 2160040f 21622161     ..........`!a!b!
  411654:	21642163 21662165 21682167 216a2169     c!d!e!f!g!h!i!j!
  411664:	216c216b 216e216d ff21216f ff23ff22     k!l!m!n!o!!.".#.
  411674:	ff25ff24 ff27ff26 ff29ff28 ff2bff2a     $.%.&.'.(.).*.+.
  411684:	ff2dff2c ff2fff2e ff31ff30 ff33ff32     ,.-.../.0.1.2.3.
  411694:	ff35ff34 ff37ff36 ff39ff38 0000ff3a     4.5.6.7.8.9.:...
  4116a4:	000e1000 000000c0 00000800 00000000     ................
  4116b4:	00000a0d 30257830 00205832 58323025     ....0x%02X .%02X
  4116c4:	00000020 30257830 202c5832 00000000      ...0x%02X, ....
  4116d4:	58323025 0000202c 53202d2d 35474d41     %02X, ..-- SAMG5
  4116e4:	53552035 614d2042 53207373 61726f74     5 USB Mass Stora
  4116f4:	54206567 20747365 0a0d2d2d 53202d2d     ge Test --..-- S
  411704:	35474d41 50585f35 4e49414c 505f4445     AMG55_XPLAINED_P
  411714:	2d204f52 2d0a0d2d 4443202d 534d5f43     RO --..-- CDC_MS
  411724:	535f3143 35474d41 50585f35 4e49414c     C1_SAMG55_XPLAIN
  411734:	3031325f 20373235 0a0d2d2d 43202d2d     _210527 --..-- C
  411744:	69706d6f 3a64656c 79614d20 20373220     ompiled: May 27 
  411754:	31323032 3a303220 313a3233 2d2d2032     2021 20:32:12 --
  411764:	00000a0d 6e756f4d 69642074 28206b73     ....Mount disk (
  411774:	6f6d5f66 29746e75 0d2e2e2e 0000000a     f_mount)........
  411784:	4941465b 72205d4c 25207365 000a0d64     [FAIL] res %d...
  411794:	5d4b4f5b 00000a0d 6d726f46 74207461     [OK]....Format t
  4117a4:	76206568 75747269 64206c61 0d6b7369     he virtual disk.
  4117b4:	0000000a 61656c50 70206573 2067756c     ....Please plug 
  4117c4:	53206e61 4d202c44 6f20434d 44532072     an SD, MMC or SD
  4117d4:	63204f49 20647261 73206e69 2e746f6c     IO card in slot.
  4117e4:	00000d0a 64726143 736e6920 6c6c6174     ....Card install
  4117f4:	49414620 000d0a4c 61656c50 75206573      FAIL...Please u
  411804:	756c706e 6e612067 65722064 756c702d     nplug and re-plu
  411814:	68742067 61632065 0a2e6472 0000000d     g the card......
  411824:	202c4453 20434d4d 5320726f 204f4944     SD, MMC or SDIO 
  411834:	64726163 20736920 74206e69 73206568     card is in the s
  411844:	0a746f6c 0000000d 61657243 61206574     lot.....Create a
  411854:	6c696620 66282065 65706f5f 2e2e296e      file (f_open)..
  411864:	000a0d2e 66206f4e 20656c69 74737973     ....No file syst
  411874:	202c6d65 6d726f66 74207461 64206568     em, format the d
  411884:	0d6b7369 0000000a 74736554 2f445320     isk.....Test SD/
  411894:	20434d4d 63617473 00000a6b 4941465b     MMC stack...[FAI
  4118a4:	0a0d5d4c 00000000 74736554 20736920     L]......Test is 
  4118b4:	63637573 66737365 0a2e6c75 0000000d     successful......
  4118c4:	534d0a0d 6e452043 656c6261 43202164     ..MSC Enabled! C
  4118d4:	746e756f 0d642520 0000000a 534d0a0d     ount %d.......MS
  4118e4:	69442043 6c626173 0d216465 0000000a     C Disabled!.....
  4118f4:	61656c50 75206573 756c706e 68742067     Please unplug th
  411904:	61632065 0a2e6472 0000000d 64733a30     e card......0:sd
  411914:	636d6d5f 7365745f 78742e74 00000074     _mmc_test.txt...

00411924 <_global_impure_ptr>:
  411924:	200002a8 33323130 37363534 42413938     ... 0123456789AB
  411934:	46454443 00000000 33323130 37363534     CDEF....01234567
  411944:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  411954:	0000296c                                l)..

00411958 <blanks.7217>:
  411958:	20202020 20202020 20202020 20202020                     

00411968 <zeroes.7218>:
  411968:	30303030 30303030 30303030 30303030     0000000000000000
  411978:	00000043 49534f50 00000058 0000002e     C...POSIX.......

00411988 <_ctype_>:
  411988:	20202000 20202020 28282020 20282828     .         ((((( 
  411998:	20202020 20202020 20202020 20202020                     
  4119a8:	10108820 10101010 10101010 10101010      ...............
  4119b8:	04040410 04040404 10040404 10101010     ................
  4119c8:	41411010 41414141 01010101 01010101     ..AAAAAA........
  4119d8:	01010101 01010101 01010101 10101010     ................
  4119e8:	42421010 42424242 02020202 02020202     ..BBBBBB........
  4119f8:	02020202 02020202 02020202 10101010     ................
  411a08:	00000020 00000000 00000000 00000000      ...............
	...

00411a8c <_init>:
  411a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  411a8e:	bf00      	nop
  411a90:	bcf8      	pop	{r3, r4, r5, r6, r7}
  411a92:	bc08      	pop	{r3}
  411a94:	469e      	mov	lr, r3
  411a96:	4770      	bx	lr

00411a98 <__init_array_start>:
  411a98:	0040f2f9 	.word	0x0040f2f9

00411a9c <__frame_dummy_init_array_entry>:
  411a9c:	0040016d                                m.@.

00411aa0 <_fini>:
  411aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  411aa2:	bf00      	nop
  411aa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
  411aa6:	bc08      	pop	{r3}
  411aa8:	469e      	mov	lr, r3
  411aaa:	4770      	bx	lr

00411aac <__fini_array_start>:
  411aac:	00400149 	.word	0x00400149

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr

2000000a <efc_perform_read_sequence>:
__no_inline
RAMFUNC
uint32_t efc_perform_read_sequence(Efc *p_efc,
		uint32_t ul_cmd_st, uint32_t ul_cmd_sp,
		uint32_t *p_ul_buf, uint32_t ul_size)
{
2000000a:	b480      	push	{r7}
2000000c:	b089      	sub	sp, #36	; 0x24
2000000e:	af00      	add	r7, sp, #0
20000010:	60f8      	str	r0, [r7, #12]
20000012:	60b9      	str	r1, [r7, #8]
20000014:	607a      	str	r2, [r7, #4]
20000016:	603b      	str	r3, [r7, #0]
	uint32_t *p_ul_data =
			(uint32_t *) ((p_efc == EFC0) ?
			READ_BUFF_ADDR0 : READ_BUFF_ADDR1);
#elif (SAM3S || SAM4S || SAM3N || SAM3U || SAM4E || SAM4N || SAM4C || SAMG || \
	   SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAMS70 || SAME70)
	uint32_t *p_ul_data = (uint32_t *) READ_BUFF_ADDR;
20000018:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
2000001c:	61bb      	str	r3, [r7, #24]
#else
	return EFC_RC_NOT_SUPPORT;
#endif

	if (p_ul_buf == NULL) {
2000001e:	683b      	ldr	r3, [r7, #0]
20000020:	2b00      	cmp	r3, #0
20000022:	d101      	bne.n	20000028 <efc_perform_read_sequence+0x1e>
		return EFC_RC_INVALID;
20000024:	2302      	movs	r3, #2
20000026:	e03c      	b.n	200000a2 <efc_perform_read_sequence+0x98>
	}

	p_efc->EEFC_FMR |= (0x1u << 16);
20000028:	68fb      	ldr	r3, [r7, #12]
2000002a:	681b      	ldr	r3, [r3, #0]
2000002c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
20000030:	68fb      	ldr	r3, [r7, #12]
20000032:	601a      	str	r2, [r3, #0]

	/* Send the Start Read command */
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || \
	 SAMV71 || SAMV70 || SAMS70 || SAME70)
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
20000034:	68bb      	ldr	r3, [r7, #8]
20000036:	b2db      	uxtb	r3, r3
20000038:	f043 42b4 	orr.w	r2, r3, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
2000003c:	68fb      	ldr	r3, [r7, #12]
2000003e:	605a      	str	r2, [r3, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register
	 * (EEFC_FSR) falls.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
20000040:	68fb      	ldr	r3, [r7, #12]
20000042:	689b      	ldr	r3, [r3, #8]
20000044:	617b      	str	r3, [r7, #20]
	} while ((ul_status & EEFC_FSR_FRDY) == EEFC_FSR_FRDY);
20000046:	697b      	ldr	r3, [r7, #20]
20000048:	f003 0301 	and.w	r3, r3, #1
2000004c:	2b01      	cmp	r3, #1
2000004e:	d0f7      	beq.n	20000040 <efc_perform_read_sequence+0x36>

	/* The data is located in the first address of the Flash
	 * memory mapping.
	 */
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20000050:	2300      	movs	r3, #0
20000052:	61fb      	str	r3, [r7, #28]
20000054:	e00c      	b.n	20000070 <efc_perform_read_sequence+0x66>
		p_ul_buf[ul_cnt] = p_ul_data[ul_cnt];
20000056:	69fb      	ldr	r3, [r7, #28]
20000058:	009b      	lsls	r3, r3, #2
2000005a:	683a      	ldr	r2, [r7, #0]
2000005c:	4413      	add	r3, r2
2000005e:	69fa      	ldr	r2, [r7, #28]
20000060:	0092      	lsls	r2, r2, #2
20000062:	69b9      	ldr	r1, [r7, #24]
20000064:	440a      	add	r2, r1
20000066:	6812      	ldr	r2, [r2, #0]
20000068:	601a      	str	r2, [r3, #0]
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
2000006a:	69fb      	ldr	r3, [r7, #28]
2000006c:	3301      	adds	r3, #1
2000006e:	61fb      	str	r3, [r7, #28]
20000070:	69fa      	ldr	r2, [r7, #28]
20000072:	6abb      	ldr	r3, [r7, #40]	; 0x28
20000074:	429a      	cmp	r2, r3
20000076:	d3ee      	bcc.n	20000056 <efc_perform_read_sequence+0x4c>
	/* To stop the read mode */
	p_efc->EEFC_FCR =
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || \
	 SAMV71 || SAMV70 || SAMS70 || SAME70)
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
20000078:	687b      	ldr	r3, [r7, #4]
2000007a:	b2db      	uxtb	r3, r3
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
2000007c:	f043 42b4 	orr.w	r2, r3, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR =
20000080:	68fb      	ldr	r3, [r7, #12]
20000082:	605a      	str	r2, [r3, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register (EEFC_FSR)
	 * rises.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
20000084:	68fb      	ldr	r3, [r7, #12]
20000086:	689b      	ldr	r3, [r3, #8]
20000088:	617b      	str	r3, [r7, #20]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
2000008a:	697b      	ldr	r3, [r7, #20]
2000008c:	f003 0301 	and.w	r3, r3, #1
20000090:	2b01      	cmp	r3, #1
20000092:	d1f7      	bne.n	20000084 <efc_perform_read_sequence+0x7a>

	p_efc->EEFC_FMR &= ~(0x1u << 16);
20000094:	68fb      	ldr	r3, [r7, #12]
20000096:	681b      	ldr	r3, [r3, #0]
20000098:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
2000009c:	68fb      	ldr	r3, [r7, #12]
2000009e:	601a      	str	r2, [r3, #0]

	return EFC_RC_OK;
200000a0:	2300      	movs	r3, #0
}
200000a2:	4618      	mov	r0, r3
200000a4:	3724      	adds	r7, #36	; 0x24
200000a6:	46bd      	mov	sp, r7
200000a8:	f85d 7b04 	ldr.w	r7, [sp], #4
200000ac:	4770      	bx	lr

200000ae <efc_write_fmr>:
 * \param ul_fmr Value of mode register
 */
__no_inline
RAMFUNC
void efc_write_fmr(Efc *p_efc, uint32_t ul_fmr)
{
200000ae:	b480      	push	{r7}
200000b0:	b083      	sub	sp, #12
200000b2:	af00      	add	r7, sp, #0
200000b4:	6078      	str	r0, [r7, #4]
200000b6:	6039      	str	r1, [r7, #0]
	p_efc->EEFC_FMR = ul_fmr;
200000b8:	687b      	ldr	r3, [r7, #4]
200000ba:	683a      	ldr	r2, [r7, #0]
200000bc:	601a      	str	r2, [r3, #0]
}
200000be:	bf00      	nop
200000c0:	370c      	adds	r7, #12
200000c2:	46bd      	mov	sp, r7
200000c4:	f85d 7b04 	ldr.w	r7, [sp], #4
200000c8:	4770      	bx	lr

200000ca <efc_perform_fcr>:
 * \return The current status.
 */
__no_inline
RAMFUNC
uint32_t efc_perform_fcr(Efc *p_efc, uint32_t ul_fcr)
{
200000ca:	b480      	push	{r7}
200000cc:	b085      	sub	sp, #20
200000ce:	af00      	add	r7, sp, #0
200000d0:	6078      	str	r0, [r7, #4]
200000d2:	6039      	str	r1, [r7, #0]
	volatile uint32_t ul_status;

	p_efc->EEFC_FCR = ul_fcr;
200000d4:	687b      	ldr	r3, [r7, #4]
200000d6:	683a      	ldr	r2, [r7, #0]
200000d8:	605a      	str	r2, [r3, #4]
	do {
		ul_status = p_efc->EEFC_FSR;
200000da:	687b      	ldr	r3, [r7, #4]
200000dc:	689b      	ldr	r3, [r3, #8]
200000de:	60fb      	str	r3, [r7, #12]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
200000e0:	68fb      	ldr	r3, [r7, #12]
200000e2:	f003 0301 	and.w	r3, r3, #1
200000e6:	2b01      	cmp	r3, #1
200000e8:	d1f7      	bne.n	200000da <efc_perform_fcr+0x10>

	return (ul_status & EEFC_ERROR_FLAGS);
200000ea:	68fb      	ldr	r3, [r7, #12]
200000ec:	f003 030e 	and.w	r3, r3, #14
}
200000f0:	4618      	mov	r0, r3
200000f2:	3714      	adds	r7, #20
200000f4:	46bd      	mov	sp, r7
200000f6:	f85d 7b04 	ldr.w	r7, [sp], #4
200000fa:	4770      	bx	lr

200000fc <sd_mmc_cards>:
	...
20000104:	001d 0000 0000 0000 0000 0000 0000 0000     ................
	...

20000120 <udi_api_cdc_comm>:
20000120:	3631 0040 3869 0040 38c5 0040 39b5 0040     16@.i8@..8@..9@.
20000130:	0000 0000                                   ....

20000134 <udi_api_cdc_data>:
20000134:	3775 0040 3889 0040 39a5 0040 39b5 0040     u7@..8@..9@..9@.
20000144:	39c5 0040                                   .9@.

20000148 <udc_device_desc>:
20000148:	0112 0200 0000 4000 03eb 2424 0100 0201     .......@..$$....
20000158:	0103 0000                                   ....

2000015c <udc_desc_fs>:
2000015c:	0209 0062 0103 c000 0832 000b 0202 0102     ..b.....2.......
2000016c:	0900 0004 0100 0202 0001 2405 1000 0401     ...........$....
2000017c:	0224 0502 0624 0100 2405 0301 0701 8305     $...$....$......
2000018c:	4003 1000 0409 0001 0a02 0000 0700 8405     .@..............
2000019c:	4002 0000 0507 0205 0040 0900 0204 0200     .@......@.......
200001ac:	0608 0550 0507 0281 0040 0700 0205 4002     ..P.....@......@
200001bc:	0000 0000                                   ....

200001c0 <udi_apis>:
200001c0:	0120 2000 0134 2000 01e0 2000                .. 4.. ... 

200001cc <udc_config_lsfs>:
200001cc:	015c 2000 01c0 2000                         \.. ... 

200001d4 <udc_config>:
200001d4:	0148 2000 01cc 2000 0000 0000               H.. ... ....

200001e0 <udi_api_msc>:
200001e0:	3ed1 0040 3f79 0040 3fa9 0040 4069 0040     .>@.y?@..?@.i@@.
200001f0:	0000 0000                                   ....

200001f4 <udi_msc_csw>:
200001f4:	5355 5342 0000 0000 0000 0000 0100               USBS.........

20000201 <udi_msc_b_ack_trans>:
20000201:	0101                                             .

20000202 <udi_msc_b_reset_trans>:
20000202:	0001                                        ..

20000204 <udi_msc_inquiry_data.9603>:
20000204:	0000 0203 001f 0000 5441 454d 204c 2020     ........ATMEL   
	...
20000224:	2e31 3030                                   1.00

20000228 <udc_string_desc_languageid>:
20000228:	0304 0409                                   ....

2000022c <udc_string_manufacturer_name>:
2000022c:	5441 454d 204c 5341 0046 0000               ATMEL ASF...

20000238 <udc_string_product_name>:
20000238:	4443 2043 6e61 2064 534d 0043               CDC and MSC.

20000244 <udc_string_desc>:
20000244:	0300 0000 0000 0000 0000 0000 0000 0000     ................
	...

2000025e <g_interrupt_enabled>:
2000025e:	0001                                        ..

20000260 <SystemCoreClock>:
20000260:	1200 007a                                   ..z.

20000264 <udi_cdc_name.11070>:
20000264:	4443 2043 6e69 6574 6672 6361 0065 0000     CDC interface...

20000274 <udi_msc_name.11071>:
20000274:	534d 2043 6e69 6574 6672 6361 0065 0000     MSC interface...

20000284 <extra_strings_desc.11075>:
20000284:	0300 0000 0000 0000 0000 0000 0000 0000     ................
	...

200002a0 <_impure_ptr>:
200002a0:	02a8 2000 0000 0000                         ... ....

200002a8 <impure_data>:
200002a8:	0000 0000 0594 2000 05fc 2000 0664 2000     ....... ... d.. 
	...
20000350:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
20000360:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

200006d0 <__atexit_recursive_mutex>:
200006d0:	abc0 2001                                   ... 

200006d4 <__global_locale>:
200006d4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200006f4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000714:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000734:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000754:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000774:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000794:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200007b4:	0aa1 0041 02f1 0041 0000 0000 1988 0041     ..A...A.......A.
200007c4:	1984 0041 1938 0041 1938 0041 1938 0041     ..A.8.A.8.A.8.A.
200007d4:	1938 0041 1938 0041 1938 0041 1938 0041     8.A.8.A.8.A.8.A.
200007e4:	1938 0041 1938 0041 ffff ffff ffff ffff     8.A.8.A.........
200007f4:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
2000081c:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...

20000840 <__malloc_av_>:
	...
20000848:	0840 2000 0840 2000 0848 2000 0848 2000     @.. @.. H.. H.. 
20000858:	0850 2000 0850 2000 0858 2000 0858 2000     P.. P.. X.. X.. 
20000868:	0860 2000 0860 2000 0868 2000 0868 2000     `.. `.. h.. h.. 
20000878:	0870 2000 0870 2000 0878 2000 0878 2000     p.. p.. x.. x.. 
20000888:	0880 2000 0880 2000 0888 2000 0888 2000     ... ... ... ... 
20000898:	0890 2000 0890 2000 0898 2000 0898 2000     ... ... ... ... 
200008a8:	08a0 2000 08a0 2000 08a8 2000 08a8 2000     ... ... ... ... 
200008b8:	08b0 2000 08b0 2000 08b8 2000 08b8 2000     ... ... ... ... 
200008c8:	08c0 2000 08c0 2000 08c8 2000 08c8 2000     ... ... ... ... 
200008d8:	08d0 2000 08d0 2000 08d8 2000 08d8 2000     ... ... ... ... 
200008e8:	08e0 2000 08e0 2000 08e8 2000 08e8 2000     ... ... ... ... 
200008f8:	08f0 2000 08f0 2000 08f8 2000 08f8 2000     ... ... ... ... 
20000908:	0900 2000 0900 2000 0908 2000 0908 2000     ... ... ... ... 
20000918:	0910 2000 0910 2000 0918 2000 0918 2000     ... ... ... ... 
20000928:	0920 2000 0920 2000 0928 2000 0928 2000      ..  .. (.. (.. 
20000938:	0930 2000 0930 2000 0938 2000 0938 2000     0.. 0.. 8.. 8.. 
20000948:	0940 2000 0940 2000 0948 2000 0948 2000     @.. @.. H.. H.. 
20000958:	0950 2000 0950 2000 0958 2000 0958 2000     P.. P.. X.. X.. 
20000968:	0960 2000 0960 2000 0968 2000 0968 2000     `.. `.. h.. h.. 
20000978:	0970 2000 0970 2000 0978 2000 0978 2000     p.. p.. x.. x.. 
20000988:	0980 2000 0980 2000 0988 2000 0988 2000     ... ... ... ... 
20000998:	0990 2000 0990 2000 0998 2000 0998 2000     ... ... ... ... 
200009a8:	09a0 2000 09a0 2000 09a8 2000 09a8 2000     ... ... ... ... 
200009b8:	09b0 2000 09b0 2000 09b8 2000 09b8 2000     ... ... ... ... 
200009c8:	09c0 2000 09c0 2000 09c8 2000 09c8 2000     ... ... ... ... 
200009d8:	09d0 2000 09d0 2000 09d8 2000 09d8 2000     ... ... ... ... 
200009e8:	09e0 2000 09e0 2000 09e8 2000 09e8 2000     ... ... ... ... 
200009f8:	09f0 2000 09f0 2000 09f8 2000 09f8 2000     ... ... ... ... 
20000a08:	0a00 2000 0a00 2000 0a08 2000 0a08 2000     ... ... ... ... 
20000a18:	0a10 2000 0a10 2000 0a18 2000 0a18 2000     ... ... ... ... 
20000a28:	0a20 2000 0a20 2000 0a28 2000 0a28 2000      ..  .. (.. (.. 
20000a38:	0a30 2000 0a30 2000 0a38 2000 0a38 2000     0.. 0.. 8.. 8.. 
20000a48:	0a40 2000 0a40 2000 0a48 2000 0a48 2000     @.. @.. H.. H.. 
20000a58:	0a50 2000 0a50 2000 0a58 2000 0a58 2000     P.. P.. X.. X.. 
20000a68:	0a60 2000 0a60 2000 0a68 2000 0a68 2000     `.. `.. h.. h.. 
20000a78:	0a70 2000 0a70 2000 0a78 2000 0a78 2000     p.. p.. x.. x.. 
20000a88:	0a80 2000 0a80 2000 0a88 2000 0a88 2000     ... ... ... ... 
20000a98:	0a90 2000 0a90 2000 0a98 2000 0a98 2000     ... ... ... ... 
20000aa8:	0aa0 2000 0aa0 2000 0aa8 2000 0aa8 2000     ... ... ... ... 
20000ab8:	0ab0 2000 0ab0 2000 0ab8 2000 0ab8 2000     ... ... ... ... 
20000ac8:	0ac0 2000 0ac0 2000 0ac8 2000 0ac8 2000     ... ... ... ... 
20000ad8:	0ad0 2000 0ad0 2000 0ad8 2000 0ad8 2000     ... ... ... ... 
20000ae8:	0ae0 2000 0ae0 2000 0ae8 2000 0ae8 2000     ... ... ... ... 
20000af8:	0af0 2000 0af0 2000 0af8 2000 0af8 2000     ... ... ... ... 
20000b08:	0b00 2000 0b00 2000 0b08 2000 0b08 2000     ... ... ... ... 
20000b18:	0b10 2000 0b10 2000 0b18 2000 0b18 2000     ... ... ... ... 
20000b28:	0b20 2000 0b20 2000 0b28 2000 0b28 2000      ..  .. (.. (.. 
20000b38:	0b30 2000 0b30 2000 0b38 2000 0b38 2000     0.. 0.. 8.. 8.. 
20000b48:	0b40 2000 0b40 2000 0b48 2000 0b48 2000     @.. @.. H.. H.. 
20000b58:	0b50 2000 0b50 2000 0b58 2000 0b58 2000     P.. P.. X.. X.. 
20000b68:	0b60 2000 0b60 2000 0b68 2000 0b68 2000     `.. `.. h.. h.. 
20000b78:	0b70 2000 0b70 2000 0b78 2000 0b78 2000     p.. p.. x.. x.. 
20000b88:	0b80 2000 0b80 2000 0b88 2000 0b88 2000     ... ... ... ... 
20000b98:	0b90 2000 0b90 2000 0b98 2000 0b98 2000     ... ... ... ... 
20000ba8:	0ba0 2000 0ba0 2000 0ba8 2000 0ba8 2000     ... ... ... ... 
20000bb8:	0bb0 2000 0bb0 2000 0bb8 2000 0bb8 2000     ... ... ... ... 
20000bc8:	0bc0 2000 0bc0 2000 0bc8 2000 0bc8 2000     ... ... ... ... 
20000bd8:	0bd0 2000 0bd0 2000 0bd8 2000 0bd8 2000     ... ... ... ... 
20000be8:	0be0 2000 0be0 2000 0be8 2000 0be8 2000     ... ... ... ... 
20000bf8:	0bf0 2000 0bf0 2000 0bf8 2000 0bf8 2000     ... ... ... ... 
20000c08:	0c00 2000 0c00 2000 0c08 2000 0c08 2000     ... ... ... ... 
20000c18:	0c10 2000 0c10 2000 0c18 2000 0c18 2000     ... ... ... ... 
20000c28:	0c20 2000 0c20 2000 0c28 2000 0c28 2000      ..  .. (.. (.. 
20000c38:	0c30 2000 0c30 2000 0c38 2000 0c38 2000     0.. 0.. 8.. 8.. 

20000c48 <__malloc_sbrk_base>:
20000c48:	ffff ffff                                   ....

20000c4c <__malloc_trim_threshold>:
20000c4c:	0000 0002                                   ....
